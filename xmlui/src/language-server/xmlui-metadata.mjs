import { jsx, jsxs, Fragment } from "react/jsx-runtime";
import * as React from "react";
import React__default, { useRef, useInsertionEffect, useCallback, useContext, useEffect, useLayoutEffect, useState, forwardRef, useMemo, useId, createContext, useDeferredValue, useImperativeHandle, Children, isValidElement, createElement, cloneElement, Fragment as Fragment$1, memo } from "react";
import classnames from "classnames";
import * as VisuallyHidden$1 from "@radix-ui/react-visually-hidden";
import { VisuallyHidden as VisuallyHidden$2 } from "@radix-ui/react-visually-hidden";
import { throttle, omitBy, isUndefined, isEmpty, noop as noop$2, isArray, isNumber, set, get, isNil, isNaN as isNaN$1, isPlainObject, isEqual, union, uniq, orderBy } from "lodash-es";
import { NavLink as NavLink$1, Link } from "@remix-run/react";
import { DayPicker } from "react-day-picker";
import { parse, format, parseISO, isValid } from "date-fns";
import * as ReactDropdownMenu from "@radix-ui/react-dropdown-menu";
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuPortal, DropdownMenuContent as DropdownMenuContent$1, DropdownMenuItem as DropdownMenuItem$1, DropdownMenuSub, DropdownMenuSubTrigger, DropdownMenuSubContent } from "@radix-ui/react-dropdown-menu";
import { flushSync } from "react-dom";
import produce from "immer";
import * as SheetPrimitive from "@radix-ui/react-dialog";
import { createContext as createContext$1, useContextSelector } from "use-context-selector";
import * as dropzone from "react-dropzone";
import { Portal, Root, Trigger, Value, Icon as Icon$1, Content, ScrollUpButton, SelectViewport, ScrollDownButton, Item, ItemText, ItemIndicator } from "@radix-ui/react-select";
import { Popover, PopoverTrigger, PopoverContent, Portal as Portal$1 } from "@radix-ui/react-popover";
import { Command, CommandInput, CommandList, CommandEmpty, CommandItem, CommandGroup } from "cmdk";
import * as InnerRadioGroup from "@radix-ui/react-radio-group";
import TextareaAutosize from "react-textarea-autosize";
import { Root as Root$1, Track, Range, Thumb } from "@radix-ui/react-slider";
import { NumberFormatter, NumberParser } from "@internationalized/number";
import { useReactTable, getPaginationRowModel, getCoreRowModel, flexRender } from "@tanstack/react-table";
import { observeElementOffset, useVirtualizer } from "@tanstack/react-virtual";
import * as RAccordion from "@radix-ui/react-accordion";
import { parseRegExpLiteral } from "@eslint-community/regexpp";
import useEmblaCarousel from "embla-carousel-react";
import Autoplay from "embla-carousel-autoplay";
const themeVars$O = `'{"padding-Button": "var(--xmlui-padding-Button)", "paddingHorizontal-Button": "var(--xmlui-paddingHorizontal-Button, var(--xmlui-padding-Button))", "paddingVertical-Button": "var(--xmlui-paddingVertical-Button, var(--xmlui-padding-Button))", "paddingLeft-Button": "var(--xmlui-paddingLeft-Button, var(--xmlui-paddingHorizontal-Button, var(--xmlui-padding-Button)))", "paddingRight-Button": "var(--xmlui-paddingRight-Button, var(--xmlui-paddingHorizontal-Button, var(--xmlui-padding-Button)))", "paddingTop-Button": "var(--xmlui-paddingTop-Button, var(--xmlui-paddingVertical-Button, var(--xmlui-padding-Button)))", "paddingBottom-Button": "var(--xmlui-paddingBottom-Button, var(--xmlui-paddingVertical-Button, var(--xmlui-padding-Button)))", "padding-Button-xs": "var(--xmlui-padding-Button-xs)", "paddingHorizontal-Button-xs": "var(--xmlui-paddingHorizontal-Button-xs, var(--xmlui-padding-Button-xs))", "paddingVertical-Button-xs": "var(--xmlui-paddingVertical-Button-xs, var(--xmlui-padding-Button-xs))", "paddingLeft-Button-xs": "var(--xmlui-paddingLeft-Button-xs, var(--xmlui-paddingHorizontal-Button-xs, var(--xmlui-padding-Button-xs)))", "paddingRight-Button-xs": "var(--xmlui-paddingRight-Button-xs, var(--xmlui-paddingHorizontal-Button-xs, var(--xmlui-padding-Button-xs)))", "paddingTop-Button-xs": "var(--xmlui-paddingTop-Button-xs, var(--xmlui-paddingVertical-Button-xs, var(--xmlui-padding-Button-xs)))", "paddingBottom-Button-xs": "var(--xmlui-paddingBottom-Button-xs, var(--xmlui-paddingVertical-Button-xs, var(--xmlui-padding-Button-xs)))", "padding-Button-sm": "var(--xmlui-padding-Button-sm)", "paddingHorizontal-Button-sm": "var(--xmlui-paddingHorizontal-Button-sm, var(--xmlui-padding-Button-sm))", "paddingVertical-Button-sm": "var(--xmlui-paddingVertical-Button-sm, var(--xmlui-padding-Button-sm))", "paddingLeft-Button-sm": "var(--xmlui-paddingLeft-Button-sm, var(--xmlui-paddingHorizontal-Button-sm, var(--xmlui-padding-Button-sm)))", "paddingRight-Button-sm": "var(--xmlui-paddingRight-Button-sm, var(--xmlui-paddingHorizontal-Button-sm, var(--xmlui-padding-Button-sm)))", "paddingTop-Button-sm": "var(--xmlui-paddingTop-Button-sm, var(--xmlui-paddingVertical-Button-sm, var(--xmlui-padding-Button-sm)))", "paddingBottom-Button-sm": "var(--xmlui-paddingBottom-Button-sm, var(--xmlui-paddingVertical-Button-sm, var(--xmlui-padding-Button-sm)))", "padding-Button-md": "var(--xmlui-padding-Button-md)", "paddingHorizontal-Button-md": "var(--xmlui-paddingHorizontal-Button-md, var(--xmlui-padding-Button-md))", "paddingVertical-Button-md": "var(--xmlui-paddingVertical-Button-md, var(--xmlui-padding-Button-md))", "paddingLeft-Button-md": "var(--xmlui-paddingLeft-Button-md, var(--xmlui-paddingHorizontal-Button-md, var(--xmlui-padding-Button-md)))", "paddingRight-Button-md": "var(--xmlui-paddingRight-Button-md, var(--xmlui-paddingHorizontal-Button-md, var(--xmlui-padding-Button-md)))", "paddingTop-Button-md": "var(--xmlui-paddingTop-Button-md, var(--xmlui-paddingVertical-Button-md, var(--xmlui-padding-Button-md)))", "paddingBottom-Button-md": "var(--xmlui-paddingBottom-Button-md, var(--xmlui-paddingVertical-Button-md, var(--xmlui-padding-Button-md)))", "padding-Button-lg": "var(--xmlui-padding-Button-lg)", "paddingHorizontal-Button-lg": "var(--xmlui-paddingHorizontal-Button-lg, var(--xmlui-padding-Button-lg))", "paddingVertical-Button-lg": "var(--xmlui-paddingVertical-Button-lg, var(--xmlui-padding-Button-lg))", "paddingLeft-Button-lg": "var(--xmlui-paddingLeft-Button-lg, var(--xmlui-paddingHorizontal-Button-lg, var(--xmlui-padding-Button-lg)))", "paddingRight-Button-lg": "var(--xmlui-paddingRight-Button-lg, var(--xmlui-paddingHorizontal-Button-lg, var(--xmlui-padding-Button-lg)))", "paddingTop-Button-lg": "var(--xmlui-paddingTop-Button-lg, var(--xmlui-paddingVertical-Button-lg, var(--xmlui-padding-Button-lg)))", "paddingBottom-Button-lg": "var(--xmlui-paddingBottom-Button-lg, var(--xmlui-paddingVertical-Button-lg, var(--xmlui-padding-Button-lg)))", "width-Button": "var(--xmlui-width-Button)", "height-Button": "var(--xmlui-height-Button)", "fontFamily-Button-primary-solid": "var(--xmlui-fontFamily-Button-primary-solid)", "fontSize-Button-primary-solid": "var(--xmlui-fontSize-Button-primary-solid)", "fontWeight-Button-primary-solid": "var(--xmlui-fontWeight-Button-primary-solid)", "borderRadius-Button-primary-solid": "var(--xmlui-borderRadius-Button-primary-solid)", "borderWidth-Button-primary-solid": "var(--xmlui-borderWidth-Button-primary-solid)", "borderColor-Button-primary-solid": "var(--xmlui-borderColor-Button-primary-solid)", "borderStyle-Button-primary-solid": "var(--xmlui-borderStyle-Button-primary-solid)", "backgroundColor-Button-primary-solid": "var(--xmlui-backgroundColor-Button-primary-solid)", "textColor-Button-primary-solid": "var(--xmlui-textColor-Button-primary-solid)", "boxShadow-Button-primary-solid": "var(--xmlui-boxShadow-Button-primary-solid)", "outlineWidth-Button-primary-solid--focus": "var(--xmlui-outlineWidth-Button-primary-solid--focus)", "outlineColor-Button-primary-solid--focus": "var(--xmlui-outlineColor-Button-primary-solid--focus)", "outlineStyle-Button-primary-solid--focus": "var(--xmlui-outlineStyle-Button-primary-solid--focus)", "outlineOffset-Button-primary-solid--focus": "var(--xmlui-outlineOffset-Button-primary-solid--focus)", "borderColor-Button-primary-solid--hover": "var(--xmlui-borderColor-Button-primary-solid--hover)", "textColor-Button-primary-solid--hover": "var(--xmlui-textColor-Button-primary-solid--hover)", "backgroundColor-Button-primary-solid--hover": "var(--xmlui-backgroundColor-Button-primary-solid--hover)", "borderColor-Button-primary-solid--active": "var(--xmlui-borderColor-Button-primary-solid--active)", "textColor-Button-primary-solid--active": "var(--xmlui-textColor-Button-primary-solid--active)", "boxShadow-Button-primary-solid--active": "var(--xmlui-boxShadow-Button-primary-solid--active)", "backgroundColor-Button-primary-solid--active": "var(--xmlui-backgroundColor-Button-primary-solid--active)", "backgroundColor-Button--disabled": "var(--xmlui-backgroundColor-Button--disabled)", "textColor-Button--disabled": "var(--xmlui-textColor-Button--disabled)", "borderColor-Button--disabled": "var(--xmlui-borderColor-Button--disabled)", "fontFamily-Button-secondary-solid": "var(--xmlui-fontFamily-Button-secondary-solid)", "fontSize-Button-secondary-solid": "var(--xmlui-fontSize-Button-secondary-solid)", "fontWeight-Button-secondary-solid": "var(--xmlui-fontWeight-Button-secondary-solid)", "borderRadius-Button-secondary-solid": "var(--xmlui-borderRadius-Button-secondary-solid)", "borderWidth-Button-secondary-solid": "var(--xmlui-borderWidth-Button-secondary-solid)", "borderColor-Button-secondary-solid": "var(--xmlui-borderColor-Button-secondary-solid)", "borderStyle-Button-secondary-solid": "var(--xmlui-borderStyle-Button-secondary-solid)", "backgroundColor-Button-secondary-solid": "var(--xmlui-backgroundColor-Button-secondary-solid)", "textColor-Button-secondary-solid": "var(--xmlui-textColor-Button-secondary-solid)", "boxShadow-Button-secondary-solid": "var(--xmlui-boxShadow-Button-secondary-solid)", "outlineWidth-Button-secondary-solid--focus": "var(--xmlui-outlineWidth-Button-secondary-solid--focus)", "outlineColor-Button-secondary-solid--focus": "var(--xmlui-outlineColor-Button-secondary-solid--focus)", "outlineStyle-Button-secondary-solid--focus": "var(--xmlui-outlineStyle-Button-secondary-solid--focus)", "outlineOffset-Button-secondary-solid--focus": "var(--xmlui-outlineOffset-Button-secondary-solid--focus)", "borderColor-Button-secondary-solid--hover": "var(--xmlui-borderColor-Button-secondary-solid--hover)", "textColor-Button-secondary-solid--hover": "var(--xmlui-textColor-Button-secondary-solid--hover)", "backgroundColor-Button-secondary-solid--hover": "var(--xmlui-backgroundColor-Button-secondary-solid--hover)", "borderColor-Button-secondary-solid--active": "var(--xmlui-borderColor-Button-secondary-solid--active)", "textColor-Button-secondary-solid--active": "var(--xmlui-textColor-Button-secondary-solid--active)", "boxShadow-Button-secondary-solid--active": "var(--xmlui-boxShadow-Button-secondary-solid--active)", "backgroundColor-Button-secondary-solid--active": "var(--xmlui-backgroundColor-Button-secondary-solid--active)", "fontFamily-Button-attention-solid": "var(--xmlui-fontFamily-Button-attention-solid)", "fontSize-Button-attention-solid": "var(--xmlui-fontSize-Button-attention-solid)", "fontWeight-Button-attention-solid": "var(--xmlui-fontWeight-Button-attention-solid)", "borderRadius-Button-attention-solid": "var(--xmlui-borderRadius-Button-attention-solid)", "borderWidth-Button-attention-solid": "var(--xmlui-borderWidth-Button-attention-solid)", "borderColor-Button-attention-solid": "var(--xmlui-borderColor-Button-attention-solid)", "borderStyle-Button-attention-solid": "var(--xmlui-borderStyle-Button-attention-solid)", "backgroundColor-Button-attention-solid": "var(--xmlui-backgroundColor-Button-attention-solid)", "textColor-Button-attention-solid": "var(--xmlui-textColor-Button-attention-solid)", "boxShadow-Button-attention-solid": "var(--xmlui-boxShadow-Button-attention-solid)", "outlineWidth-Button-attention-solid--focus": "var(--xmlui-outlineWidth-Button-attention-solid--focus)", "outlineColor-Button-attention-solid--focus": "var(--xmlui-outlineColor-Button-attention-solid--focus)", "outlineStyle-Button-attention-solid--focus": "var(--xmlui-outlineStyle-Button-attention-solid--focus)", "outlineOffset-Button-attention-solid--focus": "var(--xmlui-outlineOffset-Button-attention-solid--focus)", "borderColor-Button-attention-solid--hover": "var(--xmlui-borderColor-Button-attention-solid--hover)", "textColor-Button-attention-solid--hover": "var(--xmlui-textColor-Button-attention-solid--hover)", "backgroundColor-Button-attention-solid--hover": "var(--xmlui-backgroundColor-Button-attention-solid--hover)", "borderColor-Button-attention-solid--active": "var(--xmlui-borderColor-Button-attention-solid--active)", "textColor-Button-attention-solid--active": "var(--xmlui-textColor-Button-attention-solid--active)", "boxShadow-Button-attention-solid--active": "var(--xmlui-boxShadow-Button-attention-solid--active)", "backgroundColor-Button-attention-solid--active": "var(--xmlui-backgroundColor-Button-attention-solid--active)", "fontFamily-Button-primary-outlined": "var(--xmlui-fontFamily-Button-primary-outlined)", "fontSize-Button-primary-outlined": "var(--xmlui-fontSize-Button-primary-outlined)", "fontWeight-Button-primary-outlined": "var(--xmlui-fontWeight-Button-primary-outlined)", "borderRadius-Button-primary-outlined": "var(--xmlui-borderRadius-Button-primary-outlined)", "borderWidth-Button-primary-outlined": "var(--xmlui-borderWidth-Button-primary-outlined)", "borderColor-Button-primary-outlined": "var(--xmlui-borderColor-Button-primary-outlined)", "borderStyle-Button-primary-outlined": "var(--xmlui-borderStyle-Button-primary-outlined)", "textColor-Button-primary-outlined": "var(--xmlui-textColor-Button-primary-outlined)", "boxShadow-Button-primary-outlined": "var(--xmlui-boxShadow-Button-primary-outlined)", "outlineWidth-Button-primary-outlined--focus": "var(--xmlui-outlineWidth-Button-primary-outlined--focus)", "outlineColor-Button-primary-outlined--focus": "var(--xmlui-outlineColor-Button-primary-outlined--focus)", "outlineStyle-Button-primary-outlined--focus": "var(--xmlui-outlineStyle-Button-primary-outlined--focus)", "outlineOffset-Button-primary-outlined--focus": "var(--xmlui-outlineOffset-Button-primary-outlined--focus)", "borderColor-Button-primary-outlined--hover": "var(--xmlui-borderColor-Button-primary-outlined--hover)", "backgroundColor-Button-primary-outlined--hover": "var(--xmlui-backgroundColor-Button-primary-outlined--hover)", "textColor-Button-primary-outlined--hover": "var(--xmlui-textColor-Button-primary-outlined--hover)", "borderColor-Button-primary-outlined--active": "var(--xmlui-borderColor-Button-primary-outlined--active)", "backgroundColor-Button-primary-outlined--active": "var(--xmlui-backgroundColor-Button-primary-outlined--active)", "textColor-Button-primary-outlined--active": "var(--xmlui-textColor-Button-primary-outlined--active)", "fontFamily-Button-secondary-outlined": "var(--xmlui-fontFamily-Button-secondary-outlined)", "fontSize-Button-secondary-outlined": "var(--xmlui-fontSize-Button-secondary-outlined)", "fontWeight-Button-secondary-outlined": "var(--xmlui-fontWeight-Button-secondary-outlined)", "borderRadius-Button-secondary-outlined": "var(--xmlui-borderRadius-Button-secondary-outlined)", "borderWidth-Button-secondary-outlined": "var(--xmlui-borderWidth-Button-secondary-outlined)", "borderColor-Button-secondary-outlined": "var(--xmlui-borderColor-Button-secondary-outlined)", "borderStyle-Button-secondary-outlined": "var(--xmlui-borderStyle-Button-secondary-outlined)", "textColor-Button-secondary-outlined": "var(--xmlui-textColor-Button-secondary-outlined)", "boxShadow-Button-secondary-outlined": "var(--xmlui-boxShadow-Button-secondary-outlined)", "outlineWidth-Button-secondary-outlined--focus": "var(--xmlui-outlineWidth-Button-secondary-outlined--focus)", "outlineColor-Button-secondary-outlined--focus": "var(--xmlui-outlineColor-Button-secondary-outlined--focus)", "outlineStyle-Button-secondary-outlined--focus": "var(--xmlui-outlineStyle-Button-secondary-outlined--focus)", "outlineOffset-Button-secondary-outlined--focus": "var(--xmlui-outlineOffset-Button-secondary-outlined--focus)", "borderColor-Button-secondary-outlined--hover": "var(--xmlui-borderColor-Button-secondary-outlined--hover)", "backgroundColor-Button-secondary-outlined--hover": "var(--xmlui-backgroundColor-Button-secondary-outlined--hover)", "textColor-Button-secondary-outlined--hover": "var(--xmlui-textColor-Button-secondary-outlined--hover)", "borderColor-Button-secondary-outlined--active": "var(--xmlui-borderColor-Button-secondary-outlined--active)", "backgroundColor-Button-secondary-outlined--active": "var(--xmlui-backgroundColor-Button-secondary-outlined--active)", "textColor-Button-secondary-outlined--active": "var(--xmlui-textColor-Button-secondary-outlined--active)", "fontFamily-Button-attention-outlined": "var(--xmlui-fontFamily-Button-attention-outlined)", "fontSize-Button-attention-outlined": "var(--xmlui-fontSize-Button-attention-outlined)", "fontWeight-Button-attention-outlined": "var(--xmlui-fontWeight-Button-attention-outlined)", "borderRadius-Button-attention-outlined": "var(--xmlui-borderRadius-Button-attention-outlined)", "borderWidth-Button-attention-outlined": "var(--xmlui-borderWidth-Button-attention-outlined)", "borderColor-Button-attention-outlined": "var(--xmlui-borderColor-Button-attention-outlined)", "borderStyle-Button-attention-outlined": "var(--xmlui-borderStyle-Button-attention-outlined)", "textColor-Button-attention-outlined": "var(--xmlui-textColor-Button-attention-outlined)", "boxShadow-Button-attention-outlined": "var(--xmlui-boxShadow-Button-attention-outlined)", "outlineWidth-Button-attention-outlined--focus": "var(--xmlui-outlineWidth-Button-attention-outlined--focus)", "outlineColor-Button-attention-outlined--focus": "var(--xmlui-outlineColor-Button-attention-outlined--focus)", "outlineStyle-Button-attention-outlined--focus": "var(--xmlui-outlineStyle-Button-attention-outlined--focus)", "outlineOffset-Button-attention-outlined--focus": "var(--xmlui-outlineOffset-Button-attention-outlined--focus)", "borderColor-Button-attention-outlined--hover": "var(--xmlui-borderColor-Button-attention-outlined--hover)", "backgroundColor-Button-attention-outlined--hover": "var(--xmlui-backgroundColor-Button-attention-outlined--hover)", "textColor-Button-attention-outlined--hover": "var(--xmlui-textColor-Button-attention-outlined--hover)", "borderColor-Button-attention-outlined--active": "var(--xmlui-borderColor-Button-attention-outlined--active)", "backgroundColor-Button-attention-outlined--active": "var(--xmlui-backgroundColor-Button-attention-outlined--active)", "textColor-Button-attention-outlined--active": "var(--xmlui-textColor-Button-attention-outlined--active)", "fontFamily-Button-primary-ghost": "var(--xmlui-fontFamily-Button-primary-ghost)", "fontSize-Button-primary-ghost": "var(--xmlui-fontSize-Button-primary-ghost)", "fontWeight-Button-primary-ghost": "var(--xmlui-fontWeight-Button-primary-ghost)", "borderRadius-Button-primary-ghost": "var(--xmlui-borderRadius-Button-primary-ghost)", "borderWidth-Button-primary-ghost": "var(--xmlui-borderWidth-Button-primary-ghost)", "textColor-Button-primary-ghost": "var(--xmlui-textColor-Button-primary-ghost)", "outlineWidth-Button-primary-ghost--focus": "var(--xmlui-outlineWidth-Button-primary-ghost--focus)", "outlineColor-Button-primary-ghost--focus": "var(--xmlui-outlineColor-Button-primary-ghost--focus)", "outlineStyle-Button-primary-ghost--focus": "var(--xmlui-outlineStyle-Button-primary-ghost--focus)", "outlineOffset-Button-primary-ghost--focus": "var(--xmlui-outlineOffset-Button-primary-ghost--focus)", "backgroundColor-Button-primary-ghost--hover": "var(--xmlui-backgroundColor-Button-primary-ghost--hover)", "textColor-Button-primary-ghost--hover": "var(--xmlui-textColor-Button-primary-ghost--hover)", "backgroundColor-Button-primary-ghost--active": "var(--xmlui-backgroundColor-Button-primary-ghost--active)", "textColor-Button-primary-ghost--active": "var(--xmlui-textColor-Button-primary-ghost--active)", "fontFamily-Button-secondary-ghost": "var(--xmlui-fontFamily-Button-secondary-ghost)", "fontSize-Button-secondary-ghost": "var(--xmlui-fontSize-Button-secondary-ghost)", "fontWeight-Button-secondary-ghost": "var(--xmlui-fontWeight-Button-secondary-ghost)", "borderRadius-Button-secondary-ghost": "var(--xmlui-borderRadius-Button-secondary-ghost)", "borderWidth-Button-secondary-ghost": "var(--xmlui-borderWidth-Button-secondary-ghost)", "textColor-Button-secondary-ghost": "var(--xmlui-textColor-Button-secondary-ghost)", "outlineWidth-Button-secondary-ghost--focus": "var(--xmlui-outlineWidth-Button-secondary-ghost--focus)", "outlineColor-Button-secondary-ghost--focus": "var(--xmlui-outlineColor-Button-secondary-ghost--focus)", "outlineStyle-Button-secondary-ghost--focus": "var(--xmlui-outlineStyle-Button-secondary-ghost--focus)", "outlineOffset-Button-secondary-ghost--focus": "var(--xmlui-outlineOffset-Button-secondary-ghost--focus)", "backgroundColor-Button-secondary-ghost--hover": "var(--xmlui-backgroundColor-Button-secondary-ghost--hover)", "textColor-Button-secondary-ghost--hover": "var(--xmlui-textColor-Button-secondary-ghost--hover)", "backgroundColor-Button-secondary-ghost--active": "var(--xmlui-backgroundColor-Button-secondary-ghost--active)", "textColor-Button-secondary-ghost--active": "var(--xmlui-textColor-Button-secondary-ghost--active)", "fontFamily-Button-attention-ghost": "var(--xmlui-fontFamily-Button-attention-ghost)", "fontSize-Button-attention-ghost": "var(--xmlui-fontSize-Button-attention-ghost)", "fontWeight-Button-attention-ghost": "var(--xmlui-fontWeight-Button-attention-ghost)", "borderRadius-Button-attention-ghost": "var(--xmlui-borderRadius-Button-attention-ghost)", "borderWidth-Button-attention-ghost": "var(--xmlui-borderWidth-Button-attention-ghost)", "textColor-Button-attention-ghost": "var(--xmlui-textColor-Button-attention-ghost)", "outlineWidth-Button-attention-ghost--focus": "var(--xmlui-outlineWidth-Button-attention-ghost--focus)", "outlineColor-Button-attention-ghost--focus": "var(--xmlui-outlineColor-Button-attention-ghost--focus)", "outlineStyle-Button-attention-ghost--focus": "var(--xmlui-outlineStyle-Button-attention-ghost--focus)", "outlineOffset-Button-attention-ghost--focus": "var(--xmlui-outlineOffset-Button-attention-ghost--focus)", "backgroundColor-Button-attention-ghost--hover": "var(--xmlui-backgroundColor-Button-attention-ghost--hover)", "textColor-Button-attention-ghost--hover": "var(--xmlui-textColor-Button-attention-ghost--hover)", "backgroundColor-Button-attention-ghost--active": "var(--xmlui-backgroundColor-Button-attention-ghost--active)", "textColor-Button-attention-ghost--active": "var(--xmlui-textColor-Button-attention-ghost--active)"}'`;
const button$2 = "_button_1rnn4_13";
const alignStart = "_alignStart_1rnn4_29";
const alignEnd = "_alignEnd_1rnn4_32";
const buttonHorizontal = "_buttonHorizontal_1rnn4_38";
const xs$1 = "_xs_1rnn4_41";
const sm$1 = "_sm_1rnn4_48";
const md$1 = "_md_1rnn4_55";
const lg$1 = "_lg_1rnn4_62";
const buttonVertical = "_buttonVertical_1rnn4_69";
const solidPrimary = "_solidPrimary_1rnn4_103";
const solidSecondary = "_solidSecondary_1rnn4_138";
const solidAttention = "_solidAttention_1rnn4_173";
const outlinedPrimary = "_outlinedPrimary_1rnn4_208";
const outlinedSecondary = "_outlinedSecondary_1rnn4_241";
const outlinedAttention = "_outlinedAttention_1rnn4_274";
const ghostPrimary = "_ghostPrimary_1rnn4_307";
const ghostSecondary = "_ghostSecondary_1rnn4_336";
const ghostAttention = "_ghostAttention_1rnn4_365";
const styles$O = {
  themeVars: themeVars$O,
  button: button$2,
  alignStart,
  alignEnd,
  buttonHorizontal,
  xs: xs$1,
  sm: sm$1,
  md: md$1,
  lg: lg$1,
  buttonVertical,
  solidPrimary,
  solidSecondary,
  solidAttention,
  outlinedPrimary,
  outlinedSecondary,
  outlinedAttention,
  ghostPrimary,
  ghostSecondary,
  ghostAttention
};
function createMetadata(metadata) {
  return metadata;
}
function d(description, availableValues, valueType, defaultValue, isValid2, isRequired) {
  return { description, isRequired, availableValues, valueType, defaultValue, isValid: isValid2 };
}
const LinkTargetMd = [
  {
    value: "_self",
    description: "The link will open in the same frame as it was clicked."
  },
  {
    value: "_blank",
    description: "The link will open in a new window or tab."
  },
  {
    value: "_parent",
    description: "The link will open in the parent frame. If no parent, behaves as _self."
  },
  {
    value: "_top",
    description: "The topmost browsing context. The link will open in the full body of the window. If no ancestors, behaves as _self."
  },
  {
    value: "_unfencedTop",
    description: "Allows embedded fenced frames to navigate the top-level frame, i.e. traversing beyond the root of the fenced frame."
  }
];
const sizeMd = [
  { value: "xs", description: "Extra small button" },
  { value: "sm", description: "Small button" },
  { value: "md", description: "Medium button" },
  { value: "lg", description: "Large button" }
];
const buttonThemeValues = ["attention", "primary", "secondary"];
const buttonThemeNames = [...buttonThemeValues];
const buttonThemeMd = [
  { value: "attention", description: "Attention state theme color" },
  { value: "primary", description: "Primary theme color" },
  { value: "secondary", description: "Secondary theme color" }
];
const buttonTypesMd = [
  {
    value: "button",
    description: "Regular behavior that only executes logic if explicitly determined."
  },
  {
    value: "submit",
    description: "The button submits the form data to the server. This is the default for buttons in a Form or NativeForm component."
  },
  {
    value: "reset",
    description: "Resets all the controls to their initial values. Using it is ill advised for UX reasons."
  }
];
const buttonVariantValues = ["solid", "outlined", "ghost"];
const buttonVariantNames = [...buttonVariantValues];
const buttonVariantMd = [
  { value: "solid", description: "A button with a border and a filled background." },
  {
    value: "outlined",
    description: "The button is displayed with a border and a transparent background."
  },
  {
    value: "ghost",
    description: "A button with no border and fill. Only the label is visible; the background is colored when hovered or clicked."
  }
];
const alignmentOptionValues = ["start", "center", "end"];
const alignmentOptionMd = [
  { value: "center", description: "Place the content in the middle" },
  {
    value: "start",
    description: "Justify the content to the left (to the right if in right-to-left)"
  },
  {
    value: "end",
    description: "Justify the content to the right (to the left if in right-to-left)"
  }
];
const orientationOptionMd = [
  { value: "horizontal", description: "The component will fill the available space horizontally" },
  { value: "vertical", description: "The component will fill the available space vertically" }
];
const iconPositionValues = ["start", "end"];
const iconPositionNames = [...iconPositionValues];
const iconPositionMd = [
  {
    value: "start",
    description: "The icon will appear at the start (left side when the left-to-right direction is set)"
  },
  {
    value: "end",
    description: "The icon will appear at the end (right side when the left-to-right direction is set)"
  }
];
const labelPositionMd = [
  {
    value: "start",
    description: "The left side of the input (left-to-right) or the right side of the input (right-to-left)"
  },
  {
    value: "end",
    description: "The right side of the input (left-to-right) or the left side of the input (right-to-left)"
  },
  { value: "top", description: "The top of the input" },
  { value: "bottom", description: "The bottom of the input" }
];
const triggerPositionValues = ["start", "end"];
const triggerPositionNames = [...triggerPositionValues];
const validationStatusMd = [
  // { value: "none", description: "No indicator" },
  { value: "valid", description: "Visual indicator for an input that is accepted" },
  { value: "warning", description: "Visual indicator for an input that produced a warning" },
  { value: "error", description: "Visual indicator for an input that produced an error" }
];
const scrollAnchoringValues = ["top", "bottom"];
const TextVariantElement = {
  abbr: "abbr",
  cite: "cite",
  code: "code",
  codefence: "pre",
  deleted: "del",
  inserted: "ins",
  keyboard: "kbd",
  marked: "mark",
  sample: "samp",
  sub: "sub",
  sup: "sup",
  var: "var",
  mono: "pre",
  strong: "strong",
  em: "em",
  title: "span",
  subtitle: "span",
  small: "span",
  caption: "span",
  placeholder: "span",
  paragraph: "p",
  subheading: "h6",
  tableheading: "h6",
  secondary: "span"
};
const variantOptionsMd = [
  { value: "abbr", description: "Represents an abbreviation or acronym" },
  { value: "caption", description: "Represents the caption (or title) of a table" },
  { value: "cite", description: "Is used to mark up the title of a cited work" },
  { value: "code", description: "Represents a line of code" },
  {
    value: "codefence",
    description: "Handles the display of code blocks if combined with a `code` variant"
  },
  { value: "deleted", description: "Represents text that has been deleted" },
  { value: "em", description: "Marks text to stress emphasis" },
  {
    value: "inserted",
    description: "Represents a range of text that has been added to a document"
  },
  {
    value: "keyboard",
    description: "Represents a span of text denoting textual user input from a keyboard or voice input"
  },
  {
    value: "marked",
    description: "Represents text which is marked or highlighted for reference or notation"
  },
  { value: "mono", description: "Text using a mono style font family" },
  { value: "paragraph", description: "Represents a paragraph" },
  {
    value: "placeholder",
    description: "Text that is mostly used as the placeholder style in input controls"
  },
  { value: "sample", description: "Represents sample (or quoted) output from a computer program" },
  { value: "secondary", description: "Represents a bit dimmed secondary text" },
  { value: "small", description: "Represents side-comments and small print" },
  { value: "sub", description: "Specifies inline text as subscript" },
  { value: "strong", description: "Contents have strong importance" },
  { value: "subheading", description: "Indicates that the text is the subtitle in a heading" },
  {
    value: "subtitle",
    description: "Indicates that the text is the subtitle of some other content"
  },
  { value: "sup", description: "Specifies inline text as superscript" },
  { value: "tableheading", description: "Indicates that the text is a table heading" },
  { value: "title", description: "Indicates that the text is the title of some other content" },
  { value: "var", description: "Represents the name of a variable in a mathematical expression" }
];
const httpMethodNames = [
  "get",
  "post",
  "put",
  "delete",
  "patch",
  "head",
  "options",
  "trace",
  "connect"
];
const keyPrefix = "xmlui";
const themeVars$M = '"[]"';
const themeVars$N = {
  keyPrefix,
  themeVars: themeVars$M
};
function parseScssVar(scssStr) {
  if (!scssStr || typeof scssStr !== "string") {
    return scssStr;
  }
  let jsValue = scssStr.replace(/(^['"])|(['"]$)/g, "");
  try {
    return JSON.parse(jsValue);
  } catch (errorParsingJsonGeneratedInUtilScssFile) {
    try {
      return JSON.parse(
        scssStr.replace("(", "{").replace(")", "}").replace(/: ?([^,}]+)([,}])/g, ': "$1"$2').replace(/([\s{,])(?!")([^:\s]+)+:/g, '$1"$2":')
      );
    } catch (errorParsingScssStringLiteral) {
      return jsValue;
    }
  }
}
parseScssVar(themeVars$N.keyPrefix) || "";
parseScssVar(themeVars$N.themeVars);
function dInternal(description) {
  return {
    description: description ?? `This property is for internal use only.`,
    isInternal: true
  };
}
function dClick(comp) {
  return {
    description: `This event is triggered when the ${comp} is clicked.`
  };
}
function dGotFocus(comp) {
  return {
    description: `This event is triggered when the ${comp} has received the focus.`
  };
}
function dLostFocus(comp) {
  return {
    description: `This event is triggered when the ${comp} has lost the focus.`
  };
}
function dDidChange(comp) {
  return {
    description: `This event is triggered when value of ${comp} has changed.`
  };
}
function dIndeterminate(defaultValue) {
  return {
    description: `The \`true\` value of this property signals that the component is in an _intedeterminate state_.`,
    defaultValue
  };
}
function dLabel() {
  return {
    description: `This property sets the label of the component.`,
    valueType: "string"
  };
}
function dLabelPosition(def) {
  return {
    description: `Places the label at the given position of the component.`,
    availableValues: labelPositionMd,
    defaultValue: def ?? "top"
  };
}
function dLabelWidth(comp) {
  return {
    description: `This property sets the width of the \`${comp}\`.`
  };
}
function dLabelBreak(comp) {
  return {
    description: `This boolean value indicates if the \`${comp}\` labels can be split into multiple lines if it would overflow the available label width.`,
    valueType: "boolean",
    defaultValue: false
  };
}
function dAutoFocus() {
  return {
    description: "If this property is set to `true`, the component gets the focus automatically when displayed.",
    valueType: "boolean",
    defaultValue: false
  };
}
function dInitialValue(value) {
  return {
    description: `This property sets the component's initial value.`,
    defaultValue: value
  };
}
function dReadonly(readOnly2) {
  return {
    description: `Set this property to \`true\` to disallow changing the component value.`,
    valueType: "boolean",
    defaultValue: readOnly2 ?? false
  };
}
function dEnabled(isEnabled2) {
  return {
    description: `This boolean property value indicates whether the component responds to user events (\`true\`) or not (\`false\`).`,
    valueType: "boolean",
    defaultValue: isEnabled2 ?? true
  };
}
function dMulti() {
  return {
    description: "The `true` value of the property indicates if the user can select multiple items.",
    valueType: "boolean",
    defaultValue: false
  };
}
function dValidationStatus(value) {
  return {
    description: `This property allows you to set the validation status of the input component.`,
    availableValues: validationStatusMd,
    defaultValue: value ?? "none"
  };
}
function dValueApi() {
  return {
    description: `You can query this read-only API property to query the component's current value (\`true\`: checked, \`false\`: unchecked).`
  };
}
function dSetValueApi() {
  return {
    description: `You can use this method to set the component's current value programmatically (\`true\`: checked, \`false\`: unchecked).`
  };
}
function dComponent(description) {
  return {
    description,
    valueType: "ComponentDef"
  };
}
function dPlaceholder() {
  return {
    description: `A placeholder text that is visible in the input field when its empty.`,
    valueType: "string"
  };
}
function dMaxLength() {
  return {
    description: `This property sets the maximum length of the input it accepts.`,
    valueType: "number"
  };
}
function dRequired() {
  return {
    description: `Set this property to \`true\` to indicate it must have a value before submitting the containing form.`,
    valueType: "boolean"
  };
}
function dStartText() {
  return {
    description: `This property sets a text to appear at the start (left side when the left-to-right direction is set) of the input.`,
    valueType: "string"
  };
}
function dStartIcon() {
  return {
    description: `This property sets an icon to appear at the start (left side when the left-to-right direction is set) of the input.`,
    valueType: "string"
  };
}
function dEndText() {
  return {
    description: `This property sets a text to appear on the end (right side when the left-to-right direction is set) of the input.`,
    valueType: "string"
  };
}
function dEndIcon() {
  return {
    description: `This property sets an icon to appear on the end (right side when the left-to-right direction is set) of the input.`,
    valueType: "string"
  };
}
function dExpanded(comp) {
  return {
    description: `This property indicates if the ${comp} is expanded (\`true\`) or collapsed (\`false\`).`
  };
}
function dExpand(comp) {
  return {
    description: `This method expands the ${comp}.`
  };
}
function dCollapse(comp) {
  return {
    description: `This method collapses the ${comp}.`
  };
}
function dFocus(comp) {
  return {
    description: `This method sets the focus on the ${comp}.`
  };
}
function dValue() {
  return {
    description: `You can query the component's value. If no value is set, it will retrieve \`undefined\`.`
  };
}
function dTriggerTemplate(comp) {
  return {
    description: `This property allows you to define a custom trigger instead of the default one provided by \`${comp}\`.`,
    valueType: "ComponentDef"
  };
}
function dOrientation(defaultValue, isRequired = false) {
  return {
    description: `This property sets the main axis along which the nested components are rendered.`,
    availableValues: orientationOptionMd,
    valueType: "string",
    defaultValue,
    isRequired
  };
}
const themeVars$L = `'{"size-Icon": "var(--xmlui-size-Icon)", "thickness-stroke-Icon": "var(--xmlui-thickness-stroke-Icon)"}'`;
const base$2 = "_base_13qtg_13";
const styles$N = {
  themeVars: themeVars$L,
  base: base$2
};
function capitalizeFirstLetter(str) {
  return str[0].toUpperCase() + str.substring(1);
}
const useEvent = (callback) => {
  const callbackRef = useRef(callback);
  useInsertionEffect(() => {
    callbackRef.current = callback;
  }, [callback]);
  return useCallback((...args) => {
    const latestFn = callbackRef.current;
    return latestFn == null ? void 0 : latestFn(...args);
  }, [callbackRef]);
};
function asyncThrottle(func, wait, options2) {
  const throttled = throttle(
    (resolve, reject, args) => {
      func(...args).then(resolve).catch(reject);
    },
    wait,
    options2
  );
  return (...args) => new Promise((resolve, reject) => {
    throttled(resolve, reject, args);
  });
}
const ThemeContext = React__default.createContext(void 0);
React__default.createContext(void 0);
function useTheme() {
  return useContext(ThemeContext);
}
function useResourceUrl(resourceString) {
  const { getResourceUrl } = useTheme();
  return getResourceUrl(resourceString);
}
const EMPTY_ARRAY = Object.freeze([]);
const EMPTY_OBJECT = Object.freeze({});
const noop$1 = (...args) => ({});
const useResizeObserver = (element, callback) => {
  const current = element == null ? void 0 : element.current;
  const observer = useRef();
  useEffect(() => {
    if ((observer == null ? void 0 : observer.current) && current) {
      observer.current.unobserve(current);
    }
    observer.current = new ResizeObserver(callback);
    if (element && element.current && observer.current) {
      observer.current.observe(element.current);
    }
  }, [callback, current, element]);
};
function usePrevious(value) {
  const ref = useRef();
  useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}
function useMediaQuery(query) {
  const [matches, setMatches] = useState(false);
  useEffect(() => {
    if (!window) {
      setMatches(false);
      return;
    }
    const matchMedia = window.matchMedia(query);
    handleChange();
    matchMedia.addEventListener("change", handleChange);
    return () => {
      matchMedia.removeEventListener("change", handleChange);
    };
    function handleChange() {
      setMatches(matchMedia.matches);
    }
  }, [query]);
  return matches;
}
function useOnMount(onMount) {
  const thizRef = useRef({ mountedFired: false });
  useEffect(() => {
    if (!thizRef.current.mountedFired) {
      thizRef.current.mountedFired = true;
      onMount == null ? void 0 : onMount();
    }
  }, [onMount]);
}
const useIsomorphicLayoutEffect = typeof document !== "undefined" ? useLayoutEffect : useEffect;
const IconRegistryContext = React__default.createContext(null);
function useIconRegistry() {
  return useContext(IconRegistryContext);
}
const svgAttributeMap = {
  // SVG attributes
  accentheight: "accentHeight",
  accumulate: "accumulate",
  additive: "additive",
  alignmentbaseline: "alignmentBaseline",
  allowreorder: "allowReorder",
  alphabetic: "alphabetic",
  amplitude: "amplitude",
  arabicform: "arabicForm",
  ascent: "ascent",
  attributename: "attributeName",
  attributetype: "attributeType",
  autoreverse: "autoReverse",
  azimuth: "azimuth",
  basefrequency: "baseFrequency",
  baseprofile: "baseProfile",
  baselineshift: "baselineShift",
  bbox: "bbox",
  begin: "begin",
  bias: "bias",
  by: "by",
  calcmode: "calcMode",
  capheight: "capHeight",
  clip: "clip",
  clippath: "clipPath",
  clippathunits: "clipPathUnits",
  cliprule: "clipRule",
  colorinterpolation: "colorInterpolation",
  colorinterpolationfilters: "colorInterpolationFilters",
  colorprofile: "colorProfile",
  colorrendering: "colorRendering",
  contentscripttype: "contentScriptType",
  contentstyletype: "contentStyleType",
  cursor: "cursor",
  cx: "cx",
  cy: "cy",
  d: "d",
  decelerate: "decelerate",
  descent: "descent",
  diffuseconstant: "diffuseConstant",
  direction: "direction",
  display: "display",
  divisor: "divisor",
  dominantbaseline: "dominantBaseline",
  dur: "dur",
  dx: "dx",
  dy: "dy",
  edgemode: "edgeMode",
  elevation: "elevation",
  enablebackground: "enableBackground",
  end: "end",
  exponent: "exponent",
  externalresourcesrequired: "externalResourcesRequired",
  fill: "fill",
  fillopacity: "fillOpacity",
  fillrule: "fillRule",
  filter: "filter",
  filterres: "filterRes",
  filterunits: "filterUnits",
  floodcolor: "floodColor",
  floodopacity: "floodOpacity",
  focusable: "focusable",
  fontfamily: "fontFamily",
  fontsize: "fontSize",
  fontsizeadjust: "fontSizeAdjust",
  fontstretch: "fontStretch",
  fontstyle: "fontStyle",
  fontvariant: "fontVariant",
  fontweight: "fontWeight",
  format: "format",
  from: "from",
  fx: "fx",
  fy: "fy",
  g1: "g1",
  g2: "g2",
  glyphname: "glyphName",
  glyphorientationhorizontal: "glyphOrientationHorizontal",
  glyphorientationvertical: "glyphOrientationVertical",
  glyphref: "glyphRef",
  gradienttransform: "gradientTransform",
  gradientunits: "gradientUnits",
  hanging: "hanging",
  horizadvx: "horizAdvX",
  horizoriginx: "horizOriginX",
  ideographic: "ideographic",
  imagerendering: "imageRendering",
  in: "in",
  in2: "in2",
  intercept: "intercept",
  k: "k",
  k1: "k1",
  k2: "k2",
  k3: "k3",
  k4: "k4",
  kernelmatrix: "kernelMatrix",
  kernelunitlength: "kernelUnitLength",
  kerning: "kerning",
  keypoints: "keyPoints",
  keysplines: "keySplines",
  keytimes: "keyTimes",
  lengthadjust: "lengthAdjust",
  letterspacing: "letterSpacing",
  lightingcolor: "lightingColor",
  limitingconeangle: "limitingConeAngle",
  local: "local",
  markerend: "markerEnd",
  markerheight: "markerHeight",
  markermid: "markerMid",
  markerstart: "markerStart",
  markerunits: "markerUnits",
  markerwidth: "markerWidth",
  mask: "mask",
  maskcontentunits: "maskContentUnits",
  maskunits: "maskUnits",
  mathematical: "mathematical",
  mode: "mode",
  numoctaves: "numOctaves",
  offset: "offset",
  opacity: "opacity",
  operator: "operator",
  order: "order",
  orient: "orient",
  orientation: "orientation",
  origin: "origin",
  overflow: "overflow",
  overlineposition: "overlinePosition",
  overlinethickness: "overlineThickness",
  paintorder: "paintOrder",
  panose1: "panose1",
  pathlength: "pathLength",
  patterncontentunits: "patternContentUnits",
  patterntransform: "patternTransform",
  patternunits: "patternUnits",
  pointerevents: "pointerEvents",
  points: "points",
  pointsatx: "pointsAtX",
  pointsaty: "pointsAtY",
  pointsatz: "pointsAtZ",
  preservealpha: "preserveAlpha",
  preserveaspectratio: "preserveAspectRatio",
  primitiveunits: "primitiveUnits",
  r: "r",
  radius: "radius",
  refx: "refX",
  refy: "refY",
  renderingintent: "renderingIntent",
  repeatcount: "repeatCount",
  repeatdur: "repeatDur",
  requiredextensions: "requiredExtensions",
  requiredfeatures: "requiredFeatures",
  restart: "restart",
  result: "result",
  rotate: "rotate",
  rx: "rx",
  ry: "ry",
  scale: "scale",
  seed: "seed",
  shaperendering: "shapeRendering",
  slope: "slope",
  spacing: "spacing",
  specularconstant: "specularConstant",
  specularexponent: "specularExponent",
  speed: "speed",
  spreadmethod: "spreadMethod",
  startoffset: "startOffset",
  stddeviation: "stdDeviation",
  stemh: "stemh",
  stemv: "stemv",
  stitchtiles: "stitchTiles",
  stopcolor: "stopColor",
  stopopacity: "stopOpacity",
  strikethroughposition: "strikethroughPosition",
  strikethroughthickness: "strikethroughThickness",
  string: "string",
  stroke: "stroke",
  strokedasharray: "strokeDasharray",
  strokedashoffset: "strokeDashoffset",
  strokelinecap: "strokeLinecap",
  strokelinejoin: "strokeLinejoin",
  strokemiterlimit: "strokeMiterlimit",
  strokeopacity: "strokeOpacity",
  strokewidth: "strokeWidth",
  surfacescale: "surfaceScale",
  systemlanguage: "systemLanguage",
  tablevalues: "tableValues",
  targetx: "targetX",
  targety: "targetY",
  textanchor: "textAnchor",
  textdecoration: "textDecoration",
  textlength: "textLength",
  textrendering: "textRendering",
  to: "to",
  transform: "transform",
  u1: "u1",
  u2: "u2",
  underlineposition: "underlinePosition",
  underlinethickness: "underlineThickness",
  unicode: "unicode",
  unicodebidi: "unicodeBidi",
  unicoderange: "unicodeRange",
  unitsperem: "unitsPerEm",
  valphabetic: "vAlphabetic",
  vhanging: "vHanging",
  videographic: "vIdeographic",
  vmathematical: "vMathematical",
  values: "values",
  vectoreffect: "vectorEffect",
  version: "version",
  vertadvy: "vertAdvY",
  vertoriginx: "vertOriginX",
  vertoriginy: "vertOriginY",
  viewbox: "viewBox",
  viewtarget: "viewTarget",
  visibility: "visibility",
  widths: "widths",
  wordspacing: "wordSpacing",
  writingmode: "writingMode",
  x: "x",
  x1: "x1",
  x2: "x2",
  xchannelselector: "xChannelSelector",
  xheight: "xHeight",
  xlinkactuate: "xlinkActuate",
  xlinkarcrole: "xlinkArcrole",
  xlinkhref: "xlinkHref",
  xlinkrole: "xlinkRole",
  xlinkshow: "xlinkShow",
  xlinktitle: "xlinkTitle",
  xlinktype: "xlinkType",
  xmlns: "xmlns",
  xmlnsxlink: "xmlnsXlink",
  xmlbase: "xmlBase",
  xmllang: "xmlLang",
  xmlspace: "xmlSpace",
  y: "y",
  y1: "y1",
  y2: "y2",
  ychannelselector: "yChannelSelector",
  z: "z",
  zoomandpan: "zoomAndPan"
};
const extraCharRegex = /[-:]/g;
function useCustomSvgIconRenderer(resourceUrl) {
  const { ensureCustomSvgIcon, customSvgs } = useIconRegistry();
  useIsomorphicLayoutEffect(() => {
    if (!resourceUrl) {
      return;
    }
    ensureCustomSvgIcon(resourceUrl);
  }, [ensureCustomSvgIcon, resourceUrl]);
  const customSvg = resourceUrl ? customSvgs[resourceUrl] : null;
  const iconRenderer = useCallback(
    ({ style, className }) => {
      if (!customSvg) {
        return null;
      }
      const { attributes, name } = customSvg;
      const safeAttributes = {};
      Object.entries(attributes).forEach(([key, value]) => {
        let safeKey = key;
        if (/^(data-|aria-)/.test(key)) {
          safeKey = key;
        } else {
          safeKey = key.replace(extraCharRegex, "").toLowerCase();
        }
        safeAttributes[svgAttributeMap[safeKey] || key] = value;
      });
      return /* @__PURE__ */ jsx("svg", { ...safeAttributes, style, className, children: /* @__PURE__ */ jsx("use", { href: `#${name}` }) });
    },
    [customSvg]
  );
  return !resourceUrl ? null : iconRenderer;
}
const THEME_VAR_PREFIX$1 = "xmlui";
function toCssVar$1(c) {
  if (typeof c === "string") {
    return `var(--${THEME_VAR_PREFIX$1}-${c.substring(1)})`;
  }
  if (c.defaultValue && c.defaultValue.length > 0) {
    let defaultValueString = "";
    for (const segment of c.defaultValue) {
      defaultValueString += typeof segment === "string" ? segment : toCssVar$1(segment);
    }
    return `var(--${THEME_VAR_PREFIX$1}-${c.id.substring(1)}, ${defaultValueString})`;
  } else {
    return `var(--${THEME_VAR_PREFIX$1}-${c.id.substring(1)})`;
  }
}
const Icon = forwardRef(function Icon2({ name, fallback, style, className, size, ...restProps }, ref) {
  var _a;
  const iconRenderer = useFindIconRenderer(name, fallback);
  const computedSize = typeof size === "string" ? mapSizeToIconPack(size) : size;
  const width = computedSize || restProps.width;
  const height = computedSize || restProps.height;
  const computedProps = {
    // className is needed to apply a default color to the icon, thus other component classes can override this one
    className: classnames(styles$N.base, className),
    ...restProps,
    size: computedSize,
    width,
    height,
    style: {
      ...style,
      "--icon-width": width,
      "--icon-height": height
    }
  };
  const customIconUrl = useCustomIconUrl(name);
  if (customIconUrl) {
    return /* @__PURE__ */ jsx(CustomIcon, { ...computedProps, url: customIconUrl, name });
  }
  return ((_a = iconRenderer == null ? void 0 : iconRenderer.renderer) == null ? void 0 : _a.call(iconRenderer, computedProps)) || null;
});
function CustomIcon(props) {
  var _a;
  const { url, width, height, name, style, className } = props;
  const resourceUrl = useResourceUrl(url);
  const isSvgIcon = (_a = resourceUrl == null ? void 0 : resourceUrl.toLowerCase()) == null ? void 0 : _a.endsWith(".svg");
  const customSvgIconRenderer = useCustomSvgIconRenderer(resourceUrl);
  if (resourceUrl && isSvgIcon) {
    const renderedIcon = customSvgIconRenderer == null ? void 0 : customSvgIconRenderer({ style, className });
    if (!renderedIcon) {
      return /* @__PURE__ */ jsx("span", { style, className });
    }
    return renderedIcon;
  }
  return /* @__PURE__ */ jsx("img", { src: resourceUrl, style: { width, height, ...style }, alt: name });
}
function useCustomIconUrl(iconName) {
  const { getResourceUrl } = useTheme();
  if (!iconName) {
    return iconName;
  }
  return getResourceUrl(`resource:icon.${iconName}`);
}
function mapSizeToIconPack(size) {
  if (/^\$[a-zA-Z0-9_$-]+$/g.test(size)) {
    return toCssVar$1(size);
  }
  return {
    xs: "0.75em",
    sm: "1em",
    md: "1.5rem",
    lg: "2em"
  }[size] || size;
}
function useFindIconRenderer(name, fallback) {
  const iconRegistry = useIconRegistry();
  if (name && typeof name === "string") {
    const separator = ":";
    const parts = name.split(separator);
    if (parts.length > 1) {
      const iconRenderer = iconRegistry.lookupIconRenderer(
        `${parts[0].toLowerCase()}${separator}${parts[1]}`
      );
      if (iconRenderer) return iconRenderer;
    }
    if (parts.length === 1) {
      const iconRenderer = iconRegistry.lookupIconRenderer(parts[0]);
      if (iconRenderer) return iconRenderer;
    }
  }
  if (fallback && typeof fallback === "string") {
    const iconRenderer = iconRegistry.lookupIconRenderer(fallback.toLowerCase());
    if (iconRenderer) return iconRenderer;
  }
  return null;
}
function setRef(ref, value) {
  if (typeof ref === "function") {
    return ref(value);
  } else if (ref !== null && ref !== void 0) {
    ref.current = value;
  }
}
function composeRefs(...refs) {
  return (node) => {
    let hasCleanup = false;
    const cleanups = refs.map((ref) => {
      const cleanup = setRef(ref, node);
      if (!hasCleanup && typeof cleanup == "function") {
        hasCleanup = true;
      }
      return cleanup;
    });
    if (hasCleanup) {
      return () => {
        for (let i = 0; i < cleanups.length; i++) {
          const cleanup = cleanups[i];
          if (typeof cleanup == "function") {
            cleanup();
          } else {
            setRef(refs[i], null);
          }
        }
      };
    }
  };
}
const VisuallyHidden = ({ children, ...props }) => /* @__PURE__ */ jsx(VisuallyHidden$2, { ...props, children });
const defaultProps$g = {
  type: "button",
  iconPosition: "start",
  contentPosition: "center",
  orientation: "horizontal",
  variant: "solid",
  themeColor: "primary",
  size: "sm",
  autoFocus: false
};
const Button = React__default.forwardRef(function Button2({
  id,
  type = defaultProps$g.type,
  icon,
  iconPosition = defaultProps$g.iconPosition,
  contentPosition = defaultProps$g.contentPosition,
  orientation = defaultProps$g.orientation,
  variant = defaultProps$g.variant,
  themeColor = defaultProps$g.themeColor,
  size = defaultProps$g.size,
  disabled: disabled2,
  children,
  formId,
  onClick,
  onFocus,
  onBlur,
  style,
  gap,
  className,
  autoFocus = defaultProps$g.autoFocus,
  contextualLabel,
  ...rest
}, ref) {
  const innerRef = useRef(null);
  const composedRef = ref ? composeRefs(ref, innerRef) : innerRef;
  useEffect(() => {
    if (autoFocus) {
      setTimeout(() => {
        var _a;
        (_a = innerRef.current) == null ? void 0 : _a.focus();
      }, 0);
    }
  }, [autoFocus]);
  const iconToLeft = iconPosition === "start";
  return /* @__PURE__ */ jsxs(
    "button",
    {
      ...rest,
      id,
      type,
      ref: composedRef,
      className: classnames(className, styles$O.button, {
        [styles$O.buttonHorizontal]: orientation === "horizontal",
        [styles$O.buttonVertical]: orientation === "vertical",
        [styles$O.xs]: size === "xs",
        [styles$O.sm]: size === "sm",
        [styles$O.md]: size === "md",
        [styles$O.lg]: size === "lg",
        [styles$O.solidPrimary]: variant === "solid" && themeColor === "primary",
        [styles$O.solidSecondary]: variant === "solid" && themeColor === "secondary",
        [styles$O.solidAttention]: variant === "solid" && themeColor === "attention",
        [styles$O.outlinedPrimary]: variant === "outlined" && themeColor === "primary",
        [styles$O.outlinedSecondary]: variant === "outlined" && themeColor === "secondary",
        [styles$O.outlinedAttention]: variant === "outlined" && themeColor === "attention",
        [styles$O.ghostPrimary]: variant === "ghost" && themeColor === "primary",
        [styles$O.ghostSecondary]: variant === "ghost" && themeColor === "secondary",
        [styles$O.ghostAttention]: variant === "ghost" && themeColor === "attention",
        [styles$O.alignStart]: contentPosition === "start",
        [styles$O.alignEnd]: contentPosition === "end"
      }),
      autoFocus,
      disabled: disabled2,
      form: formId,
      style,
      onClick,
      onFocus,
      onBlur,
      children: [
        icon && iconToLeft && /* @__PURE__ */ jsx(Fragment, { children: icon }),
        children,
        icon && !children && /* @__PURE__ */ jsx(IconLabel, { icon, accessibleName: contextualLabel }),
        icon && !iconToLeft && /* @__PURE__ */ jsx(Fragment, { children: icon })
      ]
    }
  );
});
const IconLabel = ({ icon, accessibleName = "" }) => {
  const iconProps = icon.props;
  return /* @__PURE__ */ jsx(VisuallyHidden, { children: /* @__PURE__ */ jsx("span", { children: accessibleName || (iconProps == null ? void 0 : iconProps.name) || (iconProps == null ? void 0 : iconProps.alt) }) });
};
const COMP$13 = "Button";
const ButtonMd = createMetadata({
  description: "Button is an interactive element that triggers an action when clicked.",
  status: "stable",
  props: {
    autoFocus: {
      description: "Indicates if the button should receive focus when the page loads.",
      isRequired: false,
      type: "boolean",
      defaultValue: defaultProps$g.autoFocus
    },
    variant: {
      description: "The button variant determines the level of emphasis the button should possess.",
      isRequired: false,
      type: "string",
      availableValues: buttonVariantMd,
      defaultValue: defaultProps$g.variant
    },
    themeColor: {
      description: "Sets the button color scheme defined in the application theme.",
      isRequired: false,
      type: "string",
      availableValues: buttonThemeMd,
      defaultValue: defaultProps$g.themeColor
    },
    size: {
      description: "Sets the size of the button.",
      isRequired: false,
      type: "string",
      availableValues: sizeMd,
      defaultValue: defaultProps$g.size
    },
    label: {
      description: `This property is an optional string to set a label for the ${COMP$13}. If no label is specified and an icon is set, the ${COMP$13} will modify its styling to look like a small icon button. When the ${COMP$13} has nested children, it will display them and ignore the value of the \`label\` prop.`,
      type: "string"
    },
    type: {
      description: `This optional string describes how the ${COMP$13} appears in an HTML context. You rarely need to set this property explicitly.`,
      availableValues: buttonTypesMd,
      valueType: "string",
      defaultValue: defaultProps$g.type
    },
    enabled: {
      description: `The value of this property indicates whether the button accepts actions (\`true\`) or does not react to them (\`false\`).`,
      type: "boolean",
      defaultValue: true
    },
    orientation: dOrientation(defaultProps$g.orientation),
    icon: {
      description: `This string value denotes an icon name. The framework will render an icon if XMLUI recognizes the icon by its name. If no label is specified and an icon is set, the ${COMP$13} displays only that icon.`,
      type: "string"
    },
    iconPosition: {
      description: `This optional string determines the location of the icon in the ${COMP$13}.`,
      availableValues: iconPositionMd,
      type: "string",
      defaultValue: defaultProps$g.iconPosition
    },
    contentPosition: {
      description: `This optional value determines how the label and icon (or nested children) should be placedinside the ${COMP$13} component.`,
      availableValues: alignmentOptionMd,
      type: "string",
      defaultValue: defaultProps$g.contentPosition
    },
    contextualLabel: {
      description: `This optional value is used to provide an accessible name for the ${COMP$13} in the context of its usage.`,
      type: "string"
    }
  },
  events: {
    click: dClick(COMP$13),
    gotFocus: dGotFocus(COMP$13),
    lostFocus: dLostFocus(COMP$13)
  },
  themeVars: parseScssVar(styles$O.themeVars),
  defaultThemeVars: {
    [`width-${COMP$13}`]: "fit-content",
    [`height-${COMP$13}`]: "fit-content",
    [`borderRadius-${COMP$13}`]: "$borderRadius",
    [`fontSize-${COMP$13}`]: "$fontSize-small",
    [`fontWeight-${COMP$13}`]: "$fontWeight-medium",
    [`backgroundColor-${COMP$13}-primary`]: "$color-primary-500",
    [`backgroundColor-${COMP$13}-attention`]: "$backgroundColor-attention",
    [`borderColor-${COMP$13}-attention`]: "$color-attention",
    [`backgroundColor-${COMP$13}--disabled`]: "$backgroundColor--disabled",
    [`borderColor-${COMP$13}--disabled`]: "$borderColor--disabled",
    [`borderStyle-${COMP$13}`]: "solid",
    [`textColor-${COMP$13}--disabled`]: "$textColor--disabled",
    [`outlineColor-${COMP$13}--focus`]: "$outlineColor--focus",
    [`borderWidth-${COMP$13}`]: "1px",
    [`outlineWidth-${COMP$13}--focus`]: "$outlineWidth--focus",
    [`outlineStyle-${COMP$13}--focus`]: "$outlineStyle--focus",
    [`outlineOffset-${COMP$13}--focus`]: "$outlineOffset--focus",
    [`paddingHorizontal-${COMP$13}-xs`]: "$space-1",
    [`paddingVertical-${COMP$13}-xs`]: "$space-0_5",
    [`paddingHorizontal-${COMP$13}-sm`]: "$space-4",
    [`paddingVertical-${COMP$13}-sm`]: "$space-2",
    [`paddingHorizontal-${COMP$13}-md`]: "$space-4",
    [`paddingVertical-${COMP$13}-md`]: "$space-3",
    [`paddingHorizontal-${COMP$13}-lg`]: "$space-5",
    [`paddingVertical-${COMP$13}-lg`]: "$space-4",
    [`textColor-${COMP$13}`]: "$color-surface-950",
    [`textColor-${COMP$13}-solid`]: "$const-color-surface-50",
    [`borderColor-${COMP$13}-primary`]: "$color-primary-500",
    [`backgroundColor-${COMP$13}-primary--hover`]: "$color-primary-400",
    [`backgroundColor-${COMP$13}-primary--active`]: "$color-primary-500",
    [`backgroundColor-${COMP$13}-primary-outlined--hover`]: "$color-primary-50",
    [`backgroundColor-${COMP$13}-primary-outlined--active`]: "$color-primary-100",
    [`borderColor-${COMP$13}-primary-outlined`]: "$color-primary-600",
    [`borderColor-${COMP$13}-primary-outlined--hover`]: "$color-primary-500",
    [`textColor-${COMP$13}-primary-outlined`]: "$color-primary-900",
    [`textColor-${COMP$13}-primary-outlined--hover`]: "$color-primary-950",
    [`textColor-${COMP$13}-primary-outlined--active`]: "$color-primary-900",
    [`backgroundColor-${COMP$13}-primary-ghost--hover`]: "$color-primary-50",
    [`backgroundColor-${COMP$13}-primary-ghost--active`]: "$color-primary-100",
    [`borderColor-${COMP$13}-secondary`]: "$color-secondary-100",
    [`backgroundColor-${COMP$13}-secondary`]: "$color-secondary-500",
    [`backgroundColor-${COMP$13}-secondary--hover`]: "$color-secondary-400",
    [`backgroundColor-${COMP$13}-secondary--active`]: "$color-secondary-500",
    [`backgroundColor-${COMP$13}-secondary-outlined--hover`]: "$color-secondary-50",
    [`backgroundColor-${COMP$13}-secondary-outlined--active`]: "$color-secondary-100",
    [`backgroundColor-${COMP$13}-secondary-ghost--hover`]: "$color-secondary-100",
    [`backgroundColor-${COMP$13}-secondary-ghost--active`]: "$color-secondary-100",
    [`backgroundColor-${COMP$13}-attention--hover`]: "$color-danger-400",
    [`backgroundColor-${COMP$13}-attention--active`]: "$color-danger-500",
    [`backgroundColor-${COMP$13}-attention-outlined--hover`]: "$color-danger-50",
    [`backgroundColor-${COMP$13}-attention-outlined--active`]: "$color-danger-100",
    [`backgroundColor-${COMP$13}-attention-ghost--hover`]: "$color-danger-50",
    [`backgroundColor-${COMP$13}-attention-ghost--active`]: "$color-danger-100"
  }
});
const themeVars$K = '"[]"';
const base$1 = "_base_724s4_13";
const hoverContainer = "_hoverContainer_724s4_22";
const handlesClick = "_handlesClick_724s4_35";
const vertical$3 = "_vertical_724s4_39";
const reverse = "_reverse_724s4_43";
const horizontal$3 = "_horizontal_724s4_47";
const justifyItemsStart = "_justifyItemsStart_724s4_55";
const justifyItemsCenter = "_justifyItemsCenter_724s4_59";
const justifyItemsStretch = "_justifyItemsStretch_724s4_63";
const justifyItemsEnd = "_justifyItemsEnd_724s4_67";
const alignItemsStart = "_alignItemsStart_724s4_72";
const alignItemsCenter = "_alignItemsCenter_724s4_76";
const alignItemsStretch = "_alignItemsStretch_724s4_80";
const alignItemsEnd = "_alignItemsEnd_724s4_84";
const alignItemsBaseline = "_alignItemsBaseline_724s4_88";
const styles$M = {
  themeVars: themeVars$K,
  base: base$1,
  hoverContainer,
  handlesClick,
  vertical: vertical$3,
  reverse,
  horizontal: horizontal$3,
  justifyItemsStart,
  justifyItemsCenter,
  justifyItemsStretch,
  justifyItemsEnd,
  alignItemsStart,
  alignItemsCenter,
  alignItemsStretch,
  alignItemsEnd,
  alignItemsBaseline
};
function useContentAlignment(orientation, horizontal2, vertical2) {
  return useMemo(() => {
    return orientation === "horizontal" ? {
      horizontal: horizontal2 && styles$M[`justifyItems${capitalizeFirstLetter(horizontal2)}`],
      vertical: vertical2 && styles$M[`alignItems${capitalizeFirstLetter(vertical2)}`]
    } : {
      horizontal: horizontal2 && styles$M[`alignItems${capitalizeFirstLetter(horizontal2)}`],
      vertical: vertical2 && styles$M[`justifyItems${capitalizeFirstLetter(vertical2)}`]
    };
  }, [orientation, horizontal2, vertical2]);
}
const DEFAULT_ORIENTATION = "vertical";
const Stack = forwardRef(function Stack2({
  uid,
  children,
  orientation = DEFAULT_ORIENTATION,
  horizontalAlignment,
  verticalAlignment,
  style,
  reverse: reverse2,
  hoverContainer: hoverContainer2,
  visibleOnHover,
  onClick,
  onMount,
  ...rest
}, ref) {
  useOnMount(onMount);
  const { horizontal: horizontal2, vertical: vertical2 } = useContentAlignment(
    orientation,
    horizontalAlignment,
    verticalAlignment
  );
  return /* @__PURE__ */ jsx(
    "div",
    {
      ...rest,
      onClick,
      ref,
      style,
      className: classnames(
        styles$M.base,
        {
          [styles$M.vertical]: orientation === "vertical",
          [styles$M.horizontal]: orientation === "horizontal",
          [styles$M.reverse]: reverse2,
          [styles$M.hoverContainer]: hoverContainer2,
          "display-on-hover": visibleOnHover,
          [styles$M.handlesClick]: !!onClick
        },
        horizontal2 ?? "",
        vertical2 ?? ""
      ),
      children
    }
  );
});
const COMP$12 = "Stack";
const HORIZONTAL_ALIGNMENT = {
  description: "Manages the horizontal content alignment for each child element in the Stack.",
  availableValues: alignmentOptionValues,
  valueType: "string",
  defaultValue: "start"
};
const VERTICAL_ALIGNMENT = {
  description: "Manages the vertical content alignment for each child element in the Stack.",
  availableValues: alignmentOptionValues,
  valueType: "string",
  defaultValue: "start"
};
const stackMd = createMetadata({
  description: `\`Stack\` is a layout container displaying children in a horizontal or vertical stack.`,
  props: {
    gap: {
      description: "Optional size value indicating the gap between child elements.",
      valueType: "string",
      defaultValue: "$gap-normal"
    },
    reverse: {
      description: "Optional boolean property to reverse the order of child elements.",
      valueType: "boolean",
      defaultValue: false
    },
    wrapContent: {
      description: "Optional boolean which wraps the content if set to true and the available space is not big enough. Works only with horizontal orientations.",
      valueType: "boolean",
      defaultValue: false
    },
    orientation: {
      description: "An optional property that governs the Stack's orientation (whether the Stack lays out its children in a row or a column).",
      availableValues: ["horizontal", "vertical"],
      valueType: "string",
      defaultValue: DEFAULT_ORIENTATION
    },
    horizontalAlignment: HORIZONTAL_ALIGNMENT,
    verticalAlignment: VERTICAL_ALIGNMENT,
    hoverContainer: dInternal("Reserved for future use"),
    visibleOnHover: dInternal("Reserved for future use")
  },
  events: {
    click: dClick(COMP$12),
    mounted: dInternal("Reserved for future use")
  },
  themeVars: parseScssVar(styles$M.themeVars)
});
const StackMd = {
  ...stackMd,
  props: {
    ...stackMd.props
  }
};
const VStackMd = {
  ...StackMd,
  specializedFrom: COMP$12,
  description: `This component represents a stack rendering its contents vertically.`,
  props: {
    ...stackMd.props
  }
};
const HStackMd = {
  ...StackMd,
  specializedFrom: COMP$12,
  description: `This component represents a stack rendering its contents horizontally.`,
  props: {
    ...stackMd.props
  }
};
const CVStackMd = {
  ...StackMd,
  specializedFrom: COMP$12,
  description: `This component represents a stack that renders its contents vertically and aligns that in the center along both axes.`
};
const CHStackMd = {
  ...StackMd,
  specializedFrom: COMP$12,
  description: `This component represents a stack that renders its contents horizontally and aligns that in the center along both axes.`
};
const themeVars$J = `'{"Input:gap-adornment-TextBox": "var(--xmlui-gap-adornment-TextBox)", "Input:borderRadius-TextBox-default": "var(--xmlui-borderRadius-TextBox-default)", "Input:borderColor-TextBox-default": "var(--xmlui-borderColor-TextBox-default)", "Input:borderWidth-TextBox-default": "var(--xmlui-borderWidth-TextBox-default)", "Input:borderStyle-TextBox-default": "var(--xmlui-borderStyle-TextBox-default)", "Input:fontSize-TextBox-default": "var(--xmlui-fontSize-TextBox-default)", "Input:padding-TextBox-default": "var(--xmlui-padding-TextBox-default)", "Input:backgroundColor-TextBox-default": "var(--xmlui-backgroundColor-TextBox-default)", "Input:boxShadow-TextBox-default": "var(--xmlui-boxShadow-TextBox-default)", "Input:textColor-TextBox-default": "var(--xmlui-textColor-TextBox-default)", "Input:borderColor-TextBox-default--hover": "var(--xmlui-borderColor-TextBox-default--hover)", "Input:backgroundColor-TextBox-default--hover": "var(--xmlui-backgroundColor-TextBox-default--hover)", "Input:boxShadow-TextBox-default--hover": "var(--xmlui-boxShadow-TextBox-default--hover)", "Input:textColor-TextBox-default--hover": "var(--xmlui-textColor-TextBox-default--hover)", "Input:borderColor-TextBox-default--focus": "var(--xmlui-borderColor-TextBox-default--focus)", "Input:backgroundColor-TextBox-default--focus": "var(--xmlui-backgroundColor-TextBox-default--focus)", "Input:boxShadow-TextBox-default--focus": "var(--xmlui-boxShadow-TextBox-default--focus)", "Input:textColor-TextBox-default--focus": "var(--xmlui-textColor-TextBox-default--focus)", "Input:outlineWidth-TextBox-default--focus": "var(--xmlui-outlineWidth-TextBox-default--focus)", "Input:outlineColor-TextBox-default--focus": "var(--xmlui-outlineColor-TextBox-default--focus)", "Input:outlineStyle-TextBox-default--focus": "var(--xmlui-outlineStyle-TextBox-default--focus)", "Input:outlineOffset-TextBox-default--focus": "var(--xmlui-outlineOffset-TextBox-default--focus)", "Input:color-placeholder-TextBox-default": "var(--xmlui-color-placeholder-TextBox-default)", "Input:color-adornment-TextBox-default": "var(--xmlui-color-adornment-TextBox-default)", "Input:borderRadius-TextBox-error": "var(--xmlui-borderRadius-TextBox-error)", "Input:borderColor-TextBox-error": "var(--xmlui-borderColor-TextBox-error)", "Input:borderWidth-TextBox-error": "var(--xmlui-borderWidth-TextBox-error)", "Input:borderStyle-TextBox-error": "var(--xmlui-borderStyle-TextBox-error)", "Input:fontSize-TextBox-error": "var(--xmlui-fontSize-TextBox-error)", "Input:padding-TextBox-error": "var(--xmlui-padding-TextBox-error)", "Input:backgroundColor-TextBox-error": "var(--xmlui-backgroundColor-TextBox-error)", "Input:boxShadow-TextBox-error": "var(--xmlui-boxShadow-TextBox-error)", "Input:textColor-TextBox-error": "var(--xmlui-textColor-TextBox-error)", "Input:borderColor-TextBox-error--hover": "var(--xmlui-borderColor-TextBox-error--hover)", "Input:backgroundColor-TextBox-error--hover": "var(--xmlui-backgroundColor-TextBox-error--hover)", "Input:boxShadow-TextBox-error--hover": "var(--xmlui-boxShadow-TextBox-error--hover)", "Input:textColor-TextBox-error--hover": "var(--xmlui-textColor-TextBox-error--hover)", "Input:borderColor-TextBox-error--focus": "var(--xmlui-borderColor-TextBox-error--focus)", "Input:backgroundColor-TextBox-error--focus": "var(--xmlui-backgroundColor-TextBox-error--focus)", "Input:boxShadow-TextBox-error--focus": "var(--xmlui-boxShadow-TextBox-error--focus)", "Input:textColor-TextBox-error--focus": "var(--xmlui-textColor-TextBox-error--focus)", "Input:outlineWidth-TextBox-error--focus": "var(--xmlui-outlineWidth-TextBox-error--focus)", "Input:outlineColor-TextBox-error--focus": "var(--xmlui-outlineColor-TextBox-error--focus)", "Input:outlineStyle-TextBox-error--focus": "var(--xmlui-outlineStyle-TextBox-error--focus)", "Input:outlineOffset-TextBox-error--focus": "var(--xmlui-outlineOffset-TextBox-error--focus)", "Input:color-placeholder-TextBox-error": "var(--xmlui-color-placeholder-TextBox-error)", "Input:color-adornment-TextBox-error": "var(--xmlui-color-adornment-TextBox-error)", "Input:borderRadius-TextBox-warning": "var(--xmlui-borderRadius-TextBox-warning)", "Input:borderColor-TextBox-warning": "var(--xmlui-borderColor-TextBox-warning)", "Input:borderWidth-TextBox-warning": "var(--xmlui-borderWidth-TextBox-warning)", "Input:borderStyle-TextBox-warning": "var(--xmlui-borderStyle-TextBox-warning)", "Input:fontSize-TextBox-warning": "var(--xmlui-fontSize-TextBox-warning)", "Input:padding-TextBox-warning": "var(--xmlui-padding-TextBox-warning)", "Input:backgroundColor-TextBox-warning": "var(--xmlui-backgroundColor-TextBox-warning)", "Input:boxShadow-TextBox-warning": "var(--xmlui-boxShadow-TextBox-warning)", "Input:textColor-TextBox-warning": "var(--xmlui-textColor-TextBox-warning)", "Input:borderColor-TextBox-warning--hover": "var(--xmlui-borderColor-TextBox-warning--hover)", "Input:backgroundColor-TextBox-warning--hover": "var(--xmlui-backgroundColor-TextBox-warning--hover)", "Input:boxShadow-TextBox-warning--hover": "var(--xmlui-boxShadow-TextBox-warning--hover)", "Input:textColor-TextBox-warning--hover": "var(--xmlui-textColor-TextBox-warning--hover)", "Input:borderColor-TextBox-warning--focus": "var(--xmlui-borderColor-TextBox-warning--focus)", "Input:backgroundColor-TextBox-warning--focus": "var(--xmlui-backgroundColor-TextBox-warning--focus)", "Input:boxShadow-TextBox-warning--focus": "var(--xmlui-boxShadow-TextBox-warning--focus)", "Input:textColor-TextBox-warning--focus": "var(--xmlui-textColor-TextBox-warning--focus)", "Input:outlineWidth-TextBox-warning--focus": "var(--xmlui-outlineWidth-TextBox-warning--focus)", "Input:outlineColor-TextBox-warning--focus": "var(--xmlui-outlineColor-TextBox-warning--focus)", "Input:outlineStyle-TextBox-warning--focus": "var(--xmlui-outlineStyle-TextBox-warning--focus)", "Input:outlineOffset-TextBox-warning--focus": "var(--xmlui-outlineOffset-TextBox-warning--focus)", "Input:color-placeholder-TextBox-warning": "var(--xmlui-color-placeholder-TextBox-warning)", "Input:color-adornment-TextBox-warning": "var(--xmlui-color-adornment-TextBox-warning)", "Input:borderRadius-TextBox-success": "var(--xmlui-borderRadius-TextBox-success)", "Input:borderColor-TextBox-success": "var(--xmlui-borderColor-TextBox-success)", "Input:borderWidth-TextBox-success": "var(--xmlui-borderWidth-TextBox-success)", "Input:borderStyle-TextBox-success": "var(--xmlui-borderStyle-TextBox-success)", "Input:fontSize-TextBox-success": "var(--xmlui-fontSize-TextBox-success)", "Input:padding-TextBox-success": "var(--xmlui-padding-TextBox-success)", "Input:backgroundColor-TextBox-success": "var(--xmlui-backgroundColor-TextBox-success)", "Input:boxShadow-TextBox-success": "var(--xmlui-boxShadow-TextBox-success)", "Input:textColor-TextBox-success": "var(--xmlui-textColor-TextBox-success)", "Input:borderColor-TextBox-success--hover": "var(--xmlui-borderColor-TextBox-success--hover)", "Input:backgroundColor-TextBox-success--hover": "var(--xmlui-backgroundColor-TextBox-success--hover)", "Input:boxShadow-TextBox-success--hover": "var(--xmlui-boxShadow-TextBox-success--hover)", "Input:textColor-TextBox-success--hover": "var(--xmlui-textColor-TextBox-success--hover)", "Input:borderColor-TextBox-success--focus": "var(--xmlui-borderColor-TextBox-success--focus)", "Input:backgroundColor-TextBox-success--focus": "var(--xmlui-backgroundColor-TextBox-success--focus)", "Input:boxShadow-TextBox-success--focus": "var(--xmlui-boxShadow-TextBox-success--focus)", "Input:textColor-TextBox-success--focus": "var(--xmlui-textColor-TextBox-success--focus)", "Input:outlineWidth-TextBox-success--focus": "var(--xmlui-outlineWidth-TextBox-success--focus)", "Input:outlineColor-TextBox-success--focus": "var(--xmlui-outlineColor-TextBox-success--focus)", "Input:outlineStyle-TextBox-success--focus": "var(--xmlui-outlineStyle-TextBox-success--focus)", "Input:outlineOffset-TextBox-success--focus": "var(--xmlui-outlineOffset-TextBox-success--focus)", "Input:color-placeholder-TextBox-success": "var(--xmlui-color-placeholder-TextBox-success)", "Input:color-adornment-TextBox-success": "var(--xmlui-color-adornment-TextBox-success)", "Input:backgroundColor-TextBox--disabled": "var(--xmlui-backgroundColor-TextBox--disabled)", "Input:textColor-TextBox--disabled": "var(--xmlui-textColor-TextBox--disabled)", "Input:borderColor-TextBox--disabled": "var(--xmlui-borderColor-TextBox--disabled)"}'`;
const inputRoot$1 = "_inputRoot_qxt8y_13";
const input$1 = "_input_qxt8y_13";
const adornment$2 = "_adornment_qxt8y_53";
const error$b = "_error_qxt8y_56";
const warning$b = "_warning_qxt8y_91";
const valid$b = "_valid_qxt8y_126";
const readOnly$2 = "_readOnly_qxt8y_181";
const styles$L = {
  themeVars: themeVars$J,
  inputRoot: inputRoot$1,
  input: input$1,
  adornment: adornment$2,
  error: error$b,
  warning: warning$b,
  valid: valid$b,
  readOnly: readOnly$2
};
const wrapper$5 = "_wrapper_wg0td_13";
const styles$K = {
  wrapper: wrapper$5
};
const themeVars$I = `'{"marginTop-Text-default": "var(--xmlui-marginTop-Text-default)", "marginBottom-Text-default": "var(--xmlui-marginBottom-Text-default)", "marginLeft-Text-default": "var(--xmlui-marginLeft-Text-default)", "marginRight-Text-default": "var(--xmlui-marginRight-Text-default)", "verticalAlign-Text-default": "var(--xmlui-verticalAlign-Text-default)", "marginTop-Text-markdown": "var(--xmlui-marginTop-Text-markdown)", "marginBottom-Text-markdown": "var(--xmlui-marginBottom-Text-markdown)", "marginLeft-Text-markdown": "var(--xmlui-marginLeft-Text-markdown)", "marginRight-Text-markdown": "var(--xmlui-marginRight-Text-markdown)", "verticalAlign-Text-markdown": "var(--xmlui-verticalAlign-Text-markdown)", "marginTop-Text-abbr": "var(--xmlui-marginTop-Text-abbr)", "marginBottom-Text-abbr": "var(--xmlui-marginBottom-Text-abbr)", "marginLeft-Text-abbr": "var(--xmlui-marginLeft-Text-abbr)", "marginRight-Text-abbr": "var(--xmlui-marginRight-Text-abbr)", "verticalAlign-Text-abbr": "var(--xmlui-verticalAlign-Text-abbr)", "marginTop-Text-cite": "var(--xmlui-marginTop-Text-cite)", "marginBottom-Text-cite": "var(--xmlui-marginBottom-Text-cite)", "marginLeft-Text-cite": "var(--xmlui-marginLeft-Text-cite)", "marginRight-Text-cite": "var(--xmlui-marginRight-Text-cite)", "verticalAlign-Text-cite": "var(--xmlui-verticalAlign-Text-cite)", "marginTop-Text-codefence": "var(--xmlui-marginTop-Text-codefence)", "marginBottom-Text-codefence": "var(--xmlui-marginBottom-Text-codefence)", "marginTop-Text-code": "var(--xmlui-marginTop-Text-code)", "marginBottom-Text-code": "var(--xmlui-marginBottom-Text-code)", "marginLeft-Text-code": "var(--xmlui-marginLeft-Text-code)", "marginRight-Text-code": "var(--xmlui-marginRight-Text-code)", "verticalAlign-Text-code": "var(--xmlui-verticalAlign-Text-code)", "marginLeft-Text-codefence": "var(--xmlui-marginLeft-Text-codefence)", "marginRight-Text-codefence": "var(--xmlui-marginRight-Text-codefence)", "verticalAlign-Text-codefence": "var(--xmlui-verticalAlign-Text-codefence)", "marginTop-Text-deleted": "var(--xmlui-marginTop-Text-deleted)", "marginBottom-Text-deleted": "var(--xmlui-marginBottom-Text-deleted)", "marginLeft-Text-deleted": "var(--xmlui-marginLeft-Text-deleted)", "marginRight-Text-deleted": "var(--xmlui-marginRight-Text-deleted)", "verticalAlign-Text-deleted": "var(--xmlui-verticalAlign-Text-deleted)", "marginTop-Text-inserted": "var(--xmlui-marginTop-Text-inserted)", "marginBottom-Text-inserted": "var(--xmlui-marginBottom-Text-inserted)", "marginLeft-Text-inserted": "var(--xmlui-marginLeft-Text-inserted)", "marginRight-Text-inserted": "var(--xmlui-marginRight-Text-inserted)", "verticalAlign-Text-inserted": "var(--xmlui-verticalAlign-Text-inserted)", "marginTop-Text-keyboard": "var(--xmlui-marginTop-Text-keyboard)", "marginBottom-Text-keyboard": "var(--xmlui-marginBottom-Text-keyboard)", "marginLeft-Text-keyboard": "var(--xmlui-marginLeft-Text-keyboard)", "marginRight-Text-keyboard": "var(--xmlui-marginRight-Text-keyboard)", "verticalAlign-Text-keyboard": "var(--xmlui-verticalAlign-Text-keyboard)", "marginTop-Text-marked": "var(--xmlui-marginTop-Text-marked)", "marginBottom-Text-marked": "var(--xmlui-marginBottom-Text-marked)", "marginLeft-Text-marked": "var(--xmlui-marginLeft-Text-marked)", "marginRight-Text-marked": "var(--xmlui-marginRight-Text-marked)", "verticalAlign-Text-marked": "var(--xmlui-verticalAlign-Text-marked)", "marginTop-Text-mono": "var(--xmlui-marginTop-Text-mono)", "marginBottom-Text-mono": "var(--xmlui-marginBottom-Text-mono)", "marginLeft-Text-mono": "var(--xmlui-marginLeft-Text-mono)", "marginRight-Text-mono": "var(--xmlui-marginRight-Text-mono)", "verticalAlign-Text-mono": "var(--xmlui-verticalAlign-Text-mono)", "marginTop-Text-sample": "var(--xmlui-marginTop-Text-sample)", "marginBottom-Text-sample": "var(--xmlui-marginBottom-Text-sample)", "marginLeft-Text-sample": "var(--xmlui-marginLeft-Text-sample)", "marginRight-Text-sample": "var(--xmlui-marginRight-Text-sample)", "verticalAlign-Text-sample": "var(--xmlui-verticalAlign-Text-sample)", "marginTop-Text-sup": "var(--xmlui-marginTop-Text-sup)", "marginBottom-Text-sup": "var(--xmlui-marginBottom-Text-sup)", "marginLeft-Text-sup": "var(--xmlui-marginLeft-Text-sup)", "marginRight-Text-sup": "var(--xmlui-marginRight-Text-sup)", "verticalAlign-Text-sup": "var(--xmlui-verticalAlign-Text-sup)", "marginTop-Text-sub": "var(--xmlui-marginTop-Text-sub)", "marginBottom-Text-sub": "var(--xmlui-marginBottom-Text-sub)", "marginLeft-Text-sub": "var(--xmlui-marginLeft-Text-sub)", "marginRight-Text-sub": "var(--xmlui-marginRight-Text-sub)", "verticalAlign-Text-sub": "var(--xmlui-verticalAlign-Text-sub)", "marginTop-Text-var": "var(--xmlui-marginTop-Text-var)", "marginBottom-Text-var": "var(--xmlui-marginBottom-Text-var)", "marginLeft-Text-var": "var(--xmlui-marginLeft-Text-var)", "marginRight-Text-var": "var(--xmlui-marginRight-Text-var)", "verticalAlign-Text-var": "var(--xmlui-verticalAlign-Text-var)", "marginTop-Text-title": "var(--xmlui-marginTop-Text-title)", "marginBottom-Text-title": "var(--xmlui-marginBottom-Text-title)", "marginLeft-Text-title": "var(--xmlui-marginLeft-Text-title)", "marginRight-Text-title": "var(--xmlui-marginRight-Text-title)", "verticalAlign-Text-title": "var(--xmlui-verticalAlign-Text-title)", "marginTop-Text-subtitle": "var(--xmlui-marginTop-Text-subtitle)", "marginBottom-Text-subtitle": "var(--xmlui-marginBottom-Text-subtitle)", "marginLeft-Text-subtitle": "var(--xmlui-marginLeft-Text-subtitle)", "marginRight-Text-subtitle": "var(--xmlui-marginRight-Text-subtitle)", "verticalAlign-Text-subtitle": "var(--xmlui-verticalAlign-Text-subtitle)", "marginTop-Text-small": "var(--xmlui-marginTop-Text-small)", "marginBottom-Text-small": "var(--xmlui-marginBottom-Text-small)", "marginLeft-Text-small": "var(--xmlui-marginLeft-Text-small)", "marginRight-Text-small": "var(--xmlui-marginRight-Text-small)", "verticalAlign-Text-small": "var(--xmlui-verticalAlign-Text-small)", "marginTop-Text-caption": "var(--xmlui-marginTop-Text-caption)", "marginBottom-Text-caption": "var(--xmlui-marginBottom-Text-caption)", "marginLeft-Text-caption": "var(--xmlui-marginLeft-Text-caption)", "marginRight-Text-caption": "var(--xmlui-marginRight-Text-caption)", "verticalAlign-Text-caption": "var(--xmlui-verticalAlign-Text-caption)", "marginTop-Text-placeholder": "var(--xmlui-marginTop-Text-placeholder)", "marginBottom-Text-placeholder": "var(--xmlui-marginBottom-Text-placeholder)", "marginLeft-Text-placeholder": "var(--xmlui-marginLeft-Text-placeholder)", "marginRight-Text-placeholder": "var(--xmlui-marginRight-Text-placeholder)", "verticalAlign-Text-placeholder": "var(--xmlui-verticalAlign-Text-placeholder)", "marginTop-Text-paragraph": "var(--xmlui-marginTop-Text-paragraph)", "marginBottom-Text-paragraph": "var(--xmlui-marginBottom-Text-paragraph)", "marginLeft-Text-paragraph": "var(--xmlui-marginLeft-Text-paragraph)", "marginRight-Text-paragraph": "var(--xmlui-marginRight-Text-paragraph)", "verticalAlign-Text-paragraph": "var(--xmlui-verticalAlign-Text-paragraph)", "marginTop-Text-subheading": "var(--xmlui-marginTop-Text-subheading)", "marginBottom-Text-subheading": "var(--xmlui-marginBottom-Text-subheading)", "marginLeft-Text-subheading": "var(--xmlui-marginLeft-Text-subheading)", "marginRight-Text-subheading": "var(--xmlui-marginRight-Text-subheading)", "verticalAlign-Text-subheading": "var(--xmlui-verticalAlign-Text-subheading)", "marginTop-Text-tableheading": "var(--xmlui-marginTop-Text-tableheading)", "marginBottom-Text-tableheading": "var(--xmlui-marginBottom-Text-tableheading)", "marginLeft-Text-tableheading": "var(--xmlui-marginLeft-Text-tableheading)", "marginRight-Text-tableheading": "var(--xmlui-marginRight-Text-tableheading)", "verticalAlign-Text-tableheading": "var(--xmlui-verticalAlign-Text-tableheading)", "marginTop-Text-secondary": "var(--xmlui-marginTop-Text-secondary)", "marginBottom-Text-secondary": "var(--xmlui-marginBottom-Text-secondary)", "marginLeft-Text-secondary": "var(--xmlui-marginLeft-Text-secondary)", "marginRight-Text-secondary": "var(--xmlui-marginRight-Text-secondary)", "verticalAlign-Text-secondary": "var(--xmlui-verticalAlign-Text-secondary)"}'`;
const text = "_text_xzkxl_13";
const markdown = "_markdown_xzkxl_75";
const abbr = "_abbr_xzkxl_132";
const cite = "_cite_xzkxl_189";
const codefence = "_codefence_xzkxl_246";
const code = "_code_xzkxl_246";
const textcode = "_textcode_xzkxl_251";
const deleted = "_deleted_xzkxl_400";
const inserted = "_inserted_xzkxl_472";
const keyboard = "_keyboard_xzkxl_544";
const marked = "_marked_xzkxl_601";
const mono = "_mono_xzkxl_673";
const sample = "_sample_xzkxl_730";
const sup = "_sup_xzkxl_787";
const sub = "_sub_xzkxl_844";
const title = "_title_xzkxl_958";
const subtitle = "_subtitle_xzkxl_1015";
const small = "_small_xzkxl_1072";
const caption$1 = "_caption_xzkxl_1129";
const placeholder$2 = "_placeholder_xzkxl_1186";
const paragraph = "_paragraph_xzkxl_1243";
const subheading = "_subheading_xzkxl_1300";
const tableheading = "_tableheading_xzkxl_1357";
const secondary = "_secondary_xzkxl_1414";
const strong = "_strong_xzkxl_1471";
const truncateOverflow$1 = "_truncateOverflow_xzkxl_1479";
const preserveLinebreaks$1 = "_preserveLinebreaks_xzkxl_1486";
const noEllipsis$1 = "_noEllipsis_xzkxl_1490";
const styles$J = {
  themeVars: themeVars$I,
  text,
  markdown,
  abbr,
  cite,
  codefence,
  code,
  textcode,
  deleted,
  inserted,
  keyboard,
  marked,
  mono,
  sample,
  sup,
  sub,
  "var": "_var_xzkxl_901",
  title,
  subtitle,
  small,
  caption: caption$1,
  placeholder: placeholder$2,
  paragraph,
  subheading,
  tableheading,
  secondary,
  strong,
  truncateOverflow: truncateOverflow$1,
  preserveLinebreaks: preserveLinebreaks$1,
  noEllipsis: noEllipsis$1
};
function normalizeCssValueForCalc(cssValue) {
  if (typeof cssValue === "number") return cssValue + "px";
  const cssTrimmed = cssValue.trim();
  if (cssTrimmed.startsWith("var(")) {
    return cssTrimmed;
  }
  const value = parseFloat(cssTrimmed);
  const valueStr = value.toString();
  const unit = cssTrimmed.replace(valueStr, "");
  if (Number.isNaN(value)) return "0px";
  if (unit === "") return valueStr + "px";
  return cssTrimmed;
}
function getMaxLinesStyle(maxLines) {
  const _maxLines = maxLines && maxLines > 0 ? maxLines : 0;
  const maxLinesStyles = _maxLines > 1 ? {
    WebkitLineClamp: _maxLines,
    lineClamp: _maxLines,
    display: "-webkit-box",
    WebkitBoxOrient: "vertical",
    boxOrient: "vertical",
    whiteSpace: "initial"
  } : EMPTY_OBJECT;
  return maxLinesStyles;
}
function getSizeString(size) {
  if (typeof size === "number") {
    return size + "px";
  }
  if (typeof size === "string" && /^\d+$/.test(size.trim())) {
    const rowGapValue = parseInt(size, 10);
    if (!isNaN(rowGapValue)) {
      return rowGapValue + "px";
    }
  }
  return size == null ? void 0 : size.toString();
}
const Text = forwardRef(function Text2({
  uid,
  variant,
  maxLines = 0,
  style,
  children,
  preserveLinebreaks: preserveLinebreaks2,
  ellipses = true,
  ...variantSpecificProps
}, forwardedRef) {
  const innerRef = useRef(null);
  const ref = forwardedRef ? composeRefs(innerRef, forwardedRef) : innerRef;
  const { syntaxHighlightClasses, ...restVariantSpecificProps } = variantSpecificProps;
  const Element2 = useMemo(() => {
    if (!variant || !TextVariantElement[variant]) return "div";
    return TextVariantElement[variant];
  }, [variant]);
  return /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsx(
    Element2,
    {
      ...restVariantSpecificProps,
      ref,
      className: classnames([
        syntaxHighlightClasses,
        styles$J.text,
        styles$J[variant || "default"],
        {
          [styles$J.truncateOverflow]: maxLines > 0,
          [styles$J.preserveLinebreaks]: preserveLinebreaks2,
          [styles$J.noEllipsis]: !ellipses
        }
      ]),
      style: {
        ...style,
        ...getMaxLinesStyle(maxLines)
      },
      children
    }
  ) });
});
function Adornment({ iconName, text: text2, className }) {
  return /* @__PURE__ */ jsx(Fragment, { children: iconName || text2 ? /* @__PURE__ */ jsxs("div", { className: classnames(styles$K.wrapper, className), children: [
    /* @__PURE__ */ jsx(Icon, { name: iconName, style: { color: "inherit" } }),
    text2 && /* @__PURE__ */ jsx("div", { style: { display: "flex", userSelect: "none" }, children: /* @__PURE__ */ jsx(Text, { style: { fontSize: "inherit" }, children: text2 }) })
  ] }) : null });
}
// @__NO_SIDE_EFFECTS__
function createSlot(ownerName) {
  const SlotClone = /* @__PURE__ */ createSlotClone(ownerName);
  const Slot2 = React.forwardRef((props, forwardedRef) => {
    const { children, ...slotProps } = props;
    const childrenArray = React.Children.toArray(children);
    const slottable = childrenArray.find(isSlottable);
    if (slottable) {
      const newElement = slottable.props.children;
      const newChildren = childrenArray.map((child) => {
        if (child === slottable) {
          if (React.Children.count(newElement) > 1) return React.Children.only(null);
          return React.isValidElement(newElement) ? newElement.props.children : null;
        } else {
          return child;
        }
      });
      return /* @__PURE__ */ jsx(SlotClone, { ...slotProps, ref: forwardedRef, children: React.isValidElement(newElement) ? React.cloneElement(newElement, void 0, newChildren) : null });
    }
    return /* @__PURE__ */ jsx(SlotClone, { ...slotProps, ref: forwardedRef, children });
  });
  Slot2.displayName = `${ownerName}.Slot`;
  return Slot2;
}
var Slot = /* @__PURE__ */ createSlot("Slot");
// @__NO_SIDE_EFFECTS__
function createSlotClone(ownerName) {
  const SlotClone = React.forwardRef((props, forwardedRef) => {
    const { children, ...slotProps } = props;
    if (React.isValidElement(children)) {
      const childrenRef = getElementRef(children);
      const props2 = mergeProps$1(slotProps, children.props);
      if (children.type !== React.Fragment) {
        props2.ref = forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef;
      }
      return React.cloneElement(children, props2);
    }
    return React.Children.count(children) > 1 ? React.Children.only(null) : null;
  });
  SlotClone.displayName = `${ownerName}.SlotClone`;
  return SlotClone;
}
var SLOTTABLE_IDENTIFIER = Symbol("radix.slottable");
function isSlottable(child) {
  return React.isValidElement(child) && typeof child.type === "function" && "__radixId" in child.type && child.type.__radixId === SLOTTABLE_IDENTIFIER;
}
function mergeProps$1(slotProps, childProps) {
  const overrideProps = { ...childProps };
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler) {
      if (slotPropValue && childPropValue) {
        overrideProps[propName] = (...args) => {
          childPropValue(...args);
          slotPropValue(...args);
        };
      } else if (slotPropValue) {
        overrideProps[propName] = slotPropValue;
      }
    } else if (propName === "style") {
      overrideProps[propName] = { ...slotPropValue, ...childPropValue };
    } else if (propName === "className") {
      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(" ");
    }
  }
  return { ...slotProps, ...overrideProps };
}
function getElementRef(element) {
  var _a, _b;
  let getter = (_a = Object.getOwnPropertyDescriptor(element.props, "ref")) == null ? void 0 : _a.get;
  let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  if (mayWarn) {
    return element.ref;
  }
  getter = (_b = Object.getOwnPropertyDescriptor(element, "ref")) == null ? void 0 : _b.get;
  mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  if (mayWarn) {
    return element.props.ref;
  }
  return element.props.ref || element.ref;
}
const themeVars$H = `'{"textColor-FormItemLabel": "var(--xmlui-textColor-FormItemLabel)", "fontFamily-FormItemLabel": "var(--xmlui-fontFamily-FormItemLabel)", "fontSize-FormItemLabel": "var(--xmlui-fontSize-FormItemLabel)", "fontWeight-FormItemLabel": "var(--xmlui-fontWeight-FormItemLabel)", "fontStyle-FormItemLabel": "var(--xmlui-fontStyle-FormItemLabel)", "textTransform-FormItemLabel": "var(--xmlui-textTransform-FormItemLabel)", "textColor-FormItemLabel-required": "var(--xmlui-textColor-FormItemLabel-required)", "fontSize-FormItemLabel-required": "var(--xmlui-fontSize-FormItemLabel-required)", "fontWeight-FormItemLabel-required": "var(--xmlui-fontWeight-FormItemLabel-required)", "fontStyle-FormItemLabel-required": "var(--xmlui-fontStyle-FormItemLabel-required)", "textTransform-FormItemLabel-required": "var(--xmlui-textTransform-FormItemLabel-required)", "textColor-FormItemLabel-requiredMark": "var(--xmlui-textColor-FormItemLabel-requiredMark)"}'`;
const container$3 = "_container_rshqv_13";
const top = "_top_rshqv_20";
const end = "_end_rshqv_25";
const bottom = "_bottom_rshqv_31";
const start = "_start_rshqv_36";
const shrinkToLabel = "_shrinkToLabel_rshqv_42";
const inputLabel = "_inputLabel_rshqv_45";
const disabled$8 = "_disabled_rshqv_58";
const labelBreak = "_labelBreak_rshqv_62";
const required = "_required_rshqv_66";
const requiredMark = "_requiredMark_rshqv_73";
const styles$I = {
  themeVars: themeVars$H,
  container: container$3,
  top,
  end,
  bottom,
  start,
  shrinkToLabel,
  inputLabel,
  disabled: disabled$8,
  labelBreak,
  required,
  requiredMark
};
const themeVars$G = `'{"size-Spinner": "var(--xmlui-size-Spinner)", "thickness-Spinner": "var(--xmlui-thickness-Spinner)", "borderColor-Spinner": "var(--xmlui-borderColor-Spinner)"}'`;
const fullScreenSpinnerWrapper = "_fullScreenSpinnerWrapper_xat8c_54";
const styles$H = {
  themeVars: themeVars$G,
  "lds-ring": "_lds-ring_xat8c_13",
  fullScreenSpinnerWrapper
};
const Spinner = forwardRef(function Spinner2({ delay = 400, fullScreen: fullScreen2 = false, style }, forwardedRef) {
  const [pastDelay, setPastDelay] = useState(delay === 0);
  useEffect(() => {
    const timeout = setTimeout(() => {
      setPastDelay(true);
    }, delay);
    return () => {
      clearTimeout(timeout);
    };
  }, [delay]);
  const spinner = /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsxs("div", { className: styles$H["lds-ring"], style, ref: forwardedRef, children: [
    /* @__PURE__ */ jsx("div", {}),
    /* @__PURE__ */ jsx("div", {}),
    /* @__PURE__ */ jsx("div", {}),
    /* @__PURE__ */ jsx("div", {})
  ] }) });
  if (!pastDelay) {
    return null;
  } else {
    if (fullScreen2) {
      return /* @__PURE__ */ jsx("div", { className: styles$H.fullScreenSpinnerWrapper, children: spinner });
    }
    return spinner;
  }
});
const numberRegex = /^[0-9]+$/;
const ItemWithLabel = forwardRef(function ItemWithLabel2({
  id,
  labelPosition = "top",
  style,
  label: label2,
  labelBreak: labelBreak2 = true,
  labelWidth,
  enabled: enabled2 = true,
  required: required2 = false,
  children,
  validationInProgress = false,
  shrinkToLabel: shrinkToLabel2 = false,
  onFocus,
  onBlur,
  labelStyle,
  validationResult,
  isInputTemplateUsed = false
}, ref) {
  const generatedId = useId();
  const inputId = id || generatedId;
  if (label2 === void 0 && !validationResult) {
    return /* @__PURE__ */ jsx(Slot, { style, id: inputId, ref, children });
  }
  return /* @__PURE__ */ jsxs("div", { style, ref, children: [
    /* @__PURE__ */ jsxs(
      "div",
      {
        className: classnames(styles$I.container, {
          [styles$I.top]: labelPosition === "top",
          [styles$I.bottom]: labelPosition === "bottom",
          [styles$I.start]: labelPosition === "start",
          [styles$I.end]: labelPosition === "end",
          [styles$I.shrinkToLabel]: shrinkToLabel2
        }),
        children: [
          label2 && /* @__PURE__ */ jsxs(
            "label",
            {
              htmlFor: inputId,
              onClick: () => document.getElementById(inputId).focus(),
              style: {
                ...labelStyle,
                width: labelWidth && numberRegex.test(labelWidth) ? `${labelWidth}px` : labelWidth,
                flexShrink: labelWidth !== void 0 ? 0 : void 0
              },
              className: classnames(styles$I.inputLabel, {
                [styles$I.required]: required2,
                [styles$I.disabled]: !enabled2,
                [styles$I.labelBreak]: labelBreak2
              }),
              children: [
                label2,
                " ",
                required2 && /* @__PURE__ */ jsx("span", { className: styles$I.requiredMark, children: "*" }),
                validationInProgress && /* @__PURE__ */ jsx(
                  Spinner,
                  {
                    style: { height: "1em", width: "1em", marginLeft: "1em", alignSelf: "center" }
                  }
                )
              ]
            }
          ),
          /* @__PURE__ */ jsx(Slot, { id: !isInputTemplateUsed ? inputId : void 0, children })
        ]
      }
    ),
    validationResult
  ] });
});
const TextBox = forwardRef(function TextBox2({
  id,
  type = "text",
  value = "",
  updateState = noop$1,
  initialValue = "",
  style,
  maxLength,
  enabled: enabled2 = true,
  placeholder: placeholder2,
  validationStatus = "none",
  onDidChange = noop$1,
  onFocus = noop$1,
  onBlur = noop$1,
  registerComponentApi,
  startText,
  startIcon,
  endText,
  endIcon,
  gap,
  autoFocus,
  readOnly: readOnly2,
  tabIndex,
  label: label2,
  labelPosition,
  labelWidth,
  labelBreak: labelBreak2,
  required: required2
}, ref) {
  id = id || useId();
  const inputRef = useRef(null);
  useEffect(() => {
    if (autoFocus) {
      setTimeout(() => {
        var _a;
        (_a = inputRef.current) == null ? void 0 : _a.focus();
      }, 0);
    }
  }, [autoFocus]);
  const [localValue, setLocalValue] = React__default.useState(value);
  useEffect(() => {
    setLocalValue(value);
  }, [value]);
  useEffect(() => {
    updateState({ value: initialValue }, { initial: true });
  }, [initialValue, updateState]);
  const updateValue = useCallback(
    (value2) => {
      setLocalValue(value2);
      updateState({ value: value2 });
      onDidChange(value2);
    },
    [onDidChange, updateState]
  );
  const onInputChange = useCallback(
    (event) => {
      updateValue(event.target.value);
    },
    [updateValue]
  );
  const handleOnFocus = useCallback(() => {
    onFocus == null ? void 0 : onFocus();
  }, [onFocus]);
  const handleOnBlur = useCallback(() => {
    onBlur == null ? void 0 : onBlur();
  }, [onBlur]);
  const focus = useCallback(() => {
    var _a;
    (_a = inputRef.current) == null ? void 0 : _a.focus();
  }, []);
  const setValue = useEvent((newValue) => {
    updateValue(newValue);
  });
  useEffect(() => {
    registerComponentApi == null ? void 0 : registerComponentApi({
      focus,
      setValue
    });
  }, [focus, registerComponentApi, setValue]);
  return /* @__PURE__ */ jsx(
    ItemWithLabel,
    {
      id,
      labelPosition,
      label: label2,
      labelWidth,
      labelBreak: labelBreak2,
      required: required2,
      enabled: enabled2,
      style,
      ref,
      children: /* @__PURE__ */ jsxs(
        "div",
        {
          className: classnames(styles$L.inputRoot, {
            [styles$L.disabled]: !enabled2,
            [styles$L.readOnly]: readOnly2,
            [styles$L.error]: validationStatus === "error",
            [styles$L.warning]: validationStatus === "warning",
            [styles$L.valid]: validationStatus === "valid"
          }),
          tabIndex: -1,
          onFocus: focus,
          style: { gap },
          children: [
            /* @__PURE__ */ jsx(Adornment, { text: startText, iconName: startIcon, className: styles$L.adornment }),
            /* @__PURE__ */ jsx(
              "input",
              {
                id,
                type,
                className: classnames(styles$L.input, { [styles$L.readOnly]: readOnly2 }),
                disabled: !enabled2,
                value: localValue,
                maxLength,
                placeholder: placeholder2,
                onChange: onInputChange,
                onFocus: handleOnFocus,
                onBlur: handleOnBlur,
                ref: inputRef,
                readOnly: readOnly2,
                autoFocus,
                tabIndex: enabled2 ? tabIndex : -1,
                required: required2
              }
            ),
            /* @__PURE__ */ jsx(Adornment, { text: endText, iconName: endIcon, className: styles$L.adornment })
          ]
        }
      )
    }
  );
});
const COMP$11 = "TextBox";
const TextBoxMd = createMetadata({
  status: "experimental",
  description: `The \`${COMP$11}\` is an input component that allows users to input and edit textual data.`,
  props: {
    placeholder: dPlaceholder(),
    initialValue: dInitialValue(),
    label: dLabel(),
    labelPosition: dLabelPosition("top"),
    labelWidth: dLabelWidth(COMP$11),
    labelBreak: dLabelBreak(COMP$11),
    maxLength: dMaxLength(),
    autoFocus: dAutoFocus(),
    required: dRequired(),
    readOnly: dReadonly(),
    enabled: dEnabled(),
    validationStatus: dValidationStatus(),
    startText: dStartText(),
    startIcon: dStartIcon(),
    endText: dEndText(),
    endIcon: dEndIcon(),
    gap: {
      description: "This property defines the gap between the adornments and the input area."
    }
  },
  events: {
    gotFocus: dGotFocus(COMP$11),
    lostFocus: dLostFocus(COMP$11),
    didChange: dDidChange(COMP$11)
  },
  apis: {
    focus: dFocus(COMP$11),
    value: d(
      `You can query the component's value. If no value is set, it will retrieve \`undefined\`.`
    ),
    setValue: dSetValueApi()
  },
  themeVars: parseScssVar(styles$L.themeVars),
  defaultThemeVars: {
    // TODO: When FormItem is themed, move these defaults there
    "borderRadius-Input": "$borderRadius",
    "textColor-Input": "$textColor-primary",
    "backgroundColor-Input--disabled": "$backgroundColor--disabled",
    "borderWidth-Input": "1px",
    "minHeight-Input": "39px",
    "padding-Input": "$space-2",
    "gap-adornment-Input": "$space-2",
    "borderStyle-Input": "solid",
    "borderColor-Input--disabled": "$borderColor--disabled",
    "textColor-Input--disabled": "$textColor--disabled",
    "borderColor-Input-error": "$borderColor-Input-default--error",
    "borderColor-Input-warning": "$borderColor-Input-default--warning",
    "borderColor-Input-success": "$borderColor-Input-default--success",
    "color-placeholder-Input": "$textColor-subtitle",
    "color-adornment-Input": "$textColor-subtitle",
    "outlineColor-Input--focus": "$outlineColor--focus",
    "outlineWidth-Input--focus": "$outlineWidth--focus",
    "outlineStyle-Input--focus": "$outlineStyle--focus",
    "outlineOffset-Input--focus": "$outlineOffset--focus",
    light: {
      // --- No light-specific theme vars
    },
    dark: {
      // --- No dark-specific theme vars
    }
  }
});
const PasswordMd = createMetadata({
  ...TextBoxMd,
  description: "The `Password` component is a specialized version of the `TextBox` component that allows users to input and edit passwords."
});
function isThemeVarName(varName) {
  return typeof varName === "string" && (varName == null ? void 0 : varName.startsWith("$"));
}
const palette = {
  $colorSurface0: "$color-surface-0",
  $colorSurface50: "$color-surface-50",
  $colorSurface100: "$color-surface-100",
  $colorSurface200: "$color-surface-200",
  $colorSurface600: "$color-surface-600",
  $colorPrimary50: "$color-primary-50",
  $colorWarn700: "$color-warn-700",
  $colorDanger600: "$color-danger-600",
  $colorSuccess600: "$color-success-600"
};
const {
  $colorSurface0,
  $colorSurface50,
  $colorSurface100,
  $colorSurface200,
  $colorSurface600,
  $colorPrimary50,
  $colorWarn700,
  $colorDanger600,
  $colorSuccess600
} = palette;
const RootThemeDefinition = {
  id: "root",
  resources: {
    // "font.inter": "https://rsms.me/inter/inter.css",
  },
  themeVars: {
    // --- The unit of measurement for all sizes/spaces
    "space-base": "0.25rem",
    // --- Default surface color shades (form white to black)
    "const-color-surface-0": "white",
    "const-color-surface-50": "hsl(204, 30.3%, 96.5%)",
    "const-color-surface-100": "hsl(204, 30.3%, 93%)",
    "const-color-surface-200": "hsl(204, 30.3%, 85%)",
    "const-color-surface-300": "hsl(204, 30.3%, 75%)",
    "const-color-surface-400": "hsl(204, 30.3%, 65%)",
    "const-color-surface-500": "hsl(204, 30.3%, 52%)",
    // #6894AD
    "const-color-surface-600": "hsl(204, 30.3%, 45%)",
    "const-color-surface-700": "hsl(204, 30.3%, 35%)",
    "const-color-surface-800": "hsl(204, 30.3%, 27%)",
    "const-color-surface-900": "hsl(204, 30.3%, 16%)",
    "const-color-surface-950": "hsl(204, 30.3%, 13%)",
    "const-color-surface-1000": "hsl(204, 30.3%, 9%)",
    "const-color-surface": "$const-color-surface-500",
    // --- Primary color shades (bluish)
    "const-color-primary-50": "hsl(212,71.9%,94.5%)",
    "const-color-primary-100": "hsl(212,71.9%,89.1%)",
    "const-color-primary-200": "hsl(212,71.9%,78.1%)",
    "const-color-primary-300": "hsl(212,71.9%,67.2%)",
    "const-color-primary-400": "hsl(212,71.9%,56.3%)",
    "const-color-primary-500": "#206bc4",
    "const-color-primary-600": "hsl(212,71.9%,36.3%)",
    "const-color-primary-700": "hsl(212,71.9%,27.2%)",
    "const-color-primary-800": "hsl(212,71.9%,18.1%)",
    "const-color-primary-900": "hsl(212,71.9%,9.1%)",
    "const-color-primary-950": "hsl(212,71.9%,4.5%)",
    "const-color-primary": "$const-color-primary-500",
    // --- Secondary color shades (steel-bluish)
    "const-color-secondary-50": "hsl(211.7,21.2%,96.9%)",
    "const-color-secondary-100": "hsl(211.7,21.2%,93.7%)",
    "const-color-secondary-200": "hsl(211.7,21.2%,87.4%)",
    "const-color-secondary-300": "hsl(211.7,21.2%,81.1%)",
    "const-color-secondary-400": "hsl(211.7,21.2%,74.8%)",
    "const-color-secondary-500": "#6c7a91",
    "const-color-secondary-600": "hsl(211.7,21.2%,54.8%)",
    "const-color-secondary-700": "hsl(211.7,21.2%,41.1%)",
    "const-color-secondary-800": "hsl(211.7,21.2%,27.4%)",
    "const-color-secondary-900": "hsl(211.7,21.2%,13.7%)",
    "const-color-secondary-950": "hsl(211.7,21.2%,6.9%)",
    "const-color-secondary": "$const-color-secondary-500",
    // --- Warning color shades (orange shades)
    "const-color-warn-50": "hsl(45, 100%, 97%)",
    "const-color-warn-100": "hsl(45, 100%, 91%)",
    "const-color-warn-200": "hsl(45, 100%, 80%)",
    "const-color-warn-300": "hsl(45, 100%, 70%)",
    "const-color-warn-400": "hsl(45, 100%, 60%)",
    "const-color-warn-500": "hsl(35, 100%, 50%)",
    // #ff980a
    "const-color-warn-600": "hsl(35, 100%, 45%)",
    "const-color-warn-700": "hsl(35, 100%, 40%)",
    "const-color-warn-800": "hsl(35, 100%, 35%)",
    "const-color-warn-900": "hsl(35, 100%, 30%)",
    "const-color-warn-950": "hsl(35, 100%, 15%)",
    "const-color-warn": "$const-color-warn-500",
    // --- Danger color shades (reddish)
    "const-color-danger-50": "hsl(356, 100%, 95%)",
    "const-color-danger-100": "hsl(356, 100%, 91%)",
    "const-color-danger-200": "hsl(356, 100%, 80%)",
    "const-color-danger-300": "hsl(356, 100%, 70%)",
    "const-color-danger-400": "hsl(356, 100%, 60%)",
    "const-color-danger-500": "hsl(356, 100%, 50%)",
    // #ff3240
    "const-color-danger-600": "hsl(356, 100%, 45%)",
    "const-color-danger-700": "hsl(356, 100%, 40%)",
    "const-color-danger-800": "hsl(356, 100%, 35%)",
    "const-color-danger-900": "hsl(356, 100%, 30%)",
    "const-color-danger-950": "hsl(356, 100%, 15%)",
    "const-color-danger": "$const-color-danger-600",
    "const-color-attention": "$const-color-danger-500",
    // --- Success color shades (greenish)
    "const-color-success-50": "hsl(129.5, 58.4%, 96.4%)",
    "const-color-success-100": "hsl(129.5, 58.4%, 92.9%)",
    "const-color-success-200": "hsl(129.5, 58.4%, 85.7%)",
    "const-color-success-300": "hsl(129.5, 58.4%, 78.6%)",
    "const-color-success-400": "hsl(129.5, 58.4%, 71.5%)",
    "const-color-success-500": "hsl(129.5, 58.4%, 51.5%)",
    // #2fb344
    "const-color-success-600": "hsl(129.5, 58.4%, 45%)",
    "const-color-success-700": "hsl(129.5, 58.4%, 38.6%)",
    "const-color-success-800": "hsl(129.5, 58.4%, 25.7%)",
    "const-color-success-900": "hsl(129.5, 58.4%, 12.9%)",
    "const-color-success-950": "hsl(129.5, 58.4%, 6.4%)",
    "const-color-success": "$const-color-success-500",
    "const-color-info-50": "hsl(183, 97%, 95%)",
    "const-color-info-100": "hsl(183, 97%, 90%)",
    "const-color-info-200": "hsl(183, 97%, 80%)",
    "const-color-info-300": "hsl(183, 97%, 70%)",
    "const-color-info-400": "hsl(183, 97%, 60%)",
    "const-color-info-500": "hsl(183, 97%, 50%)",
    // #02C4CE
    "const-color-info-600": "hsl(183, 97%, 45%)",
    "const-color-info-700": "hsl(183, 97%, 35%)",
    "const-color-info-800": "hsl(183, 97%, 25%)",
    "const-color-info-900": "hsl(183, 97%, 15%)",
    "const-color-info-950": "hsl(183, 97%, 10%)",
    // --- Font weights
    "fontWeight-light": "300",
    "fontWeight-normal": "400",
    "fontWeight-medium": "500",
    "fontWeight-bold": "600",
    "fontWeight-extra-bold": "900",
    // --- Default text colors (component use these values as their defaults)
    "textColor-primary": "$color-surface-950",
    "textColor-attention": "$color-danger-600",
    "textColor-subtitle": "$color-surface-500",
    "textColor--disabled": "$color-surface-400",
    // --- Default background colors (component use these values as their defaults)
    "backgroundColor-primary": "$color-surface-50",
    "backgroundColor-secondary": "$color-surface-50",
    "backgroundColor-attention": "$color-attention",
    "backgroundColor--disabled": "$color-surface-50",
    "backgroundColor--selected": "$color-primary-50",
    // --- Various default colors
    "color-info": "$color-info-500",
    "color-valid": "$color-success-600",
    "color-warning": "$color-warn-700",
    "color-error": "$color-danger-600",
    // --- Default line height values (relative to the base unit, "space-base")
    "lineHeight-none": "1",
    "lineHeight-tight": "1.25",
    "lineHeight-snug": "1.375",
    "lineHeight-normal": "1.5",
    "lineHeight-relaxed": "1.625",
    "lineHeight-loose": "2",
    // --- The sans-serif font set
    "fontFamily-sans-serif": "'Inter', -apple-system, BlinkMacSystemFont, San Francisco, Segoe UI, Roboto, Helvetica Neue, sans-serif",
    // --- The monospace font set
    "fontFamily-monospace": "Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace",
    "font-feature-settings": "'cv03', 'cv04', 'cv11'",
    // --- Some media breakpoints (review them)
    "maxWidth-phone": "576px",
    "maxWidth-landscape-phone": "768px",
    "maxWidth-tablet": "992px",
    "maxWidth-desktop": "1200px",
    "maxWidth-large-desktop": "1400px",
    // --- The app's default radius value
    borderRadius: "4px",
    "outlineColor--focus": "rgba($color-primary-500-rgb, .5)",
    "outlineWidth--focus": "2px",
    "outlineStyle--focus": "solid",
    "outlineOffset--focus": "0",
    // --- The app's default font family
    "fontFamily": "$fontFamily-sans-serif",
    // --- Various font sizes (relative to the current context)
    "fontSize-gigantic": "3rem",
    "fontSize-larger": "2.15rem",
    "fontSize-large": "1.5rem",
    "fontSize-medium": "1.25rem",
    "fontSize-normal": "1rem",
    "fontSize-small": "0.875rem",
    "fontSize-smaller": "0.75rem",
    "fontSize-tiny": "0.625rem",
    // --- The default font size
    "fontSize": "$fontSize-normal",
    // --- Predefined gap sizes
    "gap-none": "$space-0",
    "gap-tight": "$space-2",
    "gap-normal": "$space-4",
    "gap-loose": "$space-8",
    // --- Predefined paddings
    "padding-none": "$space-0",
    "padding-tight": "$space-2",
    "padding-normal": "$space-4",
    "padding-loose": "$space-8",
    // --- Predefined spaces
    "space-none": "$space-0",
    "space-tight": "$space-2",
    "space-normal": "$space-4",
    "space-loose": "$space-8",
    // --- Font used for body
    "fontWeight": "$fontWeight-normal",
    // --- Various default values (review them)
    "borderColor-dropdown-item": "$borderColor",
    // --- Various predefined shadow values
    boxShadow: "0 1px 3px 0 rgba(0, 0, 0, .1), 0 1px 2px 0 rgba(0, 0, 0, .06)",
    "boxShadow-md": "0 4px 6px -1px rgba(0, 0, 0, .1), 0 2px 4px -1px rgba(0, 0, 0, .06)",
    "boxShadow-xl": "0 16px 24px 2px rgba(0, 0, 0, 0.07), 0 6px 30px 5px rgba(0, 0, 0, 0.06), 0 8px 10px -5px rgba(0, 0, 0, 0.1)",
    "boxShadow-xxl": "0 8px 17px 0 rgba(0, 0, 0, .2), 0 6px 20px 0 rgba(0, 0, 0, .19)",
    "boxShadow-spread": "0px 0px 30px rgba(0, 0, 0, 0.1)",
    "boxShadow-spread-2": "-6px -4px 40px 10px rgba(0, 0, 0, 0.1)",
    "boxShadow-spread-2-xl": "-6px -4px 40px 18px rgba(0, 0, 0, 0.1)",
    // --- The default maximum content width
    "maxWidth-content": "1320px",
    // --- Background colors
    "backgroundColor": "$color-surface-subtle",
    "backgroundColor-overlay": "rgba(0, 0, 0, 0.2)",
    "backgroundColor-dropdown-item--hover": $colorSurface50,
    "backgroundColor-dropdown-item--active": $colorSurface100,
    "backgroundColor-dropdown-item--active-hover": $colorSurface50,
    "backgroundColor-tree-row--selected--before": $colorPrimary50,
    // --- Border colors
    "borderColor": $colorSurface200,
    "borderColor--disabled": $colorSurface200,
    // --- Text colors
    "textColor-secondary": $colorSurface600,
    // --- Input is an abstract component, so we define its default theme variables here
    "backgroundColor-Input-default": $colorSurface0,
    "borderColor-Input-default": $colorSurface200,
    "borderColor-Input-default--hover": $colorSurface600,
    "borderColor-Input-default--focus": $colorSurface600,
    "borderColor-Input-default--success": $colorSuccess600,
    "borderColor-Input-default--warning": $colorWarn700,
    "borderColor-Input-default--error": $colorDanger600,
    // --- InputLabel is a React component, so we define its default theme variables here
    "textColor-InputLabel-required": $colorDanger600
  },
  tones: {
    light: {
      themeVars: {
        // --- Default surface color shades (form white to black)
        "color-surface-0": "$const-color-surface-0",
        "color-surface-50": "$const-color-surface-50",
        "color-surface-100": "$const-color-surface-100",
        "color-surface-200": "$const-color-surface-200",
        "color-surface-300": "$const-color-surface-300",
        "color-surface-400": "$const-color-surface-400",
        "color-surface-500": "$const-color-surface-500",
        "color-surface-600": "$const-color-surface-600",
        "color-surface-700": "$const-color-surface-700",
        "color-surface-800": "$const-color-surface-800",
        "color-surface-900": "$const-color-surface-900",
        "color-surface-950": "$const-color-surface-950",
        "color-surface-1000": "$const-color-surface-1000",
        "color-surface": "$const-color-surface-500",
        "color-surface-base": "$color-surface-0",
        "color-surface-lower": "$color-surface-100",
        "color-surface-raised": "$color-surface-0",
        "color-surface-subtle": "$color-surface-50",
        // --- Primary color shades (bluish)
        "color-primary-50": "$const-color-primary-50",
        "color-primary-100": "$const-color-primary-100",
        "color-primary-200": "$const-color-primary-200",
        "color-primary-300": "$const-color-primary-300",
        "color-primary-400": "$const-color-primary-400",
        "color-primary-500": "$const-color-primary-500",
        "color-primary-600": "$const-color-primary-600",
        "color-primary-700": "$const-color-primary-700",
        "color-primary-800": "$const-color-primary-800",
        "color-primary-900": "$const-color-primary-900",
        "color-primary-950": "$const-color-primary-950",
        "color-primary": "$const-color-primary-500",
        // --- Secondary color shades (steel-bluish)
        "color-secondary-50": "$const-color-secondary-50",
        "color-secondary-100": "$const-color-secondary-100",
        "color-secondary-200": "$const-color-secondary-200",
        "color-secondary-300": "$const-color-secondary-300",
        "color-secondary-400": "$const-color-secondary-400",
        "color-secondary-500": "$const-color-secondary-500",
        "color-secondary-600": "$const-color-secondary-600",
        "color-secondary-700": "$const-color-secondary-700",
        "color-secondary-800": "$const-color-secondary-800",
        "color-secondary-900": "$const-color-secondary-900",
        "color-secondary-950": "$const-color-secondary-950",
        "color-secondary": "$const-color-secondary-500",
        // --- Warning color shades (orange shades)
        "color-warn-50": "$const-color-warn-50",
        "color-warn-100": "$const-color-warn-100",
        "color-warn-200": "$const-color-warn-200",
        "color-warn-300": "$const-color-warn-300",
        "color-warn-400": "$const-color-warn-400",
        "color-warn-500": "$const-color-warn-500",
        "color-warn-600": "$const-color-warn-600",
        "color-warn-700": "$const-color-warn-700",
        "color-warn-800": "$const-color-warn-800",
        "color-warn-900": "$const-color-warn-900",
        "color-warn-950": "$const-color-warn-950",
        "color-warn": "$const-color-warn-500",
        // --- Danger color shades (reddish)
        "color-danger-50": "$const-color-danger-50",
        "color-danger-100": "$const-color-danger-100",
        "color-danger-200": "$const-color-danger-200",
        "color-danger-300": "$const-color-danger-300",
        "color-danger-400": "$const-color-danger-400",
        "color-danger-500": "$const-color-danger-500",
        "color-danger-600": "$const-color-danger-600",
        "color-danger-700": "$const-color-danger-700",
        "color-danger-800": "$const-color-danger-800",
        "color-danger-900": "$const-color-danger-900",
        "color-danger-950": "$const-color-danger-950",
        "color-danger": "$const-color-danger-600",
        "color-attention": "$const-color-danger-500",
        // --- Success color shades (greenish)
        "color-success-50": "$const-color-success-50",
        "color-success-100": "$const-color-success-100",
        "color-success-200": "$const-color-success-200",
        "color-success-300": "$const-color-success-300",
        "color-success-400": "$const-color-success-400",
        "color-success-500": "$const-color-success-500",
        "color-success-600": "$const-color-success-600",
        "color-success-700": "$const-color-success-700",
        "color-success-800": "$const-color-success-800",
        "color-success-900": "$const-color-success-900",
        "color-success-950": "$const-color-success-950",
        "color-success": "$const-color-success-500",
        "color-info-50 ": "$const-color-info-50 ",
        "color-info-100": "$const-color-info-100",
        "color-info-200": "$const-color-info-200",
        "color-info-300": "$const-color-info-300",
        "color-info-400": "$const-color-info-400",
        "color-info-500": "$const-color-info-500",
        "color-info-600": "$const-color-info-600",
        "color-info-700": "$const-color-info-700",
        "color-info-800": "$const-color-info-800",
        "color-info-900": "$const-color-info-900",
        "color-info-950": "$const-color-info-950",
        "color-info": "$const-color-info-800"
      }
    },
    dark: {
      themeVars: {
        // --- Default surface color shades (form white to black)
        "color-surface-0": "$const-color-surface-1000",
        "color-surface-50": "$const-color-surface-950",
        "color-surface-100": "$const-color-surface-900",
        "color-surface-200": "$const-color-surface-800",
        "color-surface-300": "$const-color-surface-700",
        "color-surface-400": "$const-color-surface-600",
        "color-surface-500": "$const-color-surface-500",
        "color-surface-600": "$const-color-surface-400",
        "color-surface-700": "$const-color-surface-300",
        "color-surface-800": "$const-color-surface-200",
        "color-surface-900": "$const-color-surface-100",
        "color-surface-950": "$const-color-surface-50",
        "color-surface-1000": "$const-color-surface-0",
        "color-surface": "$const-color-surface-500",
        "color-surface-base": "$color-surface-0",
        "color-surface-lower": "$color-surface-0",
        "color-surface-raised": "$color-surface-100",
        "color-surface-subtle": "$color-surface-50",
        // --- Primary color shades (bluish)
        "color-primary-50": "$const-color-primary-950",
        "color-primary-100": "$const-color-primary-900",
        "color-primary-200": "$const-color-primary-800",
        "color-primary-300": "$const-color-primary-700",
        "color-primary-400": "$const-color-primary-600",
        "color-primary-500": "$const-color-primary-500",
        "color-primary-600": "$const-color-primary-400",
        "color-primary-700": "$const-color-primary-300",
        "color-primary-800": "$const-color-primary-200",
        "color-primary-900": "$const-color-primary-100",
        "color-primary-950": "$const-color-primary-50",
        "color-primary": "$const-color-primary-500",
        // --- Secondary color shades (steel-bluish)
        "color-secondary-50": "$const-color-secondary-950",
        "color-secondary-100": "$const-color-secondary-900",
        "color-secondary-200": "$const-color-secondary-800",
        "color-secondary-300": "$const-color-secondary-700",
        "color-secondary-400": "$const-color-secondary-600",
        "color-secondary-500": "$const-color-secondary-500",
        "color-secondary-600": "$const-color-secondary-400",
        "color-secondary-700": "$const-color-secondary-300",
        "color-secondary-800": "$const-color-secondary-200",
        "color-secondary-900": "$const-color-secondary-100",
        "color-secondary-950": "$const-color-secondary-50",
        "color-secondary": "$const-color-secondary-500",
        // --- Warning color shades (orange shades)
        "color-warn-50": "$const-color-warn-950",
        "color-warn-100": "$const-color-warn-900",
        "color-warn-200": "$const-color-warn-800",
        "color-warn-300": "$const-color-warn-700",
        "color-warn-400": "$const-color-warn-600",
        "color-warn-500": "$const-color-warn-500",
        "color-warn-600": "$const-color-warn-400",
        "color-warn-700": "$const-color-warn-300",
        "color-warn-800": "$const-color-warn-200",
        "color-warn-900": "$const-color-warn-100",
        "color-warn-950": "$const-color-warn-50",
        "color-warn": "$const-color-warn-500",
        // --- Danger color shades (reddish)
        "color-danger-50": "$const-color-danger-950",
        "color-danger-100": "$const-color-danger-900",
        "color-danger-200": "$const-color-danger-800",
        "color-danger-300": "$const-color-danger-700",
        "color-danger-400": "$const-color-danger-600",
        "color-danger-500": "$const-color-danger-500",
        "color-danger-600": "$const-color-danger-400",
        "color-danger-700": "$const-color-danger-300",
        "color-danger-800": "$const-color-danger-200",
        "color-danger-900": "$const-color-danger-100",
        "color-danger-950": "$const-color-danger-50",
        "color-danger": "$const-color-danger-500",
        "color-attention": "$const-color-danger-400",
        // --- Success color shades (greenish)
        "color-success-50": "$const-color-success-950",
        "color-success-100": "$const-color-success-900",
        "color-success-200": "$const-color-success-800",
        "color-success-300": "$const-color-success-700",
        "color-success-400": "$const-color-success-600",
        "color-success-500": "$const-color-success-500",
        "color-success-600": "$const-color-success-400",
        "color-success-700": "$const-color-success-300",
        "color-success-800": "$const-color-success-200",
        "color-success-900": "$const-color-success-100",
        "color-success-950": "$const-color-success-50",
        "color-success": "$const-color-success-500",
        "color-info-50 ": "$const-color-info-950 ",
        "color-info-100": "$const-color-info-900",
        "color-info-200": "$const-color-info-800",
        "color-info-300": "$const-color-info-700",
        "color-info-400": "$const-color-info-600",
        "color-info-500": "$const-color-info-500",
        "color-info-600": "$const-color-info-400",
        "color-info-700": "$const-color-info-300",
        "color-info-800": "$const-color-info-200",
        "color-info-900": "$const-color-info-100",
        "color-info-950": "$const-color-info-50",
        "color-info": "$const-color-info-200"
      }
    }
  }
};
const greenThemeColors = {
  // --- Default surface color shades (form white to black)
  "const-color-surface-50": "hsl(144, 20%, 96.5%)",
  "const-color-surface-100": "hsl(144, 20%, 93%)",
  "const-color-surface-200": "hsl(144, 20%, 85%)",
  "const-color-surface-300": "hsl(144, 20%, 75%)",
  "const-color-surface-400": "hsl(144, 20%, 65%)",
  "const-color-surface-500": "hsl(144, 20%, 61%)",
  // #83AA90
  "const-color-surface-600": "hsl(144, 20%, 45%)",
  "const-color-surface-700": "hsl(144, 20%, 35%)",
  "const-color-surface-800": "hsl(144, 20%, 27%)",
  "const-color-surface-900": "hsl(144, 20%, 16%)",
  "const-color-surface-950": "hsl(144, 20%, 13%)",
  "const-color-surface": "$const-color-surface-500",
  // --- Primary color shades
  "const-color-primary-50": "hsl(158, 85%, 94.5%)",
  "const-color-primary-100": "hsl(158, 85%, 89.1%)",
  "const-color-primary-200": "hsl(158, 85%, 78.1%)",
  "const-color-primary-300": "hsl(158, 85%, 67.2%)",
  "const-color-primary-400": "hsl(158, 85%, 56.3%)",
  "const-color-primary-500": "hsl(158, 85%, 33%)",
  // #0D9B60
  "const-color-primary-600": "hsl(158, 85%, 29.7%)",
  "const-color-primary-700": "hsl(158, 85%, 27.2%)",
  "const-color-primary-800": "hsl(158, 85%, 18.1%)",
  "const-color-primary-900": "hsl(158, 85%, 9.1%)",
  "const-color-primary-950": "hsl(158, 85%, 4.5%)",
  "const-color-primary": "$const-color-primary-500",
  // --- Secondary color shades
  "const-color-secondary-50": "hsl(198, 100%, 94.5%)",
  "const-color-secondary-100": "hsl(198, 100%, 89.1%)",
  "const-color-secondary-200": "hsl(198, 100%, 78.1%)",
  "const-color-secondary-300": "hsl(198, 100%, 67.2%)",
  "const-color-secondary-400": "hsl(198, 100%, 56.3%)",
  "const-color-secondary-500": "hsl(198, 100%, 29%)",
  // #006792
  "const-color-secondary-600": "hsl(198, 100%, 25%)",
  "const-color-secondary-700": "hsl(198, 100%, 20%)",
  "const-color-secondary-800": "hsl(198, 100%, 15%)",
  "const-color-secondary-900": "hsl(198, 100%, 10%)",
  "const-color-secondary-950": "hsl(198, 100%, 5%)",
  "const-color-secondary": "$const-color-secondary-500",
  // --- Warning color shades
  "const-color-warn-50": "hsl(36, 100%, 93%)",
  "const-color-warn-100": "hsl(36, 100%, 86%)",
  "const-color-warn-200": "hsl(36, 100%, 72%)",
  "const-color-warn-300": "hsl(36, 100%, 58%)",
  "const-color-warn-400": "hsl(36, 100%, 44%)",
  "const-color-warn-500": "hsl(36, 77%, 60%)",
  // #eaa84d
  "const-color-warn-600": "hsl(36, 77%, 54%)",
  "const-color-warn-700": "hsl(36, 77%, 48%)",
  "const-color-warn-800": "hsl(36, 77%, 42%)",
  "const-color-warn-900": "hsl(36, 77%, 36%)",
  "const-color-warn-950": "hsl(36, 77%, 30%)",
  "const-color-warn": "$const-color-warn-500",
  // --- Danger color shades
  "const-color-danger-50": "hsl(355, 95%, 95%)",
  "const-color-danger-100": "hsl(355, 95%, 85%)",
  "const-color-danger-200": "hsl(355, 95%, 75%)",
  "const-color-danger-300": "hsl(355, 95%, 65%)",
  "const-color-danger-400": "hsl(355, 95%, 55%)",
  "const-color-danger-500": "hsl(355, 95%, 66%)",
  // #fb656f
  "const-color-danger-600": "hsl(355, 95%, 60%)",
  "const-color-danger-700": "hsl(355, 95%, 54%)",
  "const-color-danger-800": "hsl(355, 95%, 48%)",
  "const-color-danger-900": "hsl(355, 95%, 42%)",
  "const-color-danger-950": "hsl(355, 95%, 36%)",
  "const-color-danger": "$const-color-danger-500",
  "const-color-attention": "$const-color-danger-500",
  // --- Success color shades (greenish)
  "const-color-success-50": "hsl(158, 85%, 94.5%)",
  "const-color-success-100": "hsl(158, 85%, 89.1%)",
  "const-color-success-200": "hsl(158, 85%, 78.1%)",
  "const-color-success-300": "hsl(158, 85%, 67.2%)",
  "const-color-success-400": "hsl(158, 85%, 56.3%)",
  "const-color-success-500": "hsl(158, 85%, 33%)",
  // #0C8955
  "const-color-success-600": "hsl(158, 85%, 29.7%)",
  "const-color-success-700": "hsl(158, 85%, 27.2%)",
  "const-color-success-800": "hsl(158, 85%, 18.1%)",
  "const-color-success-900": "hsl(158, 85%, 9.1%)",
  "const-color-success-950": "hsl(158, 85%, 4.5%)",
  "const-color-success": "$const-color-success-500",
  // --- Info color shades
  "const-color-info-50": "hsl(202, 95%, 95%)",
  "const-color-info-100": "hsl(202, 95%, 90%)",
  "const-color-info-200": "hsl(202, 95%, 80%)",
  "const-color-info-300": "hsl(202, 95%, 70%)",
  "const-color-info-400": "hsl(202, 95%, 60%)",
  "const-color-info-500": "hsl(202, 95%, 50%)",
  // #0587CD
  "const-color-info-600": "hsl(202, 95%, 45%)",
  "const-color-info-700": "hsl(202, 95%, 35%)",
  "const-color-info-800": "hsl(202, 95%, 25%)",
  "const-color-info-900": "hsl(202, 95%, 15%)",
  "const-color-info-950": "hsl(202, 95%, 10%)",
  "const-color-info": "$const-color-info-500"
};
const grayThemeColors = {
  // --- Default surface color shades (form white to black)
  "const-color-surface-50": "hsl(0, 0%, 98%)",
  "const-color-surface-100": "hsl(0, 0%, 95%)",
  "const-color-surface-200": "hsl(0, 0%, 83%)",
  "const-color-surface-300": "hsl(0, 0%, 75%)",
  "const-color-surface-400": "hsl(0, 0%, 63%)",
  "const-color-surface-500": "hsl(0, 0%, 70%)",
  // #B2B2B2
  "const-color-surface-600": "hsl(0, 0%, 60%)",
  "const-color-surface-700": "hsl(0, 0%, 50%)",
  "const-color-surface-800": "hsl(0, 0%, 40%)",
  "const-color-surface-900": "hsl(0, 0%, 30%)",
  "const-color-surface-950": "hsl(0, 0%, 20%)",
  "const-color-surface": "$const-color-surface-500",
  // --- Primary color shades
  "const-color-primary-50": "hsl(0, 0%, 94.5%)",
  "const-color-primary-100": "hsl(0, 0%, 89.1%)",
  "const-color-primary-200": "hsl(0, 0%, 78.1%)",
  "const-color-primary-300": "hsl(0, 0%, 67.2%)",
  "const-color-primary-400": "hsl(0, 0%, 56.3%)",
  "const-color-primary-500": "hsl(0, 0%, 36.9%)",
  // #5E5E5E
  "const-color-primary-600": "hsl(0, 0%, 33%)",
  "const-color-primary-700": "hsl(0, 0%, 29%)",
  "const-color-primary-800": "hsl(0, 0%, 25%)",
  "const-color-primary-900": "hsl(0, 0%, 21%)",
  "const-color-primary-950": "hsl(0, 0%, 17%)",
  "const-color-primary": "$const-color-primary-500",
  // --- Secondary color shades
  "const-color-secondary-50": "hsl(0, 0%, 94.5%)",
  "const-color-secondary-100": "hsl(0, 0%, 89.1%)",
  "const-color-secondary-200": "hsl(0, 0%, 78.1%)",
  "const-color-secondary-300": "hsl(0, 0%, 67.2%)",
  "const-color-secondary-400": "hsl(0, 0%, 56.3%)",
  "const-color-secondary-500": "hsl(0, 0%, 57.6%)",
  // #939393
  "const-color-secondary-600": "hsl(0, 0%, 52%)",
  "const-color-secondary-700": "hsl(0, 0%, 46%)",
  "const-color-secondary-800": "hsl(0, 0%, 40%)",
  "const-color-secondary-900": "hsl(0, 0%, 34%)",
  "const-color-secondary-950": "hsl(0, 0%, 28%)",
  "const-color-secondary": "$const-color-secondary-500",
  // --- Warning color shades
  "const-color-warn-50": "hsl(36, 85%, 93%)",
  "const-color-warn-100": "hsl(36, 85%, 86%)",
  "const-color-warn-200": "hsl(36, 85%, 72%)",
  "const-color-warn-300": "hsl(36, 85%, 58%)",
  "const-color-warn-400": "hsl(36, 85%, 44%)",
  "const-color-warn-500": "hsl(36, 85%, 56%)",
  // #EFA035
  "const-color-warn-600": "hsl(36, 85%, 50%)",
  "const-color-warn-700": "hsl(36, 85%, 44%)",
  "const-color-warn-800": "hsl(36, 85%, 38%)",
  "const-color-warn-900": "hsl(36, 85%, 32%)",
  "const-color-warn-950": "hsl(36, 85%, 26%)",
  "const-color-warn": "$const-color-warn-500",
  // --- Danger color shades
  "const-color-danger-50": "hsl(18, 87%, 95%)",
  "const-color-danger-100": "hsl(18, 87%, 85%)",
  "const-color-danger-200": "hsl(18, 87%, 75%)",
  "const-color-danger-300": "hsl(18, 87%, 65%)",
  "const-color-danger-400": "hsl(18, 87%, 55%)",
  "const-color-danger-500": "hsl(18, 87%, 68%)",
  // #F58167
  "const-color-danger-600": "hsl(18, 87%, 60%)",
  "const-color-danger-700": "hsl(18, 87%, 50%)",
  "const-color-danger-800": "hsl(18, 87%, 40%)",
  "const-color-danger-900": "hsl(18, 87%, 30%)",
  "const-color-danger-950": "hsl(18, 87%, 20%)",
  "const-color-danger": "$const-color-danger-500",
  "const-color-attention": "$const-color-danger-500",
  // --- Success color shades
  "const-color-success-50": "hsl(168, 100%, 95%)",
  "const-color-success-100": "hsl(168, 100%, 85%)",
  "const-color-success-200": "hsl(168, 100%, 75%)",
  "const-color-success-300": "hsl(168, 100%, 65%)",
  "const-color-success-400": "hsl(168, 100%, 55%)",
  "const-color-success-500": "hsl(168, 100%, 39%)",
  // #00C896
  "const-color-success-600": "hsl(168, 100%, 35%)",
  "const-color-success-700": "hsl(168, 100%, 30%)",
  "const-color-success-800": "hsl(168, 100%, 25%)",
  "const-color-success-900": "hsl(168, 100%, 20%)",
  "const-color-success-950": "hsl(168, 100%, 15%)",
  "const-color-success": "$const-color-success-500",
  "const-color-info-50": "hsl(204, 98%, 95%)",
  "const-color-info-100": "hsl(204, 98%, 90%)",
  "const-color-info-200": "hsl(204, 98%, 80%)",
  "const-color-info-300": "hsl(204, 98%, 70%)",
  "const-color-info-400": "hsl(204, 98%, 60%)",
  "const-color-info-500": "hsl(204, 98%, 50%)",
  // #028ED9
  "const-color-info-600": "hsl(204, 98%, 45%)",
  "const-color-info-700": "hsl(204, 98%, 35%)",
  "const-color-info-800": "hsl(204, 98%, 25%)",
  "const-color-info-900": "hsl(204, 98%, 15%)",
  "const-color-info-950": "hsl(204, 98%, 10%)",
  "const-color-info": "$const-color-info-500"
};
const orangeThemeColors = {
  // --- Default surface color shades (form white to black)
  "const-color-surface-50": "hsl(220, 3%, 98%)",
  "const-color-surface-100": "hsl(220, 3%, 95%)",
  "const-color-surface-200": "hsl(220, 3%, 83%)",
  "const-color-surface-300": "hsl(220, 3%, 75%)",
  "const-color-surface-400": "hsl(220, 3%, 63%)",
  "const-color-surface-500": "hsl(220, 3%, 63%)",
  // #9B9DA1
  "const-color-surface-600": "hsl(220, 3%, 60%)",
  "const-color-surface-700": "hsl(220, 3%, 50%)",
  "const-color-surface-800": "hsl(220, 3%, 40%)",
  "const-color-surface-900": "hsl(220, 3%, 30%)",
  "const-color-surface-950": "hsl(220, 3%, 20%)",
  "const-color-surface": "$const-color-surface-500",
  // --- Primary color shades
  "const-color-primary-50": "hsl(36, 100%, 95%)",
  "const-color-primary-100": "hsl(36, 100%, 85%)",
  "const-color-primary-200": "hsl(36, 100%, 75%)",
  "const-color-primary-300": "hsl(36, 100%, 65%)",
  "const-color-primary-400": "hsl(36, 100%, 55%)",
  "const-color-primary-500": "hsl(36, 100%, 57%)",
  // #FFA328
  "const-color-primary-600": "hsl(36, 100%, 50%)",
  "const-color-primary-700": "hsl(36, 100%, 45%)",
  "const-color-primary-800": "hsl(36, 100%, 40%)",
  "const-color-primary-900": "hsl(36, 100%, 35%)",
  "const-color-primary-950": "hsl(36, 100%, 30%)",
  "const-color-primary": "$const-color-primary-500",
  // --- Secondary color shades
  "const-color-secondary-50": "hsl(204, 33%, 94.5%)",
  "const-color-secondary-100": "hsl(204, 33%, 89.1%)",
  "const-color-secondary-200": "hsl(204, 33%, 78.1%)",
  "const-color-secondary-300": "hsl(204, 33%, 67.2%)",
  "const-color-secondary-400": "hsl(204, 33%, 56.3%)",
  "const-color-secondary-500": "hsl(204, 33%, 26%)",
  "const-color-secondary-600": "hsl(204, 33%, 23%)",
  "const-color-secondary-700": "hsl(204, 33%, 20%)",
  "const-color-secondary-800": "hsl(204, 33%, 17%)",
  "const-color-secondary-900": "hsl(204, 33%, 14%)",
  "const-color-secondary-950": "hsl(204, 33%, 11%)",
  "const-color-secondary": "$const-color-secondary-500",
  // --- Warning color shades (orange shades)
  "const-color-warn-50": "hsl(20, 100%, 95%)",
  "const-color-warn-100": "hsl(20, 100%, 85%)",
  "const-color-warn-200": "hsl(20, 100%, 75%)",
  "const-color-warn-300": "hsl(20, 100%, 65%)",
  "const-color-warn-400": "hsl(20, 100%, 55%)",
  "const-color-warn-500": "hsl(20, 100%, 55%)",
  // #FF6A1A
  "const-color-warn-600": "hsl(20, 100%, 45%)",
  "const-color-warn-700": "hsl(20, 100%, 40%)",
  "const-color-warn-800": "hsl(20, 100%, 35%)",
  "const-color-warn-900": "hsl(20, 100%, 30%)",
  "const-color-warn-950": "hsl(20, 100%, 25%)",
  "const-color-warn": "$const-color-warn-500",
  // --- Danger color shades
  "const-color-danger-50": "hsl(0, 60%, 95%)",
  "const-color-danger-100": "hsl(0, 60%, 85%)",
  "const-color-danger-200": "hsl(0, 60%, 75%)",
  "const-color-danger-300": "hsl(0, 60%, 65%)",
  "const-color-danger-400": "hsl(0, 60%, 55%)",
  "const-color-danger-500": "hsl(0, 60%, 55%)",
  // #C35353
  "const-color-danger-600": "hsl(0, 60%, 45%)",
  "const-color-danger-700": "hsl(0, 60%, 40%)",
  "const-color-danger-800": "hsl(0, 60%, 35%)",
  "const-color-danger-900": "hsl(0, 60%, 30%)",
  "const-color-danger-950": "hsl(0, 60%, 25%)",
  "const-color-danger": "$const-color-danger-500",
  "const-color-attention": "$const-color-danger-500",
  // --- Success color shades
  "const-color-success-50": "hsl(134, 38%, 95%)",
  "const-color-success-100": "hsl(134, 38%, 85%)",
  "const-color-success-200": "hsl(134, 38%, 75%)",
  "const-color-success-300": "hsl(134, 38%, 65%)",
  "const-color-success-400": "hsl(134, 38%, 55%)",
  "const-color-success-500": "hsl(134, 38%, 45%)",
  // #49984E
  "const-color-success-600": "hsl(134, 38%, 40%)",
  "const-color-success-700": "hsl(134, 38%, 35%)",
  "const-color-success-800": "hsl(134, 38%, 30%)",
  "const-color-success-900": "hsl(134, 38%, 25%)",
  "const-color-success-950": "hsl(134, 38%, 20%)",
  "const-color-success": "$const-color-success-500",
  "const-color-info-50": "hsl(197, 100%, 95%)",
  "const-color-info-100": "hsl(197, 100%, 90%)",
  "const-color-info-200": "hsl(197, 100%, 80%)",
  "const-color-info-300": "hsl(197, 100%, 70%)",
  "const-color-info-400": "hsl(197, 100%, 60%)",
  "const-color-info-500": "hsl(197, 100%, 50%)",
  // #009BCF
  "const-color-info-600": "hsl(197, 100%, 45%)",
  "const-color-info-700": "hsl(197, 100%, 35%)",
  "const-color-info-800": "hsl(197, 100%, 25%)",
  "const-color-info-900": "hsl(197, 100%, 15%)",
  "const-color-info-950": "hsl(197, 100%, 10%)",
  "const-color-info": "$const-color-info-500"
};
const purpleThemeColors = {
  // --- Default surface color shades (form white to black)
  "const-color-surface-50": "hsl(0, 0%, 96%)",
  "const-color-surface-100": "hsl(0, 0%, 90%)",
  "const-color-surface-200": "hsl(0, 0%, 80%)",
  "const-color-surface-300": "hsl(0, 0%, 70%)",
  "const-color-surface-400": "hsl(0, 0%, 60%)",
  "const-color-surface-500": "hsl(0, 0%, 59%)",
  // #969696
  "const-color-surface-600": "hsl(0, 0%, 50%)",
  "const-color-surface-700": "hsl(0, 0%, 40%)",
  "const-color-surface-800": "hsl(0, 0%, 30%)",
  "const-color-surface-900": "hsl(0, 0%, 20%)",
  "const-color-surface-950": "hsl(0, 0%, 10%)",
  "const-color-surface": "$const-color-surface-500",
  // --- Primary color shades (purple)
  "const-color-primary-50": "hsl(300, 42%, 95%)",
  "const-color-primary-100": "hsl(300, 42%, 85%)",
  "const-color-primary-200": "hsl(300, 42%, 75%)",
  "const-color-primary-300": "hsl(300, 42%, 65%)",
  "const-color-primary-400": "hsl(300, 42%, 55%)",
  "const-color-primary-500": "hsl(300, 42%, 31%)",
  // #702F72
  "const-color-primary-600": "hsl(300, 42%, 28%)",
  "const-color-primary-700": "hsl(300, 42%, 25%)",
  "const-color-primary-800": "hsl(300, 42%, 22%)",
  "const-color-primary-900": "hsl(300, 42%, 19%)",
  "const-color-primary-950": "hsl(300, 42%, 16%)",
  "const-color-primary": "$const-color-primary-500",
  "const-color-secondary-50": "hsl(204, 100%, 95%)",
  "const-color-secondary-100": "hsl(204, 100%, 85%)",
  "const-color-secondary-200": "hsl(204, 100%, 75%)",
  "const-color-secondary-300": "hsl(204, 100%, 65%)",
  "const-color-secondary-400": "hsl(204, 100%, 55%)",
  "const-color-secondary-500": "hsl(204, 100%, 38%)",
  // #0071C6
  "const-color-secondary-600": "hsl(204, 100%, 35%)",
  "const-color-secondary-700": "hsl(204, 100%, 30%)",
  "const-color-secondary-800": "hsl(204, 100%, 25%)",
  "const-color-secondary-900": "hsl(204, 100%, 20%)",
  "const-color-secondary-950": "hsl(204, 100%, 15%)",
  "const-color-secondary": "$const-color-secondary-500",
  // --- Warning color shades
  "const-color-warn-50": "hsl(20, 95%, 95%)",
  "const-color-warn-100": "hsl(20, 95%, 85%)",
  "const-color-warn-200": "hsl(20, 95%, 75%)",
  "const-color-warn-300": "hsl(20, 95%, 65%)",
  "const-color-warn-400": "hsl(20, 95%, 55%)",
  "const-color-warn-500": "hsl(20, 95%, 66%)",
  // #FB8D5C
  "const-color-warn-600": "hsl(20, 95%, 60%)",
  "const-color-warn-700": "hsl(20, 95%, 55%)",
  "const-color-warn-800": "hsl(20, 95%, 50%)",
  "const-color-warn-900": "hsl(20, 95%, 45%)",
  "const-color-warn-950": "hsl(20, 95%, 40%)",
  "const-color-warn": "$const-color-warn-500",
  // --- Danger color shades
  "const-color-danger-50": "hsl(355, 65%, 95%)",
  "const-color-danger-100": "hsl(355, 65%, 85%)",
  "const-color-danger-200": "hsl(355, 65%, 75%)",
  "const-color-danger-300": "hsl(355, 65%, 65%)",
  "const-color-danger-400": "hsl(355, 65%, 55%)",
  "const-color-danger-500": "hsl(355, 65%, 60%)",
  // #DE5F68
  "const-color-danger-600": "hsl(355, 65%, 50%)",
  "const-color-danger-700": "hsl(355, 65%, 45%)",
  "const-color-danger-800": "hsl(355, 65%, 40%)",
  "const-color-danger-900": "hsl(355, 65%, 35%)",
  "const-color-danger-950": "hsl(355, 65%, 30%)",
  "const-color-danger": "$const-color-danger-500",
  "const-color-attention": "$const-color-danger-500",
  // --- Success color shades (greenish)
  "const-color-success-50": "hsl(178, 100%, 95%)",
  "const-color-success-100": "hsl(178, 100%, 85%)",
  "const-color-success-200": "hsl(178, 100%, 75%)",
  "const-color-success-300": "hsl(178, 100%, 65%)",
  "const-color-success-400": "hsl(178, 100%, 55%)",
  "const-color-success-500": "hsl(178, 100%, 27%)",
  // #008B88
  "const-color-success-600": "hsl(178, 100%, 36%)",
  "const-color-success-700": "hsl(178, 100%, 32%)",
  "const-color-success-800": "hsl(178, 100%, 28%)",
  "const-color-success-900": "hsl(178, 100%, 24%)",
  "const-color-success-950": "hsl(178, 100%, 20%)",
  "const-color-success": "$const-color-success-500",
  "const-color-info-50": "hsl(183, 66%, 92%)",
  "const-color-info-100": "hsl(183, 66%, 84%)",
  "const-color-info-200": "hsl(183, 66%, 76%)",
  "const-color-info-300": "hsl(183, 66%, 68%)",
  "const-color-info-400": "hsl(183, 66%, 60%)",
  "const-color-info-500": "hsl(183, 66%, 50%)",
  // #25C2C7
  "const-color-info-600": "hsl(183, 66%, 45%)",
  "const-color-info-700": "hsl(183, 66%, 35%)",
  "const-color-info-800": "hsl(183, 66%, 25%)",
  "const-color-info-900": "hsl(183, 66%, 15%)",
  "const-color-info-950": "hsl(183, 66%, 10%)",
  "const-color-info": "$const-color-info-500"
};
const cyanThemeColors = {
  // ---
  "const-color-surface-50": "hsl(180, 15%, 95%)",
  "const-color-surface-100": "hsl(180, 15%, 85%)",
  "const-color-surface-200": "hsl(180, 15%, 75%)",
  "const-color-surface-300": "hsl(180, 15%, 65%)",
  "const-color-surface-400": "hsl(180, 15%, 55%)",
  "const-color-surface-500": "hsl(180, 15%, 52%)",
  // #709A99
  "const-color-surface-600": "hsl(180, 15%, 45%)",
  "const-color-surface-700": "hsl(180, 15%, 40%)",
  "const-color-surface-800": "hsl(180, 15%, 35%)",
  "const-color-surface-900": "hsl(180, 15%, 30%)",
  "const-color-surface-950": "hsl(180, 15%, 25%)",
  "const-color-surface": "$const-color-surface-500",
  // --- Primary color shades
  "const-color-primary-50": "hsl(180, 100%, 95%)",
  "const-color-primary-100": "hsl(180, 100%, 85%)",
  "const-color-primary-200": "hsl(180, 100%, 75%)",
  "const-color-primary-300": "hsl(180, 100%, 65%)",
  "const-color-primary-400": "hsl(180, 100%, 55%)",
  "const-color-primary-500": "hsl(180, 100%, 35%)",
  // #00B5B5
  "const-color-primary-600": "hsl(180, 100%, 32%)",
  "const-color-primary-700": "hsl(180, 100%, 28%)",
  "const-color-primary-800": "hsl(180, 100%, 24%)",
  "const-color-primary-900": "hsl(180, 100%, 20%)",
  "const-color-primary-950": "hsl(180, 100%, 16%)",
  "const-color-primary": "$const-color-primary-500",
  // --- Secondary color shades
  "const-color-secondary-50": "hsl(227, 60%, 95%)",
  "const-color-secondary-100": "hsl(227, 60%, 85%)",
  "const-color-secondary-200": "hsl(227, 60%, 75%)",
  "const-color-secondary-300": "hsl(227, 60%, 65%)",
  "const-color-secondary-400": "hsl(227, 60%, 55%)",
  "const-color-secondary-500": "hsl(227, 60%, 45%)",
  // #3450AC
  "const-color-secondary-600": "hsl(227, 60%, 40%)",
  "const-color-secondary-700": "hsl(227, 60%, 35%)",
  "const-color-secondary-800": "hsl(227, 60%, 30%)",
  "const-color-secondary-900": "hsl(227, 60%, 25%)",
  "const-color-secondary-950": "hsl(227, 60%, 20%)",
  "const-color-secondary": "$const-color-secondary-500",
  // --- Warning color shades (orange shades)
  "const-color-warn-50": "hsl(20, 100%, 95%)",
  "const-color-warn-100": "hsl(20, 100%, 85%)",
  "const-color-warn-200": "hsl(20, 100%, 75%)",
  "const-color-warn-300": "hsl(20, 100%, 65%)",
  "const-color-warn-400": "hsl(20, 100%, 55%)",
  "const-color-warn-500": "hsl(20, 98%, 56%)",
  // #FE631E
  "const-color-warn-600": "hsl(20, 100%, 50%)",
  "const-color-warn-700": "hsl(20, 100%, 45%)",
  "const-color-warn-800": "hsl(20, 100%, 40%)",
  "const-color-warn-900": "hsl(20, 100%, 35%)",
  "const-color-warn-950": "hsl(20, 100%, 30%)",
  "const-color-warn": "$const-color-warn-500",
  // --- Danger color shades (reddish)
  "const-color-danger-50": "hsl(356, 100%, 95%)",
  "const-color-danger-100": "hsl(356, 100%, 85%)",
  "const-color-danger-200": "hsl(356, 100%, 75%)",
  "const-color-danger-300": "hsl(356, 100%, 65%)",
  "const-color-danger-400": "hsl(356, 100%, 55%)",
  "const-color-danger-500": "hsl(356, 97%, 55%)",
  // #FD3D4B
  "const-color-danger-600": "hsl(356, 100%, 50%)",
  "const-color-danger-700": "hsl(356, 100%, 45%)",
  "const-color-danger-800": "hsl(356, 100%, 40%)",
  "const-color-danger-900": "hsl(356, 100%, 35%)",
  "const-color-danger-950": "hsl(356, 100%, 30%)",
  "const-color-danger": "$const-color-danger-600",
  "const-color-attention": "$const-color-danger-500",
  // --- Success color shades (greenish)
  "const-color-success-50": "hsl(168, 80%, 95%)",
  "const-color-success-100": "hsl(168, 80%, 85%)",
  "const-color-success-200": "hsl(168, 80%, 75%)",
  "const-color-success-300": "hsl(168, 80%, 65%)",
  "const-color-success-400": "hsl(168, 80%, 55%)",
  "const-color-success-500": "hsl(168, 82%, 28%)",
  // #0C846C
  "const-color-success-600": "hsl(168, 80%, 25%)",
  "const-color-success-700": "hsl(168, 80%, 22%)",
  "const-color-success-800": "hsl(168, 80%, 19%)",
  "const-color-success-900": "hsl(168, 80%, 16%)",
  "const-color-success-950": "hsl(168, 80%, 13%)",
  "const-color-success": "$const-color-success-500",
  "const-color-info-50": "hsl(204, 100%, 92%)",
  "const-color-info-100": "hsl(204, 100%, 84%)",
  "const-color-info-200": "hsl(204, 100%, 76%)",
  "const-color-info-300": "hsl(204, 100%, 68%)",
  "const-color-info-400": "hsl(204, 100%, 60%)",
  "const-color-info-500": "hsl(204, 100%, 50%)",
  // #23B2FF
  "const-color-info-600": "hsl(204, 100%, 45%)",
  "const-color-info-700": "hsl(204, 100%, 35%)",
  "const-color-info-800": "hsl(204, 100%, 25%)",
  "const-color-info-900": "hsl(204, 100%, 15%)",
  "const-color-info-950": "hsl(204, 100%, 10%)",
  "const-color-info": "$const-color-info-500"
};
const redThemeColors = {
  // ---
  "const-color-surface-50": "hsl(0, 0%, 95%)",
  "const-color-surface-100": "hsl(0, 0%, 85%)",
  "const-color-surface-200": "hsl(0, 0%, 75%)",
  "const-color-surface-300": "hsl(0, 0%, 65%)",
  "const-color-surface-400": "hsl(0, 0%, 55%)",
  "const-color-surface-500": "hsl(0, 0%, 50%)",
  // #7F7F7F
  "const-color-surface-600": "hsl(0, 0%, 45%)",
  "const-color-surface-700": "hsl(0, 0%, 40%)",
  "const-color-surface-800": "hsl(0, 0%, 35%)",
  "const-color-surface-900": "hsl(0, 0%, 30%)",
  "const-color-surface-950": "hsl(0, 0%, 25%)",
  "const-color-surface": "$const-color-surface-500",
  // --- Primary color shades
  "const-color-primary-50": "hsl(354, 89%, 95%)",
  "const-color-primary-100": "hsl(354, 89%, 85%)",
  "const-color-primary-200": "hsl(354, 89%, 75%)",
  "const-color-primary-300": "hsl(354, 89%, 65%)",
  "const-color-primary-400": "hsl(354, 89%, 55%)",
  "const-color-primary-500": "hsl(354, 89%, 63%)",
  // #F85367
  "const-color-primary-600": "hsl(354, 89%, 50%)",
  "const-color-primary-700": "hsl(354, 89%, 45%)",
  "const-color-primary-800": "hsl(354, 89%, 40%)",
  "const-color-primary-900": "hsl(354, 89%, 35%)",
  "const-color-primary-950": "hsl(354, 89%, 30%)",
  "const-color-primary": "$const-color-primary-500",
  // --- Secondary color shades (steel-bluish)
  "const-color-secondary-50": "hsl(210, 64%, 95%)",
  "const-color-secondary-100": "hsl(210, 64%, 85%)",
  "const-color-secondary-200": "hsl(210, 64%, 75%)",
  "const-color-secondary-300": "hsl(210, 64%, 65%)",
  "const-color-secondary-400": "hsl(210, 64%, 55%)",
  "const-color-secondary-500": "hsl(210, 64%, 39%)",
  // #153F65
  "const-color-secondary-600": "hsl(210, 64%, 35%)",
  "const-color-secondary-700": "hsl(210, 64%, 30%)",
  "const-color-secondary-800": "hsl(210, 64%, 25%)",
  "const-color-secondary-900": "hsl(210, 64%, 20%)",
  "const-color-secondary-950": "hsl(210, 64%, 15%)",
  "const-color-secondary": "$const-color-secondary-500",
  // --- Warning color shades
  "const-color-warn-50": "hsl(36, 85%, 95%)",
  "const-color-warn-100": "hsl(36, 85%, 85%)",
  "const-color-warn-200": "hsl(36, 85%, 75%)",
  "const-color-warn-300": "hsl(36, 85%, 65%)",
  "const-color-warn-400": "hsl(36, 85%, 55%)",
  "const-color-warn-500": "hsl(36, 85%, 53%)",
  // #EE901D
  "const-color-warn-600": "hsl(36, 85%, 45%)",
  "const-color-warn-700": "hsl(36, 85%, 40%)",
  "const-color-warn-800": "hsl(36, 85%, 35%)",
  "const-color-warn-900": "hsl(36, 85%, 30%)",
  "const-color-warn-950": "hsl(36, 85%, 25%)",
  "const-color-warn": "$const-color-warn-500",
  // --- Danger color shades
  "const-color-danger-50": "hsl(356, 100%, 95%)",
  "const-color-danger-100": "hsl(356, 100%, 85%)",
  "const-color-danger-200": "hsl(356, 100%, 75%)",
  "const-color-danger-300": "hsl(356, 100%, 65%)",
  "const-color-danger-400": "hsl(356, 100%, 55%)",
  "const-color-danger-500": "hsl(356, 100%, 45%)",
  // #E30010
  "const-color-danger-600": "hsl(356, 100%, 40%)",
  "const-color-danger-700": "hsl(356, 100%, 35%)",
  "const-color-danger-800": "hsl(356, 100%, 30%)",
  "const-color-danger-900": "hsl(356, 100%, 25%)",
  "const-color-danger-950": "hsl(356, 100%, 20%)",
  "const-color-danger": "$const-color-danger-600",
  "const-color-attention": "$const-color-danger-500",
  // --- Success color shades (greenish)
  "const-color-success-50": "hsl(156, 80%, 95%)",
  "const-color-success-100": "hsl(156, 80%, 85%)",
  "const-color-success-200": "hsl(156, 80%, 75%)",
  "const-color-success-300": "hsl(156, 80%, 65%)",
  "const-color-success-400": "hsl(156, 80%, 55%)",
  "const-color-success-500": "hsl(156, 80%, 35%)",
  // #0F7C54
  "const-color-success-600": "hsl(156, 80%, 30%)",
  "const-color-success-700": "hsl(156, 80%, 25%)",
  "const-color-success-800": "hsl(156, 80%, 20%)",
  "const-color-success-900": "hsl(156, 80%, 15%)",
  "const-color-success-950": "hsl(156, 80%, 10%)",
  "const-color-success": "$const-color-success-500",
  "const-color-info-50": "hsl(197, 98%, 92%)",
  "const-color-info-100": "hsl(197, 98%, 84%)",
  "const-color-info-200": "hsl(197, 98%, 76%)",
  "const-color-info-300": "hsl(197, 98%, 68%)",
  "const-color-info-400": "hsl(197, 98%, 60%)",
  "const-color-info-500": "hsl(197, 98%, 50%)",
  // #02A7E9
  "const-color-info-600": "hsl(197, 98%, 45%)",
  "const-color-info-700": "hsl(197, 98%, 35%)",
  "const-color-info-800": "hsl(197, 98%, 25%)",
  "const-color-info-900": "hsl(197, 98%, 15%)",
  "const-color-info-950": "hsl(197, 98%, 10%)",
  "const-color-info": "$const-color-info-500"
};
const XmlUiThemeDefinition = {
  id: "xmlui",
  resources: {
    // "font.inter": "https://rsms.me/inter/inter.css",
  },
  themeVars: {
    "font-size": "15px",
    "boxShadow-Input": "$boxShadow-sm"
  },
  tones: {
    light: {
      themeVars: {
        "backgroundColor-ModalDialog": "white",
        "backgroundColor-checked-RadioGroupOption": "$color-primary-400"
      }
    },
    dark: {
      themeVars: {
        "color-error": "$color-danger-400"
      }
    }
  }
};
const XmlUiGreenThemeDefinition = {
  id: "xmlui-green",
  extends: "xmlui",
  themeVars: { ...greenThemeColors }
};
const XmlUiGrayThemeDefinition = {
  id: "xmlui-gray",
  extends: "xmlui",
  themeVars: { ...grayThemeColors }
};
const XmlUiOrangeThemeDefinition = {
  id: "xmlui-orange",
  extends: "xmlui",
  themeVars: { ...orangeThemeColors }
};
const XmlUiPurpleThemeDefinition = {
  id: "xmlui-purple",
  extends: "xmlui",
  themeVars: { ...purpleThemeColors }
};
const XmlUiCyanThemeDefinition = {
  id: "xmlui-cyan",
  extends: "xmlui",
  themeVars: { ...cyanThemeColors }
};
const XmlUiRedThemeDefinition = {
  id: "xmlui-red",
  extends: "xmlui",
  themeVars: { ...redThemeColors }
};
var DefaultContext = {
  color: void 0,
  size: void 0,
  className: void 0,
  style: void 0,
  attr: void 0
};
var IconContext = React__default.createContext && React__default.createContext(DefaultContext);
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
function Tree2Element(tree) {
  return tree && tree.map(function(node, i) {
    return React__default.createElement(node.tag, __assign({
      key: i
    }, node.attr), Tree2Element(node.child));
  });
}
function GenIcon(data) {
  return function(props) {
    return React__default.createElement(IconBase, __assign({
      attr: __assign({}, data.attr)
    }, props), Tree2Element(data.child));
  };
}
function IconBase(props) {
  var elem = function(conf) {
    var attr = props.attr, size = props.size, title2 = props.title, svgProps = __rest(props, ["attr", "size", "title"]);
    var computedSize = size || conf.size || "1em";
    var className;
    if (conf.className) className = conf.className;
    if (props.className) className = (className ? className + " " : "") + props.className;
    return React__default.createElement("svg", __assign({
      stroke: "currentColor",
      fill: "currentColor",
      strokeWidth: "0"
    }, conf.attr, attr, svgProps, {
      className,
      style: __assign(__assign({
        color: props.color || conf.color
      }, conf.style), props.style),
      height: computedSize,
      width: computedSize,
      xmlns: "http://www.w3.org/2000/svg"
    }), title2 && React__default.createElement("title", null, title2), props.children);
  };
  return IconContext !== void 0 ? React__default.createElement(IconContext.Consumer, null, function(conf) {
    return elem(conf);
  }) : elem(DefaultContext);
}
const COMP$10 = "Theme";
const ThemeMd = createMetadata({
  description: `The \`${COMP$10}\` component provides a way to define a particular theming context for its nested components. The XMLUI framework uses \`${COMP$10}\` to define the default theming context for all of its child components. Theme variables and theme settings only work in this context.`,
  allowArbitraryProps: true,
  props: {
    themeId: d(`This property specifies which theme to use by setting the theme's id.`),
    tone: {
      description: "This property allows the setting of the current theme's tone.",
      availableValues: ["light", "dark"],
      valueType: "string",
      defaultValue: "light"
    },
    root: d(`This property indicates whether the component is at the root of the application.`)
  },
  opaque: true
});
const themeVars$F = `'{"width-navPanel-App": "var(--xmlui-width-navPanel-App)", "boxShadow-header-App": "var(--xmlui-boxShadow-header-App)", "boxShadow-navPanel-App": "var(--xmlui-boxShadow-navPanel-App)", "backgroundColor-content-App": "var(--xmlui-backgroundColor-content-App)", "borderLeft-content-App": "var(--xmlui-borderLeft-content-App)", "maxWidth-content-App": "var(--xmlui-maxWidth-content-App)", "maxWidth-App": "var(--xmlui-maxWidth-App)", "backgroundColor-AppHeader": "var(--xmlui-backgroundColor-AppHeader)", "borderBottom-AppHeader": "var(--xmlui-borderBottom-AppHeader)", "scroll-padding-block-Pages": "var(--xmlui-scroll-padding-block-Pages)"}'`;
const styles$G = {
  themeVars: themeVars$F
};
const appLayoutMd = [
  {
    value: "vertical",
    description: "This layout puts the navigation bar on the left side and displays its items vertically. The main content is aligned to the right (including the header and the footer), and its content is a single scroll container; every part of it moves as you scroll the page. This layout does not display the logo in the app header."
  },
  {
    value: "vertical-sticky",
    description: "Similar to `vertical`, the header and the navigation bar dock to the top of the main content's viewport, while the footer sticks to the bottom. This layout does not display the logo in the app header."
  },
  {
    value: "vertical-full-header",
    description: "Similar to `vertical-sticky`. However, the header and the navigation bar dock to the top of the app's window, while the footer sticks to the bottom."
  },
  {
    value: "condensed",
    description: "Similar to `horizontal`. However, the header and the navigation bar are in a single header block. (default)"
  },
  {
    value: "condensed-sticky",
    description: "However, the header and the navigation bar are in a single header block."
  },
  {
    value: "horizontal",
    description: "This layout stacks the layout sections in a single column in this order: header, navigation bar, main content, and footer. The application is a single scroll container; every part moves as you scroll the page."
  },
  {
    value: "horizontal-sticky",
    description: "Similar to `horizontal`, the header and the navigation bar dock to the top of the viewport, while the footer sticks to the bottom."
  }
];
const AppLayoutContext = createContext(null);
function useAppLayoutContext() {
  return useContext(AppLayoutContext);
}
const ScrollContext = React__default.createContext(null);
const themeVars$E = `'{"padding-AppHeader": "var(--xmlui-padding-AppHeader)", "paddingHorizontal-AppHeader": "var(--xmlui-paddingHorizontal-AppHeader, var(--xmlui-padding-AppHeader))", "paddingVertical-AppHeader": "var(--xmlui-paddingVertical-AppHeader, var(--xmlui-padding-AppHeader))", "paddingLeft-AppHeader": "var(--xmlui-paddingLeft-AppHeader, var(--xmlui-paddingHorizontal-AppHeader, var(--xmlui-padding-AppHeader)))", "paddingRight-AppHeader": "var(--xmlui-paddingRight-AppHeader, var(--xmlui-paddingHorizontal-AppHeader, var(--xmlui-padding-AppHeader)))", "paddingTop-AppHeader": "var(--xmlui-paddingTop-AppHeader, var(--xmlui-paddingVertical-AppHeader, var(--xmlui-padding-AppHeader)))", "paddingBottom-AppHeader": "var(--xmlui-paddingBottom-AppHeader, var(--xmlui-paddingVertical-AppHeader, var(--xmlui-padding-AppHeader)))", "padding-logo-AppHeader": "var(--xmlui-padding-logo-AppHeader)", "paddingHorizontal-logo-AppHeader": "var(--xmlui-paddingHorizontal-logo-AppHeader, var(--xmlui-padding-logo-AppHeader))", "paddingVertical-logo-AppHeader": "var(--xmlui-paddingVertical-logo-AppHeader, var(--xmlui-padding-logo-AppHeader))", "paddingLeft-logo-AppHeader": "var(--xmlui-paddingLeft-logo-AppHeader, var(--xmlui-paddingHorizontal-logo-AppHeader, var(--xmlui-padding-logo-AppHeader)))", "paddingRight-logo-AppHeader": "var(--xmlui-paddingRight-logo-AppHeader, var(--xmlui-paddingHorizontal-logo-AppHeader, var(--xmlui-padding-logo-AppHeader)))", "paddingTop-logo-AppHeader": "var(--xmlui-paddingTop-logo-AppHeader, var(--xmlui-paddingVertical-logo-AppHeader, var(--xmlui-padding-logo-AppHeader)))", "paddingBottom-logo-AppHeader": "var(--xmlui-paddingBottom-logo-AppHeader, var(--xmlui-paddingVertical-logo-AppHeader, var(--xmlui-padding-logo-AppHeader)))", "border-AppHeader": "var(--xmlui-border-AppHeader)", "borderHorizontal-AppHeader": "var(--xmlui-borderHorizontal-AppHeader, var(--xmlui-border-AppHeader))", "borderVertical-AppHeader": "var(--xmlui-borderVertical-AppHeader, var(--xmlui-border-AppHeader))", "borderLeft-AppHeader": "var(--xmlui-borderLeft-AppHeader, var(--xmlui-borderHorizontal-AppHeader, var(--xmlui-border-AppHeader)))", "borderRight-AppHeader": "var(--xmlui-borderRight-AppHeader, var(--xmlui-borderHorizontal-AppHeader, var(--xmlui-border-AppHeader)))", "borderTop-AppHeader": "var(--xmlui-borderTop-AppHeader, var(--xmlui-borderVertical-AppHeader, var(--xmlui-border-AppHeader)))", "borderBottom-AppHeader": "var(--xmlui-borderBottom-AppHeader, var(--xmlui-borderVertical-AppHeader, var(--xmlui-border-AppHeader)))", "borderWidth-AppHeader": "var(--xmlui-borderWidth-AppHeader)", "borderHorizontalWidth-AppHeader": "var(--xmlui-borderHorizontalWidth-AppHeader, var(--xmlui-borderWidth-AppHeader))", "borderLeftWidth-AppHeader": "var(--xmlui-borderLeftWidth-AppHeader, var(--xmlui-borderHorizontalWidth-AppHeader, var(--xmlui-borderWidth-AppHeader)))", "borderRightWidth-AppHeader": "var(--xmlui-borderRightWidth-AppHeader, var(--xmlui-borderHorizontalWidth-AppHeader, var(--xmlui-borderWidth-AppHeader)))", "borderVerticalWidth-AppHeader": "var(--xmlui-borderVerticalWidth-AppHeader, var(--xmlui-borderWidth-AppHeader))", "borderTopWidth-AppHeader": "var(--xmlui-borderTopWidth-AppHeader, var(--xmlui-borderVerticalWidth-AppHeader, var(--xmlui-borderWidth-AppHeader)))", "borderBottomWidth-AppHeader": "var(--xmlui-borderBottomWidth-AppHeader, var(--xmlui-borderVerticalWidth-AppHeader, var(--xmlui-borderWidth-AppHeader)))", "borderStyle-AppHeader": "var(--xmlui-borderStyle-AppHeader)", "borderHorizontalStyle-AppHeader": "var(--xmlui-borderHorizontalStyle-AppHeader, var(--xmlui-borderStyle-AppHeader))", "borderLeftStyle-AppHeader": "var(--xmlui-borderLeftStyle-AppHeader, var(--xmlui-borderHorizontalStyle-AppHeader, var(--xmlui-borderStyle-AppHeader)))", "borderRightStyle-AppHeader": "var(--xmlui-borderRightStyle-AppHeader, var(--xmlui-borderHorizontalStyle-AppHeader, var(--xmlui-borderStyle-AppHeader)))", "borderVerticalStyle-AppHeader": "var(--xmlui-borderVerticalStyle-AppHeader, var(--xmlui-borderStyle-AppHeader))", "borderTopStyle-AppHeader": "var(--xmlui-borderTopStyle-AppHeader, var(--xmlui-borderVerticalStyle-AppHeader, var(--xmlui-borderStyle-AppHeader)))", "borderBottomStyle-AppHeader": "var(--xmlui-borderBottomStyle-AppHeader, var(--xmlui-borderVerticalStyle-AppHeader, var(--xmlui-borderStyle-AppHeader)))", "borderColor-AppHeader": "var(--xmlui-borderColor-AppHeader)", "borderHorizontalColor-AppHeader": "var(--xmlui-borderHorizontalColor-AppHeader, var(--xmlui-borderColor-AppHeader))", "borderLeftColor-AppHeader": "var(--xmlui-borderLeftColor-AppHeader, var(--xmlui-borderHorizontalColor-AppHeader, var(--xmlui-borderColor-AppHeader)))", "borderRightColor-AppHeader": "var(--xmlui-borderRightColor-AppHeader, var(--xmlui-borderHorizontalColor-AppHeader, var(--xmlui-borderColor-AppHeader)))", "borderVerticalColor-AppHeader": "var(--xmlui-borderVerticalColor-AppHeader, var(--xmlui-borderColor-AppHeader))", "borderTopColor-AppHeader": "var(--xmlui-borderTopColor-AppHeader, var(--xmlui-borderVerticalColor-AppHeader, var(--xmlui-borderColor-AppHeader)))", "borderBottomColor-AppHeader": "var(--xmlui-borderBottomColor-AppHeader, var(--xmlui-borderVerticalColor-AppHeader, var(--xmlui-borderColor-AppHeader)))", "borderStartStartRadius-AppHeader": "var(--xmlui-borderStartStartRadius-AppHeader, var(--xmlui-borderRadius-AppHeader))", "borderStartEndRadius-AppHeader": "var(--xmlui-borderStartEndRadius-AppHeader, var(--xmlui-borderRadius-AppHeader))", "borderEndStartRadius-AppHeader": "var(--xmlui-borderEndStartRadius-AppHeader, var(--xmlui-borderRadius-AppHeader))", "borderEndEndRadius-AppHeader": "var(--xmlui-borderEndEndRadius-AppHeader, var(--xmlui-borderRadius-AppHeader))", "width-logo-AppHeader": "var(--xmlui-width-logo-AppHeader)", "align-content-AppHeader": "var(--xmlui-align-content-AppHeader)", "height-AppHeader": "var(--xmlui-height-AppHeader)", "backgroundColor-AppHeader": "var(--xmlui-backgroundColor-AppHeader)", "maxWidth-content-AppHeader": "var(--xmlui-maxWidth-content-AppHeader)", "maxWidth-AppHeader": "var(--xmlui-maxWidth-AppHeader)"}'`;
const styles$F = {
  themeVars: themeVars$E
};
const themeVars$D = '"[]"';
const img = "_img_dk2s3_13";
const clickable$1 = "_clickable_dk2s3_19";
const styles$E = {
  themeVars: themeVars$D,
  img,
  clickable: clickable$1
};
const Image = forwardRef(function Img({ src, alt, fit = "contain", style, onClick, aspectRatio, lazyLoad }, ref) {
  return /* @__PURE__ */ jsx(
    "img",
    {
      src,
      ref,
      alt,
      loading: lazyLoad ? "lazy" : "eager",
      className: classnames(styles$E.img, {
        [styles$E.clickable]: !!onClick
      }),
      style: { objectFit: fit, boxShadow: "none", ...style, flexShrink: 1, aspectRatio },
      onClick
    }
  );
});
const Logo = forwardRef(function Logo2({
  style
}, forwardedRef) {
  const logoUrl = useLogoUrl();
  if (!logoUrl) {
    return null;
  }
  return /* @__PURE__ */ jsx(
    Image,
    {
      ref: forwardedRef,
      src: logoUrl,
      alt: "Logo",
      style: { width: "auto", boxShadow: "none", ...style }
    }
  );
});
const themeVars$C = `'{"padding-NavLink": "var(--xmlui-padding-NavLink)", "paddingHorizontal-NavLink": "var(--xmlui-paddingHorizontal-NavLink, var(--xmlui-padding-NavLink))", "paddingVertical-NavLink": "var(--xmlui-paddingVertical-NavLink, var(--xmlui-padding-NavLink))", "paddingLeft-NavLink": "var(--xmlui-paddingLeft-NavLink, var(--xmlui-paddingHorizontal-NavLink, var(--xmlui-padding-NavLink)))", "paddingRight-NavLink": "var(--xmlui-paddingRight-NavLink, var(--xmlui-paddingHorizontal-NavLink, var(--xmlui-padding-NavLink)))", "paddingTop-NavLink": "var(--xmlui-paddingTop-NavLink, var(--xmlui-paddingVertical-NavLink, var(--xmlui-padding-NavLink)))", "paddingBottom-NavLink": "var(--xmlui-paddingBottom-NavLink, var(--xmlui-paddingVertical-NavLink, var(--xmlui-padding-NavLink)))", "border-NavLink": "var(--xmlui-border-NavLink)", "borderHorizontal-NavLink": "var(--xmlui-borderHorizontal-NavLink, var(--xmlui-border-NavLink))", "borderVertical-NavLink": "var(--xmlui-borderVertical-NavLink, var(--xmlui-border-NavLink))", "borderLeft-NavLink": "var(--xmlui-borderLeft-NavLink, var(--xmlui-borderHorizontal-NavLink, var(--xmlui-border-NavLink)))", "borderRight-NavLink": "var(--xmlui-borderRight-NavLink, var(--xmlui-borderHorizontal-NavLink, var(--xmlui-border-NavLink)))", "borderTop-NavLink": "var(--xmlui-borderTop-NavLink, var(--xmlui-borderVertical-NavLink, var(--xmlui-border-NavLink)))", "borderBottom-NavLink": "var(--xmlui-borderBottom-NavLink, var(--xmlui-borderVertical-NavLink, var(--xmlui-border-NavLink)))", "borderWidth-NavLink": "var(--xmlui-borderWidth-NavLink)", "borderHorizontalWidth-NavLink": "var(--xmlui-borderHorizontalWidth-NavLink, var(--xmlui-borderWidth-NavLink))", "borderLeftWidth-NavLink": "var(--xmlui-borderLeftWidth-NavLink, var(--xmlui-borderHorizontalWidth-NavLink, var(--xmlui-borderWidth-NavLink)))", "borderRightWidth-NavLink": "var(--xmlui-borderRightWidth-NavLink, var(--xmlui-borderHorizontalWidth-NavLink, var(--xmlui-borderWidth-NavLink)))", "borderVerticalWidth-NavLink": "var(--xmlui-borderVerticalWidth-NavLink, var(--xmlui-borderWidth-NavLink))", "borderTopWidth-NavLink": "var(--xmlui-borderTopWidth-NavLink, var(--xmlui-borderVerticalWidth-NavLink, var(--xmlui-borderWidth-NavLink)))", "borderBottomWidth-NavLink": "var(--xmlui-borderBottomWidth-NavLink, var(--xmlui-borderVerticalWidth-NavLink, var(--xmlui-borderWidth-NavLink)))", "borderStyle-NavLink": "var(--xmlui-borderStyle-NavLink)", "borderHorizontalStyle-NavLink": "var(--xmlui-borderHorizontalStyle-NavLink, var(--xmlui-borderStyle-NavLink))", "borderLeftStyle-NavLink": "var(--xmlui-borderLeftStyle-NavLink, var(--xmlui-borderHorizontalStyle-NavLink, var(--xmlui-borderStyle-NavLink)))", "borderRightStyle-NavLink": "var(--xmlui-borderRightStyle-NavLink, var(--xmlui-borderHorizontalStyle-NavLink, var(--xmlui-borderStyle-NavLink)))", "borderVerticalStyle-NavLink": "var(--xmlui-borderVerticalStyle-NavLink, var(--xmlui-borderStyle-NavLink))", "borderTopStyle-NavLink": "var(--xmlui-borderTopStyle-NavLink, var(--xmlui-borderVerticalStyle-NavLink, var(--xmlui-borderStyle-NavLink)))", "borderBottomStyle-NavLink": "var(--xmlui-borderBottomStyle-NavLink, var(--xmlui-borderVerticalStyle-NavLink, var(--xmlui-borderStyle-NavLink)))", "borderColor-NavLink": "var(--xmlui-borderColor-NavLink)", "borderHorizontalColor-NavLink": "var(--xmlui-borderHorizontalColor-NavLink, var(--xmlui-borderColor-NavLink))", "borderLeftColor-NavLink": "var(--xmlui-borderLeftColor-NavLink, var(--xmlui-borderHorizontalColor-NavLink, var(--xmlui-borderColor-NavLink)))", "borderRightColor-NavLink": "var(--xmlui-borderRightColor-NavLink, var(--xmlui-borderHorizontalColor-NavLink, var(--xmlui-borderColor-NavLink)))", "borderVerticalColor-NavLink": "var(--xmlui-borderVerticalColor-NavLink, var(--xmlui-borderColor-NavLink))", "borderTopColor-NavLink": "var(--xmlui-borderTopColor-NavLink, var(--xmlui-borderVerticalColor-NavLink, var(--xmlui-borderColor-NavLink)))", "borderBottomColor-NavLink": "var(--xmlui-borderBottomColor-NavLink, var(--xmlui-borderVerticalColor-NavLink, var(--xmlui-borderColor-NavLink)))", "borderStartStartRadius-NavLink": "var(--xmlui-borderStartStartRadius-NavLink, var(--xmlui-borderRadius-NavLink))", "borderStartEndRadius-NavLink": "var(--xmlui-borderStartEndRadius-NavLink, var(--xmlui-borderRadius-NavLink))", "borderEndStartRadius-NavLink": "var(--xmlui-borderEndStartRadius-NavLink, var(--xmlui-borderRadius-NavLink))", "borderEndEndRadius-NavLink": "var(--xmlui-borderEndEndRadius-NavLink, var(--xmlui-borderRadius-NavLink))", "backgroundColor-NavLink": "var(--xmlui-backgroundColor-NavLink)", "backgroundColor-NavLink--hover": "var(--xmlui-backgroundColor-NavLink--hover)", "backgroundColor-NavLink--hover--active": "var(--xmlui-backgroundColor-NavLink--hover--active)", "backgroundColor-NavLink--active": "var(--xmlui-backgroundColor-NavLink--active)", "backgroundColor-NavLink--pressed": "var(--xmlui-backgroundColor-NavLink--pressed)", "backgroundColor-NavLink--pressed--active": "var(--xmlui-backgroundColor-NavLink--pressed--active)", "fontSize-NavLink": "var(--xmlui-fontSize-NavLink)", "wordWrap-NavLink": "var(--xmlui-wordWrap-NavLink)", "textColor-NavLink": "var(--xmlui-textColor-NavLink)", "textColor-NavLink--hover": "var(--xmlui-textColor-NavLink--hover)", "textColor-NavLink--active": "var(--xmlui-textColor-NavLink--active)", "textColor-NavLink--hover--active": "var(--xmlui-textColor-NavLink--hover--active)", "textColor-NavLink--pressed": "var(--xmlui-textColor-NavLink--pressed)", "textColor-NavLink--pressed--active": "var(--xmlui-textColor-NavLink--pressed--active)", "color-icon-NavLink": "var(--xmlui-color-icon-NavLink)", "fontFamily-NavLink": "var(--xmlui-fontFamily-NavLink)", "fontWeight-NavLink": "var(--xmlui-fontWeight-NavLink)", "fontWeight-NavLink--pressed": "var(--xmlui-fontWeight-NavLink--pressed)", "fontWeight-NavLink--active": "var(--xmlui-fontWeight-NavLink--active)", "borderRadius-indicator-NavLink": "var(--xmlui-borderRadius-indicator-NavLink)", "thickness-indicator-NavLink": "var(--xmlui-thickness-indicator-NavLink)", "color-indicator-NavLink": "var(--xmlui-color-indicator-NavLink)", "color-indicator-NavLink--hover": "var(--xmlui-color-indicator-NavLink--hover)", "color-indicator-NavLink--active": "var(--xmlui-color-indicator-NavLink--active)", "color-indicator-NavLink--pressed": "var(--xmlui-color-indicator-NavLink--pressed)", "outlineWidth-NavLink--focus": "var(--xmlui-outlineWidth-NavLink--focus)", "outlineColor-NavLink--focus": "var(--xmlui-outlineColor-NavLink--focus)", "outlineStyle-NavLink--focus": "var(--xmlui-outlineStyle-NavLink--focus)", "outlineOffset-NavLink--focus": "var(--xmlui-outlineOffset-NavLink--focus)"}'`;
const content$1 = "_content_buj87_13";
const base = "_base_buj87_13";
const includeHoverIndicator = "_includeHoverIndicator_buj87_62";
const displayActive = "_displayActive_buj87_72";
const navItemActive = "_navItemActive_buj87_109";
const disabled$7 = "_disabled_buj87_144";
const vertical$2 = "_vertical_buj87_148";
const navLinkStyles = {
  themeVars: themeVars$C,
  content: content$1,
  base,
  includeHoverIndicator,
  displayActive,
  navItemActive,
  disabled: disabled$7,
  vertical: vertical$2
};
function createUrlWithQueryParams(to) {
  if (!to || typeof to === "string" || typeof to === "number") {
    return to;
  }
  if (to.queryParams !== void 0) {
    return {
      ...to,
      search: new URLSearchParams(omitBy(to.queryParams, isUndefined)).toString()
    };
  }
  return to;
}
const themeVars$B = `'{"border-NavPanel": "var(--xmlui-border-NavPanel)", "borderHorizontal-NavPanel": "var(--xmlui-borderHorizontal-NavPanel, var(--xmlui-border-NavPanel))", "borderVertical-NavPanel": "var(--xmlui-borderVertical-NavPanel, var(--xmlui-border-NavPanel))", "borderLeft-NavPanel": "var(--xmlui-borderLeft-NavPanel, var(--xmlui-borderHorizontal-NavPanel, var(--xmlui-border-NavPanel)))", "borderRight-NavPanel": "var(--xmlui-borderRight-NavPanel, var(--xmlui-borderHorizontal-NavPanel, var(--xmlui-border-NavPanel)))", "borderTop-NavPanel": "var(--xmlui-borderTop-NavPanel, var(--xmlui-borderVertical-NavPanel, var(--xmlui-border-NavPanel)))", "borderBottom-NavPanel": "var(--xmlui-borderBottom-NavPanel, var(--xmlui-borderVertical-NavPanel, var(--xmlui-border-NavPanel)))", "borderWidth-NavPanel": "var(--xmlui-borderWidth-NavPanel)", "borderHorizontalWidth-NavPanel": "var(--xmlui-borderHorizontalWidth-NavPanel, var(--xmlui-borderWidth-NavPanel))", "borderLeftWidth-NavPanel": "var(--xmlui-borderLeftWidth-NavPanel, var(--xmlui-borderHorizontalWidth-NavPanel, var(--xmlui-borderWidth-NavPanel)))", "borderRightWidth-NavPanel": "var(--xmlui-borderRightWidth-NavPanel, var(--xmlui-borderHorizontalWidth-NavPanel, var(--xmlui-borderWidth-NavPanel)))", "borderVerticalWidth-NavPanel": "var(--xmlui-borderVerticalWidth-NavPanel, var(--xmlui-borderWidth-NavPanel))", "borderTopWidth-NavPanel": "var(--xmlui-borderTopWidth-NavPanel, var(--xmlui-borderVerticalWidth-NavPanel, var(--xmlui-borderWidth-NavPanel)))", "borderBottomWidth-NavPanel": "var(--xmlui-borderBottomWidth-NavPanel, var(--xmlui-borderVerticalWidth-NavPanel, var(--xmlui-borderWidth-NavPanel)))", "borderStyle-NavPanel": "var(--xmlui-borderStyle-NavPanel)", "borderHorizontalStyle-NavPanel": "var(--xmlui-borderHorizontalStyle-NavPanel, var(--xmlui-borderStyle-NavPanel))", "borderLeftStyle-NavPanel": "var(--xmlui-borderLeftStyle-NavPanel, var(--xmlui-borderHorizontalStyle-NavPanel, var(--xmlui-borderStyle-NavPanel)))", "borderRightStyle-NavPanel": "var(--xmlui-borderRightStyle-NavPanel, var(--xmlui-borderHorizontalStyle-NavPanel, var(--xmlui-borderStyle-NavPanel)))", "borderVerticalStyle-NavPanel": "var(--xmlui-borderVerticalStyle-NavPanel, var(--xmlui-borderStyle-NavPanel))", "borderTopStyle-NavPanel": "var(--xmlui-borderTopStyle-NavPanel, var(--xmlui-borderVerticalStyle-NavPanel, var(--xmlui-borderStyle-NavPanel)))", "borderBottomStyle-NavPanel": "var(--xmlui-borderBottomStyle-NavPanel, var(--xmlui-borderVerticalStyle-NavPanel, var(--xmlui-borderStyle-NavPanel)))", "borderColor-NavPanel": "var(--xmlui-borderColor-NavPanel)", "borderHorizontalColor-NavPanel": "var(--xmlui-borderHorizontalColor-NavPanel, var(--xmlui-borderColor-NavPanel))", "borderLeftColor-NavPanel": "var(--xmlui-borderLeftColor-NavPanel, var(--xmlui-borderHorizontalColor-NavPanel, var(--xmlui-borderColor-NavPanel)))", "borderRightColor-NavPanel": "var(--xmlui-borderRightColor-NavPanel, var(--xmlui-borderHorizontalColor-NavPanel, var(--xmlui-borderColor-NavPanel)))", "borderVerticalColor-NavPanel": "var(--xmlui-borderVerticalColor-NavPanel, var(--xmlui-borderColor-NavPanel))", "borderTopColor-NavPanel": "var(--xmlui-borderTopColor-NavPanel, var(--xmlui-borderVerticalColor-NavPanel, var(--xmlui-borderColor-NavPanel)))", "borderBottomColor-NavPanel": "var(--xmlui-borderBottomColor-NavPanel, var(--xmlui-borderVerticalColor-NavPanel, var(--xmlui-borderColor-NavPanel)))", "borderStartStartRadius-NavPanel": "var(--xmlui-borderStartStartRadius-NavPanel, var(--xmlui-borderRadius-NavPanel))", "borderStartEndRadius-NavPanel": "var(--xmlui-borderStartEndRadius-NavPanel, var(--xmlui-borderRadius-NavPanel))", "borderEndStartRadius-NavPanel": "var(--xmlui-borderEndStartRadius-NavPanel, var(--xmlui-borderRadius-NavPanel))", "borderEndEndRadius-NavPanel": "var(--xmlui-borderEndEndRadius-NavPanel, var(--xmlui-borderRadius-NavPanel))", "backgroundColor-NavPanel": "var(--xmlui-backgroundColor-NavPanel)", "boxShadow-NavPanel": "var(--xmlui-boxShadow-NavPanel)", "height-AppHeader": "var(--xmlui-height-AppHeader)", "maxWidth-content-App": "var(--xmlui-maxWidth-content-App)", "padding-NavPanel": "var(--xmlui-padding-NavPanel)", "paddingHorizontal-NavPanel": "var(--xmlui-paddingHorizontal-NavPanel)", "paddingVertical-NavPanel": "var(--xmlui-paddingVertical-NavPanel, var(--xmlui-padding-NavPanel))", "paddingLeft-NavPanel": "var(--xmlui-paddingLeft-NavPanel, var(--xmlui-paddingHorizontal-NavPanel, var(--xmlui-padding-NavPanel)))", "paddingRight-NavPanel": "var(--xmlui-paddingRight-NavPanel, var(--xmlui-paddingHorizontal-NavPanel, var(--xmlui-padding-NavPanel)))", "paddingTop-NavPanel": "var(--xmlui-paddingTop-NavPanel, var(--xmlui-paddingVertical-NavPanel, var(--xmlui-padding-NavPanel)))", "paddingBottom-NavPanel": "var(--xmlui-paddingBottom-NavPanel, var(--xmlui-paddingVertical-NavPanel, var(--xmlui-padding-NavPanel)))", "padding-logo-NavPanel": "var(--xmlui-padding-logo-NavPanel)", "paddingHorizontal-logo-NavPanel": "var(--xmlui-paddingHorizontal-logo-NavPanel)", "paddingVertical-logo-NavPanel": "var(--xmlui-paddingVertical-logo-NavPanel)", "paddingLeft-logo-NavPanel": "var(--xmlui-paddingLeft-logo-NavPanel, var(--xmlui-paddingHorizontal-logo-NavPanel, var(--xmlui-padding-logo-NavPanel)))", "paddingRight-logo-NavPanel": "var(--xmlui-paddingRight-logo-NavPanel, var(--xmlui-paddingHorizontal-logo-NavPanel, var(--xmlui-padding-logo-NavPanel)))", "paddingTop-logo-NavPanel": "var(--xmlui-paddingTop-logo-NavPanel, var(--xmlui-paddingVertical-logo-NavPanel, var(--xmlui-padding-logo-NavPanel)))", "paddingBottom-logo-NavPanel": "var(--xmlui-paddingBottom-logo-NavPanel, var(--xmlui-paddingVertical-logo-NavPanel, var(--xmlui-padding-logo-NavPanel)))", "marginBottom-logo-NavPanel": "var(--xmlui-marginBottom-logo-NavPanel)", "paddingVertical-AppHeader": "var(--xmlui-paddingVertical-AppHeader)", "align-content-AppHeader": "var(--xmlui-align-content-AppHeader)"}'`;
const wrapper$4 = "_wrapper_lc3do_13";
const condensed = "_condensed_lc3do_49";
const horizontal$2 = "_horizontal_lc3do_52";
const wrapperInner = "_wrapperInner_lc3do_56";
const logoWrapper = "_logoWrapper_lc3do_75";
const inDrawer = "_inDrawer_lc3do_85";
const styles$D = {
  themeVars: themeVars$B,
  wrapper: wrapper$4,
  condensed,
  horizontal: horizontal$2,
  wrapperInner,
  logoWrapper,
  inDrawer
};
const NavPanelContext = React__default.createContext(null);
const contextValue = {
  inDrawer: true
};
function DrawerNavPanel({
  logoContent,
  children,
  className,
  style
}) {
  const scrollContainerRef = useRef(null);
  return /* @__PURE__ */ jsx(NavPanelContext.Provider, { value: contextValue, children: /* @__PURE__ */ jsx("div", { ref: scrollContainerRef, className: classnames(styles$D.wrapper, className), children: /* @__PURE__ */ jsxs(ScrollContext.Provider, { value: scrollContainerRef, children: [
    /* @__PURE__ */ jsx("div", { className: classnames(styles$D.logoWrapper, styles$D.inDrawer), children: logoContent || /* @__PURE__ */ jsx(Logo, {}) }),
    /* @__PURE__ */ jsx("div", { className: styles$D.wrapperInner, style, children })
  ] }) }) });
}
forwardRef(function NavPanel2({
  children,
  style,
  logoContent,
  className,
  inDrawer: inDrawer2,
  renderChild
}, forwardedRef) {
  var _a;
  const scrollContainerRef = useRef(null);
  const ref = forwardedRef ? composeRefs(scrollContainerRef, forwardedRef) : scrollContainerRef;
  const appLayoutContext = useAppLayoutContext();
  const horizontal2 = getAppLayoutOrientation(appLayoutContext == null ? void 0 : appLayoutContext.layout) === "horizontal";
  const showLogo = (appLayoutContext == null ? void 0 : appLayoutContext.layout) === "vertical" || (appLayoutContext == null ? void 0 : appLayoutContext.layout) === "vertical-sticky";
  const isCondensed = (_a = appLayoutContext == null ? void 0 : appLayoutContext.layout) == null ? void 0 : _a.startsWith("condensed");
  const safeLogoContent = logoContent || renderChild(appLayoutContext == null ? void 0 : appLayoutContext.logoContentDef);
  if (inDrawer2) {
    return /* @__PURE__ */ jsx(DrawerNavPanel, { style, logoContent: safeLogoContent, className, children });
  }
  return /* @__PURE__ */ jsx(
    "div",
    {
      ref,
      className: classnames(styles$D.wrapper, className, {
        [styles$D.horizontal]: horizontal2,
        [styles$D.condensed]: isCondensed
      }),
      children: /* @__PURE__ */ jsxs(ScrollContext.Provider, { value: scrollContainerRef, children: [
        showLogo && /* @__PURE__ */ jsx("div", { className: classnames(styles$D.logoWrapper), children: safeLogoContent || /* @__PURE__ */ jsx(Logo, {}) }),
        /* @__PURE__ */ jsx("div", { className: styles$D.wrapperInner, style, children })
      ] })
    }
  );
});
const NavLink = forwardRef(function NavLink2({
  /* eslint-disable react/prop-types */
  uid,
  children,
  disabled: disabled2,
  to,
  sx = {},
  displayActive: displayActive2 = true,
  vertical: vertical2,
  style,
  onClick,
  icon,
  forceActive,
  ...rest
}, ref) {
  const appLayoutContext = useAppLayoutContext();
  const navPanelContext = useContext(NavPanelContext);
  let safeVertical = vertical2;
  if (appLayoutContext && safeVertical === void 0) {
    safeVertical = getAppLayoutOrientation(appLayoutContext.layout) === "vertical" || (navPanelContext == null ? void 0 : navPanelContext.inDrawer);
  }
  const smartTo = useMemo(() => {
    if (to) {
      return createUrlWithQueryParams(to);
    }
  }, [to]);
  const styleObj = { ...sx, ...style };
  const baseClasses = classnames(navLinkStyles.content, navLinkStyles.base, {
    [navLinkStyles.disabled]: disabled2,
    [navLinkStyles.vertical]: safeVertical,
    [navLinkStyles.includeHoverIndicator]: displayActive2,
    [navLinkStyles.navItemActive]: displayActive2 && forceActive
  });
  let content2;
  if (disabled2 || !smartTo) {
    content2 = /* @__PURE__ */ jsxs(
      "button",
      {
        ...rest,
        ref,
        onClick,
        className: baseClasses,
        style: styleObj,
        disabled: disabled2,
        children: [
          icon,
          children
        ]
      }
    );
  } else {
    content2 = /* @__PURE__ */ jsxs(
      NavLink$1,
      {
        id: uid,
        ...rest,
        ref,
        to: smartTo,
        style: styleObj,
        onClick,
        className: ({ isActive }) => classnames(baseClasses, {
          [navLinkStyles.displayActive]: displayActive2,
          [navLinkStyles.navItemActive]: displayActive2 && (isActive || forceActive)
        }),
        children: [
          icon,
          children
        ]
      }
    );
  }
  return content2;
});
function useLogoUrl() {
  const { logo, logoLight, logoDark } = useAppLayoutContext() || {};
  const logoUrlByTone = {
    light: logoLight,
    dark: logoDark
  };
  const { activeThemeTone } = useTheme();
  const baseLogoUrl = useResourceUrl("resource:logo") || logo;
  const toneLogoUrl = useResourceUrl(`resource:logo-${activeThemeTone}`) || logoUrlByTone[activeThemeTone];
  return toneLogoUrl || baseLogoUrl;
}
function getAppLayoutOrientation(appLayout) {
  switch (appLayout) {
    case "vertical":
    case "vertical-sticky":
    case "vertical-full-header":
      return "vertical";
    default:
      return "horizontal";
  }
}
const COMP$$ = "App";
const AppMd = createMetadata({
  status: "stable",
  description: `The \`${COMP$$}\` component provides a UI frame for XMLUI apps. According to predefined (and run-time configurable) structure templates, \`${COMP$$}\` allows you to display your preferred layout.`,
  props: {
    layout: {
      description: `This property sets the layout template of the app. This setting determines the position and size of the app parts (such as header, navigation bar, footer, etc.) and the app's scroll behavior.`,
      availableValues: appLayoutMd
    },
    loggedInUser: {
      description: `Stores information about the currently logged in user.`,
      valueType: "string"
    },
    logoTemplate: dComponent("Optional template of the app logo"),
    logo: {
      description: "Optional logo path",
      valueType: "string"
    },
    "logo-dark": {
      description: "Optional logo path in dark tone",
      valueType: "string"
    },
    "logo-light": {
      description: "Optional logo path in light tone",
      valueType: "string"
    },
    name: {
      description: "Optional application name (visible in the browser tab)",
      valueType: "string"
    },
    scrollWholePage: {
      description: `This boolean property specifies whether the whole page should scroll (\`true\`) or just the content area (\`false\`). The default value is \`true\`.`,
      valueType: "boolean",
      defaultValue: true
    },
    noScrollbarGutters: {
      description: "This boolean property specifies whether the scrollbar gutters should be hidden.",
      valueType: "boolean",
      defaultValue: false
    },
    defaultTone: {
      description: `This property sets the app's default tone ("light" or "dark").`,
      valueType: "string",
      defaultValue: "light",
      availableValues: ["light", "dark"]
    },
    defaultTheme: {
      description: "This property sets the app's default theme.",
      valueType: "string",
      defaultValue: "xmlui"
    }
  },
  events: {
    ready: d(`This event fires when the \`${COMP$$}\` component finishes rendering on the page.`)
  },
  themeVars: parseScssVar(styles$G.themeVars),
  themeVarDescriptions: {
    "maxWidth‑content‑App": "This theme variable defines the maximum width of the main content. If the main content is broader, the engine adds margins to keep the expected maximum size.",
    "boxShadow‑header‑App": "This theme variable sets the shadow of the app's header section.",
    "boxShadow‑navPanel‑App": "This theme variable sets the shadow of the app's navigation panel section (visible only in vertical layouts).",
    "width‑navPanel‑App": "This theme variable sets the width of the navigation panel when the app is displayed with one of the vertical layouts."
  },
  defaultThemeVars: {
    [`width-navPanel-${COMP$$}`]: "$space-64",
    [`maxWidth-content-${COMP$$}`]: "$maxWidth-content",
    [`boxShadow-header-${COMP$$}`]: "$boxShadow-spread",
    [`boxShadow-navPanel-${COMP$$}`]: "$boxShadow-spread",
    [`scroll-padding-block-Pages`]: "$space-4",
    [`backgroundColor-content-App`]: "$backgroundColor",
    light: {
      // --- No light-specific theme vars
    },
    dark: {
      // --- No dark-specific theme vars
    }
  }
});
function paddingSubject(name, valueSpec) {
  return {
    [`paddingLeft-${name}`]: (valueSpec == null ? void 0 : valueSpec.left) ?? `$paddingHorizontal-${name}`,
    [`paddingRight-${name}`]: (valueSpec == null ? void 0 : valueSpec.right) ?? `$paddingHorizontal-${name}`,
    [`paddingTop-${name}`]: (valueSpec == null ? void 0 : valueSpec.top) ?? `$paddingVertical-${name}`,
    [`paddingBottom-${name}`]: (valueSpec == null ? void 0 : valueSpec.bottom) ?? `$paddingVertical-${name}`,
    [`paddingHorizontal-${name}`]: (valueSpec == null ? void 0 : valueSpec.horizontal) ?? "",
    [`paddingVertical-${name}`]: (valueSpec == null ? void 0 : valueSpec.vertical) ?? "",
    [`padding-${name}`]: (valueSpec == null ? void 0 : valueSpec.all) ?? `$paddingTop-${name} $paddingRight-${name} $paddingBottom-${name} $paddingLeft-${name}`
  };
}
const COMP$_ = "AppHeader";
const AppHeaderMd = createMetadata({
  status: "experimental",
  description: `\`${COMP$_}\` is a placeholder within \`App\` to define a custom application header.`,
  props: {
    profileMenuTemplate: dComponent(
      `This property makes the profile menu slot of the \`${COMP$_}\` component customizable.`
    ),
    logoTemplate: dComponent(
      "This property defines the template to use for the logo. With this property, you can construct your custom logo instead of using a single image."
    ),
    titleTemplate: dComponent(
      "This property defines the template to use for the title. With this property, you can construct your custom title instead of using a single image."
    ),
    title: {
      description: "Title for the application logo",
      valueType: "string"
    },
    showLogo: {
      description: "Show the logo in the header",
      valueType: "boolean",
      defaultValue: true
    }
  },
  themeVars: parseScssVar(styles$F.themeVars),
  themeVarDescriptions: {
    [`padding‑logo‑${COMP$_}`]: "This theme variable sets the padding of the logo in the app header (including all `padding` variants, such as `paddingLeft-logo-AppHeader` and others).",
    [`width‑logo‑${COMP$_}`]: "Sets the width of the displayed logo"
  },
  defaultThemeVars: {
    [`height-${COMP$_}`]: "$space-14",
    [`maxWidth-content-${COMP$_}`]: "$maxWidth-content-App",
    [`maxWidth-${COMP$_}`]: "$maxWidth-App",
    [`borderBottom-${COMP$_}`]: "1px solid $borderColor",
    ...paddingSubject(`logo-${COMP$_}`, { horizontal: "$space-0", vertical: "$space-4" }),
    ...paddingSubject(COMP$_, { horizontal: "$space-4", vertical: "$space-0" }),
    [`borderRadius-${COMP$_}`]: "0px",
    [`backgroundColor-${COMP$_}`]: "$color-surface-raised"
  }
});
const COMP$Z = "AppState";
const AppStateMd = createMetadata({
  description: `${COMP$Z} is a functional component (without a visible user interface) that helps store and manage the app's state.`,
  props: {
    bucket: {
      description: `This property is the identifier of the bucket to which the \`${COMP$Z}\` instance is bound. Multiple \`${COMP$Z}\` instances with the same bucket will share the same state object: any of them updating the state will cause the other instances to view the new, updated state.`,
      valueType: "string",
      defaultValue: "default"
    },
    initialValue: {
      description: `This property contains the initial state value. Though you can use multiple \`${COMP$Z}\`component instances for the same bucket with their \`initialValue\` set, it may result in faulty app logic. When xmlui instantiates an \`${COMP$Z}\` with an explicit initial value, that value is immediately set. Multiple initial values may result in undesired initialization.`
    }
  },
  apis: {
    update: d(
      "This method updates the application state object bound to the `AppState` instance. The function's single argument is an object that specifies the new state value."
    )
  },
  nonVisual: true
});
const themeVars$A = `'{"border-Avatar": "var(--xmlui-border-Avatar)", "borderHorizontal-Avatar": "var(--xmlui-borderHorizontal-Avatar, var(--xmlui-border-Avatar))", "borderVertical-Avatar": "var(--xmlui-borderVertical-Avatar, var(--xmlui-border-Avatar))", "borderLeft-Avatar": "var(--xmlui-borderLeft-Avatar, var(--xmlui-borderHorizontal-Avatar, var(--xmlui-border-Avatar)))", "borderRight-Avatar": "var(--xmlui-borderRight-Avatar, var(--xmlui-borderHorizontal-Avatar, var(--xmlui-border-Avatar)))", "borderTop-Avatar": "var(--xmlui-borderTop-Avatar, var(--xmlui-borderVertical-Avatar, var(--xmlui-border-Avatar)))", "borderBottom-Avatar": "var(--xmlui-borderBottom-Avatar, var(--xmlui-borderVertical-Avatar, var(--xmlui-border-Avatar)))", "borderWidth-Avatar": "var(--xmlui-borderWidth-Avatar)", "borderHorizontalWidth-Avatar": "var(--xmlui-borderHorizontalWidth-Avatar, var(--xmlui-borderWidth-Avatar))", "borderLeftWidth-Avatar": "var(--xmlui-borderLeftWidth-Avatar, var(--xmlui-borderHorizontalWidth-Avatar, var(--xmlui-borderWidth-Avatar)))", "borderRightWidth-Avatar": "var(--xmlui-borderRightWidth-Avatar, var(--xmlui-borderHorizontalWidth-Avatar, var(--xmlui-borderWidth-Avatar)))", "borderVerticalWidth-Avatar": "var(--xmlui-borderVerticalWidth-Avatar, var(--xmlui-borderWidth-Avatar))", "borderTopWidth-Avatar": "var(--xmlui-borderTopWidth-Avatar, var(--xmlui-borderVerticalWidth-Avatar, var(--xmlui-borderWidth-Avatar)))", "borderBottomWidth-Avatar": "var(--xmlui-borderBottomWidth-Avatar, var(--xmlui-borderVerticalWidth-Avatar, var(--xmlui-borderWidth-Avatar)))", "borderStyle-Avatar": "var(--xmlui-borderStyle-Avatar)", "borderHorizontalStyle-Avatar": "var(--xmlui-borderHorizontalStyle-Avatar, var(--xmlui-borderStyle-Avatar))", "borderLeftStyle-Avatar": "var(--xmlui-borderLeftStyle-Avatar, var(--xmlui-borderHorizontalStyle-Avatar, var(--xmlui-borderStyle-Avatar)))", "borderRightStyle-Avatar": "var(--xmlui-borderRightStyle-Avatar, var(--xmlui-borderHorizontalStyle-Avatar, var(--xmlui-borderStyle-Avatar)))", "borderVerticalStyle-Avatar": "var(--xmlui-borderVerticalStyle-Avatar, var(--xmlui-borderStyle-Avatar))", "borderTopStyle-Avatar": "var(--xmlui-borderTopStyle-Avatar, var(--xmlui-borderVerticalStyle-Avatar, var(--xmlui-borderStyle-Avatar)))", "borderBottomStyle-Avatar": "var(--xmlui-borderBottomStyle-Avatar, var(--xmlui-borderVerticalStyle-Avatar, var(--xmlui-borderStyle-Avatar)))", "borderColor-Avatar": "var(--xmlui-borderColor-Avatar)", "borderHorizontalColor-Avatar": "var(--xmlui-borderHorizontalColor-Avatar, var(--xmlui-borderColor-Avatar))", "borderLeftColor-Avatar": "var(--xmlui-borderLeftColor-Avatar, var(--xmlui-borderHorizontalColor-Avatar, var(--xmlui-borderColor-Avatar)))", "borderRightColor-Avatar": "var(--xmlui-borderRightColor-Avatar, var(--xmlui-borderHorizontalColor-Avatar, var(--xmlui-borderColor-Avatar)))", "borderVerticalColor-Avatar": "var(--xmlui-borderVerticalColor-Avatar, var(--xmlui-borderColor-Avatar))", "borderTopColor-Avatar": "var(--xmlui-borderTopColor-Avatar, var(--xmlui-borderVerticalColor-Avatar, var(--xmlui-borderColor-Avatar)))", "borderBottomColor-Avatar": "var(--xmlui-borderBottomColor-Avatar, var(--xmlui-borderVerticalColor-Avatar, var(--xmlui-borderColor-Avatar)))", "borderStartStartRadius-Avatar": "var(--xmlui-borderStartStartRadius-Avatar, var(--xmlui-borderRadius-Avatar))", "borderStartEndRadius-Avatar": "var(--xmlui-borderStartEndRadius-Avatar, var(--xmlui-borderRadius-Avatar))", "borderEndStartRadius-Avatar": "var(--xmlui-borderEndStartRadius-Avatar, var(--xmlui-borderRadius-Avatar))", "borderEndEndRadius-Avatar": "var(--xmlui-borderEndEndRadius-Avatar, var(--xmlui-borderRadius-Avatar))", "backgroundColor-Avatar": "var(--xmlui-backgroundColor-Avatar)", "boxShadow-Avatar": "var(--xmlui-boxShadow-Avatar)", "textColor-Avatar": "var(--xmlui-textColor-Avatar)", "fontWeight-Avatar": "var(--xmlui-fontWeight-Avatar)"}'`;
const container$2 = "_container_17cih_13";
const xs = "_xs_17cih_50";
const sm = "_sm_17cih_57";
const md = "_md_17cih_64";
const lg = "_lg_17cih_71";
const clickable = "_clickable_17cih_78";
const styles$C = {
  themeVars: themeVars$A,
  container: container$2,
  xs,
  sm,
  md,
  lg,
  clickable
};
const defaultProps$f = {
  size: "sm"
};
const Avatar = forwardRef(function Avatar2({ size = defaultProps$f.size, url, name, style, onClick, ...rest }, ref) {
  let abbrev = null;
  if (!url && !!name) {
    abbrev = name.trim().split(" ").filter((word) => !!word.trim().length).map((word) => word[0].toUpperCase()).slice(0, 3);
  }
  return /* @__PURE__ */ jsx(
    "div",
    {
      ...rest,
      ref,
      className: classnames(styles$C.container, {
        [styles$C.xs]: size === "xs",
        [styles$C.sm]: size === "sm",
        [styles$C.md]: size === "md",
        [styles$C.lg]: size === "lg",
        [styles$C.clickable]: !!onClick
      }),
      style: { backgroundImage: url ? `url(${url})` : "none", ...style },
      onClick,
      children: abbrev
    }
  );
});
const COMP$Y = "Avatar";
const AvatarMd = createMetadata({
  description: `The \`${COMP$Y}\` component represents a user, group (or other entity's) avatar with a small image or initials.`,
  props: {
    size: {
      description: `This property defines the display size of the ${COMP$Y}.`,
      availableValues: sizeMd,
      valueType: "string",
      defaultValue: defaultProps$f.size
    },
    name: {
      description: `This property sets the name value the ${COMP$Y} uses to display initials.`,
      valueType: "string"
    },
    url: {
      description: `This property specifies the URL of the image to display in the ${COMP$Y}.`,
      valueType: "string"
    }
  },
  events: {
    click: d("This event is triggered when the avatar is clicked.")
  },
  themeVars: parseScssVar(styles$C.themeVars),
  defaultThemeVars: {
    [`borderRadius-${COMP$Y}`]: "4px",
    [`boxShadow-${COMP$Y}`]: "inset 0 0 0 1px rgba(4,32,69,0.1)",
    [`textColor-${COMP$Y}`]: "$textColor-secondary",
    [`fontWeight-${COMP$Y}`]: "$fontWeight-bold",
    [`border-${COMP$Y}`]: "0px solid $color-surface-400A80",
    [`backgroundColor-${COMP$Y}`]: "$color-surface-100"
  }
});
const themeVars$z = `'{"border-Badge": "var(--xmlui-border-Badge)", "borderHorizontal-Badge": "var(--xmlui-borderHorizontal-Badge, var(--xmlui-border-Badge))", "borderVertical-Badge": "var(--xmlui-borderVertical-Badge, var(--xmlui-border-Badge))", "borderLeft-Badge": "var(--xmlui-borderLeft-Badge, var(--xmlui-borderHorizontal-Badge, var(--xmlui-border-Badge)))", "borderRight-Badge": "var(--xmlui-borderRight-Badge, var(--xmlui-borderHorizontal-Badge, var(--xmlui-border-Badge)))", "borderTop-Badge": "var(--xmlui-borderTop-Badge, var(--xmlui-borderVertical-Badge, var(--xmlui-border-Badge)))", "borderBottom-Badge": "var(--xmlui-borderBottom-Badge, var(--xmlui-borderVertical-Badge, var(--xmlui-border-Badge)))", "borderWidth-Badge": "var(--xmlui-borderWidth-Badge)", "borderHorizontalWidth-Badge": "var(--xmlui-borderHorizontalWidth-Badge, var(--xmlui-borderWidth-Badge))", "borderLeftWidth-Badge": "var(--xmlui-borderLeftWidth-Badge, var(--xmlui-borderHorizontalWidth-Badge, var(--xmlui-borderWidth-Badge)))", "borderRightWidth-Badge": "var(--xmlui-borderRightWidth-Badge, var(--xmlui-borderHorizontalWidth-Badge, var(--xmlui-borderWidth-Badge)))", "borderVerticalWidth-Badge": "var(--xmlui-borderVerticalWidth-Badge, var(--xmlui-borderWidth-Badge))", "borderTopWidth-Badge": "var(--xmlui-borderTopWidth-Badge, var(--xmlui-borderVerticalWidth-Badge, var(--xmlui-borderWidth-Badge)))", "borderBottomWidth-Badge": "var(--xmlui-borderBottomWidth-Badge, var(--xmlui-borderVerticalWidth-Badge, var(--xmlui-borderWidth-Badge)))", "borderStyle-Badge": "var(--xmlui-borderStyle-Badge)", "borderHorizontalStyle-Badge": "var(--xmlui-borderHorizontalStyle-Badge, var(--xmlui-borderStyle-Badge))", "borderLeftStyle-Badge": "var(--xmlui-borderLeftStyle-Badge, var(--xmlui-borderHorizontalStyle-Badge, var(--xmlui-borderStyle-Badge)))", "borderRightStyle-Badge": "var(--xmlui-borderRightStyle-Badge, var(--xmlui-borderHorizontalStyle-Badge, var(--xmlui-borderStyle-Badge)))", "borderVerticalStyle-Badge": "var(--xmlui-borderVerticalStyle-Badge, var(--xmlui-borderStyle-Badge))", "borderTopStyle-Badge": "var(--xmlui-borderTopStyle-Badge, var(--xmlui-borderVerticalStyle-Badge, var(--xmlui-borderStyle-Badge)))", "borderBottomStyle-Badge": "var(--xmlui-borderBottomStyle-Badge, var(--xmlui-borderVerticalStyle-Badge, var(--xmlui-borderStyle-Badge)))", "borderColor-Badge": "var(--xmlui-borderColor-Badge)", "borderHorizontalColor-Badge": "var(--xmlui-borderHorizontalColor-Badge, var(--xmlui-borderColor-Badge))", "borderLeftColor-Badge": "var(--xmlui-borderLeftColor-Badge, var(--xmlui-borderHorizontalColor-Badge, var(--xmlui-borderColor-Badge)))", "borderRightColor-Badge": "var(--xmlui-borderRightColor-Badge, var(--xmlui-borderHorizontalColor-Badge, var(--xmlui-borderColor-Badge)))", "borderVerticalColor-Badge": "var(--xmlui-borderVerticalColor-Badge, var(--xmlui-borderColor-Badge))", "borderTopColor-Badge": "var(--xmlui-borderTopColor-Badge, var(--xmlui-borderVerticalColor-Badge, var(--xmlui-borderColor-Badge)))", "borderBottomColor-Badge": "var(--xmlui-borderBottomColor-Badge, var(--xmlui-borderVerticalColor-Badge, var(--xmlui-borderColor-Badge)))", "borderStartStartRadius-Badge": "var(--xmlui-borderStartStartRadius-Badge, var(--xmlui-borderRadius-Badge))", "borderStartEndRadius-Badge": "var(--xmlui-borderStartEndRadius-Badge, var(--xmlui-borderRadius-Badge))", "borderEndStartRadius-Badge": "var(--xmlui-borderEndStartRadius-Badge, var(--xmlui-borderRadius-Badge))", "borderEndEndRadius-Badge": "var(--xmlui-borderEndEndRadius-Badge, var(--xmlui-borderRadius-Badge))", "padding-Badge": "var(--xmlui-padding-Badge)", "paddingHorizontal-Badge": "var(--xmlui-paddingHorizontal-Badge, var(--xmlui-padding-Badge))", "paddingVertical-Badge": "var(--xmlui-paddingVertical-Badge, var(--xmlui-padding-Badge))", "paddingLeft-Badge": "var(--xmlui-paddingLeft-Badge, var(--xmlui-paddingHorizontal-Badge, var(--xmlui-padding-Badge)))", "paddingRight-Badge": "var(--xmlui-paddingRight-Badge, var(--xmlui-paddingHorizontal-Badge, var(--xmlui-padding-Badge)))", "paddingTop-Badge": "var(--xmlui-paddingTop-Badge, var(--xmlui-paddingVertical-Badge, var(--xmlui-padding-Badge)))", "paddingBottom-Badge": "var(--xmlui-paddingBottom-Badge, var(--xmlui-paddingVertical-Badge, var(--xmlui-padding-Badge)))", "textColor-Badge": "var(--xmlui-textColor-Badge)", "fontFamily-Badge": "var(--xmlui-fontFamily-Badge)", "fontSize-Badge": "var(--xmlui-fontSize-Badge)", "fontStyle-Badge": "var(--xmlui-fontStyle-Badge)", "fontVariant-Badge": "var(--xmlui-fontVariant-Badge)", "fontWeight-Badge": "var(--xmlui-fontWeight-Badge)", "fontStretch-Badge": "var(--xmlui-fontStretch-Badge)", "textDecorationLine-Badge": "var(--xmlui-textDecorationLine-Badge)", "textDecorationColor-Badge": "var(--xmlui-textDecorationColor-Badge)", "textDecorationStyle-Badge": "var(--xmlui-textDecorationStyle-Badge)", "textDecorationThickness-Badge": "var(--xmlui-textDecorationThickness-Badge)", "textUnderlineOffset-Badge": "var(--xmlui-textUnderlineOffset-Badge)", "lineHeight-Badge": "var(--xmlui-lineHeight-Badge)", "backgroundColor-Badge": "var(--xmlui-backgroundColor-Badge)", "textTransform-Badge": "var(--xmlui-textTransform-Badge)", "letterSpacing-Badge": "var(--xmlui-letterSpacing-Badge)", "wordSpacing-Badge": "var(--xmlui-wordSpacing-Badge)", "textShadow-Badge": "var(--xmlui-textShadow-Badge)", "textIndent-Badge": "var(--xmlui-textIndent-Badge)", "textAlign-Badge": "var(--xmlui-textAlign-Badge)", "textAlignLast-Badge": "var(--xmlui-textAlignLast-Badge)", "wordBreak-Badge": "var(--xmlui-wordBreak-Badge)", "wordWrap-Badge": "var(--xmlui-wordWrap-Badge)", "direction-Badge": "var(--xmlui-direction-Badge)", "writingMode-Badge": "var(--xmlui-writingMode-Badge)", "lineBreak-Badge": "var(--xmlui-lineBreak-Badge)", "border-Badge-pill": "var(--xmlui-border-Badge-pill)", "borderHorizontal-Badge-pill": "var(--xmlui-borderHorizontal-Badge-pill, var(--xmlui-border-Badge-pill))", "borderVertical-Badge-pill": "var(--xmlui-borderVertical-Badge-pill, var(--xmlui-border-Badge-pill))", "borderLeft-Badge-pill": "var(--xmlui-borderLeft-Badge-pill, var(--xmlui-borderHorizontal-Badge-pill, var(--xmlui-border-Badge-pill)))", "borderRight-Badge-pill": "var(--xmlui-borderRight-Badge-pill, var(--xmlui-borderHorizontal-Badge-pill, var(--xmlui-border-Badge-pill)))", "borderTop-Badge-pill": "var(--xmlui-borderTop-Badge-pill, var(--xmlui-borderVertical-Badge-pill, var(--xmlui-border-Badge-pill)))", "borderBottom-Badge-pill": "var(--xmlui-borderBottom-Badge-pill, var(--xmlui-borderVertical-Badge-pill, var(--xmlui-border-Badge-pill)))", "borderWidth-Badge-pill": "var(--xmlui-borderWidth-Badge-pill)", "borderHorizontalWidth-Badge-pill": "var(--xmlui-borderHorizontalWidth-Badge-pill, var(--xmlui-borderWidth-Badge-pill))", "borderLeftWidth-Badge-pill": "var(--xmlui-borderLeftWidth-Badge-pill, var(--xmlui-borderHorizontalWidth-Badge-pill, var(--xmlui-borderWidth-Badge-pill)))", "borderRightWidth-Badge-pill": "var(--xmlui-borderRightWidth-Badge-pill, var(--xmlui-borderHorizontalWidth-Badge-pill, var(--xmlui-borderWidth-Badge-pill)))", "borderVerticalWidth-Badge-pill": "var(--xmlui-borderVerticalWidth-Badge-pill, var(--xmlui-borderWidth-Badge-pill))", "borderTopWidth-Badge-pill": "var(--xmlui-borderTopWidth-Badge-pill, var(--xmlui-borderVerticalWidth-Badge-pill, var(--xmlui-borderWidth-Badge-pill)))", "borderBottomWidth-Badge-pill": "var(--xmlui-borderBottomWidth-Badge-pill, var(--xmlui-borderVerticalWidth-Badge-pill, var(--xmlui-borderWidth-Badge-pill)))", "borderStyle-Badge-pill": "var(--xmlui-borderStyle-Badge-pill)", "borderHorizontalStyle-Badge-pill": "var(--xmlui-borderHorizontalStyle-Badge-pill, var(--xmlui-borderStyle-Badge-pill))", "borderLeftStyle-Badge-pill": "var(--xmlui-borderLeftStyle-Badge-pill, var(--xmlui-borderHorizontalStyle-Badge-pill, var(--xmlui-borderStyle-Badge-pill)))", "borderRightStyle-Badge-pill": "var(--xmlui-borderRightStyle-Badge-pill, var(--xmlui-borderHorizontalStyle-Badge-pill, var(--xmlui-borderStyle-Badge-pill)))", "borderVerticalStyle-Badge-pill": "var(--xmlui-borderVerticalStyle-Badge-pill, var(--xmlui-borderStyle-Badge-pill))", "borderTopStyle-Badge-pill": "var(--xmlui-borderTopStyle-Badge-pill, var(--xmlui-borderVerticalStyle-Badge-pill, var(--xmlui-borderStyle-Badge-pill)))", "borderBottomStyle-Badge-pill": "var(--xmlui-borderBottomStyle-Badge-pill, var(--xmlui-borderVerticalStyle-Badge-pill, var(--xmlui-borderStyle-Badge-pill)))", "borderColor-Badge-pill": "var(--xmlui-borderColor-Badge-pill)", "borderHorizontalColor-Badge-pill": "var(--xmlui-borderHorizontalColor-Badge-pill, var(--xmlui-borderColor-Badge-pill))", "borderLeftColor-Badge-pill": "var(--xmlui-borderLeftColor-Badge-pill, var(--xmlui-borderHorizontalColor-Badge-pill, var(--xmlui-borderColor-Badge-pill)))", "borderRightColor-Badge-pill": "var(--xmlui-borderRightColor-Badge-pill, var(--xmlui-borderHorizontalColor-Badge-pill, var(--xmlui-borderColor-Badge-pill)))", "borderVerticalColor-Badge-pill": "var(--xmlui-borderVerticalColor-Badge-pill, var(--xmlui-borderColor-Badge-pill))", "borderTopColor-Badge-pill": "var(--xmlui-borderTopColor-Badge-pill, var(--xmlui-borderVerticalColor-Badge-pill, var(--xmlui-borderColor-Badge-pill)))", "borderBottomColor-Badge-pill": "var(--xmlui-borderBottomColor-Badge-pill, var(--xmlui-borderVerticalColor-Badge-pill, var(--xmlui-borderColor-Badge-pill)))", "borderStartStartRadius-Badge-pill": "var(--xmlui-borderStartStartRadius-Badge-pill, var(--xmlui-borderRadius-Badge-pill))", "borderStartEndRadius-Badge-pill": "var(--xmlui-borderStartEndRadius-Badge-pill, var(--xmlui-borderRadius-Badge-pill))", "borderEndStartRadius-Badge-pill": "var(--xmlui-borderEndStartRadius-Badge-pill, var(--xmlui-borderRadius-Badge-pill))", "borderEndEndRadius-Badge-pill": "var(--xmlui-borderEndEndRadius-Badge-pill, var(--xmlui-borderRadius-Badge-pill))", "padding-Badge-pill": "var(--xmlui-padding-Badge-pill)", "paddingHorizontal-Badge-pill": "var(--xmlui-paddingHorizontal-Badge-pill, var(--xmlui-padding-Badge-pill))", "paddingVertical-Badge-pill": "var(--xmlui-paddingVertical-Badge-pill, var(--xmlui-padding-Badge-pill))", "paddingLeft-Badge-pill": "var(--xmlui-paddingLeft-Badge-pill, var(--xmlui-paddingHorizontal-Badge-pill, var(--xmlui-padding-Badge-pill)))", "paddingRight-Badge-pill": "var(--xmlui-paddingRight-Badge-pill, var(--xmlui-paddingHorizontal-Badge-pill, var(--xmlui-padding-Badge-pill)))", "paddingTop-Badge-pill": "var(--xmlui-paddingTop-Badge-pill, var(--xmlui-paddingVertical-Badge-pill, var(--xmlui-padding-Badge-pill)))", "paddingBottom-Badge-pill": "var(--xmlui-paddingBottom-Badge-pill, var(--xmlui-paddingVertical-Badge-pill, var(--xmlui-padding-Badge-pill)))", "textColor-Badge-pill": "var(--xmlui-textColor-Badge-pill)", "fontFamily-Badge-pill": "var(--xmlui-fontFamily-Badge-pill)", "fontSize-Badge-pill": "var(--xmlui-fontSize-Badge-pill)", "fontStyle-Badge-pill": "var(--xmlui-fontStyle-Badge-pill)", "fontVariant-Badge-pill": "var(--xmlui-fontVariant-Badge-pill)", "fontWeight-Badge-pill": "var(--xmlui-fontWeight-Badge-pill)", "fontStretch-Badge-pill": "var(--xmlui-fontStretch-Badge-pill)", "textDecorationLine-Badge-pill": "var(--xmlui-textDecorationLine-Badge-pill)", "textDecorationColor-Badge-pill": "var(--xmlui-textDecorationColor-Badge-pill)", "textDecorationStyle-Badge-pill": "var(--xmlui-textDecorationStyle-Badge-pill)", "textDecorationThickness-Badge-pill": "var(--xmlui-textDecorationThickness-Badge-pill)", "textUnderlineOffset-Badge-pill": "var(--xmlui-textUnderlineOffset-Badge-pill)", "lineHeight-Badge-pill": "var(--xmlui-lineHeight-Badge-pill)", "backgroundColor-Badge-pill": "var(--xmlui-backgroundColor-Badge-pill)", "textTransform-Badge-pill": "var(--xmlui-textTransform-Badge-pill)", "letterSpacing-Badge-pill": "var(--xmlui-letterSpacing-Badge-pill)", "wordSpacing-Badge-pill": "var(--xmlui-wordSpacing-Badge-pill)", "textShadow-Badge-pill": "var(--xmlui-textShadow-Badge-pill)", "textIndent-Badge-pill": "var(--xmlui-textIndent-Badge-pill)", "textAlign-Badge-pill": "var(--xmlui-textAlign-Badge-pill)", "textAlignLast-Badge-pill": "var(--xmlui-textAlignLast-Badge-pill)", "wordBreak-Badge-pill": "var(--xmlui-wordBreak-Badge-pill)", "wordWrap-Badge-pill": "var(--xmlui-wordWrap-Badge-pill)", "direction-Badge-pill": "var(--xmlui-direction-Badge-pill)", "writingMode-Badge-pill": "var(--xmlui-writingMode-Badge-pill)", "lineBreak-Badge-pill": "var(--xmlui-lineBreak-Badge-pill)"}'`;
const badge$2 = "_badge_fs4n2_13";
const pill = "_pill_fs4n2_73";
const styles$B = {
  themeVars: themeVars$z,
  badge: badge$2,
  pill
};
const badgeVariantValues = ["badge", "pill"];
const defaultProps$e = {
  variant: "badge"
};
forwardRef(function Badge2({ children, color, variant = defaultProps$e.variant, style }, forwardedRef) {
  return /* @__PURE__ */ jsx(
    "div",
    {
      ref: forwardedRef,
      className: classnames({
        [styles$B.badge]: variant === "badge",
        [styles$B.pill]: variant === "pill"
      }),
      style: {
        ...color ? typeof color === "string" ? { backgroundColor: color } : { backgroundColor: color.background, color: color.label } : {},
        ...style
      },
      children
    }
  );
});
const COMP$X = "Badge";
const BadgeMd = createMetadata({
  status: "stable",
  description: `The \`${COMP$X}\` is a text label that accepts a color map to define its background color and, optionally, its label color.`,
  props: {
    value: {
      description: "The text that the component displays",
      type: "string",
      isRequired: true
    },
    variant: {
      description: "Modifies the shape of the component. Comes in the regular `badge` variant or the `pill` variant with fully rounded corners.",
      type: "string",
      availableValues: badgeVariantValues,
      defaultValue: "badge"
    },
    colorMap: {
      description: `The \`${COMP$X}\` component supports the mapping of a list of colors using the \`value\` prop as the key. Provide the component with a list or key-value pairs in two ways:`
    },
    themeColor: dInternal(`(**NOT IMPLEMENTED YET**) The theme color of the component.`),
    indicatorText: dInternal(
      `(**NOT IMPLEMENTED YET**) This property defines the text to display in the indicator. If it is not defined or empty, no indicator is displayed unless the \`forceIndicator\` property is set.`
    ),
    forceIndicator: dInternal(
      `(**NOT IMPLEMENTED YET**) This property forces the display of the indicator, even if the \`indicatorText\` property is not defined or empty.`
    ),
    indicatorThemeColor: dInternal(`(**NOT IMPLEMENTED YET**) The theme color of the indicator.`),
    indicatorPosition: dInternal(`(**NOT IMPLEMENTED YET**) The position of the indicator.`)
  },
  events: {},
  themeVars: parseScssVar(styles$B.themeVars),
  defaultThemeVars: {
    [`padding-${COMP$X}`]: `$space-0_5 $space-2`,
    [`border-${COMP$X}`]: `0px solid $borderColor`,
    [`padding-${COMP$X}-pill`]: `$space-0_5 $space-2`,
    [`borderRadius-${COMP$X}`]: "4px",
    [`fontSize-${COMP$X}`]: "0.8em",
    [`fontSize-${COMP$X}-pill`]: "0.8em",
    [`backgroundColor-${COMP$X}`]: "rgba($color-secondary-500-rgb, .6)",
    [`textColor-${COMP$X}`]: "$const-color-surface-0"
  }
});
const TableOfContentsContext = createContext(null);
const BookmarkMd = createMetadata({
  description: "As its name suggests, this component places a bookmark into its parent component's view. The component has an `id` that you can use in links to navigate (scroll to) the bookmark's location.",
  opaque: true,
  props: {
    uid: {
      description: "The unique identifier of the bookmark. You can use this identifier in links to navigate to this component's location.",
      valueType: "string"
    },
    level: {
      description: "The level of the bookmark. The level is used to determine the bookmark's position in the table of contents.",
      valueType: "number",
      defaultValue: 1
    },
    title: {
      description: "Defines the text to display the bookmark in the table of contents. If this property is empty, the text falls back to the value of `id`.",
      valueType: "string"
    },
    omitFromToc: {
      description: "If true, this bookmark will be excluded from the table of contents.",
      valueType: "boolean",
      defaultValue: false
    }
  }
});
const themeVars$y = `'{"padding-Card": "var(--xmlui-padding-Card)", "paddingHorizontal-Card": "var(--xmlui-paddingHorizontal-Card, var(--xmlui-padding-Card))", "paddingVertical-Card": "var(--xmlui-paddingVertical-Card, var(--xmlui-padding-Card))", "paddingLeft-Card": "var(--xmlui-paddingLeft-Card, var(--xmlui-paddingHorizontal-Card, var(--xmlui-padding-Card)))", "paddingRight-Card": "var(--xmlui-paddingRight-Card, var(--xmlui-paddingHorizontal-Card, var(--xmlui-padding-Card)))", "paddingTop-Card": "var(--xmlui-paddingTop-Card, var(--xmlui-paddingVertical-Card, var(--xmlui-padding-Card)))", "paddingBottom-Card": "var(--xmlui-paddingBottom-Card, var(--xmlui-paddingVertical-Card, var(--xmlui-padding-Card)))", "border-Card": "var(--xmlui-border-Card)", "borderHorizontal-Card": "var(--xmlui-borderHorizontal-Card, var(--xmlui-border-Card))", "borderVertical-Card": "var(--xmlui-borderVertical-Card, var(--xmlui-border-Card))", "borderLeft-Card": "var(--xmlui-borderLeft-Card, var(--xmlui-borderHorizontal-Card, var(--xmlui-border-Card)))", "borderRight-Card": "var(--xmlui-borderRight-Card, var(--xmlui-borderHorizontal-Card, var(--xmlui-border-Card)))", "borderTop-Card": "var(--xmlui-borderTop-Card, var(--xmlui-borderVertical-Card, var(--xmlui-border-Card)))", "borderBottom-Card": "var(--xmlui-borderBottom-Card, var(--xmlui-borderVertical-Card, var(--xmlui-border-Card)))", "borderWidth-Card": "var(--xmlui-borderWidth-Card)", "borderHorizontalWidth-Card": "var(--xmlui-borderHorizontalWidth-Card, var(--xmlui-borderWidth-Card))", "borderLeftWidth-Card": "var(--xmlui-borderLeftWidth-Card, var(--xmlui-borderHorizontalWidth-Card, var(--xmlui-borderWidth-Card)))", "borderRightWidth-Card": "var(--xmlui-borderRightWidth-Card, var(--xmlui-borderHorizontalWidth-Card, var(--xmlui-borderWidth-Card)))", "borderVerticalWidth-Card": "var(--xmlui-borderVerticalWidth-Card, var(--xmlui-borderWidth-Card))", "borderTopWidth-Card": "var(--xmlui-borderTopWidth-Card, var(--xmlui-borderVerticalWidth-Card, var(--xmlui-borderWidth-Card)))", "borderBottomWidth-Card": "var(--xmlui-borderBottomWidth-Card, var(--xmlui-borderVerticalWidth-Card, var(--xmlui-borderWidth-Card)))", "borderStyle-Card": "var(--xmlui-borderStyle-Card)", "borderHorizontalStyle-Card": "var(--xmlui-borderHorizontalStyle-Card, var(--xmlui-borderStyle-Card))", "borderLeftStyle-Card": "var(--xmlui-borderLeftStyle-Card, var(--xmlui-borderHorizontalStyle-Card, var(--xmlui-borderStyle-Card)))", "borderRightStyle-Card": "var(--xmlui-borderRightStyle-Card, var(--xmlui-borderHorizontalStyle-Card, var(--xmlui-borderStyle-Card)))", "borderVerticalStyle-Card": "var(--xmlui-borderVerticalStyle-Card, var(--xmlui-borderStyle-Card))", "borderTopStyle-Card": "var(--xmlui-borderTopStyle-Card, var(--xmlui-borderVerticalStyle-Card, var(--xmlui-borderStyle-Card)))", "borderBottomStyle-Card": "var(--xmlui-borderBottomStyle-Card, var(--xmlui-borderVerticalStyle-Card, var(--xmlui-borderStyle-Card)))", "borderColor-Card": "var(--xmlui-borderColor-Card)", "borderHorizontalColor-Card": "var(--xmlui-borderHorizontalColor-Card, var(--xmlui-borderColor-Card))", "borderLeftColor-Card": "var(--xmlui-borderLeftColor-Card, var(--xmlui-borderHorizontalColor-Card, var(--xmlui-borderColor-Card)))", "borderRightColor-Card": "var(--xmlui-borderRightColor-Card, var(--xmlui-borderHorizontalColor-Card, var(--xmlui-borderColor-Card)))", "borderVerticalColor-Card": "var(--xmlui-borderVerticalColor-Card, var(--xmlui-borderColor-Card))", "borderTopColor-Card": "var(--xmlui-borderTopColor-Card, var(--xmlui-borderVerticalColor-Card, var(--xmlui-borderColor-Card)))", "borderBottomColor-Card": "var(--xmlui-borderBottomColor-Card, var(--xmlui-borderVerticalColor-Card, var(--xmlui-borderColor-Card)))", "borderStartStartRadius-Card": "var(--xmlui-borderStartStartRadius-Card, var(--xmlui-borderRadius-Card))", "borderStartEndRadius-Card": "var(--xmlui-borderStartEndRadius-Card, var(--xmlui-borderRadius-Card))", "borderEndStartRadius-Card": "var(--xmlui-borderEndStartRadius-Card, var(--xmlui-borderRadius-Card))", "borderEndEndRadius-Card": "var(--xmlui-borderEndEndRadius-Card, var(--xmlui-borderRadius-Card))", "boxShadow-Card": "var(--xmlui-boxShadow-Card)", "backgroundColor-Card": "var(--xmlui-backgroundColor-Card)", "borderRadius-Card": "var(--xmlui-borderRadius-Card)", "gap-Card": "var(--xmlui-gap-Card)", "gap-title-Card": "var(--xmlui-gap-title-Card)", "gap-avatar-Card": "var(--xmlui-gap-avatar-Card)", "horizontalAlignment-title-Card": "var(--xmlui-horizontalAlignment-title-Card)", "verticalAlignment-title-Card": "var(--xmlui-verticalAlignment-title-Card)"}'`;
const wrapper$3 = "_wrapper_1arn2_13";
const avatarWrapper = "_avatarWrapper_1arn2_46";
const titleWrapper = "_titleWrapper_1arn2_52";
const horizontal$1 = "_horizontal_1arn2_59";
const vertical$1 = "_vertical_1arn2_63";
const isClickable = "_isClickable_1arn2_66";
const styles$A = {
  themeVars: themeVars$y,
  wrapper: wrapper$3,
  avatarWrapper,
  titleWrapper,
  horizontal: horizontal$1,
  vertical: vertical$1,
  isClickable
};
const themeVars$x = `'{"padding-Link": "var(--xmlui-padding-Link)", "paddingHorizontal-Link": "var(--xmlui-paddingHorizontal-Link, var(--xmlui-padding-Link))", "paddingVertical-Link": "var(--xmlui-paddingVertical-Link, var(--xmlui-padding-Link))", "paddingLeft-Link": "var(--xmlui-paddingLeft-Link, var(--xmlui-paddingHorizontal-Link, var(--xmlui-padding-Link)))", "paddingRight-Link": "var(--xmlui-paddingRight-Link, var(--xmlui-paddingHorizontal-Link, var(--xmlui-padding-Link)))", "paddingTop-Link": "var(--xmlui-paddingTop-Link, var(--xmlui-paddingVertical-Link, var(--xmlui-padding-Link)))", "paddingBottom-Link": "var(--xmlui-paddingBottom-Link, var(--xmlui-paddingVertical-Link, var(--xmlui-padding-Link)))", "padding-icon-Link": "var(--xmlui-padding-icon-Link)", "paddingHorizontal-icon-Link": "var(--xmlui-paddingHorizontal-icon-Link, var(--xmlui-padding-icon-Link))", "paddingVertical-icon-Link": "var(--xmlui-paddingVertical-icon-Link, var(--xmlui-padding-icon-Link))", "paddingLeft-icon-Link": "var(--xmlui-paddingLeft-icon-Link, var(--xmlui-paddingHorizontal-icon-Link, var(--xmlui-padding-icon-Link)))", "paddingRight-icon-Link": "var(--xmlui-paddingRight-icon-Link, var(--xmlui-paddingHorizontal-icon-Link, var(--xmlui-padding-icon-Link)))", "paddingTop-icon-Link": "var(--xmlui-paddingTop-icon-Link, var(--xmlui-paddingVertical-icon-Link, var(--xmlui-padding-icon-Link)))", "paddingBottom-icon-Link": "var(--xmlui-paddingBottom-icon-Link, var(--xmlui-paddingVertical-icon-Link, var(--xmlui-padding-icon-Link)))", "border-Link": "var(--xmlui-border-Link)", "borderHorizontal-Link": "var(--xmlui-borderHorizontal-Link, var(--xmlui-border-Link))", "borderVertical-Link": "var(--xmlui-borderVertical-Link, var(--xmlui-border-Link))", "borderLeft-Link": "var(--xmlui-borderLeft-Link, var(--xmlui-borderHorizontal-Link, var(--xmlui-border-Link)))", "borderRight-Link": "var(--xmlui-borderRight-Link, var(--xmlui-borderHorizontal-Link, var(--xmlui-border-Link)))", "borderTop-Link": "var(--xmlui-borderTop-Link, var(--xmlui-borderVertical-Link, var(--xmlui-border-Link)))", "borderBottom-Link": "var(--xmlui-borderBottom-Link, var(--xmlui-borderVertical-Link, var(--xmlui-border-Link)))", "borderWidth-Link": "var(--xmlui-borderWidth-Link)", "borderHorizontalWidth-Link": "var(--xmlui-borderHorizontalWidth-Link, var(--xmlui-borderWidth-Link))", "borderLeftWidth-Link": "var(--xmlui-borderLeftWidth-Link, var(--xmlui-borderHorizontalWidth-Link, var(--xmlui-borderWidth-Link)))", "borderRightWidth-Link": "var(--xmlui-borderRightWidth-Link, var(--xmlui-borderHorizontalWidth-Link, var(--xmlui-borderWidth-Link)))", "borderVerticalWidth-Link": "var(--xmlui-borderVerticalWidth-Link, var(--xmlui-borderWidth-Link))", "borderTopWidth-Link": "var(--xmlui-borderTopWidth-Link, var(--xmlui-borderVerticalWidth-Link, var(--xmlui-borderWidth-Link)))", "borderBottomWidth-Link": "var(--xmlui-borderBottomWidth-Link, var(--xmlui-borderVerticalWidth-Link, var(--xmlui-borderWidth-Link)))", "borderStyle-Link": "var(--xmlui-borderStyle-Link)", "borderHorizontalStyle-Link": "var(--xmlui-borderHorizontalStyle-Link, var(--xmlui-borderStyle-Link))", "borderLeftStyle-Link": "var(--xmlui-borderLeftStyle-Link, var(--xmlui-borderHorizontalStyle-Link, var(--xmlui-borderStyle-Link)))", "borderRightStyle-Link": "var(--xmlui-borderRightStyle-Link, var(--xmlui-borderHorizontalStyle-Link, var(--xmlui-borderStyle-Link)))", "borderVerticalStyle-Link": "var(--xmlui-borderVerticalStyle-Link, var(--xmlui-borderStyle-Link))", "borderTopStyle-Link": "var(--xmlui-borderTopStyle-Link, var(--xmlui-borderVerticalStyle-Link, var(--xmlui-borderStyle-Link)))", "borderBottomStyle-Link": "var(--xmlui-borderBottomStyle-Link, var(--xmlui-borderVerticalStyle-Link, var(--xmlui-borderStyle-Link)))", "borderColor-Link": "var(--xmlui-borderColor-Link)", "borderHorizontalColor-Link": "var(--xmlui-borderHorizontalColor-Link, var(--xmlui-borderColor-Link))", "borderLeftColor-Link": "var(--xmlui-borderLeftColor-Link, var(--xmlui-borderHorizontalColor-Link, var(--xmlui-borderColor-Link)))", "borderRightColor-Link": "var(--xmlui-borderRightColor-Link, var(--xmlui-borderHorizontalColor-Link, var(--xmlui-borderColor-Link)))", "borderVerticalColor-Link": "var(--xmlui-borderVerticalColor-Link, var(--xmlui-borderColor-Link))", "borderTopColor-Link": "var(--xmlui-borderTopColor-Link, var(--xmlui-borderVerticalColor-Link, var(--xmlui-borderColor-Link)))", "borderBottomColor-Link": "var(--xmlui-borderBottomColor-Link, var(--xmlui-borderVerticalColor-Link, var(--xmlui-borderColor-Link)))", "borderStartStartRadius-Link": "var(--xmlui-borderStartStartRadius-Link, var(--xmlui-borderRadius-Link))", "borderStartEndRadius-Link": "var(--xmlui-borderStartEndRadius-Link, var(--xmlui-borderRadius-Link))", "borderEndStartRadius-Link": "var(--xmlui-borderEndStartRadius-Link, var(--xmlui-borderRadius-Link))", "borderEndEndRadius-Link": "var(--xmlui-borderEndEndRadius-Link, var(--xmlui-borderRadius-Link))", "textColor-Link": "var(--xmlui-textColor-Link)", "fontFamily-Link": "var(--xmlui-fontFamily-Link)", "fontSize-Link": "var(--xmlui-fontSize-Link)", "fontStyle-Link": "var(--xmlui-fontStyle-Link)", "fontVariant-Link": "var(--xmlui-fontVariant-Link)", "fontWeight-Link": "var(--xmlui-fontWeight-Link)", "fontStretch-Link": "var(--xmlui-fontStretch-Link)", "textDecorationLine-Link": "var(--xmlui-textDecorationLine-Link)", "textDecorationColor-Link": "var(--xmlui-textDecorationColor-Link)", "textDecorationStyle-Link": "var(--xmlui-textDecorationStyle-Link)", "textDecorationThickness-Link": "var(--xmlui-textDecorationThickness-Link)", "textUnderlineOffset-Link": "var(--xmlui-textUnderlineOffset-Link)", "lineHeight-Link": "var(--xmlui-lineHeight-Link)", "backgroundColor-Link": "var(--xmlui-backgroundColor-Link)", "textTransform-Link": "var(--xmlui-textTransform-Link)", "letterSpacing-Link": "var(--xmlui-letterSpacing-Link)", "wordSpacing-Link": "var(--xmlui-wordSpacing-Link)", "textShadow-Link": "var(--xmlui-textShadow-Link)", "textIndent-Link": "var(--xmlui-textIndent-Link)", "textAlign-Link": "var(--xmlui-textAlign-Link)", "textAlignLast-Link": "var(--xmlui-textAlignLast-Link)", "wordBreak-Link": "var(--xmlui-wordBreak-Link)", "wordWrap-Link": "var(--xmlui-wordWrap-Link)", "direction-Link": "var(--xmlui-direction-Link)", "writingMode-Link": "var(--xmlui-writingMode-Link)", "lineBreak-Link": "var(--xmlui-lineBreak-Link)", "textColor-Link--active": "var(--xmlui-textColor-Link--active)", "textColor-Link--hover": "var(--xmlui-textColor-Link--hover)", "textColor-Link--hover--active": "var(--xmlui-textColor-Link--hover--active)", "fontWeight-Link--active": "var(--xmlui-fontWeight-Link--active)", "gap-icon-Link": "var(--xmlui-gap-icon-Link)", "outlineWidth-Link--focus": "var(--xmlui-outlineWidth-Link--focus)", "outlineColor-Link--focus": "var(--xmlui-outlineColor-Link--focus)", "outlineStyle-Link--focus": "var(--xmlui-outlineStyle-Link--focus)", "outlineOffset-Link--focus": "var(--xmlui-outlineOffset-Link--focus)"}'`;
const container$1 = "_container_gmmz2_13";
const active$2 = "_active_gmmz2_74";
const disabled$6 = "_disabled_gmmz2_78";
const iconWrapper = "_iconWrapper_gmmz2_94";
const styles$z = {
  themeVars: themeVars$x,
  container: container$1,
  active: active$2,
  disabled: disabled$6,
  iconWrapper
};
const LocalLink = forwardRef(function LocalLink2(props, forwardedRef) {
  const { to, children, icon, active: active2, onClick, target: target2, disabled: disabled2, style, ...anchorProps } = specifyTypes(props);
  const iconLink = !!icon && !children;
  const smartTo = useMemo(() => {
    return createUrlWithQueryParams(to);
  }, [to]);
  const Node = !to ? "div" : Link;
  return /* @__PURE__ */ jsxs(
    Node,
    {
      ref: forwardedRef,
      to: smartTo,
      style,
      target: target2,
      onClick,
      className: classnames(styles$z.container, {
        [styles$z.iconLink]: iconLink,
        [styles$z.active]: active2,
        [styles$z.disabled]: disabled2
      }),
      ...anchorProps,
      children: [
        icon && /* @__PURE__ */ jsx("div", { className: styles$z.iconWrapper, children: /* @__PURE__ */ jsx(Icon, { name: icon }) }),
        children
      ]
    }
  );
});
function specifyTypes(props) {
  const { target: target2, referrerPolicy } = props;
  return {
    ...props,
    target: target2,
    referrerPolicy
  };
}
const themeVars$w = `'{"border-H1": "var(--xmlui-border-H1)", "borderHorizontal-H1": "var(--xmlui-borderHorizontal-H1, var(--xmlui-border-H1))", "borderVertical-H1": "var(--xmlui-borderVertical-H1, var(--xmlui-border-H1))", "borderLeft-H1": "var(--xmlui-borderLeft-H1, var(--xmlui-borderHorizontal-H1, var(--xmlui-border-H1)))", "borderRight-H1": "var(--xmlui-borderRight-H1, var(--xmlui-borderHorizontal-H1, var(--xmlui-border-H1)))", "borderTop-H1": "var(--xmlui-borderTop-H1, var(--xmlui-borderVertical-H1, var(--xmlui-border-H1)))", "borderBottom-H1": "var(--xmlui-borderBottom-H1, var(--xmlui-borderVertical-H1, var(--xmlui-border-H1)))", "borderWidth-H1": "var(--xmlui-borderWidth-H1)", "borderHorizontalWidth-H1": "var(--xmlui-borderHorizontalWidth-H1, var(--xmlui-borderWidth-H1))", "borderLeftWidth-H1": "var(--xmlui-borderLeftWidth-H1, var(--xmlui-borderHorizontalWidth-H1, var(--xmlui-borderWidth-H1)))", "borderRightWidth-H1": "var(--xmlui-borderRightWidth-H1, var(--xmlui-borderHorizontalWidth-H1, var(--xmlui-borderWidth-H1)))", "borderVerticalWidth-H1": "var(--xmlui-borderVerticalWidth-H1, var(--xmlui-borderWidth-H1))", "borderTopWidth-H1": "var(--xmlui-borderTopWidth-H1, var(--xmlui-borderVerticalWidth-H1, var(--xmlui-borderWidth-H1)))", "borderBottomWidth-H1": "var(--xmlui-borderBottomWidth-H1, var(--xmlui-borderVerticalWidth-H1, var(--xmlui-borderWidth-H1)))", "borderStyle-H1": "var(--xmlui-borderStyle-H1)", "borderHorizontalStyle-H1": "var(--xmlui-borderHorizontalStyle-H1, var(--xmlui-borderStyle-H1))", "borderLeftStyle-H1": "var(--xmlui-borderLeftStyle-H1, var(--xmlui-borderHorizontalStyle-H1, var(--xmlui-borderStyle-H1)))", "borderRightStyle-H1": "var(--xmlui-borderRightStyle-H1, var(--xmlui-borderHorizontalStyle-H1, var(--xmlui-borderStyle-H1)))", "borderVerticalStyle-H1": "var(--xmlui-borderVerticalStyle-H1, var(--xmlui-borderStyle-H1))", "borderTopStyle-H1": "var(--xmlui-borderTopStyle-H1, var(--xmlui-borderVerticalStyle-H1, var(--xmlui-borderStyle-H1)))", "borderBottomStyle-H1": "var(--xmlui-borderBottomStyle-H1, var(--xmlui-borderVerticalStyle-H1, var(--xmlui-borderStyle-H1)))", "borderColor-H1": "var(--xmlui-borderColor-H1)", "borderHorizontalColor-H1": "var(--xmlui-borderHorizontalColor-H1, var(--xmlui-borderColor-H1))", "borderLeftColor-H1": "var(--xmlui-borderLeftColor-H1, var(--xmlui-borderHorizontalColor-H1, var(--xmlui-borderColor-H1)))", "borderRightColor-H1": "var(--xmlui-borderRightColor-H1, var(--xmlui-borderHorizontalColor-H1, var(--xmlui-borderColor-H1)))", "borderVerticalColor-H1": "var(--xmlui-borderVerticalColor-H1, var(--xmlui-borderColor-H1))", "borderTopColor-H1": "var(--xmlui-borderTopColor-H1, var(--xmlui-borderVerticalColor-H1, var(--xmlui-borderColor-H1)))", "borderBottomColor-H1": "var(--xmlui-borderBottomColor-H1, var(--xmlui-borderVerticalColor-H1, var(--xmlui-borderColor-H1)))", "borderStartStartRadius-H1": "var(--xmlui-borderStartStartRadius-H1, var(--xmlui-borderRadius-H1))", "borderStartEndRadius-H1": "var(--xmlui-borderStartEndRadius-H1, var(--xmlui-borderRadius-H1))", "borderEndStartRadius-H1": "var(--xmlui-borderEndStartRadius-H1, var(--xmlui-borderRadius-H1))", "borderEndEndRadius-H1": "var(--xmlui-borderEndEndRadius-H1, var(--xmlui-borderRadius-H1))", "padding-H1": "var(--xmlui-padding-H1)", "paddingHorizontal-H1": "var(--xmlui-paddingHorizontal-H1, var(--xmlui-padding-H1))", "paddingVertical-H1": "var(--xmlui-paddingVertical-H1, var(--xmlui-padding-H1))", "paddingLeft-H1": "var(--xmlui-paddingLeft-H1, var(--xmlui-paddingHorizontal-H1, var(--xmlui-padding-H1)))", "paddingRight-H1": "var(--xmlui-paddingRight-H1, var(--xmlui-paddingHorizontal-H1, var(--xmlui-padding-H1)))", "paddingTop-H1": "var(--xmlui-paddingTop-H1, var(--xmlui-paddingVertical-H1, var(--xmlui-padding-H1)))", "paddingBottom-H1": "var(--xmlui-paddingBottom-H1, var(--xmlui-paddingVertical-H1, var(--xmlui-padding-H1)))", "textColor-H1": "var(--xmlui-textColor-H1)", "fontFamily-H1": "var(--xmlui-fontFamily-H1)", "fontSize-H1": "var(--xmlui-fontSize-H1)", "fontStyle-H1": "var(--xmlui-fontStyle-H1)", "fontVariant-H1": "var(--xmlui-fontVariant-H1)", "fontWeight-H1": "var(--xmlui-fontWeight-H1)", "fontStretch-H1": "var(--xmlui-fontStretch-H1)", "textDecorationLine-H1": "var(--xmlui-textDecorationLine-H1)", "textDecorationColor-H1": "var(--xmlui-textDecorationColor-H1)", "textDecorationStyle-H1": "var(--xmlui-textDecorationStyle-H1)", "textDecorationThickness-H1": "var(--xmlui-textDecorationThickness-H1)", "textUnderlineOffset-H1": "var(--xmlui-textUnderlineOffset-H1)", "lineHeight-H1": "var(--xmlui-lineHeight-H1)", "backgroundColor-H1": "var(--xmlui-backgroundColor-H1)", "textTransform-H1": "var(--xmlui-textTransform-H1)", "letterSpacing-H1": "var(--xmlui-letterSpacing-H1)", "wordSpacing-H1": "var(--xmlui-wordSpacing-H1)", "textShadow-H1": "var(--xmlui-textShadow-H1)", "textIndent-H1": "var(--xmlui-textIndent-H1)", "textAlign-H1": "var(--xmlui-textAlign-H1)", "textAlignLast-H1": "var(--xmlui-textAlignLast-H1)", "wordBreak-H1": "var(--xmlui-wordBreak-H1)", "wordWrap-H1": "var(--xmlui-wordWrap-H1)", "direction-H1": "var(--xmlui-direction-H1)", "writingMode-H1": "var(--xmlui-writingMode-H1)", "lineBreak-H1": "var(--xmlui-lineBreak-H1)", "border-H2": "var(--xmlui-border-H2)", "borderHorizontal-H2": "var(--xmlui-borderHorizontal-H2, var(--xmlui-border-H2))", "borderVertical-H2": "var(--xmlui-borderVertical-H2, var(--xmlui-border-H2))", "borderLeft-H2": "var(--xmlui-borderLeft-H2, var(--xmlui-borderHorizontal-H2, var(--xmlui-border-H2)))", "borderRight-H2": "var(--xmlui-borderRight-H2, var(--xmlui-borderHorizontal-H2, var(--xmlui-border-H2)))", "borderTop-H2": "var(--xmlui-borderTop-H2, var(--xmlui-borderVertical-H2, var(--xmlui-border-H2)))", "borderBottom-H2": "var(--xmlui-borderBottom-H2, var(--xmlui-borderVertical-H2, var(--xmlui-border-H2)))", "borderWidth-H2": "var(--xmlui-borderWidth-H2)", "borderHorizontalWidth-H2": "var(--xmlui-borderHorizontalWidth-H2, var(--xmlui-borderWidth-H2))", "borderLeftWidth-H2": "var(--xmlui-borderLeftWidth-H2, var(--xmlui-borderHorizontalWidth-H2, var(--xmlui-borderWidth-H2)))", "borderRightWidth-H2": "var(--xmlui-borderRightWidth-H2, var(--xmlui-borderHorizontalWidth-H2, var(--xmlui-borderWidth-H2)))", "borderVerticalWidth-H2": "var(--xmlui-borderVerticalWidth-H2, var(--xmlui-borderWidth-H2))", "borderTopWidth-H2": "var(--xmlui-borderTopWidth-H2, var(--xmlui-borderVerticalWidth-H2, var(--xmlui-borderWidth-H2)))", "borderBottomWidth-H2": "var(--xmlui-borderBottomWidth-H2, var(--xmlui-borderVerticalWidth-H2, var(--xmlui-borderWidth-H2)))", "borderStyle-H2": "var(--xmlui-borderStyle-H2)", "borderHorizontalStyle-H2": "var(--xmlui-borderHorizontalStyle-H2, var(--xmlui-borderStyle-H2))", "borderLeftStyle-H2": "var(--xmlui-borderLeftStyle-H2, var(--xmlui-borderHorizontalStyle-H2, var(--xmlui-borderStyle-H2)))", "borderRightStyle-H2": "var(--xmlui-borderRightStyle-H2, var(--xmlui-borderHorizontalStyle-H2, var(--xmlui-borderStyle-H2)))", "borderVerticalStyle-H2": "var(--xmlui-borderVerticalStyle-H2, var(--xmlui-borderStyle-H2))", "borderTopStyle-H2": "var(--xmlui-borderTopStyle-H2, var(--xmlui-borderVerticalStyle-H2, var(--xmlui-borderStyle-H2)))", "borderBottomStyle-H2": "var(--xmlui-borderBottomStyle-H2, var(--xmlui-borderVerticalStyle-H2, var(--xmlui-borderStyle-H2)))", "borderColor-H2": "var(--xmlui-borderColor-H2)", "borderHorizontalColor-H2": "var(--xmlui-borderHorizontalColor-H2, var(--xmlui-borderColor-H2))", "borderLeftColor-H2": "var(--xmlui-borderLeftColor-H2, var(--xmlui-borderHorizontalColor-H2, var(--xmlui-borderColor-H2)))", "borderRightColor-H2": "var(--xmlui-borderRightColor-H2, var(--xmlui-borderHorizontalColor-H2, var(--xmlui-borderColor-H2)))", "borderVerticalColor-H2": "var(--xmlui-borderVerticalColor-H2, var(--xmlui-borderColor-H2))", "borderTopColor-H2": "var(--xmlui-borderTopColor-H2, var(--xmlui-borderVerticalColor-H2, var(--xmlui-borderColor-H2)))", "borderBottomColor-H2": "var(--xmlui-borderBottomColor-H2, var(--xmlui-borderVerticalColor-H2, var(--xmlui-borderColor-H2)))", "borderStartStartRadius-H2": "var(--xmlui-borderStartStartRadius-H2, var(--xmlui-borderRadius-H2))", "borderStartEndRadius-H2": "var(--xmlui-borderStartEndRadius-H2, var(--xmlui-borderRadius-H2))", "borderEndStartRadius-H2": "var(--xmlui-borderEndStartRadius-H2, var(--xmlui-borderRadius-H2))", "borderEndEndRadius-H2": "var(--xmlui-borderEndEndRadius-H2, var(--xmlui-borderRadius-H2))", "padding-H2": "var(--xmlui-padding-H2)", "paddingHorizontal-H2": "var(--xmlui-paddingHorizontal-H2, var(--xmlui-padding-H2))", "paddingVertical-H2": "var(--xmlui-paddingVertical-H2, var(--xmlui-padding-H2))", "paddingLeft-H2": "var(--xmlui-paddingLeft-H2, var(--xmlui-paddingHorizontal-H2, var(--xmlui-padding-H2)))", "paddingRight-H2": "var(--xmlui-paddingRight-H2, var(--xmlui-paddingHorizontal-H2, var(--xmlui-padding-H2)))", "paddingTop-H2": "var(--xmlui-paddingTop-H2, var(--xmlui-paddingVertical-H2, var(--xmlui-padding-H2)))", "paddingBottom-H2": "var(--xmlui-paddingBottom-H2, var(--xmlui-paddingVertical-H2, var(--xmlui-padding-H2)))", "textColor-H2": "var(--xmlui-textColor-H2)", "fontFamily-H2": "var(--xmlui-fontFamily-H2)", "fontSize-H2": "var(--xmlui-fontSize-H2)", "fontStyle-H2": "var(--xmlui-fontStyle-H2)", "fontVariant-H2": "var(--xmlui-fontVariant-H2)", "fontWeight-H2": "var(--xmlui-fontWeight-H2)", "fontStretch-H2": "var(--xmlui-fontStretch-H2)", "textDecorationLine-H2": "var(--xmlui-textDecorationLine-H2)", "textDecorationColor-H2": "var(--xmlui-textDecorationColor-H2)", "textDecorationStyle-H2": "var(--xmlui-textDecorationStyle-H2)", "textDecorationThickness-H2": "var(--xmlui-textDecorationThickness-H2)", "textUnderlineOffset-H2": "var(--xmlui-textUnderlineOffset-H2)", "lineHeight-H2": "var(--xmlui-lineHeight-H2)", "backgroundColor-H2": "var(--xmlui-backgroundColor-H2)", "textTransform-H2": "var(--xmlui-textTransform-H2)", "letterSpacing-H2": "var(--xmlui-letterSpacing-H2)", "wordSpacing-H2": "var(--xmlui-wordSpacing-H2)", "textShadow-H2": "var(--xmlui-textShadow-H2)", "textIndent-H2": "var(--xmlui-textIndent-H2)", "textAlign-H2": "var(--xmlui-textAlign-H2)", "textAlignLast-H2": "var(--xmlui-textAlignLast-H2)", "wordBreak-H2": "var(--xmlui-wordBreak-H2)", "wordWrap-H2": "var(--xmlui-wordWrap-H2)", "direction-H2": "var(--xmlui-direction-H2)", "writingMode-H2": "var(--xmlui-writingMode-H2)", "lineBreak-H2": "var(--xmlui-lineBreak-H2)", "border-H3": "var(--xmlui-border-H3)", "borderHorizontal-H3": "var(--xmlui-borderHorizontal-H3, var(--xmlui-border-H3))", "borderVertical-H3": "var(--xmlui-borderVertical-H3, var(--xmlui-border-H3))", "borderLeft-H3": "var(--xmlui-borderLeft-H3, var(--xmlui-borderHorizontal-H3, var(--xmlui-border-H3)))", "borderRight-H3": "var(--xmlui-borderRight-H3, var(--xmlui-borderHorizontal-H3, var(--xmlui-border-H3)))", "borderTop-H3": "var(--xmlui-borderTop-H3, var(--xmlui-borderVertical-H3, var(--xmlui-border-H3)))", "borderBottom-H3": "var(--xmlui-borderBottom-H3, var(--xmlui-borderVertical-H3, var(--xmlui-border-H3)))", "borderWidth-H3": "var(--xmlui-borderWidth-H3)", "borderHorizontalWidth-H3": "var(--xmlui-borderHorizontalWidth-H3, var(--xmlui-borderWidth-H3))", "borderLeftWidth-H3": "var(--xmlui-borderLeftWidth-H3, var(--xmlui-borderHorizontalWidth-H3, var(--xmlui-borderWidth-H3)))", "borderRightWidth-H3": "var(--xmlui-borderRightWidth-H3, var(--xmlui-borderHorizontalWidth-H3, var(--xmlui-borderWidth-H3)))", "borderVerticalWidth-H3": "var(--xmlui-borderVerticalWidth-H3, var(--xmlui-borderWidth-H3))", "borderTopWidth-H3": "var(--xmlui-borderTopWidth-H3, var(--xmlui-borderVerticalWidth-H3, var(--xmlui-borderWidth-H3)))", "borderBottomWidth-H3": "var(--xmlui-borderBottomWidth-H3, var(--xmlui-borderVerticalWidth-H3, var(--xmlui-borderWidth-H3)))", "borderStyle-H3": "var(--xmlui-borderStyle-H3)", "borderHorizontalStyle-H3": "var(--xmlui-borderHorizontalStyle-H3, var(--xmlui-borderStyle-H3))", "borderLeftStyle-H3": "var(--xmlui-borderLeftStyle-H3, var(--xmlui-borderHorizontalStyle-H3, var(--xmlui-borderStyle-H3)))", "borderRightStyle-H3": "var(--xmlui-borderRightStyle-H3, var(--xmlui-borderHorizontalStyle-H3, var(--xmlui-borderStyle-H3)))", "borderVerticalStyle-H3": "var(--xmlui-borderVerticalStyle-H3, var(--xmlui-borderStyle-H3))", "borderTopStyle-H3": "var(--xmlui-borderTopStyle-H3, var(--xmlui-borderVerticalStyle-H3, var(--xmlui-borderStyle-H3)))", "borderBottomStyle-H3": "var(--xmlui-borderBottomStyle-H3, var(--xmlui-borderVerticalStyle-H3, var(--xmlui-borderStyle-H3)))", "borderColor-H3": "var(--xmlui-borderColor-H3)", "borderHorizontalColor-H3": "var(--xmlui-borderHorizontalColor-H3, var(--xmlui-borderColor-H3))", "borderLeftColor-H3": "var(--xmlui-borderLeftColor-H3, var(--xmlui-borderHorizontalColor-H3, var(--xmlui-borderColor-H3)))", "borderRightColor-H3": "var(--xmlui-borderRightColor-H3, var(--xmlui-borderHorizontalColor-H3, var(--xmlui-borderColor-H3)))", "borderVerticalColor-H3": "var(--xmlui-borderVerticalColor-H3, var(--xmlui-borderColor-H3))", "borderTopColor-H3": "var(--xmlui-borderTopColor-H3, var(--xmlui-borderVerticalColor-H3, var(--xmlui-borderColor-H3)))", "borderBottomColor-H3": "var(--xmlui-borderBottomColor-H3, var(--xmlui-borderVerticalColor-H3, var(--xmlui-borderColor-H3)))", "borderStartStartRadius-H3": "var(--xmlui-borderStartStartRadius-H3, var(--xmlui-borderRadius-H3))", "borderStartEndRadius-H3": "var(--xmlui-borderStartEndRadius-H3, var(--xmlui-borderRadius-H3))", "borderEndStartRadius-H3": "var(--xmlui-borderEndStartRadius-H3, var(--xmlui-borderRadius-H3))", "borderEndEndRadius-H3": "var(--xmlui-borderEndEndRadius-H3, var(--xmlui-borderRadius-H3))", "padding-H3": "var(--xmlui-padding-H3)", "paddingHorizontal-H3": "var(--xmlui-paddingHorizontal-H3, var(--xmlui-padding-H3))", "paddingVertical-H3": "var(--xmlui-paddingVertical-H3, var(--xmlui-padding-H3))", "paddingLeft-H3": "var(--xmlui-paddingLeft-H3, var(--xmlui-paddingHorizontal-H3, var(--xmlui-padding-H3)))", "paddingRight-H3": "var(--xmlui-paddingRight-H3, var(--xmlui-paddingHorizontal-H3, var(--xmlui-padding-H3)))", "paddingTop-H3": "var(--xmlui-paddingTop-H3, var(--xmlui-paddingVertical-H3, var(--xmlui-padding-H3)))", "paddingBottom-H3": "var(--xmlui-paddingBottom-H3, var(--xmlui-paddingVertical-H3, var(--xmlui-padding-H3)))", "textColor-H3": "var(--xmlui-textColor-H3)", "fontFamily-H3": "var(--xmlui-fontFamily-H3)", "fontSize-H3": "var(--xmlui-fontSize-H3)", "fontStyle-H3": "var(--xmlui-fontStyle-H3)", "fontVariant-H3": "var(--xmlui-fontVariant-H3)", "fontWeight-H3": "var(--xmlui-fontWeight-H3)", "fontStretch-H3": "var(--xmlui-fontStretch-H3)", "textDecorationLine-H3": "var(--xmlui-textDecorationLine-H3)", "textDecorationColor-H3": "var(--xmlui-textDecorationColor-H3)", "textDecorationStyle-H3": "var(--xmlui-textDecorationStyle-H3)", "textDecorationThickness-H3": "var(--xmlui-textDecorationThickness-H3)", "textUnderlineOffset-H3": "var(--xmlui-textUnderlineOffset-H3)", "lineHeight-H3": "var(--xmlui-lineHeight-H3)", "backgroundColor-H3": "var(--xmlui-backgroundColor-H3)", "textTransform-H3": "var(--xmlui-textTransform-H3)", "letterSpacing-H3": "var(--xmlui-letterSpacing-H3)", "wordSpacing-H3": "var(--xmlui-wordSpacing-H3)", "textShadow-H3": "var(--xmlui-textShadow-H3)", "textIndent-H3": "var(--xmlui-textIndent-H3)", "textAlign-H3": "var(--xmlui-textAlign-H3)", "textAlignLast-H3": "var(--xmlui-textAlignLast-H3)", "wordBreak-H3": "var(--xmlui-wordBreak-H3)", "wordWrap-H3": "var(--xmlui-wordWrap-H3)", "direction-H3": "var(--xmlui-direction-H3)", "writingMode-H3": "var(--xmlui-writingMode-H3)", "lineBreak-H3": "var(--xmlui-lineBreak-H3)", "border-H4": "var(--xmlui-border-H4)", "borderHorizontal-H4": "var(--xmlui-borderHorizontal-H4, var(--xmlui-border-H4))", "borderVertical-H4": "var(--xmlui-borderVertical-H4, var(--xmlui-border-H4))", "borderLeft-H4": "var(--xmlui-borderLeft-H4, var(--xmlui-borderHorizontal-H4, var(--xmlui-border-H4)))", "borderRight-H4": "var(--xmlui-borderRight-H4, var(--xmlui-borderHorizontal-H4, var(--xmlui-border-H4)))", "borderTop-H4": "var(--xmlui-borderTop-H4, var(--xmlui-borderVertical-H4, var(--xmlui-border-H4)))", "borderBottom-H4": "var(--xmlui-borderBottom-H4, var(--xmlui-borderVertical-H4, var(--xmlui-border-H4)))", "borderWidth-H4": "var(--xmlui-borderWidth-H4)", "borderHorizontalWidth-H4": "var(--xmlui-borderHorizontalWidth-H4, var(--xmlui-borderWidth-H4))", "borderLeftWidth-H4": "var(--xmlui-borderLeftWidth-H4, var(--xmlui-borderHorizontalWidth-H4, var(--xmlui-borderWidth-H4)))", "borderRightWidth-H4": "var(--xmlui-borderRightWidth-H4, var(--xmlui-borderHorizontalWidth-H4, var(--xmlui-borderWidth-H4)))", "borderVerticalWidth-H4": "var(--xmlui-borderVerticalWidth-H4, var(--xmlui-borderWidth-H4))", "borderTopWidth-H4": "var(--xmlui-borderTopWidth-H4, var(--xmlui-borderVerticalWidth-H4, var(--xmlui-borderWidth-H4)))", "borderBottomWidth-H4": "var(--xmlui-borderBottomWidth-H4, var(--xmlui-borderVerticalWidth-H4, var(--xmlui-borderWidth-H4)))", "borderStyle-H4": "var(--xmlui-borderStyle-H4)", "borderHorizontalStyle-H4": "var(--xmlui-borderHorizontalStyle-H4, var(--xmlui-borderStyle-H4))", "borderLeftStyle-H4": "var(--xmlui-borderLeftStyle-H4, var(--xmlui-borderHorizontalStyle-H4, var(--xmlui-borderStyle-H4)))", "borderRightStyle-H4": "var(--xmlui-borderRightStyle-H4, var(--xmlui-borderHorizontalStyle-H4, var(--xmlui-borderStyle-H4)))", "borderVerticalStyle-H4": "var(--xmlui-borderVerticalStyle-H4, var(--xmlui-borderStyle-H4))", "borderTopStyle-H4": "var(--xmlui-borderTopStyle-H4, var(--xmlui-borderVerticalStyle-H4, var(--xmlui-borderStyle-H4)))", "borderBottomStyle-H4": "var(--xmlui-borderBottomStyle-H4, var(--xmlui-borderVerticalStyle-H4, var(--xmlui-borderStyle-H4)))", "borderColor-H4": "var(--xmlui-borderColor-H4)", "borderHorizontalColor-H4": "var(--xmlui-borderHorizontalColor-H4, var(--xmlui-borderColor-H4))", "borderLeftColor-H4": "var(--xmlui-borderLeftColor-H4, var(--xmlui-borderHorizontalColor-H4, var(--xmlui-borderColor-H4)))", "borderRightColor-H4": "var(--xmlui-borderRightColor-H4, var(--xmlui-borderHorizontalColor-H4, var(--xmlui-borderColor-H4)))", "borderVerticalColor-H4": "var(--xmlui-borderVerticalColor-H4, var(--xmlui-borderColor-H4))", "borderTopColor-H4": "var(--xmlui-borderTopColor-H4, var(--xmlui-borderVerticalColor-H4, var(--xmlui-borderColor-H4)))", "borderBottomColor-H4": "var(--xmlui-borderBottomColor-H4, var(--xmlui-borderVerticalColor-H4, var(--xmlui-borderColor-H4)))", "borderStartStartRadius-H4": "var(--xmlui-borderStartStartRadius-H4, var(--xmlui-borderRadius-H4))", "borderStartEndRadius-H4": "var(--xmlui-borderStartEndRadius-H4, var(--xmlui-borderRadius-H4))", "borderEndStartRadius-H4": "var(--xmlui-borderEndStartRadius-H4, var(--xmlui-borderRadius-H4))", "borderEndEndRadius-H4": "var(--xmlui-borderEndEndRadius-H4, var(--xmlui-borderRadius-H4))", "padding-H4": "var(--xmlui-padding-H4)", "paddingHorizontal-H4": "var(--xmlui-paddingHorizontal-H4, var(--xmlui-padding-H4))", "paddingVertical-H4": "var(--xmlui-paddingVertical-H4, var(--xmlui-padding-H4))", "paddingLeft-H4": "var(--xmlui-paddingLeft-H4, var(--xmlui-paddingHorizontal-H4, var(--xmlui-padding-H4)))", "paddingRight-H4": "var(--xmlui-paddingRight-H4, var(--xmlui-paddingHorizontal-H4, var(--xmlui-padding-H4)))", "paddingTop-H4": "var(--xmlui-paddingTop-H4, var(--xmlui-paddingVertical-H4, var(--xmlui-padding-H4)))", "paddingBottom-H4": "var(--xmlui-paddingBottom-H4, var(--xmlui-paddingVertical-H4, var(--xmlui-padding-H4)))", "textColor-H4": "var(--xmlui-textColor-H4)", "fontFamily-H4": "var(--xmlui-fontFamily-H4)", "fontSize-H4": "var(--xmlui-fontSize-H4)", "fontStyle-H4": "var(--xmlui-fontStyle-H4)", "fontVariant-H4": "var(--xmlui-fontVariant-H4)", "fontWeight-H4": "var(--xmlui-fontWeight-H4)", "fontStretch-H4": "var(--xmlui-fontStretch-H4)", "textDecorationLine-H4": "var(--xmlui-textDecorationLine-H4)", "textDecorationColor-H4": "var(--xmlui-textDecorationColor-H4)", "textDecorationStyle-H4": "var(--xmlui-textDecorationStyle-H4)", "textDecorationThickness-H4": "var(--xmlui-textDecorationThickness-H4)", "textUnderlineOffset-H4": "var(--xmlui-textUnderlineOffset-H4)", "lineHeight-H4": "var(--xmlui-lineHeight-H4)", "backgroundColor-H4": "var(--xmlui-backgroundColor-H4)", "textTransform-H4": "var(--xmlui-textTransform-H4)", "letterSpacing-H4": "var(--xmlui-letterSpacing-H4)", "wordSpacing-H4": "var(--xmlui-wordSpacing-H4)", "textShadow-H4": "var(--xmlui-textShadow-H4)", "textIndent-H4": "var(--xmlui-textIndent-H4)", "textAlign-H4": "var(--xmlui-textAlign-H4)", "textAlignLast-H4": "var(--xmlui-textAlignLast-H4)", "wordBreak-H4": "var(--xmlui-wordBreak-H4)", "wordWrap-H4": "var(--xmlui-wordWrap-H4)", "direction-H4": "var(--xmlui-direction-H4)", "writingMode-H4": "var(--xmlui-writingMode-H4)", "lineBreak-H4": "var(--xmlui-lineBreak-H4)", "border-H5": "var(--xmlui-border-H5)", "borderHorizontal-H5": "var(--xmlui-borderHorizontal-H5, var(--xmlui-border-H5))", "borderVertical-H5": "var(--xmlui-borderVertical-H5, var(--xmlui-border-H5))", "borderLeft-H5": "var(--xmlui-borderLeft-H5, var(--xmlui-borderHorizontal-H5, var(--xmlui-border-H5)))", "borderRight-H5": "var(--xmlui-borderRight-H5, var(--xmlui-borderHorizontal-H5, var(--xmlui-border-H5)))", "borderTop-H5": "var(--xmlui-borderTop-H5, var(--xmlui-borderVertical-H5, var(--xmlui-border-H5)))", "borderBottom-H5": "var(--xmlui-borderBottom-H5, var(--xmlui-borderVertical-H5, var(--xmlui-border-H5)))", "borderWidth-H5": "var(--xmlui-borderWidth-H5)", "borderHorizontalWidth-H5": "var(--xmlui-borderHorizontalWidth-H5, var(--xmlui-borderWidth-H5))", "borderLeftWidth-H5": "var(--xmlui-borderLeftWidth-H5, var(--xmlui-borderHorizontalWidth-H5, var(--xmlui-borderWidth-H5)))", "borderRightWidth-H5": "var(--xmlui-borderRightWidth-H5, var(--xmlui-borderHorizontalWidth-H5, var(--xmlui-borderWidth-H5)))", "borderVerticalWidth-H5": "var(--xmlui-borderVerticalWidth-H5, var(--xmlui-borderWidth-H5))", "borderTopWidth-H5": "var(--xmlui-borderTopWidth-H5, var(--xmlui-borderVerticalWidth-H5, var(--xmlui-borderWidth-H5)))", "borderBottomWidth-H5": "var(--xmlui-borderBottomWidth-H5, var(--xmlui-borderVerticalWidth-H5, var(--xmlui-borderWidth-H5)))", "borderStyle-H5": "var(--xmlui-borderStyle-H5)", "borderHorizontalStyle-H5": "var(--xmlui-borderHorizontalStyle-H5, var(--xmlui-borderStyle-H5))", "borderLeftStyle-H5": "var(--xmlui-borderLeftStyle-H5, var(--xmlui-borderHorizontalStyle-H5, var(--xmlui-borderStyle-H5)))", "borderRightStyle-H5": "var(--xmlui-borderRightStyle-H5, var(--xmlui-borderHorizontalStyle-H5, var(--xmlui-borderStyle-H5)))", "borderVerticalStyle-H5": "var(--xmlui-borderVerticalStyle-H5, var(--xmlui-borderStyle-H5))", "borderTopStyle-H5": "var(--xmlui-borderTopStyle-H5, var(--xmlui-borderVerticalStyle-H5, var(--xmlui-borderStyle-H5)))", "borderBottomStyle-H5": "var(--xmlui-borderBottomStyle-H5, var(--xmlui-borderVerticalStyle-H5, var(--xmlui-borderStyle-H5)))", "borderColor-H5": "var(--xmlui-borderColor-H5)", "borderHorizontalColor-H5": "var(--xmlui-borderHorizontalColor-H5, var(--xmlui-borderColor-H5))", "borderLeftColor-H5": "var(--xmlui-borderLeftColor-H5, var(--xmlui-borderHorizontalColor-H5, var(--xmlui-borderColor-H5)))", "borderRightColor-H5": "var(--xmlui-borderRightColor-H5, var(--xmlui-borderHorizontalColor-H5, var(--xmlui-borderColor-H5)))", "borderVerticalColor-H5": "var(--xmlui-borderVerticalColor-H5, var(--xmlui-borderColor-H5))", "borderTopColor-H5": "var(--xmlui-borderTopColor-H5, var(--xmlui-borderVerticalColor-H5, var(--xmlui-borderColor-H5)))", "borderBottomColor-H5": "var(--xmlui-borderBottomColor-H5, var(--xmlui-borderVerticalColor-H5, var(--xmlui-borderColor-H5)))", "borderStartStartRadius-H5": "var(--xmlui-borderStartStartRadius-H5, var(--xmlui-borderRadius-H5))", "borderStartEndRadius-H5": "var(--xmlui-borderStartEndRadius-H5, var(--xmlui-borderRadius-H5))", "borderEndStartRadius-H5": "var(--xmlui-borderEndStartRadius-H5, var(--xmlui-borderRadius-H5))", "borderEndEndRadius-H5": "var(--xmlui-borderEndEndRadius-H5, var(--xmlui-borderRadius-H5))", "padding-H5": "var(--xmlui-padding-H5)", "paddingHorizontal-H5": "var(--xmlui-paddingHorizontal-H5, var(--xmlui-padding-H5))", "paddingVertical-H5": "var(--xmlui-paddingVertical-H5, var(--xmlui-padding-H5))", "paddingLeft-H5": "var(--xmlui-paddingLeft-H5, var(--xmlui-paddingHorizontal-H5, var(--xmlui-padding-H5)))", "paddingRight-H5": "var(--xmlui-paddingRight-H5, var(--xmlui-paddingHorizontal-H5, var(--xmlui-padding-H5)))", "paddingTop-H5": "var(--xmlui-paddingTop-H5, var(--xmlui-paddingVertical-H5, var(--xmlui-padding-H5)))", "paddingBottom-H5": "var(--xmlui-paddingBottom-H5, var(--xmlui-paddingVertical-H5, var(--xmlui-padding-H5)))", "textColor-H5": "var(--xmlui-textColor-H5)", "fontFamily-H5": "var(--xmlui-fontFamily-H5)", "fontSize-H5": "var(--xmlui-fontSize-H5)", "fontStyle-H5": "var(--xmlui-fontStyle-H5)", "fontVariant-H5": "var(--xmlui-fontVariant-H5)", "fontWeight-H5": "var(--xmlui-fontWeight-H5)", "fontStretch-H5": "var(--xmlui-fontStretch-H5)", "textDecorationLine-H5": "var(--xmlui-textDecorationLine-H5)", "textDecorationColor-H5": "var(--xmlui-textDecorationColor-H5)", "textDecorationStyle-H5": "var(--xmlui-textDecorationStyle-H5)", "textDecorationThickness-H5": "var(--xmlui-textDecorationThickness-H5)", "textUnderlineOffset-H5": "var(--xmlui-textUnderlineOffset-H5)", "lineHeight-H5": "var(--xmlui-lineHeight-H5)", "backgroundColor-H5": "var(--xmlui-backgroundColor-H5)", "textTransform-H5": "var(--xmlui-textTransform-H5)", "letterSpacing-H5": "var(--xmlui-letterSpacing-H5)", "wordSpacing-H5": "var(--xmlui-wordSpacing-H5)", "textShadow-H5": "var(--xmlui-textShadow-H5)", "textIndent-H5": "var(--xmlui-textIndent-H5)", "textAlign-H5": "var(--xmlui-textAlign-H5)", "textAlignLast-H5": "var(--xmlui-textAlignLast-H5)", "wordBreak-H5": "var(--xmlui-wordBreak-H5)", "wordWrap-H5": "var(--xmlui-wordWrap-H5)", "direction-H5": "var(--xmlui-direction-H5)", "writingMode-H5": "var(--xmlui-writingMode-H5)", "lineBreak-H5": "var(--xmlui-lineBreak-H5)", "border-H6": "var(--xmlui-border-H6)", "borderHorizontal-H6": "var(--xmlui-borderHorizontal-H6, var(--xmlui-border-H6))", "borderVertical-H6": "var(--xmlui-borderVertical-H6, var(--xmlui-border-H6))", "borderLeft-H6": "var(--xmlui-borderLeft-H6, var(--xmlui-borderHorizontal-H6, var(--xmlui-border-H6)))", "borderRight-H6": "var(--xmlui-borderRight-H6, var(--xmlui-borderHorizontal-H6, var(--xmlui-border-H6)))", "borderTop-H6": "var(--xmlui-borderTop-H6, var(--xmlui-borderVertical-H6, var(--xmlui-border-H6)))", "borderBottom-H6": "var(--xmlui-borderBottom-H6, var(--xmlui-borderVertical-H6, var(--xmlui-border-H6)))", "borderWidth-H6": "var(--xmlui-borderWidth-H6)", "borderHorizontalWidth-H6": "var(--xmlui-borderHorizontalWidth-H6, var(--xmlui-borderWidth-H6))", "borderLeftWidth-H6": "var(--xmlui-borderLeftWidth-H6, var(--xmlui-borderHorizontalWidth-H6, var(--xmlui-borderWidth-H6)))", "borderRightWidth-H6": "var(--xmlui-borderRightWidth-H6, var(--xmlui-borderHorizontalWidth-H6, var(--xmlui-borderWidth-H6)))", "borderVerticalWidth-H6": "var(--xmlui-borderVerticalWidth-H6, var(--xmlui-borderWidth-H6))", "borderTopWidth-H6": "var(--xmlui-borderTopWidth-H6, var(--xmlui-borderVerticalWidth-H6, var(--xmlui-borderWidth-H6)))", "borderBottomWidth-H6": "var(--xmlui-borderBottomWidth-H6, var(--xmlui-borderVerticalWidth-H6, var(--xmlui-borderWidth-H6)))", "borderStyle-H6": "var(--xmlui-borderStyle-H6)", "borderHorizontalStyle-H6": "var(--xmlui-borderHorizontalStyle-H6, var(--xmlui-borderStyle-H6))", "borderLeftStyle-H6": "var(--xmlui-borderLeftStyle-H6, var(--xmlui-borderHorizontalStyle-H6, var(--xmlui-borderStyle-H6)))", "borderRightStyle-H6": "var(--xmlui-borderRightStyle-H6, var(--xmlui-borderHorizontalStyle-H6, var(--xmlui-borderStyle-H6)))", "borderVerticalStyle-H6": "var(--xmlui-borderVerticalStyle-H6, var(--xmlui-borderStyle-H6))", "borderTopStyle-H6": "var(--xmlui-borderTopStyle-H6, var(--xmlui-borderVerticalStyle-H6, var(--xmlui-borderStyle-H6)))", "borderBottomStyle-H6": "var(--xmlui-borderBottomStyle-H6, var(--xmlui-borderVerticalStyle-H6, var(--xmlui-borderStyle-H6)))", "borderColor-H6": "var(--xmlui-borderColor-H6)", "borderHorizontalColor-H6": "var(--xmlui-borderHorizontalColor-H6, var(--xmlui-borderColor-H6))", "borderLeftColor-H6": "var(--xmlui-borderLeftColor-H6, var(--xmlui-borderHorizontalColor-H6, var(--xmlui-borderColor-H6)))", "borderRightColor-H6": "var(--xmlui-borderRightColor-H6, var(--xmlui-borderHorizontalColor-H6, var(--xmlui-borderColor-H6)))", "borderVerticalColor-H6": "var(--xmlui-borderVerticalColor-H6, var(--xmlui-borderColor-H6))", "borderTopColor-H6": "var(--xmlui-borderTopColor-H6, var(--xmlui-borderVerticalColor-H6, var(--xmlui-borderColor-H6)))", "borderBottomColor-H6": "var(--xmlui-borderBottomColor-H6, var(--xmlui-borderVerticalColor-H6, var(--xmlui-borderColor-H6)))", "borderStartStartRadius-H6": "var(--xmlui-borderStartStartRadius-H6, var(--xmlui-borderRadius-H6))", "borderStartEndRadius-H6": "var(--xmlui-borderStartEndRadius-H6, var(--xmlui-borderRadius-H6))", "borderEndStartRadius-H6": "var(--xmlui-borderEndStartRadius-H6, var(--xmlui-borderRadius-H6))", "borderEndEndRadius-H6": "var(--xmlui-borderEndEndRadius-H6, var(--xmlui-borderRadius-H6))", "padding-H6": "var(--xmlui-padding-H6)", "paddingHorizontal-H6": "var(--xmlui-paddingHorizontal-H6, var(--xmlui-padding-H6))", "paddingVertical-H6": "var(--xmlui-paddingVertical-H6, var(--xmlui-padding-H6))", "paddingLeft-H6": "var(--xmlui-paddingLeft-H6, var(--xmlui-paddingHorizontal-H6, var(--xmlui-padding-H6)))", "paddingRight-H6": "var(--xmlui-paddingRight-H6, var(--xmlui-paddingHorizontal-H6, var(--xmlui-padding-H6)))", "paddingTop-H6": "var(--xmlui-paddingTop-H6, var(--xmlui-paddingVertical-H6, var(--xmlui-padding-H6)))", "paddingBottom-H6": "var(--xmlui-paddingBottom-H6, var(--xmlui-paddingVertical-H6, var(--xmlui-padding-H6)))", "textColor-H6": "var(--xmlui-textColor-H6)", "fontFamily-H6": "var(--xmlui-fontFamily-H6)", "fontSize-H6": "var(--xmlui-fontSize-H6)", "fontStyle-H6": "var(--xmlui-fontStyle-H6)", "fontVariant-H6": "var(--xmlui-fontVariant-H6)", "fontWeight-H6": "var(--xmlui-fontWeight-H6)", "fontStretch-H6": "var(--xmlui-fontStretch-H6)", "textDecorationLine-H6": "var(--xmlui-textDecorationLine-H6)", "textDecorationColor-H6": "var(--xmlui-textDecorationColor-H6)", "textDecorationStyle-H6": "var(--xmlui-textDecorationStyle-H6)", "textDecorationThickness-H6": "var(--xmlui-textDecorationThickness-H6)", "textUnderlineOffset-H6": "var(--xmlui-textUnderlineOffset-H6)", "lineHeight-H6": "var(--xmlui-lineHeight-H6)", "backgroundColor-H6": "var(--xmlui-backgroundColor-H6)", "textTransform-H6": "var(--xmlui-textTransform-H6)", "letterSpacing-H6": "var(--xmlui-letterSpacing-H6)", "wordSpacing-H6": "var(--xmlui-wordSpacing-H6)", "textShadow-H6": "var(--xmlui-textShadow-H6)", "textIndent-H6": "var(--xmlui-textIndent-H6)", "textAlign-H6": "var(--xmlui-textAlign-H6)", "textAlignLast-H6": "var(--xmlui-textAlignLast-H6)", "wordBreak-H6": "var(--xmlui-wordBreak-H6)", "wordWrap-H6": "var(--xmlui-wordWrap-H6)", "direction-H6": "var(--xmlui-direction-H6)", "writingMode-H6": "var(--xmlui-writingMode-H6)", "lineBreak-H6": "var(--xmlui-lineBreak-H6)", "color-anchor-Heading": "var(--xmlui-color-anchor-Heading)", "gap-anchor-Heading": "var(--xmlui-gap-anchor-Heading)", "textDecorationLine-anchor-Heading": "var(--xmlui-textDecorationLine-anchor-Heading)", "Heading:textColor-H1": "var(--xmlui-textColor-H1)", "Heading:letterSpacing-H1": "var(--xmlui-letterSpacing-H1)", "Heading:fontFamily-H1": "var(--xmlui-fontFamily-H1)", "Heading:fontWeight-H1": "var(--xmlui-fontWeight-H1)", "marginTop-H1": "var(--xmlui-marginTop-H1)", "marginBottom-H1": "var(--xmlui-marginBottom-H1)", "Heading:textDecorationLine-H1": "var(--xmlui-textDecorationLine-H1)", "Heading:textDecorationColor-H1": "var(--xmlui-textDecorationColor-H1)", "Heading:textDecorationStyle-H1": "var(--xmlui-textDecorationStyle-H1)", "Heading:textDecorationThickness-H1": "var(--xmlui-textDecorationThickness-H1)", "Heading:textUnderlineOffset-H1": "var(--xmlui-textUnderlineOffset-H1)", "Heading:textColor-H2": "var(--xmlui-textColor-H2)", "Heading:letterSpacing-H2": "var(--xmlui-letterSpacing-H2)", "Heading:fontFamily-H2": "var(--xmlui-fontFamily-H2)", "Heading:fontWeight-H2": "var(--xmlui-fontWeight-H2)", "marginTop-H2": "var(--xmlui-marginTop-H2)", "marginBottom-H2": "var(--xmlui-marginBottom-H2)", "Heading:textDecorationLine-H2": "var(--xmlui-textDecorationLine-H2)", "Heading:textDecorationColor-H2": "var(--xmlui-textDecorationColor-H2)", "Heading:textDecorationStyle-H2": "var(--xmlui-textDecorationStyle-H2)", "Heading:textDecorationThickness-H2": "var(--xmlui-textDecorationThickness-H2)", "Heading:textUnderlineOffset-H2": "var(--xmlui-textUnderlineOffset-H2)", "Heading:textColor-H3": "var(--xmlui-textColor-H3)", "Heading:letterSpacing-H3": "var(--xmlui-letterSpacing-H3)", "Heading:fontFamily-H3": "var(--xmlui-fontFamily-H3)", "Heading:fontWeight-H3": "var(--xmlui-fontWeight-H3)", "marginTop-H3": "var(--xmlui-marginTop-H3)", "marginBottom-H3": "var(--xmlui-marginBottom-H3)", "Heading:textDecorationLine-H3": "var(--xmlui-textDecorationLine-H3)", "Heading:textDecorationColor-H3": "var(--xmlui-textDecorationColor-H3)", "Heading:textDecorationStyle-H3": "var(--xmlui-textDecorationStyle-H3)", "Heading:textDecorationThickness-H3": "var(--xmlui-textDecorationThickness-H3)", "Heading:textUnderlineOffset-H3": "var(--xmlui-textUnderlineOffset-H3)", "Heading:textColor-H4": "var(--xmlui-textColor-H4)", "Heading:letterSpacing-H4": "var(--xmlui-letterSpacing-H4)", "Heading:fontFamily-H4": "var(--xmlui-fontFamily-H4)", "Heading:fontWeight-H4": "var(--xmlui-fontWeight-H4)", "marginTop-H4": "var(--xmlui-marginTop-H4)", "marginBottom-H4": "var(--xmlui-marginBottom-H4)", "Heading:textDecorationLine-H4": "var(--xmlui-textDecorationLine-H4)", "Heading:textDecorationColor-H4": "var(--xmlui-textDecorationColor-H4)", "Heading:textDecorationStyle-H4": "var(--xmlui-textDecorationStyle-H4)", "Heading:textDecorationThickness-H4": "var(--xmlui-textDecorationThickness-H4)", "Heading:textUnderlineOffset-H4": "var(--xmlui-textUnderlineOffset-H4)", "Heading:textColor-H5": "var(--xmlui-textColor-H5)", "Heading:letterSpacing-H5": "var(--xmlui-letterSpacing-H5)", "Heading:fontFamily-H5": "var(--xmlui-fontFamily-H5)", "Heading:fontWeight-H5": "var(--xmlui-fontWeight-H5)", "marginTop-H5": "var(--xmlui-marginTop-H5)", "marginBottom-H5": "var(--xmlui-marginBottom-H5)", "Heading:textDecorationLine-H5": "var(--xmlui-textDecorationLine-H5)", "Heading:textDecorationColor-H5": "var(--xmlui-textDecorationColor-H5)", "Heading:textDecorationStyle-H5": "var(--xmlui-textDecorationStyle-H5)", "Heading:textDecorationThickness-H5": "var(--xmlui-textDecorationThickness-H5)", "Heading:textUnderlineOffset-H5": "var(--xmlui-textUnderlineOffset-H5)", "Heading:textColor-H6": "var(--xmlui-textColor-H6)", "Heading:letterSpacing-H6": "var(--xmlui-letterSpacing-H6)", "Heading:fontFamily-H6": "var(--xmlui-fontFamily-H6)", "Heading:fontWeight-H6": "var(--xmlui-fontWeight-H6)", "marginTop-H6": "var(--xmlui-marginTop-H6)", "marginBottom-H6": "var(--xmlui-marginBottom-H6)", "Heading:textDecorationLine-H6": "var(--xmlui-textDecorationLine-H6)", "Heading:textDecorationColor-H6": "var(--xmlui-textDecorationColor-H6)", "Heading:textDecorationStyle-H6": "var(--xmlui-textDecorationStyle-H6)", "Heading:textDecorationThickness-H6": "var(--xmlui-textDecorationThickness-H6)", "Heading:textUnderlineOffset-H6": "var(--xmlui-textUnderlineOffset-H6)"}'`;
const heading$1 = "_heading_p6fbv_13";
const h1 = "_h1_p6fbv_13";
const h2 = "_h2_p6fbv_76";
const h3 = "_h3_p6fbv_139";
const h4 = "_h4_p6fbv_202";
const h5 = "_h5_p6fbv_265";
const h6 = "_h6_p6fbv_328";
const anchorRef = "_anchorRef_p6fbv_402";
const truncateOverflow = "_truncateOverflow_p6fbv_413";
const preserveLinebreaks = "_preserveLinebreaks_p6fbv_419";
const noEllipsis = "_noEllipsis_p6fbv_423";
const styles$y = {
  themeVars: themeVars$w,
  heading: heading$1,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  anchorRef,
  truncateOverflow,
  preserveLinebreaks,
  noEllipsis
};
const defaultProps$d = {
  level: "h1",
  ellipses: true,
  omitFromToc: false,
  maxLines: 0
};
const Heading = forwardRef(function Heading2({
  uid,
  level = defaultProps$d.level,
  children,
  sx,
  style,
  title: title2,
  maxLines = defaultProps$d.maxLines,
  preserveLinebreaks: preserveLinebreaks2,
  ellipses = defaultProps$d.ellipses,
  className,
  omitFromToc = defaultProps$d.omitFromToc,
  ...furtherProps
}, forwardedRef) {
  const Element2 = level == null ? void 0 : level.toLowerCase();
  const elementRef = useRef(null);
  const [anchorId, setAnchorId] = useState(null);
  const anchorRef2 = useRef(null);
  const tableOfContentsContext = useContext(TableOfContentsContext);
  const registerHeading = tableOfContentsContext == null ? void 0 : tableOfContentsContext.registerHeading;
  const ref = forwardedRef ? composeRefs(elementRef, forwardedRef) : elementRef;
  useEffect(() => {
    var _a, _b, _c, _d;
    if (elementRef.current) {
      const newAnchorId = (_d = (_c = (_b = (_a = elementRef.current.textContent) == null ? void 0 : _a.trim()) == null ? void 0 : _b.replace(/[^\w\s-]/g, "")) == null ? void 0 : _c.replace(/\s+/g, "-")) == null ? void 0 : _d.toLowerCase();
      setAnchorId(newAnchorId || null);
    }
  }, []);
  useIsomorphicLayoutEffect(() => {
    if (elementRef.current && anchorId && !omitFromToc) {
      return registerHeading == null ? void 0 : registerHeading({
        id: anchorId,
        level: parseInt(level.replace("h", "")),
        text: elementRef.current.textContent.trim().replace(/#$/, ""),
        // Remove trailing #
        anchor: anchorRef2.current
      });
    }
  }, [anchorId, registerHeading, level, omitFromToc]);
  return /* @__PURE__ */ jsxs(
    Element2,
    {
      ref,
      id: uid,
      title: title2,
      style: { ...sx, ...style, ...getMaxLinesStyle(maxLines) },
      className: classnames(styles$y.heading, styles$y[Element2], className || "", {
        [styles$y.truncateOverflow]: maxLines > 0,
        [styles$y.preserveLinebreaks]: preserveLinebreaks2,
        [styles$y.noEllipsis]: !ellipses
      }),
      ...furtherProps,
      children: [
        anchorId && /* @__PURE__ */ jsx("span", { ref: anchorRef2, id: anchorId, className: styles$y.anchorRef, "data-anchor": true }),
        children
      ]
    }
  );
});
const defaultProps$c = {
  orientation: "vertical",
  showAvatar: false
};
forwardRef(function Card2({
  children,
  orientation = defaultProps$c.orientation,
  style,
  title: title2,
  subtitle: subtitle2,
  linkTo,
  avatarUrl,
  showAvatar = !!avatarUrl || defaultProps$c.showAvatar,
  avatarSize,
  onClick
}, forwardedRef) {
  const titleProps = {
    level: "h2"
  };
  return /* @__PURE__ */ jsxs(
    "div",
    {
      ref: forwardedRef,
      className: classnames(styles$A.wrapper, {
        [styles$A.isClickable]: !!onClick,
        [styles$A.vertical]: orientation === "vertical",
        [styles$A.horizontal]: orientation === "horizontal"
      }),
      style,
      onClick,
      children: [
        [title2, subtitle2, avatarUrl, showAvatar].some(Boolean) && /* @__PURE__ */ jsxs("div", { className: styles$A.avatarWrapper, children: [
          showAvatar && /* @__PURE__ */ jsx(Avatar, { url: avatarUrl, name: title2, size: avatarSize }),
          /* @__PURE__ */ jsxs("div", { className: styles$A.titleWrapper, children: [
            linkTo ? title2 ? /* @__PURE__ */ jsx(LocalLink, { to: linkTo + "", children: /* @__PURE__ */ jsx(Heading, { ...titleProps, children: title2 }) }) : null : title2 ? /* @__PURE__ */ jsx(Heading, { ...titleProps, children: title2 }) : null,
            subtitle2 !== void 0 && /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsx(Text, { variant: "small", children: subtitle2 }) })
          ] })
        ] }),
        children
      ]
    }
  );
});
const COMP$W = "Card";
const CardMd = createMetadata({
  description: `The \`${COMP$W}\` component is a container for cohesive elements, often rendered visually as a card.`,
  props: {
    avatarUrl: {
      description: `Show the avatar (\`true\`) or not (\`false\`). If not specified, the ${COMP$W} will show the first letters of the [\`title\`](#title).`,
      type: "string"
    },
    showAvatar: {
      description: `Indicates whether the ${COMP$W} should be displayed`,
      valueType: "boolean",
      defaultValue: defaultProps$c.showAvatar
    },
    avatarSize: {
      description: `This prop sets the size of the avatar. The default value is \`sm\`.`,
      availableValues: ["xs", "sm", "md", "lg"],
      valueType: "string"
    },
    title: {
      description: `This prop sets the prestyled title.`,
      valueType: "string"
    },
    subtitle: {
      description: `This prop sets the prestyled subtitle.`,
      valueType: "string"
    },
    linkTo: {
      description: `This property wraps the title in a \`Link\` component that is clickable to navigate.`,
      valueType: "string"
    },
    orientation: {
      description: `An optional property that governs the ${COMP$W}'s orientation (whether the ${COMP$W} lays out its children in a row or a column). If the orientation is set to \`horizontal\`, the ${COMP$W} will display its children in a row, except for its [\`title\`](#title) and [\`subtitle\`](#subtitle).`,
      availableValues: orientationOptionMd,
      valueType: "string",
      defaultValue: defaultProps$c.orientation
    }
  },
  events: {
    click: dClick(COMP$W)
  },
  themeVars: parseScssVar(styles$A.themeVars),
  defaultThemeVars: {
    [`padding-${COMP$W}`]: "$space-4",
    [`border-${COMP$W}`]: "1px solid $borderColor",
    [`borderRadius-${COMP$W}`]: "$borderRadius",
    [`boxShadow-${COMP$W}`]: "none",
    [`backgroundColor-${COMP$W}`]: "$color-surface-raised",
    [`gap-${COMP$W}`]: "var(--stack-gap-default)",
    [`gap-title-${COMP$W}`]: "$gap-normal",
    [`gap-avatar-${COMP$W}`]: "$gap-normal",
    [`verticalAlignment-title-${COMP$W}`]: "center"
  },
  themeVarDescriptions: {
    [`gap-${COMP$W}`]: "The gap between the component's children.",
    [`gap-title-${COMP$W}`]: "The gap between the title and the subtitle",
    [`gap-avatar-${COMP$W}`]: "The gap between the avatar and the title panel",
    [`horizontalAlignment-title-${COMP$W}`]: "The horizontal alignment of panel with the title and subtitle",
    [`verticalAlignment-title-${COMP$W}`]: "The vertical alignment of the title and subtitle to the avatar"
  }
});
const defaultProps$b = {
  throttleWaitInMs: 0
};
const COMP$V = "ChangeListener";
const ChangeListenerMd = createMetadata({
  description: `\`${COMP$V}\` is a functional component (it renders no UI) to trigger an action when a particular value (component property, state, etc.) changes.`,
  props: {
    listenTo: {
      description: `Value to the changes of which this component listens.`,
      valueType: "any"
    },
    throttleWaitInMs: {
      description: `This variable sets a throttling time (in milliseconds) to apply when executing the \`didChange\` event handler. All changes within that throttling time will only fire the \`didChange\` event once.`,
      valueType: "number",
      defaultValue: defaultProps$b.throttleWaitInMs
    }
  },
  events: {
    didChange: dDidChange(COMP$V)
  }
});
const themeVars$v = `'{"Input:borderRadius-Checkbox-default": "var(--xmlui-borderRadius-Checkbox-default)", "Input:borderColor-Checkbox-default": "var(--xmlui-borderColor-Checkbox-default)", "Input:backgroundColor-Checkbox-default": "var(--xmlui-backgroundColor-Checkbox-default)", "Input:outlineWidth-Checkbox-default--focus": "var(--xmlui-outlineWidth-Checkbox-default--focus)", "Input:outlineColor-Checkbox-default--focus": "var(--xmlui-outlineColor-Checkbox-default--focus)", "Input:outlineStyle-Checkbox-default--focus": "var(--xmlui-outlineStyle-Checkbox-default--focus)", "Input:outlineOffset-Checkbox-default--focus": "var(--xmlui-outlineOffset-Checkbox-default--focus)", "Input:borderColor-Checkbox-default--hover": "var(--xmlui-borderColor-Checkbox-default--hover)", "Input:backgroundColor-Checkbox--disabled": "var(--xmlui-backgroundColor-Checkbox--disabled)", "Input:borderColor-Checkbox--disabled": "var(--xmlui-borderColor-Checkbox--disabled)", "Input:borderRadius-Checkbox-error": "var(--xmlui-borderRadius-Checkbox-error)", "Input:borderColor-Checkbox-error": "var(--xmlui-borderColor-Checkbox-error)", "Input:backgroundColor-Checkbox-error": "var(--xmlui-backgroundColor-Checkbox-error)", "Input:outlineWidth-Checkbox-error--focus": "var(--xmlui-outlineWidth-Checkbox-error--focus)", "Input:outlineColor-Checkbox-error--focus": "var(--xmlui-outlineColor-Checkbox-error--focus)", "Input:outlineStyle-Checkbox-error--focus": "var(--xmlui-outlineStyle-Checkbox-error--focus)", "Input:outlineOffset-Checkbox-error--focus": "var(--xmlui-outlineOffset-Checkbox-error--focus)", "Input:borderRadius-Checkbox-warning": "var(--xmlui-borderRadius-Checkbox-warning)", "Input:borderColor-Checkbox-warning": "var(--xmlui-borderColor-Checkbox-warning)", "Input:backgroundColor-Checkbox-warning": "var(--xmlui-backgroundColor-Checkbox-warning)", "Input:outlineWidth-Checkbox-warning--focus": "var(--xmlui-outlineWidth-Checkbox-warning--focus)", "Input:outlineColor-Checkbox-warning--focus": "var(--xmlui-outlineColor-Checkbox-warning--focus)", "Input:outlineStyle-Checkbox-warning--focus": "var(--xmlui-outlineStyle-Checkbox-warning--focus)", "Input:outlineOffset-Checkbox-warning--focus": "var(--xmlui-outlineOffset-Checkbox-warning--focus)", "Input:borderRadius-Checkbox-success": "var(--xmlui-borderRadius-Checkbox-success)", "Input:borderColor-Checkbox-success": "var(--xmlui-borderColor-Checkbox-success)", "Input:backgroundColor-Checkbox-success": "var(--xmlui-backgroundColor-Checkbox-success)", "Input:outlineWidth-Checkbox-success--focus": "var(--xmlui-outlineWidth-Checkbox-success--focus)", "Input:outlineColor-Checkbox-success--focus": "var(--xmlui-outlineColor-Checkbox-success--focus)", "Input:outlineStyle-Checkbox-success--focus": "var(--xmlui-outlineStyle-Checkbox-success--focus)", "Input:outlineOffset-Checkbox-success--focus": "var(--xmlui-outlineOffset-Checkbox-success--focus)", "backgroundColor-indicator-Checkbox": "var(--xmlui-backgroundColor-indicator-Checkbox)", "Input:borderColor-checked-Checkbox": "var(--xmlui-borderColor-checked-Checkbox)", "Input:backgroundColor-checked-Checkbox": "var(--xmlui-backgroundColor-checked-Checkbox)", "Input:borderColor-checked-Checkbox-error": "var(--xmlui-borderColor-checked-Checkbox-error)", "Input:backgroundColor-checked-Checkbox-error": "var(--xmlui-backgroundColor-checked-Checkbox-error)", "Input:borderColor-checked-Checkbox-warning": "var(--xmlui-borderColor-checked-Checkbox-warning)", "Input:backgroundColor-checked-Checkbox-warning": "var(--xmlui-backgroundColor-checked-Checkbox-warning)", "Input:borderColor-checked-Checkbox-success": "var(--xmlui-borderColor-checked-Checkbox-success)", "Input:backgroundColor-checked-Checkbox-success": "var(--xmlui-backgroundColor-checked-Checkbox-success)", "Input:borderColor-Switch": "var(--xmlui-borderColor-Switch)", "Input:backgroundColor-Switch": "var(--xmlui-backgroundColor-Switch)", "Input:borderColor-Switch-default--hover": "var(--xmlui-borderColor-Switch-default--hover)", "Input:backgroundColor-Switch--disabled": "var(--xmlui-backgroundColor-Switch--disabled)", "Input:borderColor-Switch--disabled": "var(--xmlui-borderColor-Switch--disabled)", "Input:borderColor-Switch-error": "var(--xmlui-borderColor-Switch-error)", "Input:borderColor-Switch-warning": "var(--xmlui-borderColor-Switch-warning)", "Input:borderColor-Switch-success": "var(--xmlui-borderColor-Switch-success)", "backgroundColor-indicator-Switch": "var(--xmlui-backgroundColor-indicator-Switch)", "Input:borderColor-checked-Switch": "var(--xmlui-borderColor-checked-Switch)", "Input:backgroundColor-checked-Switch": "var(--xmlui-backgroundColor-checked-Switch)", "Input:borderColor-checked-Switch-error": "var(--xmlui-borderColor-checked-Switch-error)", "Input:backgroundColor-checked-Switch-error": "var(--xmlui-backgroundColor-checked-Switch-error)", "Input:borderColor-checked-Switch-warning": "var(--xmlui-borderColor-checked-Switch-warning)", "Input:backgroundColor-checked-Switch-warning": "var(--xmlui-backgroundColor-checked-Switch-warning)", "Input:borderColor-checked-Switch-success": "var(--xmlui-borderColor-checked-Switch-success)", "Input:backgroundColor-checked-Switch-success": "var(--xmlui-backgroundColor-checked-Switch-success)", "Input:outlineWidth-Switch--focus": "var(--xmlui-outlineWidth-Switch--focus)", "Input:outlineColor-Switch--focus": "var(--xmlui-outlineColor-Switch--focus)", "Input:outlineStyle-Switch--focus": "var(--xmlui-outlineStyle-Switch--focus)", "Input:outlineOffset-Switch--focus": "var(--xmlui-outlineOffset-Switch--focus)"}'`;
const resetAppearance = "_resetAppearance_ddph3_13";
const label$1 = "_label_ddph3_21";
const inputContainer = "_inputContainer_ddph3_25";
const checkbox = "_checkbox_ddph3_33";
const error$a = "_error_ddph3_62";
const warning$a = "_warning_ddph3_73";
const valid$a = "_valid_ddph3_84";
const styles$x = {
  themeVars: themeVars$v,
  resetAppearance,
  label: label$1,
  inputContainer,
  checkbox,
  error: error$a,
  warning: warning$a,
  valid: valid$a,
  "switch": "_switch_ddph3_144"
};
const defaultProps$a = {
  initialValue: false,
  value: false,
  enabled: true,
  validationStatus: "none",
  indeterminate: false
};
const Toggle = forwardRef(function Toggle2({
  id,
  initialValue = defaultProps$a.initialValue,
  value = defaultProps$a.value,
  enabled: enabled2 = defaultProps$a.enabled,
  style,
  readOnly: readOnly2,
  validationStatus = defaultProps$a.validationStatus,
  updateState = noop$1,
  onDidChange = noop$1,
  onFocus = noop$1,
  onBlur = noop$1,
  variant = "checkbox",
  indeterminate = defaultProps$a.indeterminate,
  className,
  label: label2,
  labelPosition = "end",
  labelWidth,
  labelBreak: labelBreak2,
  required: required2,
  registerComponentApi,
  inputRenderer
}, forwardedRef) {
  const generatedId = useId();
  const inputId = id || generatedId;
  const innerRef = React__default.useRef(null);
  useEffect(() => {
    updateState({ value: initialValue }, { initial: true });
  }, [initialValue, updateState]);
  const updateValue = useCallback(
    (value2) => {
      var _a;
      if (((_a = innerRef.current) == null ? void 0 : _a.checked) === value2) return;
      updateState({ value: value2 });
      onDidChange(value2);
    },
    [onDidChange, updateState]
  );
  const onInputChange = useCallback(
    (event) => {
      if (readOnly2) {
        return;
      }
      updateState({ value: event.target.checked });
      onDidChange(event.target.checked);
    },
    [onDidChange, readOnly2, updateState]
  );
  const handleOnFocus = useCallback(() => {
    onFocus == null ? void 0 : onFocus();
  }, [onFocus]);
  const handleOnBlur = useCallback(() => {
    onBlur == null ? void 0 : onBlur();
  }, [onBlur]);
  useEffect(() => {
    if (typeof indeterminate === "boolean" && innerRef.current) {
      innerRef.current.indeterminate = indeterminate;
    }
  }, [indeterminate]);
  const focus = useCallback(() => {
    var _a;
    (_a = innerRef.current) == null ? void 0 : _a.focus();
  }, []);
  const setValue = useEvent((newValue) => {
    updateValue(newValue);
  });
  useEffect(() => {
    registerComponentApi == null ? void 0 : registerComponentApi({
      focus,
      setValue
    });
  }, [focus, registerComponentApi, setValue]);
  const input2 = useMemo(
    () => /* @__PURE__ */ jsx(
      "input",
      {
        id: inputId,
        ref: innerRef,
        type: "checkbox",
        role: variant,
        checked: value,
        disabled: !enabled2,
        required: required2,
        readOnly: readOnly2,
        "aria-readonly": readOnly2,
        "aria-checked": value,
        onChange: onInputChange,
        onFocus: handleOnFocus,
        onBlur: handleOnBlur,
        className: classnames(styles$x.resetAppearance, className, {
          [styles$x.checkbox]: variant === "checkbox",
          [styles$x.switch]: variant === "switch",
          [styles$x.error]: validationStatus === "error",
          [styles$x.warning]: validationStatus === "warning",
          [styles$x.valid]: validationStatus === "valid"
        })
      }
    ),
    [
      inputId,
      className,
      enabled2,
      handleOnBlur,
      handleOnFocus,
      onInputChange,
      readOnly2,
      required2,
      validationStatus,
      value,
      variant
    ]
  );
  return /* @__PURE__ */ jsx(
    ItemWithLabel,
    {
      ref: forwardedRef,
      id: inputId,
      label: label2,
      style,
      labelPosition,
      labelWidth,
      labelBreak: labelBreak2,
      required: required2,
      enabled: enabled2,
      isInputTemplateUsed: !!inputRenderer,
      shrinkToLabel: true,
      labelStyle: { pointerEvents: readOnly2 ? "none" : void 0 },
      children: inputRenderer ? /* @__PURE__ */ jsxs("label", { className: styles$x.label, children: [
        /* @__PURE__ */ jsx("div", { className: styles$x.inputContainer, children: input2 }),
        inputRenderer({
          $checked: value
        })
      ] }) : input2
    }
  );
});
const COMP$U = "Checkbox";
const CheckboxMd = createMetadata({
  status: "stable",
  description: `The \`${COMP$U}\` component allows users to make binary choices, typically between checked or unchecked. It consists of a small box that can be toggled on or off by clicking on it.`,
  props: {
    indeterminate: dIndeterminate(defaultProps$a.indeterminate),
    label: dLabel(),
    labelPosition: dLabelPosition("end"),
    labelWidth: dLabelWidth(COMP$U),
    labelBreak: dLabelBreak(COMP$U),
    required: dRequired(),
    initialValue: dInitialValue(defaultProps$a.initialValue),
    autoFocus: dAutoFocus(),
    readOnly: dReadonly(),
    enabled: dEnabled(),
    validationStatus: dValidationStatus(defaultProps$a.validationStatus),
    description: dInternal(
      `(*** NOT IMPLEMENTED YET ***) This optional property displays an alternate description of the ${COMP$U} besides its label.`
    ),
    inputTemplate: {
      description: "This property is used to define a custom checkbox input template"
    }
  },
  childrenAsTemplate: "inputTemplate",
  events: {
    gotFocus: dGotFocus(COMP$U),
    lostFocus: dLostFocus(COMP$U),
    didChange: dDidChange(COMP$U)
  },
  apis: {
    value: dValueApi(),
    setValue: dSetValueApi()
  },
  themeVars: parseScssVar(styles$x.themeVars),
  defaultThemeVars: {
    [`borderColor-checked-${COMP$U}-error`]: `$borderColor-${COMP$U}-error`,
    [`backgroundColor-checked-${COMP$U}-error`]: `$borderColor-${COMP$U}-error`,
    [`borderColor-checked-${COMP$U}-warning`]: `$borderColor-${COMP$U}-warning`,
    [`backgroundColor-checked-${COMP$U}-warning`]: `$borderColor-${COMP$U}-warning`,
    [`borderColor-checked-${COMP$U}-success`]: `$borderColor-${COMP$U}-success`,
    [`backgroundColor-checked-${COMP$U}-success`]: `$borderColor-${COMP$U}-success`,
    [`backgroundColor-indicator-${COMP$U}`]: "$backgroundColor-primary",
    [`borderColor-checked-${COMP$U}`]: "$color-primary-500",
    [`backgroundColor-checked-${COMP$U}`]: "$color-primary-500",
    [`backgroundColor-${COMP$U}--disabled`]: "$color-surface-200"
  }
});
const themeVars$u = `'{"backgroundColor-ContentSeparator": "var(--xmlui-backgroundColor-ContentSeparator)", "size-ContentSeparator": "var(--xmlui-size-ContentSeparator)"}'`;
const styles$w = {
  themeVars: themeVars$u
};
const defaultProps$9 = {
  orientation: "horizontal"
};
const COMP$T = "ContentSeparator";
const ContentSeparatorMd = createMetadata({
  description: `A \`${COMP$T}\` is a component that divides or separates content visually within a layout. It serves as a visual cue to distinguish between different sections or groups of content, helping to improve readability and organization.`,
  props: {
    size: {
      description: `This property defines the component's height (if the \`orientation\` is horizontal) or the width (if the \`orientation\` is vertical).`,
      valueType: "any"
    },
    orientation: {
      description: "Sets the main axis of the component",
      availableValues: orientationOptionMd,
      defaultValue: defaultProps$9.orientation,
      valueType: "string"
    }
  },
  themeVars: parseScssVar(styles$w.themeVars),
  defaultThemeVars: {
    [`backgroundColor-${COMP$T}`]: "$borderColor",
    [`size-${COMP$T}`]: "1px",
    light: {
      // --- No light-specific theme vars
    },
    dark: {
      // --- No dark-specific theme vars
    }
  }
});
const themeVars$t = `'{"Input:backgroundColor-item-DatePicker--active": "var(--xmlui-backgroundColor-item-DatePicker--active)", "Input:backgroundColor-item-DatePicker--hover": "var(--xmlui-backgroundColor-item-DatePicker--hover)", "Input:textColor-value-DatePicker": "var(--xmlui-textColor-value-DatePicker)", "Input:minHeight-DatePicker": "var(--xmlui-minHeight-DatePicker)", "Input:fontSize-DatePicker": "var(--xmlui-fontSize-DatePicker)", "Input:borderRadius-DatePicker-default": "var(--xmlui-borderRadius-DatePicker-default)", "Input:borderColor-DatePicker-default": "var(--xmlui-borderColor-DatePicker-default)", "Input:borderWidth-DatePicker-default": "var(--xmlui-borderWidth-DatePicker-default)", "Input:borderStyle-DatePicker-default": "var(--xmlui-borderStyle-DatePicker-default)", "Input:backgroundColor-DatePicker-default": "var(--xmlui-backgroundColor-DatePicker-default)", "Input:boxShadow-DatePicker-default": "var(--xmlui-boxShadow-DatePicker-default)", "Input:textColor-DatePicker-default": "var(--xmlui-textColor-DatePicker-default)", "Input:padding-DatePicker-default": "var(--xmlui-padding-DatePicker-default)", "Input:borderColor-DatePicker-default--hover": "var(--xmlui-borderColor-DatePicker-default--hover)", "Input:backgroundColor-DatePicker-default--hover": "var(--xmlui-backgroundColor-DatePicker-default--hover)", "Input:boxShadow-DatePicker-default--hover": "var(--xmlui-boxShadow-DatePicker-default--hover)", "Input:textColor-DatePicker-default--hover": "var(--xmlui-textColor-DatePicker-default--hover)", "Input:outlineWidth-DatePicker-default--focus": "var(--xmlui-outlineWidth-DatePicker-default--focus)", "Input:outlineColor-DatePicker-default--focus": "var(--xmlui-outlineColor-DatePicker-default--focus)", "Input:outlineStyle-DatePicker-default--focus": "var(--xmlui-outlineStyle-DatePicker-default--focus)", "Input:outlineOffset-DatePicker-default--focus": "var(--xmlui-outlineOffset-DatePicker-default--focus)", "Input:textColor-placeholder-DatePicker-default": "var(--xmlui-textColor-placeholder-DatePicker-default)", "Input:textColor-adornment-DatePicker-default": "var(--xmlui-textColor-adornment-DatePicker-default)", "Input:borderRadius-DatePicker-error": "var(--xmlui-borderRadius-DatePicker-error)", "Input:borderColor-DatePicker-error": "var(--xmlui-borderColor-DatePicker-error)", "Input:borderWidth-DatePicker-error": "var(--xmlui-borderWidth-DatePicker-error)", "Input:borderStyle-DatePicker-error": "var(--xmlui-borderStyle-DatePicker-error)", "Input:backgroundColor-DatePicker-error": "var(--xmlui-backgroundColor-DatePicker-error)", "Input:boxShadow-DatePicker-error": "var(--xmlui-boxShadow-DatePicker-error)", "Input:textColor-DatePicker-error": "var(--xmlui-textColor-DatePicker-error)", "Input:padding-DatePicker-error": "var(--xmlui-padding-DatePicker-error)", "Input:borderColor-DatePicker-error--hover": "var(--xmlui-borderColor-DatePicker-error--hover)", "Input:backgroundColor-DatePicker-error--hover": "var(--xmlui-backgroundColor-DatePicker-error--hover)", "Input:boxShadow-DatePicker-error--hover": "var(--xmlui-boxShadow-DatePicker-error--hover)", "Input:textColor-DatePicker-error--hover": "var(--xmlui-textColor-DatePicker-error--hover)", "Input:outlineWidth-DatePicker-error--focus": "var(--xmlui-outlineWidth-DatePicker-error--focus)", "Input:outlineColor-DatePicker-error--focus": "var(--xmlui-outlineColor-DatePicker-error--focus)", "Input:outlineStyle-DatePicker-error--focus": "var(--xmlui-outlineStyle-DatePicker-error--focus)", "Input:outlineOffset-DatePicker-error--focus": "var(--xmlui-outlineOffset-DatePicker-error--focus)", "Input:textColor-placeholder-DatePicker-error": "var(--xmlui-textColor-placeholder-DatePicker-error)", "Input:textColor-adornment-DatePicker-error": "var(--xmlui-textColor-adornment-DatePicker-error)", "Input:borderRadius-DatePicker-warning": "var(--xmlui-borderRadius-DatePicker-warning)", "Input:borderColor-DatePicker-warning": "var(--xmlui-borderColor-DatePicker-warning)", "Input:borderWidth-DatePicker-warning": "var(--xmlui-borderWidth-DatePicker-warning)", "Input:borderStyle-DatePicker-warning": "var(--xmlui-borderStyle-DatePicker-warning)", "Input:backgroundColor-DatePicker-warning": "var(--xmlui-backgroundColor-DatePicker-warning)", "Input:boxShadow-DatePicker-warning": "var(--xmlui-boxShadow-DatePicker-warning)", "Input:textColor-DatePicker-warning": "var(--xmlui-textColor-DatePicker-warning)", "Input:padding-DatePicker-warning": "var(--xmlui-padding-DatePicker-warning)", "Input:borderColor-DatePicker-warning--hover": "var(--xmlui-borderColor-DatePicker-warning--hover)", "Input:backgroundColor-DatePicker-warning--hover": "var(--xmlui-backgroundColor-DatePicker-warning--hover)", "Input:boxShadow-DatePicker-warning--hover": "var(--xmlui-boxShadow-DatePicker-warning--hover)", "Input:textColor-DatePicker-warning--hover": "var(--xmlui-textColor-DatePicker-warning--hover)", "Input:outlineWidth-DatePicker-warning--focus": "var(--xmlui-outlineWidth-DatePicker-warning--focus)", "Input:outlineColor-DatePicker-warning--focus": "var(--xmlui-outlineColor-DatePicker-warning--focus)", "Input:outlineStyle-DatePicker-warning--focus": "var(--xmlui-outlineStyle-DatePicker-warning--focus)", "Input:outlineOffset-DatePicker-warning--focus": "var(--xmlui-outlineOffset-DatePicker-warning--focus)", "Input:textColor-placeholder-DatePicker-warning": "var(--xmlui-textColor-placeholder-DatePicker-warning)", "Input:textColor-adornment-DatePicker-warning": "var(--xmlui-textColor-adornment-DatePicker-warning)", "Input:borderRadius-DatePicker-success": "var(--xmlui-borderRadius-DatePicker-success)", "Input:borderColor-DatePicker-success": "var(--xmlui-borderColor-DatePicker-success)", "Input:borderWidth-DatePicker-success": "var(--xmlui-borderWidth-DatePicker-success)", "Input:borderStyle-DatePicker-success": "var(--xmlui-borderStyle-DatePicker-success)", "Input:backgroundColor-DatePicker-success": "var(--xmlui-backgroundColor-DatePicker-success)", "Input:boxShadow-DatePicker-success": "var(--xmlui-boxShadow-DatePicker-success)", "Input:textColor-DatePicker-success": "var(--xmlui-textColor-DatePicker-success)", "Input:padding-DatePicker-success": "var(--xmlui-padding-DatePicker-success)", "Input:borderColor-DatePicker-success--hover": "var(--xmlui-borderColor-DatePicker-success--hover)", "Input:backgroundColor-DatePicker-success--hover": "var(--xmlui-backgroundColor-DatePicker-success--hover)", "Input:boxShadow-DatePicker-success--hover": "var(--xmlui-boxShadow-DatePicker-success--hover)", "Input:textColor-DatePicker-success--hover": "var(--xmlui-textColor-DatePicker-success--hover)", "Input:outlineWidth-DatePicker-success--focus": "var(--xmlui-outlineWidth-DatePicker-success--focus)", "Input:outlineColor-DatePicker-success--focus": "var(--xmlui-outlineColor-DatePicker-success--focus)", "Input:outlineStyle-DatePicker-success--focus": "var(--xmlui-outlineStyle-DatePicker-success--focus)", "Input:outlineOffset-DatePicker-success--focus": "var(--xmlui-outlineOffset-DatePicker-success--focus)", "Input:textColor-placeholder-DatePicker-success": "var(--xmlui-textColor-placeholder-DatePicker-success)", "Input:textColor-adornment-DatePicker-success": "var(--xmlui-textColor-adornment-DatePicker-success)", "Input:backgroundColor-DatePicker--disabled": "var(--xmlui-backgroundColor-DatePicker--disabled)", "Input:textColor-DatePicker--disabled": "var(--xmlui-textColor-DatePicker--disabled)", "Input:borderColor-DatePicker--disabled": "var(--xmlui-borderColor-DatePicker--disabled)", "Input:boxShadow-menu-DatePicker": "var(--xmlui-boxShadow-menu-DatePicker)", "Input:backgroundColor-menu-DatePicker": "var(--xmlui-backgroundColor-menu-DatePicker)", "Input:borderRadius-menu-DatePicker": "var(--xmlui-borderRadius-menu-DatePicker)"}'`;
const datePicker = "_datePicker_qilmv_13";
const placeholder$1 = "_placeholder_qilmv_47";
const adornment$1 = "_adornment_qilmv_50";
const error$9 = "_error_qilmv_53";
const warning$9 = "_warning_qilmv_81";
const valid$9 = "_valid_qilmv_109";
const disabled$5 = "_disabled_qilmv_137";
const indicator$2 = "_indicator_qilmv_143";
const datePickerInput = "_datePickerInput_qilmv_143";
const datePickerValue = "_datePickerValue_qilmv_147";
const inlinePickerMenu = "_inlinePickerMenu_qilmv_152";
const root$2 = "_root_qilmv_269";
const datePickerMenu = "_datePickerMenu_qilmv_274";
const vhidden = "_vhidden_qilmv_285";
const button_reset = "_button_reset_qilmv_304";
const button$1 = "_button_qilmv_304";
const day_selected = "_day_selected_qilmv_322";
const button_next = "_button_next_qilmv_336";
const button_previous = "_button_previous_qilmv_337";
const months = "_months_qilmv_367";
const month = "_month_qilmv_367";
const month_grid = "_month_grid_qilmv_383";
const caption = "_caption_qilmv_387";
const multiple_months = "_multiple_months_qilmv_395";
const caption_dropdowns = "_caption_dropdowns_qilmv_401";
const caption_label = "_caption_label_qilmv_406";
const chevron = "_chevron_qilmv_421";
const nav = "_nav_qilmv_426";
const caption_start = "_caption_start_qilmv_430";
const caption_end = "_caption_end_qilmv_437";
const nav_button = "_nav_button_qilmv_444";
const dropdowns = "_dropdowns_qilmv_457";
const dropdown_year = "_dropdown_year_qilmv_464";
const dropdown_month = "_dropdown_month_qilmv_465";
const dropdown = "_dropdown_qilmv_457";
const day = "_day_qilmv_322";
const weekday = "_weekday_qilmv_509";
const week_number = "_week_number_qilmv_514";
const day_button = "_day_button_qilmv_519";
const today = "_today_qilmv_540";
const outside = "_outside_qilmv_540";
const selected$1 = "_selected_qilmv_544";
const day_range_start = "_day_range_start_qilmv_565";
const day_range_end = "_day_range_end_qilmv_565";
const day_range_middle = "_day_range_middle_qilmv_589";
const styles$v = {
  themeVars: themeVars$t,
  datePicker,
  placeholder: placeholder$1,
  adornment: adornment$1,
  error: error$9,
  warning: warning$9,
  valid: valid$9,
  disabled: disabled$5,
  indicator: indicator$2,
  datePickerInput,
  datePickerValue,
  inlinePickerMenu,
  root: root$2,
  datePickerMenu,
  vhidden,
  button_reset,
  button: button$1,
  day_selected,
  button_next,
  button_previous,
  months,
  month,
  month_grid,
  caption,
  multiple_months,
  caption_dropdowns,
  caption_label,
  chevron,
  nav,
  caption_start,
  caption_end,
  nav_button,
  dropdowns,
  dropdown_year,
  dropdown_month,
  dropdown,
  day,
  weekday,
  week_number,
  day_button,
  today,
  outside,
  selected: selected$1,
  day_range_start,
  day_range_end,
  day_range_middle
};
const DatePickerModeValues = ["single", "range"];
var WeekDays = /* @__PURE__ */ ((WeekDays2) => {
  WeekDays2[WeekDays2["Sunday"] = 0] = "Sunday";
  WeekDays2[WeekDays2["Monday"] = 1] = "Monday";
  WeekDays2[WeekDays2["Tuesday"] = 2] = "Tuesday";
  WeekDays2[WeekDays2["Wednesday"] = 3] = "Wednesday";
  WeekDays2[WeekDays2["Thursday"] = 4] = "Thursday";
  WeekDays2[WeekDays2["Friday"] = 5] = "Friday";
  WeekDays2[WeekDays2["Saturday"] = 6] = "Saturday";
  return WeekDays2;
})(WeekDays || {});
const dateFormats = [
  "MM/dd/yyyy",
  "MM-dd-yyyy",
  "yyyy/MM/dd",
  "yyyy-MM-dd",
  "dd/MM/yyyy",
  "dd-MM-yyyy",
  "yyyyMMdd",
  "MMddyyyy"
];
const defaultProps$8 = {
  mode: "single",
  validationStatus: "none",
  enabled: true,
  inline: false,
  dateFormat: "MM/dd/yyyy",
  showWeekNumber: false,
  weekStartsOn: 0,
  disabledDates: []
};
const DatePicker = forwardRef(function DatePicker2({
  id,
  initialValue,
  value,
  mode = defaultProps$8.mode,
  enabled: enabled2 = defaultProps$8.enabled,
  placeholder: placeholder2,
  updateState = noop$1,
  validationStatus = defaultProps$8.validationStatus,
  onDidChange = noop$1,
  onFocus = noop$1,
  onBlur = noop$1,
  dateFormat = defaultProps$8.dateFormat,
  showWeekNumber = defaultProps$8.showWeekNumber,
  weekStartsOn = defaultProps$8.weekStartsOn,
  fromDate,
  toDate,
  disabledDates = defaultProps$8.disabledDates,
  style,
  registerComponentApi,
  inline = defaultProps$8.inline,
  startText,
  startIcon,
  endText,
  endIcon
}, forwardedRef) {
  const _weekStartsOn = weekStartsOn >= 0 && weekStartsOn <= 6 ? weekStartsOn : 0;
  const [isButtonFocused, setIsButtonFocused] = useState(false);
  const [isMenuFocused, setIsMenuFocused] = useState(false);
  const referenceElement = useRef(null);
  const ref = forwardedRef ? composeRefs(referenceElement, forwardedRef) : referenceElement;
  const selected2 = useMemo(() => {
    if (mode === "single" && typeof value === "string") {
      return parseISODate(value) || parseDate(value);
    } else if (mode === "range" && typeof value === "object") {
      return {
        from: parseISODate(value == null ? void 0 : value.from) || parseDate(value == null ? void 0 : value.from),
        to: parseISODate(value == null ? void 0 : value.to) || parseDate(value == null ? void 0 : value.to)
      };
    }
    return void 0;
  }, [value, mode]);
  useEffect(() => {
    if (!dateFormats.includes(dateFormat)) {
      throw new Error(
        `Invalid dateFormat: ${dateFormat}. Supported formats are: ${dateFormats.join(", ")}`
      );
    }
  }, [dateFormat]);
  const startDate = useMemo(() => {
    return fromDate ? parse(fromDate, dateFormat, /* @__PURE__ */ new Date()) : void 0;
  }, [fromDate, dateFormat]);
  const endDate = useMemo(() => {
    return toDate ? parse(toDate, dateFormat, /* @__PURE__ */ new Date()) : void 0;
  }, [toDate, dateFormat]);
  const disabled2 = useMemo(() => {
    return disabledDates == null ? void 0 : disabledDates.map((date) => parse(date, dateFormat, /* @__PURE__ */ new Date()));
  }, [disabledDates, dateFormat]);
  const [open, setOpen] = useState(false);
  const { root: root2 } = useTheme();
  const handleOnButtonFocus = () => {
    setIsButtonFocused(true);
  };
  const handleOnButtonBlur = () => {
    setIsButtonFocused(false);
  };
  const handleOnMenuFocus = () => {
    setIsMenuFocused(true);
  };
  const handleOnMenuBlur = () => {
    setIsMenuFocused(false);
  };
  const focus = useCallback(() => {
    var _a;
    (_a = referenceElement == null ? void 0 : referenceElement.current) == null ? void 0 : _a.focus();
  }, [referenceElement == null ? void 0 : referenceElement.current]);
  const setValue = useEvent((newValue) => {
    const parsedDate = parseDate(newValue);
    handleSelect(parsedDate);
  });
  useEffect(() => {
    registerComponentApi == null ? void 0 : registerComponentApi({
      focus,
      setValue
    });
  }, [focus, registerComponentApi, setValue]);
  useEffect(() => {
    if (!isButtonFocused && !isMenuFocused) {
      onBlur == null ? void 0 : onBlur();
    }
    if (isButtonFocused || isMenuFocused) {
      onFocus == null ? void 0 : onFocus();
    }
  }, [isButtonFocused, isMenuFocused, onFocus, onBlur]);
  useEffect(() => {
    updateState({ value: initialValue }, { initial: true });
  }, [initialValue, updateState]);
  const handleSelect = useCallback(
    (dateOrRange) => {
      if (!dateOrRange) {
        updateState({ value: void 0 });
        onDidChange("");
      } else if (mode === "single") {
        const date = dateOrRange;
        const formattedDate = format(date, dateFormat);
        updateState({ value: formattedDate });
        onDidChange(formattedDate);
      } else {
        const range = dateOrRange;
        const formattedRange = {
          from: range.from ? format(range.from, dateFormat) : "",
          to: range.to ? format(range.to, dateFormat) : ""
        };
        updateState({ value: formattedRange });
        onDidChange(formattedRange);
      }
      if (mode === "single") {
        setOpen(false);
      }
    },
    [onDidChange, updateState, mode, dateFormat]
  );
  return inline ? /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsx("div", { className: styles$v.inlinePickerMenu, children: /* @__PURE__ */ jsx(
    DayPicker,
    {
      required: void 0,
      captionLayout: "dropdown",
      fixedWeeks: true,
      startMonth: startDate,
      endMonth: endDate,
      disabled: disabled2,
      weekStartsOn: _weekStartsOn,
      showWeekNumber,
      showOutsideDays: true,
      classNames: styles$v,
      mode: mode === "single" ? "single" : "range",
      selected: selected2,
      onSelect: handleSelect,
      autoFocus: !inline,
      numberOfMonths: mode === "range" ? 2 : 1
    }
  ) }) }) : /* @__PURE__ */ jsxs(ReactDropdownMenu.Root, { open, onOpenChange: setOpen, modal: false, children: [
    /* @__PURE__ */ jsx(ReactDropdownMenu.Trigger, { asChild: true, children: /* @__PURE__ */ jsxs(
      "button",
      {
        disabled: !enabled2,
        id,
        ref,
        style,
        className: classnames(styles$v.datePicker, {
          [styles$v.disabled]: !enabled2,
          [styles$v.error]: validationStatus === "error",
          [styles$v.warning]: validationStatus === "warning",
          [styles$v.valid]: validationStatus === "valid"
        }),
        onFocus: handleOnButtonFocus,
        onBlur: handleOnButtonBlur,
        children: [
          /* @__PURE__ */ jsx(Adornment, { text: startText, iconName: startIcon, className: styles$v.adornment }),
          /* @__PURE__ */ jsx("div", { className: styles$v.datePickerValue, children: mode === "single" && selected2 ? /* @__PURE__ */ jsx(Fragment, { children: format(selected2, dateFormat) }) : mode === "range" && typeof selected2 === "object" && selected2.from ? selected2.to ? /* @__PURE__ */ jsxs(Fragment, { children: [
            format(selected2.from, dateFormat),
            " - ",
            format(selected2.to, dateFormat)
          ] }) : /* @__PURE__ */ jsx(Fragment, { children: format(selected2.from, dateFormat) }) : placeholder2 ? /* @__PURE__ */ jsx("span", { className: styles$v.placeholder, children: placeholder2 }) : /* @__PURE__ */ jsx("span", { children: " " }) }),
          /* @__PURE__ */ jsx(Adornment, { text: endText, iconName: endIcon, className: styles$v.adornment })
        ]
      }
    ) }),
    /* @__PURE__ */ jsx(ReactDropdownMenu.Portal, { container: root2, children: /* @__PURE__ */ jsx(
      ReactDropdownMenu.Content,
      {
        align: "start",
        sideOffset: 5,
        className: styles$v.datePickerMenu,
        onFocus: handleOnMenuFocus,
        onBlur: handleOnMenuBlur,
        onInteractOutside: handleOnMenuBlur,
        children: /* @__PURE__ */ jsx(
          DayPicker,
          {
            required: void 0,
            fixedWeeks: true,
            classNames: styles$v,
            captionLayout: "dropdown",
            startMonth: startDate,
            endMonth: endDate,
            disabled: disabled2,
            weekStartsOn: _weekStartsOn,
            showWeekNumber,
            showOutsideDays: true,
            mode: mode === "single" ? "single" : "range",
            selected: selected2,
            onSelect: handleSelect,
            autoFocus: !inline,
            numberOfMonths: mode === "range" ? 2 : 1
          }
        )
      }
    ) })
  ] });
});
const isoRegex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$/;
const parseISODate = (dateString) => {
  if (dateString && isoRegex.test(dateString)) {
    const parsedDate = parseISO(dateString);
    if (isValid(parsedDate)) {
      return parsedDate;
    }
  }
  return void 0;
};
const parseDate = (dateString) => {
  if (dateString) {
    for (const format2 of dateFormats) {
      const parsedDate = parse(dateString, format2, /* @__PURE__ */ new Date());
      if (isValid(parsedDate)) {
        return parsedDate;
      }
    }
  }
  return void 0;
};
const COMP$S = "DatePicker";
const DatePickerMd = createMetadata({
  status: "experimental",
  description: "A datepicker component enables the selection of a date or a range of dates in a specified format from an interactive display.",
  props: {
    placeholder: dPlaceholder(),
    initialValue: dInitialValue(),
    autoFocus: dAutoFocus(),
    readOnly: dReadonly(),
    enabled: dEnabled(defaultProps$8.enabled),
    validationStatus: dValidationStatus(defaultProps$8.validationStatus),
    mode: {
      description: "The mode of the datepicker (single or range)",
      valueType: "string",
      availableValues: DatePickerModeValues,
      defaultValue: defaultProps$8.mode
    },
    dateFormat: {
      description: "The format of the date displayed in the input field",
      valueType: "string",
      defaultValue: defaultProps$8.dateFormat,
      availableValues: dateFormats
    },
    showWeekNumber: {
      description: "Whether to show the week number in the calendar",
      valueType: "boolean",
      defaultValue: defaultProps$8.showWeekNumber
    },
    weekStartsOn: {
      description: "The first day of the week. 0 is Sunday, 1 is Monday, etc.",
      valueType: "number",
      defaultValue: defaultProps$8.weekStartsOn,
      availableValues: [
        {
          value: WeekDays.Sunday,
          description: "Sunday"
        },
        {
          value: WeekDays.Monday,
          description: "Monday"
        },
        {
          value: WeekDays.Tuesday,
          description: "Tuesday"
        },
        {
          value: WeekDays.Wednesday,
          description: "Wednesday"
        },
        {
          value: WeekDays.Thursday,
          description: "Thursday"
        },
        {
          value: WeekDays.Friday,
          description: "Friday"
        },
        {
          value: WeekDays.Saturday,
          description: "Saturday"
        }
      ]
    },
    fromDate: {
      description: "The start date of the range of selectable dates",
      valueType: "string"
    },
    toDate: {
      description: "The end date of the range of selectable dates",
      valueType: "string"
    },
    disabledDates: {
      description: "An array of dates that are disabled",
      valueType: "any"
    },
    inline: {
      description: "Whether to display the datepicker inline",
      valueType: "boolean",
      defaultValue: defaultProps$8.inline
    },
    startText: dStartText(),
    startIcon: dStartIcon(),
    endText: dEndText(),
    endIcon: dEndIcon()
  },
  events: {
    didChange: dDidChange(COMP$S),
    gotFocus: dGotFocus(COMP$S),
    lostFocus: dLostFocus(COMP$S)
  },
  apis: {
    focus: dFocus(COMP$S),
    value: d(
      `You can query the component's value. If no value is set, it will retrieve \`undefined\`.`
    ),
    setValue: dSetValueApi()
  },
  themeVars: parseScssVar(styles$v.themeVars),
  defaultThemeVars: {
    [`boxShadow-menu-${COMP$S}`]: "$boxShadow-md",
    [`borderRadius-menu-${COMP$S}`]: "$borderRadius",
    [`textColor-value-${COMP$S}`]: "$textColor-primary",
    [`backgroundColor-menu-${COMP$S}`]: "$color-surface-50",
    [`backgroundColor-item-${COMP$S}--hover`]: "$color-surface-100",
    [`backgroundColor-item-${COMP$S}--active`]: "$color-surface-200"
  }
});
const themeVars$s = `'{"backgroundColor-DropdownMenu": "var(--xmlui-backgroundColor-DropdownMenu)", "borderRadius-DropdownMenu": "var(--xmlui-borderRadius-DropdownMenu)", "boxShadow-DropdownMenu": "var(--xmlui-boxShadow-DropdownMenu)", "borderColor-DropdownMenu-content": "var(--xmlui-borderColor-DropdownMenu-content)", "borderWidth-DropdownMenu-content": "var(--xmlui-borderWidth-DropdownMenu-content)", "borderStyle-DropdownMenu-content": "var(--xmlui-borderStyle-DropdownMenu-content)", "minWidth-DropdownMenu": "var(--xmlui-minWidth-DropdownMenu)", "backgroundColor-MenuItem": "var(--xmlui-backgroundColor-MenuItem)", "color-MenuItem": "var(--xmlui-color-MenuItem)", "fontFamily-MenuItem": "var(--xmlui-fontFamily-MenuItem)", "gap-MenuItem": "var(--xmlui-gap-MenuItem)", "fontSize-MenuItem": "var(--xmlui-fontSize-MenuItem)", "paddingVertical-MenuItem": "var(--xmlui-paddingVertical-MenuItem)", "paddingHorizontal-MenuItem": "var(--xmlui-paddingHorizontal-MenuItem)", "backgroundColor-MenuItem--hover": "var(--xmlui-backgroundColor-MenuItem--hover)", "backgroundColor-MenuItem--active": "var(--xmlui-backgroundColor-MenuItem--active)", "backgroundColor-MenuItem--active--hover": "var(--xmlui-backgroundColor-MenuItem--active--hover)", "color-MenuItem--hover": "var(--xmlui-color-MenuItem--hover)", "color-MenuItem--active": "var(--xmlui-color-MenuItem--active)", "color-MenuItem--active--hover": "var(--xmlui-color-MenuItem--active--hover)", "color-MenuItem--disabled": "var(--xmlui-color-MenuItem--disabled)", "marginTop-MenuSeparator": "var(--xmlui-marginTop-MenuSeparator)", "marginBottom-MenuSeparator": "var(--xmlui-marginBottom-MenuSeparator)", "width-MenuSeparator": "var(--xmlui-width-MenuSeparator)", "height-MenuSeparator": "var(--xmlui-height-MenuSeparator)", "color-MenuSeparator": "var(--xmlui-color-MenuSeparator)"}'`;
const DropdownMenuContent = "_DropdownMenuContent_1ty8e_13";
const DropdownMenuItem = "_DropdownMenuItem_1ty8e_26";
const active$1 = "_active_1ty8e_50";
const disabled$4 = "_disabled_1ty8e_60";
const wrapper$2 = "_wrapper_1ty8e_71";
const styles$u = {
  themeVars: themeVars$s,
  DropdownMenuContent,
  DropdownMenuItem,
  active: active$1,
  disabled: disabled$4,
  wrapper: wrapper$2
};
const defaultDropdownMenuProps = {
  alignment: "start",
  triggerButtonVariant: "ghost",
  triggerButtonThemeColor: "primary",
  triggerButtonIcon: "chevrondown",
  triggerButtonIconPosition: "end"
};
forwardRef(function DropdownMenu2({
  triggerTemplate,
  children,
  label: label2,
  registerComponentApi,
  style,
  onWillOpen,
  alignment = defaultDropdownMenuProps.alignment,
  disabled: disabled2 = false,
  triggerButtonVariant = defaultDropdownMenuProps.triggerButtonVariant,
  triggerButtonThemeColor = defaultDropdownMenuProps.triggerButtonThemeColor,
  triggerButtonIcon = defaultDropdownMenuProps.triggerButtonIcon,
  triggerButtonIconPosition = defaultDropdownMenuProps.triggerButtonIconPosition
}, ref) {
  const { root: root2 } = useTheme();
  const [open, setOpen] = useState(false);
  useEffect(() => {
    registerComponentApi == null ? void 0 : registerComponentApi({
      close: () => setOpen(false)
    });
  }, [registerComponentApi]);
  return /* @__PURE__ */ jsxs(
    ReactDropdownMenu.Root,
    {
      open,
      onOpenChange: async (isOpen) => {
        if (isOpen) {
          const willOpenResult = await (onWillOpen == null ? void 0 : onWillOpen());
          if (willOpenResult === false) {
            return;
          }
        }
        setOpen(isOpen);
      },
      children: [
        /* @__PURE__ */ jsx(ReactDropdownMenu.Trigger, { asChild: true, disabled: disabled2, ref, children: triggerTemplate ? triggerTemplate : /* @__PURE__ */ jsx(
          Button,
          {
            icon: /* @__PURE__ */ jsx(Icon, { name: triggerButtonIcon }),
            iconPosition: triggerButtonIconPosition,
            type: "button",
            variant: triggerButtonVariant,
            themeColor: triggerButtonThemeColor,
            disabled: disabled2,
            children: label2
          }
        ) }),
        /* @__PURE__ */ jsx(ReactDropdownMenu.Portal, { container: root2, children: /* @__PURE__ */ jsx(
          ReactDropdownMenu.Content,
          {
            align: alignment,
            style,
            className: styles$u.DropdownMenuContent,
            children
          }
        ) })
      ]
    }
  );
});
const defaultMenuItemProps = {
  iconPosition: "start",
  active: false
};
forwardRef(function MenuItem2({
  children,
  onClick = noop$1,
  label: label2,
  style,
  icon,
  iconPosition = defaultMenuItemProps.iconPosition,
  active: active2 = defaultMenuItemProps.active,
  enabled: enabled2 = true
}, ref) {
  const iconToStart = iconPosition === "start";
  return /* @__PURE__ */ jsxs(
    ReactDropdownMenu.Item,
    {
      style,
      className: classnames(styles$u.DropdownMenuItem, {
        [styles$u.active]: active2,
        [styles$u.disabled]: !enabled2
      }),
      onClick: (event) => {
        if (!enabled2) {
          event.preventDefault();
          event.stopPropagation();
          return;
        }
        event.stopPropagation();
        if (enabled2) {
          onClick(event);
        }
      },
      ref,
      children: [
        iconToStart && icon,
        /* @__PURE__ */ jsx("div", { className: styles$u.wrapper, children: label2 ?? children }),
        !iconToStart && icon
      ]
    }
  );
});
const DDMCOMP = "DropdownMenu";
const DropdownMenuMd = createMetadata({
  description: `This component represents a dropdown menu with a trigger. When the user clicks the trigger, the dropdown menu displays its items.`,
  props: {
    label: dLabel(),
    triggerTemplate: dTriggerTemplate(DDMCOMP),
    alignment: {
      description: "This property allows you to determine the alignment of the dropdown panel with the displayed menu items.",
      valueType: "string",
      availableValues: alignmentOptionMd,
      defaultValue: defaultDropdownMenuProps.alignment
    },
    enabled: dEnabled(),
    triggerButtonVariant: {
      description: `This property defines the theme variant of the \`Button\` as the dropdown menu's trigger. It has no effect when a custom trigger is defined with \`triggerTemplate\`.`,
      valueType: "string",
      availableValues: buttonVariantMd,
      defaultValue: defaultDropdownMenuProps.triggerButtonVariant
    },
    triggerButtonThemeColor: {
      description: `This property defines the theme color of the \`Button\` as the dropdown menu's trigger. It has no effect when a custom trigger is defined with \`triggerTemplate\`.`,
      valueType: "string",
      availableValues: buttonThemeMd,
      defaultValue: defaultDropdownMenuProps.triggerButtonThemeColor
    },
    triggerButtonIcon: {
      description: `This property defines the icon to display on the trigger button.`,
      defaultValue: defaultDropdownMenuProps.triggerButtonIcon,
      valueType: "string"
    },
    triggerButtonIconPosition: {
      description: `This property defines the position of the icon on the trigger button.`,
      defaultValue: defaultDropdownMenuProps.triggerButtonIconPosition,
      valueType: "string",
      availableValues: iconPositionMd
    }
  },
  events: {
    willOpen: d(`This event fires when the \`${DDMCOMP}\` component is opened.`)
  },
  apis: {
    close: d(`This method command closes the dropdown.`)
  },
  themeVars: parseScssVar(styles$u.themeVars),
  defaultThemeVars: {
    [`backgroundColor-${DDMCOMP}`]: "$color-surface-raised",
    [`minWidth-${DDMCOMP}`]: "160px",
    [`boxShadow-${DDMCOMP}`]: "$boxShadow-xl",
    [`borderStyle-${DDMCOMP}-content`]: "solid",
    [`borderRadius-${DDMCOMP}`]: "$borderRadius"
  }
});
const MICOMP = "MenuItem";
const MenuItemMd = createMetadata({
  description: `This property represents a leaf item in a menu hierarchy. Clicking the item triggers an action.`,
  docFolder: DDMCOMP,
  props: {
    iconPosition: {
      description: `This property allows you to determine the position of the icon displayed in the menu item.`,
      valueType: "string",
      availableValues: iconPositionMd,
      defaultValue: defaultMenuItemProps.iconPosition
    },
    icon: {
      description: `This property names an optional icon to display with the menu item.`,
      valueType: "string"
    },
    label: dLabel(),
    to: {
      description: `This property defines the URL of the menu item. If this property is defined (and the \`click\` event does not have an event handler), clicking the menu item navigates to this link.`,
      valueType: "string"
    },
    active: {
      description: `This property indicates if the specified menu item is active.`,
      valueType: "boolean",
      defaultValue: defaultMenuItemProps.active
    },
    enabled: dEnabled()
  },
  events: {
    click: dClick(MICOMP)
  },
  themeVars: parseScssVar(styles$u.themeVars),
  defaultThemeVars: {
    [`backgroundColor-${MICOMP}`]: "$backgroundColor-dropdown-item",
    [`color-${MICOMP}`]: "$textColor-primary",
    [`color-${MICOMP}--disabled`]: "$textColor--disabled",
    [`fontFamily-${MICOMP}`]: "$fontFamily",
    [`fontSize-${MICOMP}`]: "$fontSize-small",
    [`paddingVertical-${MICOMP}`]: "$space-2",
    [`paddingHorizontal-${MICOMP}`]: "$space-3",
    [`backgroundColor-${MICOMP}--hover`]: "$backgroundColor-dropdown-item--hover",
    [`color-${MICOMP}--hover`]: "inherit",
    [`gap-${MICOMP}`]: "$space-2",
    [`color-${MICOMP}--active`]: "$color-primary",
    [`backgroundColor-${MICOMP}--active`]: "$backgroundColor-dropdown-item--active",
    light: {},
    dark: {}
  }
});
const SMCOMP = "SubMenuItem";
const SubMenuItemMd = createMetadata({
  description: "This component represents a nested menu item within another menu or menu item.",
  docFolder: DDMCOMP,
  props: {
    label: dLabel(),
    triggerTemplate: dTriggerTemplate(SMCOMP)
  }
});
const MSEP = "MenuSeparator";
const MenuSeparatorMd = createMetadata({
  description: "This component displays a separator line between menu items.",
  docFolder: DDMCOMP,
  themeVars: parseScssVar(styles$u.themeVars),
  defaultThemeVars: {
    [`marginTop-${MSEP}`]: "$space-1",
    [`marginBottom-${MSEP}`]: "$space-1",
    [`width-${MSEP}`]: "100%",
    [`height-${MSEP}`]: "1px",
    [`color-${MSEP}`]: "$borderColor-dropdown-item",
    [`marginHorizontal-${MSEP}`]: "12px"
  }
});
const COMP$R = "EmojiSelector";
const EmojiSelectorMd = createMetadata({
  status: "experimental",
  description: `The \`${COMP$R}\` component provides users with a graphical interface to browse, search and select emojis to insert into text fields, messages, or other forms of communication.`,
  props: {
    autoFocus: dAutoFocus()
  },
  events: {
    select: d(`This event is fired when the user selects an emoticon from this component.`)
  }
});
const themeVars$r = '"[]"';
const container = "_container_1hin1_13";
const buttonStart = "_buttonStart_1hin1_22";
const buttonEnd = "_buttonEnd_1hin1_26";
const textBoxWrapper = "_textBoxWrapper_1hin1_30";
const button = "_button_1hin1_22";
const styles$t = {
  themeVars: themeVars$r,
  container,
  buttonStart,
  buttonEnd,
  textBoxWrapper,
  button
};
const { useDropzone } = dropzone;
const FileInput = ({
  id,
  enabled: enabled2 = true,
  style,
  placeholder: placeholder2,
  buttonPosition = "end",
  buttonLabel = "Browse",
  buttonIcon,
  buttonIconPosition,
  variant,
  buttonThemeColor,
  buttonSize,
  autoFocus,
  validationStatus,
  updateState = noop$1,
  onDidChange = noop$1,
  onFocus = noop$1,
  onBlur = noop$1,
  registerComponentApi,
  value,
  initialValue,
  acceptsFileType,
  multiple = false,
  directory = false,
  label: label2,
  labelPosition,
  labelWidth,
  labelBreak: labelBreak2,
  required: required2
}) => {
  const _initialValue = isFileArray(initialValue) ? initialValue : void 0;
  const _value = isFileArray(value) ? value : void 0;
  const buttonRef = useRef(null);
  const _acceptsFileType = typeof acceptsFileType === "string" ? acceptsFileType : acceptsFileType == null ? void 0 : acceptsFileType.join(",");
  useEffect(() => {
    if (autoFocus) {
      setTimeout(() => {
        var _a;
        (_a = buttonRef.current) == null ? void 0 : _a.focus();
      }, 0);
    }
  }, [autoFocus]);
  useEffect(() => {
    updateState({ value: _initialValue }, { initial: true });
  }, [_initialValue, updateState]);
  const handleOnBlur = useCallback(() => {
    onBlur == null ? void 0 : onBlur();
  }, [onBlur]);
  const focus = useCallback(() => {
    var _a;
    (_a = buttonRef.current) == null ? void 0 : _a.focus();
  }, []);
  const onDrop = useCallback(
    (acceptedFiles) => {
      if (!acceptedFiles.length) return;
      updateState({ value: acceptedFiles });
      onDidChange(acceptedFiles);
    },
    [updateState, onDidChange]
  );
  const { getRootProps, getInputProps, open } = useDropzone({
    disabled: !enabled2,
    multiple: multiple || directory,
    onDrop,
    noClick: true,
    noKeyboard: true,
    noDragEventsBubbling: true,
    useFsAccessApi: directory === false
  });
  const handleOnFocus = useCallback(() => {
    onFocus == null ? void 0 : onFocus();
  }, [onFocus]);
  const doOpen = useEvent(() => {
    open();
  });
  useEffect(() => {
    registerComponentApi == null ? void 0 : registerComponentApi({
      focus,
      open: doOpen
    });
  }, [focus, doOpen, registerComponentApi]);
  return /* @__PURE__ */ jsx(
    ItemWithLabel,
    {
      labelPosition,
      label: label2,
      labelWidth,
      labelBreak: labelBreak2,
      required: required2,
      enabled: enabled2,
      onFocus,
      onBlur,
      style,
      children: /* @__PURE__ */ jsxs(
        "div",
        {
          className: classnames(styles$t.container, {
            [styles$t.buttonStart]: buttonPosition === "start",
            [styles$t.buttonEnd]: buttonPosition === "end"
          }),
          children: [
            /* @__PURE__ */ jsxs(
              "button",
              {
                ...getRootProps({
                  tabIndex: 0,
                  onFocus: handleOnFocus,
                  onBlur: handleOnBlur,
                  disabled: !enabled2,
                  className: styles$t.textBoxWrapper,
                  onClick: open,
                  ref: buttonRef,
                  type: "button"
                }),
                children: [
                  /* @__PURE__ */ jsx(VisuallyHidden$1.Root, { children: /* @__PURE__ */ jsx(
                    "input",
                    {
                      ...getInputProps({
                        webkitdirectory: directory ? "true" : void 0
                      }),
                      accept: _acceptsFileType
                    }
                  ) }),
                  /* @__PURE__ */ jsx(
                    TextBox,
                    {
                      placeholder: placeholder2,
                      enabled: enabled2,
                      value: (_value == null ? void 0 : _value.map((v) => v.name).join(", ")) || "",
                      validationStatus,
                      readOnly: true,
                      tabIndex: -1
                    }
                  )
                ]
              }
            ),
            /* @__PURE__ */ jsx(
              Button,
              {
                id,
                disabled: !enabled2,
                type: "button",
                onClick: open,
                icon: buttonIcon,
                iconPosition: buttonIconPosition,
                variant,
                themeColor: buttonThemeColor,
                size: buttonSize,
                className: styles$t.button,
                autoFocus,
                children: buttonLabel
              }
            )
          ]
        }
      )
    }
  );
};
function isFile(value) {
  return value instanceof File;
}
function isFileArray(value) {
  return Array.isArray(value) && value.every(isFile);
}
const COMP$Q = "FileInput";
const FileInputMd = createMetadata({
  description: `The \`${COMP$Q}\` is a user interface component that allows users to select files from their device's file system for upload (or processing its content otherwise).`,
  status: "experimental",
  props: {
    placeholder: dPlaceholder(),
    initialValue: dInitialValue(),
    autoFocus: dAutoFocus(),
    required: dRequired(),
    readOnly: dReadonly(),
    enabled: dEnabled(),
    validationStatus: dValidationStatus(),
    label: dLabel(),
    labelPosition: dLabelPosition("top"),
    labelWidth: dLabelWidth(COMP$Q),
    labelBreak: dLabelBreak(COMP$Q),
    buttonVariant: d("The button variant to use", buttonVariantNames),
    buttonLabel: d(`This property is an optional string to set a label for the button part.`),
    buttonIcon: d("The ID of the icon to display in the button"),
    buttonIconPosition: d(
      `This optional string determines the location of the button icon.`,
      iconPositionNames
    ),
    acceptsFileType: d(
      `A list of file types the input controls accepts provided as a string array.`
    ),
    multiple: d(
      `This boolean property enables to add not just one (\`false\`), but multiple files to the field (\`true\`). This is done either by dragging onto the field or by selecting multiple files in the browser menu after clicking the input field button.`,
      null,
      "boolean",
      false
    ),
    directory: d(
      `This boolean property indicates whether the component allows selecting directories (\`true\`) or files only (\`false\`).`,
      null,
      "boolean",
      false
    ),
    buttonPosition: d(
      `This property determines the position of the button relative to the input field. The default is "end".`,
      ["start", "end"]
    ),
    buttonSize: d("The size of the button (small, medium, large)", sizeMd),
    buttonThemeColor: d(
      "The button color scheme (primary, secondary, attention)",
      buttonThemeNames
    )
  },
  events: {
    didChange: dDidChange(COMP$Q),
    gotFocus: dGotFocus(COMP$Q),
    lostFocus: dLostFocus(COMP$Q)
  },
  apis: {
    value: d(
      `By setting an ID for the component, you can refer to the value of the field if set. If no value is set, the value will be undefined.`
    ),
    setValue: d(
      `(**NOT IMPLEMENTED YET**) You can use this method to set the component's current value programmatically.`
    ),
    focus: dFocus(COMP$Q),
    open: d(`This API command triggers the file browsing dialog to open.`)
  },
  themeVars: parseScssVar(styles$t.themeVars)
});
const themeVars$q = `'{"backgroundColor-FileUploadDropZone": "var(--xmlui-backgroundColor-FileUploadDropZone)", "textColor-FileUploadDropZone": "var(--xmlui-textColor-FileUploadDropZone)", "backgroundColor-dropping-FileUploadDropZone": "var(--xmlui-backgroundColor-dropping-FileUploadDropZone)", "opacity-dropping-FileUploadDropZone": "var(--xmlui-opacity-dropping-FileUploadDropZone)"}'`;
const styles$s = {
  themeVars: themeVars$q
};
const COMP$P = "FileUploadDropZone";
const FileUploadDropZoneMd = createMetadata({
  description: `The \`${COMP$P}\` component allows users to upload files to a web application by dragging and dropping files from their local file system onto a designated area within the UI.`,
  props: {
    text: {
      description: "With this property, you can change the default text to display when files are dragged over the drop zone.",
      defaultValue: "Drop files here",
      type: "string"
    },
    allowPaste: {
      description: "This property indicates if the drop zone accepts files pasted from the clipboard (`true`) or only dragged files (`false`).",
      type: "boolean",
      defaultValue: true
    },
    enabled: d(
      `If set to \`false\`, the drop zone will be disabled and users will not be able to upload files.`,
      null,
      "boolean",
      true
    )
  },
  events: {
    upload: d(
      `This component accepts files for upload but does not perform the actual operation. It fires the \`upload\` event and passes the list files to upload in the method's argument. You can use the passed file information to implement the upload (according to the protocol your backend supports).`
    )
  },
  themeVars: parseScssVar(styles$s.themeVars),
  defaultThemeVars: {
    "backgroundColor-FileUploadDropZone": "$backgroundColor",
    "backgroundColor-dropping-FileUploadDropZone": "$backgroundColor--selected",
    "opacity-dropping-FileUploadDropZone": "0.5",
    "textColor-FileUploadDropZone": "$textColor",
    light: {
      // --- No light-specific theme vars
    },
    dark: {
      // --- No dark-specific theme vars
    }
  }
});
const themeVars$p = '"[]"';
const outer = "_outer_aarhe_13";
const flowContainer = "_flowContainer_aarhe_17";
const horizontal = "_horizontal_aarhe_21";
const flowItem = "_flowItem_aarhe_24";
const forceBreak = "_forceBreak_aarhe_47";
const starSized = "_starSized_aarhe_47";
const styles$r = {
  themeVars: themeVars$p,
  outer,
  flowContainer,
  horizontal,
  flowItem,
  "break": "_break_aarhe_47",
  forceBreak,
  starSized
};
const THEME_VAR_PREFIX = "xmlui";
const themeVarCapturesRegex = /(\$[a-zA-Z][a-zA-Z0-9-_]*)/g;
const booleanRegex = /^(true|false)$/;
const starSizeRegex = /^\d*\*$/;
const defaultCompResult = {
  cssProps: {},
  issues: /* @__PURE__ */ new Set()
};
function resolveLayoutProps(layoutProps = EMPTY_OBJECT, layoutContext) {
  const result = {
    cssProps: {},
    issues: /* @__PURE__ */ new Set()
  };
  if (!!getOrientation(layoutContext)) {
    result.cssProps.flexShrink = 0;
  }
  collectCss("width");
  const horizontalStarSize = getHorizontalStarSize(result.cssProps.width, layoutContext);
  if (horizontalStarSize !== null) {
    result.cssProps.flex = horizontalStarSize;
    result.cssProps.flexShrink = 1;
  }
  collectCss("minWidth");
  collectCss("maxWidth");
  collectCss("height");
  const verticalStarSize = getVerticalStarSize(result.cssProps.height, layoutContext);
  if (verticalStarSize !== null) {
    result.cssProps.flex = verticalStarSize;
    result.cssProps.flexShrink = 1;
  }
  collectCss("minHeight");
  collectCss("maxHeight");
  collectCss("top");
  collectCss("right");
  collectCss("bottom");
  collectCss("left");
  collectCss("gap");
  collectCss("padding");
  const paddingHorizontal = transformLayoutValue("paddingHorizontal");
  if (paddingHorizontal) {
    result.cssProps.paddingLeft = paddingHorizontal;
    result.cssProps.paddingRight = paddingHorizontal;
  }
  collectCss("paddingRight");
  collectCss("paddingLeft");
  const paddingVertical = transformLayoutValue("paddingVertical");
  if (paddingVertical) {
    result.cssProps.paddingTop = paddingVertical;
    result.cssProps.paddingBottom = paddingVertical;
  }
  collectCss("paddingTop");
  collectCss("paddingBottom");
  collectCss("margin");
  const marginHorizontal = transformLayoutValue("marginHorizontal");
  if (marginHorizontal) {
    result.cssProps.marginLeft = marginHorizontal;
    result.cssProps.marginRight = marginHorizontal;
  }
  collectCss("marginRight");
  collectCss("marginLeft");
  const marginVertical = transformLayoutValue("marginVertical");
  if (marginVertical) {
    result.cssProps.marginTop = marginVertical;
    result.cssProps.marginBottom = marginVertical;
  }
  collectCss("marginTop");
  collectCss("marginBottom");
  collectCss("border");
  const horizontalBorder = transformLayoutValue("borderHorizontal");
  if (horizontalBorder) {
    result.cssProps.borderLeft = horizontalBorder;
    result.cssProps.borderRight = horizontalBorder;
  }
  collectCss("borderRight");
  collectCss("borderLeft");
  const verticalBorder = transformLayoutValue("borderVertical");
  if (verticalBorder) {
    result.cssProps.borderTop = verticalBorder;
    result.cssProps.borderBottom = verticalBorder;
  }
  collectCss("borderTop");
  collectCss("borderBottom");
  collectCss("borderColor");
  collectCss("borderStyle");
  collectCss("borderWidth");
  collectCss("borderRadius");
  collectCss("radiusTopLeft", "borderTopLeftRadius");
  collectCss("radiusTopRight", "borderTopRightRadius");
  collectCss("radiusBottomLeft", "borderBottomLeftRadius");
  collectCss("radiusBottomRight", "borderBottomRightRadius");
  collectCss("color");
  collectCss("fontFamily");
  collectCss("fontSize");
  collectCss("fontWeight");
  collectCss("fontStyle");
  collectCss("textDecoration");
  collectCss("textDecorationLine");
  collectCss("textDecorationColor");
  collectCss("textDecorationStyle");
  collectCss("textDecorationThickness");
  collectCss("textUnderlineOffset");
  collectCss("userSelect");
  collectCss("letterSpacing");
  collectCss("textTransform");
  collectCss("lineHeight");
  collectCss("textAlign");
  collectCss("textAlignLast");
  collectCss("textWrap");
  collectCss("backgroundColor");
  collectCss("background");
  collectCss("boxShadow");
  collectCss("direction");
  collectCss("overflowX");
  collectCss("overflowY");
  collectCss("zIndex");
  collectCss("opacity");
  collectCss("zoom");
  collectCss("cursor");
  collectCss("whiteSpace");
  collectCss("outline");
  collectCss("outlineWidth");
  collectCss("outlineColor");
  collectCss("outlineStyle");
  collectCss("outlineOffset");
  const wrapContent = transformLayoutValue("wrapContent");
  if (wrapContent) {
    result.cssProps.flexWrap = wrapContent === "true" ? "wrap" : "nowrap";
  }
  collectCss("canShrink", "flexShrink");
  const canShrink = transformLayoutValue("canShrink");
  if (canShrink) {
    result.cssProps.flexShrink = canShrink === "true" ? 1 : 0;
  }
  if (isEmpty(result.cssProps) && isEmpty(result.issues)) {
    return defaultCompResult;
  }
  return result;
  function transformLayoutValue(prop) {
    var _a, _b;
    const defValue = resolveSingleValue();
    if (((_a = layoutContext == null ? void 0 : layoutContext.mediaSize) == null ? void 0 : _a.sizeIndex) !== void 0) {
      const sizeIndex = (_b = layoutContext.mediaSize) == null ? void 0 : _b.sizeIndex;
      const xsValue = resolveSingleValue("xs");
      const smValue = resolveSingleValue("sm");
      const mdValue = resolveSingleValue("md");
      const lgValue = resolveSingleValue("lg");
      const xlValue = resolveSingleValue("xl");
      const xxlValue = resolveSingleValue("xxl");
      let mergedValue;
      switch (sizeIndex) {
        case 0:
          mergedValue = xsValue ?? smValue ?? mdValue;
          break;
        case 1:
          mergedValue = smValue ?? mdValue;
          break;
        case 2:
          mergedValue = mdValue;
          break;
        case 3:
          mergedValue = lgValue;
          break;
        case 4:
          mergedValue = xlValue ?? lgValue;
          break;
        case 5:
          mergedValue = xxlValue ?? xlValue ?? lgValue;
          break;
      }
      return mergedValue ?? defValue;
    }
    return defValue;
    function resolveSingleValue(sizeTag = "") {
      const fullProp = sizeTag ? `${prop}-${sizeTag}` : prop;
      let singleInput = layoutProps[fullProp];
      if (singleInput == void 0) {
        return;
      }
      if (typeof singleInput === "string") {
        singleInput = singleInput.trim();
      } else {
        singleInput = singleInput.toString();
      }
      const value = singleInput ? singleInput.replace(
        themeVarCapturesRegex,
        (match) => toCssVar(match.trim())
      ) : void 0;
      if (singleInput !== value) {
        return value;
      }
      const propPatterns = layoutPatterns[prop];
      if (!propPatterns || propPatterns.length === 0) {
        return value;
      }
      for (const pattern of propPatterns) {
        if (pattern.test(value)) {
          return value;
        }
      }
      result.issues.add(fullProp);
      return value;
    }
  }
  function collectCss(prop, propCssName = "") {
    const value = transformLayoutValue(prop);
    if (value) {
      result.cssProps[propCssName || prop] = value;
    }
  }
  function getHorizontalStarSize(size, layoutContext2) {
    if (!size) return null;
    const orientation = getOrientation(layoutContext2);
    return orientation === "horizontal" && starSizeRegex.test(size.toString()) ? getStarSizeNumber(size.toString()) : null;
  }
  function getVerticalStarSize(size, layoutContext2) {
    if (!size) return null;
    const orientation = getOrientation(layoutContext2);
    return orientation === "vertical" && starSizeRegex.test(size.toString()) ? getStarSizeNumber(size.toString()) : null;
  }
  function getStarSizeNumber(input2) {
    if (starSizeRegex.test(input2)) {
      const numberPart = input2.slice(0, -1);
      return numberPart === "" ? 1 : parseInt(numberPart, 10);
    }
    return null;
  }
  function getOrientation(layoutContext2) {
    if (!layoutContext2) return;
    let orientation = (layoutContext2 == null ? void 0 : layoutContext2.type) === "Stack" && (layoutContext2 == null ? void 0 : layoutContext2.orientation);
    return orientation == null ? void 0 : orientation.toString();
  }
}
function toCssVar(c) {
  return `var(--${THEME_VAR_PREFIX}-${c.substring(1)})`;
}
const layoutPatterns = {
  // --- Dimensions
  width: [],
  minWidth: [],
  maxWidth: [],
  height: [],
  minHeight: [],
  maxHeight: [],
  gap: [],
  // --- Positions
  top: [],
  right: [],
  bottom: [],
  left: [],
  // --- Border
  border: [],
  borderTop: [],
  borderRight: [],
  borderBottom: [],
  borderLeft: [],
  borderColor: [],
  borderStyle: [],
  borderWidth: [],
  borderHorizontal: [],
  borderVertical: [],
  // --- Border radius
  borderRadius: [],
  radiusTopLeft: [],
  radiusTopRight: [],
  radiusBottomLeft: [],
  radiusBottomRight: [],
  // --- Padding
  padding: [],
  paddingHorizontal: [],
  paddingVertical: [],
  paddingTop: [],
  paddingRight: [],
  paddingBottom: [],
  paddingLeft: [],
  // --- Margin
  margin: [],
  marginHorizontal: [],
  marginVertical: [],
  marginTop: [],
  marginRight: [],
  marginBottom: [],
  marginLeft: [],
  // --- Other
  backgroundColor: [],
  background: [],
  boxShadow: [],
  direction: [],
  overflowX: [],
  overflowY: [],
  zIndex: [],
  opacity: [],
  // --- Typography
  color: [],
  fontFamily: [],
  fontSize: [],
  fontWeight: [],
  fontStyle: [booleanRegex],
  textDecoration: [],
  userSelect: [],
  letterSpacing: [],
  textTransform: [],
  lineHeight: [],
  textAlign: [],
  textWrap: [],
  textAlignLast: [],
  // --- Content rendering
  wrapContent: [],
  canShrink: [],
  // --- Other
  cursor: [],
  zoom: [],
  whiteSpace: [],
  textDecorationLine: [],
  textDecorationColor: [],
  textDecorationStyle: [],
  textDecorationThickness: [],
  textUnderlineOffset: [],
  // --- Outline
  outline: [],
  outlineWidth: [],
  outlineColor: [],
  outlineStyle: [],
  outlineOffset: []
};
const resolvedCssVars = {};
const FlowLayoutContext = createContext({
  rowGap: 0,
  columnGap: 0,
  setNumberOfChildren: noop$2
});
const FlowItemBreak = ({ force }) => /* @__PURE__ */ jsx("div", { className: classnames(styles$r.break, { [styles$r.forceBreak]: force }) });
forwardRef(function FlowItemWrapper2({ children, forceBreak: forceBreak2, ...restProps }, ref) {
  const { rowGap, columnGap, setNumberOfChildren } = useContext(FlowLayoutContext);
  useIsomorphicLayoutEffect(() => {
    setNumberOfChildren((prev) => prev + 1);
    return () => {
      setNumberOfChildren((prev) => prev - 1);
    };
  }, [setNumberOfChildren]);
  const { activeTheme, root: root2 } = useTheme();
  const _width = restProps.width || "100%";
  const _minWidth = restProps.minWidth || void 0;
  const _maxWidth = restProps.maxWidth || void 0;
  const {
    width = _width,
    minWidth,
    maxWidth,
    flex
  } = useMemo(() => {
    return (
      // --- New layout resolution
      resolveLayoutProps(
        { width: _width, maxWidth: _maxWidth, minWidth: _minWidth },
        {
          type: "Stack",
          orientation: "horizontal"
        }
      ).cssProps || {}
    );
  }, [_maxWidth, _minWidth, _width, activeTheme.themeVars]);
  const resolvedWidth = useMemo(() => {
    if (width && typeof width === "string" && width.startsWith("var(")) {
      if (!resolvedCssVars[width]) {
        const varName = width.substring(4, width.length - 1);
        const resolved = getComputedStyle(root2).getPropertyValue(varName);
        resolvedCssVars[width] = resolved || _width;
      }
      return resolvedCssVars[width];
    }
    return width || _width;
  }, [_width, root2, width]);
  const isWidthPercentage = typeof resolvedWidth === "string" && resolvedWidth.endsWith("%");
  const _columnGap = normalizeCssValueForCalc(columnGap);
  const isViewportPhone = useMediaQuery("(max-width: 420px)");
  const isViewportTablet = useMediaQuery("(max-width: 800px)");
  const outerWrapperStyle = {
    minWidth,
    maxWidth,
    width: isWidthPercentage ? `min(${width} * ${isViewportPhone ? "8" : isViewportTablet ? "4" : "1"}, 100%)` : `min(calc(${width} + ${_columnGap}), 100%)`,
    paddingBottom: rowGap,
    flex
  };
  const isStarSizing = flex !== void 0;
  if (isStarSizing) {
    outerWrapperStyle.width = "100%";
    outerWrapperStyle.minWidth = minWidth || "1px";
  }
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      "div",
      {
        style: { ...outerWrapperStyle, paddingRight: _columnGap },
        className: classnames(styles$r.flowItem, {
          [styles$r.starSized]: isStarSizing
        }),
        ref,
        children
      }
    ),
    isStarSizing && /* @__PURE__ */ jsx(FlowItemBreak, {})
  ] });
});
const defaultProps$7 = {
  columnGap: "$gap-normal",
  rowGap: "$gap-normal"
};
forwardRef(function FlowLayout2({ style, columnGap = 0, rowGap = 0, children }, forwardedRef) {
  const [numberOfChildren, setNumberOfChildren] = useState(0);
  const safeColumnGap = numberOfChildren === 1 ? 0 : columnGap;
  const _rowGap = getSizeString(rowGap);
  const _columnGap = getSizeString(safeColumnGap);
  const innerStyle = useMemo(
    () => ({
      // We put a negative margin on the container to fill the space for the row's last columnGap
      marginRight: `calc(-1 * ${_columnGap})`,
      marginBottom: `calc(-1 * ${_rowGap})`
    }),
    [_columnGap, _rowGap]
  );
  const flowLayoutContextValue = useMemo(() => {
    return {
      rowGap: _rowGap,
      columnGap: _columnGap,
      setNumberOfChildren
    };
  }, [_columnGap, _rowGap]);
  return /* @__PURE__ */ jsx(FlowLayoutContext.Provider, { value: flowLayoutContextValue, children: /* @__PURE__ */ jsx("div", { style, ref: forwardedRef, children: /* @__PURE__ */ jsx("div", { className: styles$r.outer, children: /* @__PURE__ */ jsx("div", { className: classnames(styles$r.flowContainer, styles$r.horizontal), style: innerStyle, children }) }) }) });
});
const COMP$O = "FlowLayout";
const FlowLayoutMd = createMetadata({
  description: "This layout component is used to position content in rows with an auto wrapping feature: if the length of the items exceed the available space the layout will wrap into a new line.",
  props: {
    gap: {
      description: `This property defines the gap between items in the same row and between rows. The ${COMP$O} component creates a new row when an item is about to overflow the current row.`,
      type: "string",
      defaultValue: "$gap-normal"
    },
    columnGap: {
      description: "The `columnGap` property specifies the space between items in a single row; it overrides the `gap` value.",
      defaultValue: defaultProps$7.columnGap
    },
    rowGap: {
      description: `The \`rowGap\` property specifies the space between the ${COMP$O} rows; it overrides the \`gap\` value.`,
      defaultValue: defaultProps$7.rowGap
    }
  },
  themeVars: parseScssVar(styles$r.themeVars)
});
const themeVars$o = `'{"padding-Footer": "var(--xmlui-padding-Footer)", "paddingHorizontal-Footer": "var(--xmlui-paddingHorizontal-Footer, var(--xmlui-padding-Footer))", "paddingVertical-Footer": "var(--xmlui-paddingVertical-Footer, var(--xmlui-padding-Footer))", "paddingLeft-Footer": "var(--xmlui-paddingLeft-Footer, var(--xmlui-paddingHorizontal-Footer, var(--xmlui-padding-Footer)))", "paddingRight-Footer": "var(--xmlui-paddingRight-Footer, var(--xmlui-paddingHorizontal-Footer, var(--xmlui-padding-Footer)))", "paddingTop-Footer": "var(--xmlui-paddingTop-Footer, var(--xmlui-paddingVertical-Footer, var(--xmlui-padding-Footer)))", "paddingBottom-Footer": "var(--xmlui-paddingBottom-Footer, var(--xmlui-paddingVertical-Footer, var(--xmlui-padding-Footer)))", "border-Footer": "var(--xmlui-border-Footer)", "borderHorizontal-Footer": "var(--xmlui-borderHorizontal-Footer, var(--xmlui-border-Footer))", "borderVertical-Footer": "var(--xmlui-borderVertical-Footer, var(--xmlui-border-Footer))", "borderLeft-Footer": "var(--xmlui-borderLeft-Footer, var(--xmlui-borderHorizontal-Footer, var(--xmlui-border-Footer)))", "borderRight-Footer": "var(--xmlui-borderRight-Footer, var(--xmlui-borderHorizontal-Footer, var(--xmlui-border-Footer)))", "borderTop-Footer": "var(--xmlui-borderTop-Footer, var(--xmlui-borderVertical-Footer, var(--xmlui-border-Footer)))", "borderBottom-Footer": "var(--xmlui-borderBottom-Footer, var(--xmlui-borderVertical-Footer, var(--xmlui-border-Footer)))", "borderWidth-Footer": "var(--xmlui-borderWidth-Footer)", "borderHorizontalWidth-Footer": "var(--xmlui-borderHorizontalWidth-Footer, var(--xmlui-borderWidth-Footer))", "borderLeftWidth-Footer": "var(--xmlui-borderLeftWidth-Footer, var(--xmlui-borderHorizontalWidth-Footer, var(--xmlui-borderWidth-Footer)))", "borderRightWidth-Footer": "var(--xmlui-borderRightWidth-Footer, var(--xmlui-borderHorizontalWidth-Footer, var(--xmlui-borderWidth-Footer)))", "borderVerticalWidth-Footer": "var(--xmlui-borderVerticalWidth-Footer, var(--xmlui-borderWidth-Footer))", "borderTopWidth-Footer": "var(--xmlui-borderTopWidth-Footer, var(--xmlui-borderVerticalWidth-Footer, var(--xmlui-borderWidth-Footer)))", "borderBottomWidth-Footer": "var(--xmlui-borderBottomWidth-Footer, var(--xmlui-borderVerticalWidth-Footer, var(--xmlui-borderWidth-Footer)))", "borderStyle-Footer": "var(--xmlui-borderStyle-Footer)", "borderHorizontalStyle-Footer": "var(--xmlui-borderHorizontalStyle-Footer, var(--xmlui-borderStyle-Footer))", "borderLeftStyle-Footer": "var(--xmlui-borderLeftStyle-Footer, var(--xmlui-borderHorizontalStyle-Footer, var(--xmlui-borderStyle-Footer)))", "borderRightStyle-Footer": "var(--xmlui-borderRightStyle-Footer, var(--xmlui-borderHorizontalStyle-Footer, var(--xmlui-borderStyle-Footer)))", "borderVerticalStyle-Footer": "var(--xmlui-borderVerticalStyle-Footer, var(--xmlui-borderStyle-Footer))", "borderTopStyle-Footer": "var(--xmlui-borderTopStyle-Footer, var(--xmlui-borderVerticalStyle-Footer, var(--xmlui-borderStyle-Footer)))", "borderBottomStyle-Footer": "var(--xmlui-borderBottomStyle-Footer, var(--xmlui-borderVerticalStyle-Footer, var(--xmlui-borderStyle-Footer)))", "borderColor-Footer": "var(--xmlui-borderColor-Footer)", "borderHorizontalColor-Footer": "var(--xmlui-borderHorizontalColor-Footer, var(--xmlui-borderColor-Footer))", "borderLeftColor-Footer": "var(--xmlui-borderLeftColor-Footer, var(--xmlui-borderHorizontalColor-Footer, var(--xmlui-borderColor-Footer)))", "borderRightColor-Footer": "var(--xmlui-borderRightColor-Footer, var(--xmlui-borderHorizontalColor-Footer, var(--xmlui-borderColor-Footer)))", "borderVerticalColor-Footer": "var(--xmlui-borderVerticalColor-Footer, var(--xmlui-borderColor-Footer))", "borderTopColor-Footer": "var(--xmlui-borderTopColor-Footer, var(--xmlui-borderVerticalColor-Footer, var(--xmlui-borderColor-Footer)))", "borderBottomColor-Footer": "var(--xmlui-borderBottomColor-Footer, var(--xmlui-borderVerticalColor-Footer, var(--xmlui-borderColor-Footer)))", "borderStartStartRadius-Footer": "var(--xmlui-borderStartStartRadius-Footer, var(--xmlui-borderRadius-Footer))", "borderStartEndRadius-Footer": "var(--xmlui-borderStartEndRadius-Footer, var(--xmlui-borderRadius-Footer))", "borderEndStartRadius-Footer": "var(--xmlui-borderEndStartRadius-Footer, var(--xmlui-borderRadius-Footer))", "borderEndEndRadius-Footer": "var(--xmlui-borderEndEndRadius-Footer, var(--xmlui-borderRadius-Footer))", "backgroundColor-Footer": "var(--xmlui-backgroundColor-Footer)", "textColor-Footer": "var(--xmlui-textColor-Footer)", "height-Footer": "var(--xmlui-height-Footer)", "fontSize-Footer": "var(--xmlui-fontSize-Footer)", "verticalAlign-Footer": "var(--xmlui-verticalAlign-Footer)", "maxWidth-content-Footer": "var(--xmlui-maxWidth-content-Footer)"}'`;
const styles$q = {
  themeVars: themeVars$o
};
const COMP$N = "Footer";
const FooterMd = createMetadata({
  description: `The \`${COMP$N}\` is a component that acts as a placeholder within \`App\`.`,
  themeVars: parseScssVar(styles$q.themeVars),
  defaultThemeVars: {
    [`backgroundColor-${COMP$N}`]: "$backgroundColor-AppHeader",
    [`verticalAlign-${COMP$N}`]: "center",
    [`fontSize-${COMP$N}`]: "$fontSize-small",
    [`textColor-${COMP$N}`]: "$textColor-secondary",
    [`maxWidth-content-${COMP$N}`]: "$maxWidth-content",
    [`borderTop-${COMP$N}`]: `1px solid $borderColor`,
    [`padding-${COMP$N}`]: "$space-2 $space-4",
    light: {
      // --- No light-specific theme vars
    },
    dark: {
      // --- No dark-specific theme vars
    }
  }
});
const themeVars$n = `'{"gap-Form": "var(--xmlui-gap-Form)", "gap-buttonRow-Form": "var(--xmlui-gap-buttonRow-Form)"}'`;
const wrapper$1 = "_wrapper_wscb6_13";
const buttonRow = "_buttonRow_wscb6_19";
const styles$p = {
  themeVars: themeVars$n,
  wrapper: wrapper$1,
  buttonRow
};
const UNBOUND_FIELD_SUFFIX = "__UNBOUND_FIELD__";
var FormActionKind = /* @__PURE__ */ ((FormActionKind2) => {
  FormActionKind2["FIELD_LOST_FOCUS"] = "FormActionKind:FIELD_LOST_FOCUS";
  FormActionKind2["FIELD_VALUE_CHANGED"] = "FormActionKind:FIELD_VALUE_CHANGED";
  FormActionKind2["FIELD_FOCUSED"] = "FormActionKind:FIELD_FOCUSED";
  FormActionKind2["FIELD_VALIDATED"] = "FormActionKind:FIELD_VALIDATED";
  FormActionKind2["FIELD_INITIALIZED"] = "FormActionKind:FIELD_INITIALIZED";
  FormActionKind2["FIELD_REMOVED"] = "FormActionKind:FIELD_REMOVED";
  FormActionKind2["TRIED_TO_SUBMIT"] = "FormActionKind:TRIED_TO_SUBMIT";
  FormActionKind2["BACKEND_VALIDATION_ARRIVED"] = "FormActionKind:BACKEND_VALIDATION_ARRIVED";
  FormActionKind2["SUBMITTING"] = "FormActionKind:SUBMITTING";
  FormActionKind2["SUBMITTED"] = "FormActionKind:SUBMITTED";
  FormActionKind2["RESET"] = "FormActionKind:RESET";
  return FormActionKind2;
})(FormActionKind || {});
function fieldInitialized(uid, value, force = false) {
  return {
    type: "FormActionKind:FIELD_INITIALIZED",
    payload: {
      uid,
      value,
      force
    }
  };
}
function fieldChanged(uid, value) {
  return {
    type: "FormActionKind:FIELD_VALUE_CHANGED",
    payload: {
      uid,
      value
    }
  };
}
function fieldFocused(uid) {
  return {
    type: "FormActionKind:FIELD_FOCUSED",
    payload: {
      uid
    }
  };
}
function fieldLostFocus(uid) {
  return {
    type: "FormActionKind:FIELD_LOST_FOCUS",
    payload: {
      uid
    }
  };
}
function fieldValidated(uid, validationResult) {
  return {
    type: "FormActionKind:FIELD_VALIDATED",
    payload: {
      uid,
      validationResult
    }
  };
}
function fieldRemoved(uid) {
  return {
    type: "FormActionKind:FIELD_REMOVED",
    payload: {
      uid
    }
  };
}
function triedToSubmit() {
  return {
    type: "FormActionKind:TRIED_TO_SUBMIT",
    payload: {}
  };
}
function formSubmitting() {
  return {
    type: "FormActionKind:SUBMITTING",
    payload: {}
  };
}
function formSubmitted() {
  return {
    type: "FormActionKind:SUBMITTED",
    payload: {}
  };
}
function formReset(originalSubject) {
  return {
    type: "FormActionKind:RESET",
    payload: {
      originalSubject
    }
  };
}
function backendValidationArrived({
  generalValidationResults = [],
  fieldValidationResults = {}
}) {
  return {
    type: "FormActionKind:BACKEND_VALIDATION_ARRIVED",
    payload: {
      generalValidationResults,
      fieldValidationResults
    }
  };
}
const themeVars$m = `'{"padding-ModalDialog": "var(--xmlui-padding-ModalDialog)", "paddingHorizontal-ModalDialog": "var(--xmlui-paddingHorizontal-ModalDialog, var(--xmlui-padding-ModalDialog))", "paddingVertical-ModalDialog": "var(--xmlui-paddingVertical-ModalDialog, var(--xmlui-padding-ModalDialog))", "paddingLeft-ModalDialog": "var(--xmlui-paddingLeft-ModalDialog, var(--xmlui-paddingHorizontal-ModalDialog, var(--xmlui-padding-ModalDialog)))", "paddingRight-ModalDialog": "var(--xmlui-paddingRight-ModalDialog, var(--xmlui-paddingHorizontal-ModalDialog, var(--xmlui-padding-ModalDialog)))", "paddingTop-ModalDialog": "var(--xmlui-paddingTop-ModalDialog, var(--xmlui-paddingVertical-ModalDialog, var(--xmlui-padding-ModalDialog)))", "paddingBottom-ModalDialog": "var(--xmlui-paddingBottom-ModalDialog, var(--xmlui-paddingVertical-ModalDialog, var(--xmlui-padding-ModalDialog)))", "padding-overlay-ModalDialog": "var(--xmlui-padding-overlay-ModalDialog)", "paddingHorizontal-overlay-ModalDialog": "var(--xmlui-paddingHorizontal-overlay-ModalDialog, var(--xmlui-padding-overlay-ModalDialog))", "paddingVertical-overlay-ModalDialog": "var(--xmlui-paddingVertical-overlay-ModalDialog, var(--xmlui-padding-overlay-ModalDialog))", "paddingLeft-overlay-ModalDialog": "var(--xmlui-paddingLeft-overlay-ModalDialog, var(--xmlui-paddingHorizontal-overlay-ModalDialog, var(--xmlui-padding-overlay-ModalDialog)))", "paddingRight-overlay-ModalDialog": "var(--xmlui-paddingRight-overlay-ModalDialog, var(--xmlui-paddingHorizontal-overlay-ModalDialog, var(--xmlui-padding-overlay-ModalDialog)))", "paddingTop-overlay-ModalDialog": "var(--xmlui-paddingTop-overlay-ModalDialog, var(--xmlui-paddingVertical-overlay-ModalDialog, var(--xmlui-padding-overlay-ModalDialog)))", "paddingBottom-overlay-ModalDialog": "var(--xmlui-paddingBottom-overlay-ModalDialog, var(--xmlui-paddingVertical-overlay-ModalDialog, var(--xmlui-padding-overlay-ModalDialog)))", "Dialog:backgroundColor-ModalDialog": "var(--xmlui-backgroundColor-ModalDialog)", "Dialog:backgroundColor-overlay-ModalDialog": "var(--xmlui-backgroundColor-overlay-ModalDialog)", "Dialog:borderRadius-ModalDialog": "var(--xmlui-borderRadius-ModalDialog)", "Dialog:fontFamily-ModalDialog": "var(--xmlui-fontFamily-ModalDialog)", "Dialog:textColor-ModalDialog": "var(--xmlui-textColor-ModalDialog)", "Dialog:minWidth-ModalDialog": "var(--xmlui-minWidth-ModalDialog)", "Dialog:maxWidth-ModalDialog": "var(--xmlui-maxWidth-ModalDialog)", "Dialog:marginBottom-title-ModalDialog": "var(--xmlui-marginBottom-title-ModalDialog)"}'`;
const overlay$1 = "_overlay_it5gt_13";
const fullScreen = "_fullScreen_it5gt_21";
const content = "_content_it5gt_27";
const overlayBg = "_overlayBg_it5gt_36";
const dialogTitle = "_dialogTitle_it5gt_70";
const innerContent = "_innerContent_it5gt_76";
const closeButton = "_closeButton_it5gt_102";
const styles$o = {
  themeVars: themeVars$m,
  overlay: overlay$1,
  fullScreen,
  content,
  overlayBg,
  dialogTitle,
  innerContent,
  closeButton
};
const ModalVisibilityContext = React__default.createContext(null);
const useModalFormClose = () => {
  const id = useId();
  const { registerForm, unRegisterForm, requestClose, amITheSingleForm } = useContext(ModalVisibilityContext) || {};
  useEffect(() => {
    if (registerForm) {
      registerForm(id);
      return () => {
        unRegisterForm == null ? void 0 : unRegisterForm(id);
      };
    }
  }, [id, registerForm, unRegisterForm]);
  return useCallback(() => {
    if (!requestClose) {
      return;
    }
    if (!amITheSingleForm(id)) {
      return;
    }
    return requestClose();
  }, [amITheSingleForm, id, requestClose]);
};
React__default.forwardRef(
  ({ isInitiallyOpen, onOpen, onClose, registerComponentApi, renderDialog }, ref) => {
    const modalContextStateValue = useModalLocalOpenState(isInitiallyOpen, onOpen, onClose);
    const { doOpen, doClose, isOpen, openParams } = modalContextStateValue;
    useEffect(() => {
      registerComponentApi == null ? void 0 : registerComponentApi({
        open: doOpen,
        close: doClose
      });
    }, [doClose, doOpen, registerComponentApi]);
    return isOpen ? /* @__PURE__ */ jsx(ModalStateContext.Provider, { value: modalContextStateValue, children: renderDialog({
      openParams,
      ref
    }) }) : null;
  }
);
const ModalStateContext = React__default.createContext(null);
function useModalLocalOpenState(isInitiallyOpen, onOpen, onClose) {
  const [isOpen, setIsOpen] = useState(isInitiallyOpen);
  const isClosing = useRef(false);
  const [openParams, setOpenParams] = useState(null);
  const doOpen = useEvent((...openParams2) => {
    setOpenParams(openParams2);
    onOpen == null ? void 0 : onOpen();
    setIsOpen(true);
  });
  const doClose = useEvent(async () => {
    if (!isClosing.current) {
      try {
        isClosing.current = true;
        const result = await (onClose == null ? void 0 : onClose());
        if (result === false) {
          return;
        }
      } finally {
        isClosing.current = false;
      }
    }
    setIsOpen(false);
  });
  return useMemo(() => {
    return {
      isOpen,
      doClose,
      doOpen,
      openParams
    };
  }, [doClose, doOpen, isOpen, openParams]);
}
function useModalOpenState(isInitiallyOpen = true, onOpen, onClose) {
  const modalStateContext = useContext(ModalStateContext);
  const modalLocalOpenState = useModalLocalOpenState(isInitiallyOpen, onOpen, onClose);
  return modalStateContext || modalLocalOpenState;
}
const ModalDialog = React__default.forwardRef(
  ({
    children,
    style,
    isInitiallyOpen,
    fullScreen: fullScreen2,
    title: title2,
    closeButtonVisible = true,
    onOpen,
    onClose
  }, ref) => {
    const { root: root2 } = useTheme();
    const modalRef = useRef(null);
    const composedRef = ref ? composeRefs(ref, modalRef) : modalRef;
    const { isOpen, doClose, doOpen } = useModalOpenState(isInitiallyOpen, onOpen, onClose);
    useEffect(() => {
      var _a;
      if (isOpen) {
        (_a = modalRef.current) == null ? void 0 : _a.focus();
      }
    }, [isOpen]);
    useEffect(() => {
      if (isOpen) {
        const timer = setTimeout(() => {
          document.body.style.pointerEvents = "";
        }, 0);
        return () => clearTimeout(timer);
      } else {
        document.body.style.pointerEvents = "auto";
      }
    }, [isOpen]);
    const registeredForms = useRef(/* @__PURE__ */ new Set());
    const modalVisibilityContextValue = useMemo(() => {
      return {
        registerForm: (id) => {
          registeredForms.current.add(id);
        },
        unRegisterForm: (id) => {
          registeredForms.current.delete(id);
        },
        amITheSingleForm: (id) => {
          return registeredForms.current.size === 1 && registeredForms.current.has(id);
        },
        requestClose: () => {
          return doClose();
        }
      };
    }, [doClose]);
    if (!root2) {
      return null;
    }
    return /* @__PURE__ */ jsx(SheetPrimitive.Root, { open: isOpen, onOpenChange: (open) => open ? doOpen() : doClose(), children: /* @__PURE__ */ jsxs(SheetPrimitive.Portal, { container: root2, children: [
      !fullScreen2 && /* @__PURE__ */ jsx("div", { className: styles$o.overlayBg }),
      /* @__PURE__ */ jsx(
        SheetPrimitive.Overlay,
        {
          className: classnames(styles$o.overlay, {
            [styles$o.fullScreen]: fullScreen2
          }),
          children: /* @__PURE__ */ jsxs(
            SheetPrimitive.Content,
            {
              className: classnames(styles$o.content),
              onPointerDownOutside: (event) => {
                if (event.target instanceof Element && event.target.closest("._debug-inspect-button") !== null) {
                  event.preventDefault();
                }
              },
              ref: composedRef,
              style: { ...style, gap: void 0 },
              children: [
                !!title2 && /* @__PURE__ */ jsx(SheetPrimitive.Title, { style: { marginTop: 0 }, children: /* @__PURE__ */ jsx("header", { id: "dialogTitle", className: styles$o.dialogTitle, children: title2 }) }),
                /* @__PURE__ */ jsx("div", { className: styles$o.innerContent, style: { gap: style == null ? void 0 : style.gap }, children: /* @__PURE__ */ jsx(ModalVisibilityContext.Provider, { value: modalVisibilityContextValue, children }) }),
                closeButtonVisible && /* @__PURE__ */ jsx(SheetPrimitive.Close, { asChild: true, children: /* @__PURE__ */ jsx(
                  Button,
                  {
                    variant: "ghost",
                    themeColor: "secondary",
                    className: styles$o.closeButton,
                    "aria-label": "Close",
                    icon: /* @__PURE__ */ jsx(Icon, { name: "close", size: "sm" }),
                    orientation: "vertical"
                  }
                ) })
              ]
            }
          )
        }
      )
    ] }) });
  }
);
ModalDialog.displayName = "ModalDialog";
const parents = /* @__PURE__ */ new Set();
const coords = /* @__PURE__ */ new WeakMap();
const siblings = /* @__PURE__ */ new WeakMap();
const animations = /* @__PURE__ */ new WeakMap();
const intersections = /* @__PURE__ */ new WeakMap();
const intervals = /* @__PURE__ */ new WeakMap();
const options = /* @__PURE__ */ new WeakMap();
const debounces = /* @__PURE__ */ new WeakMap();
const enabled = /* @__PURE__ */ new WeakSet();
let root$1;
const TGT = "__aa_tgt";
const DEL = "__aa_del";
const handleMutations = (mutations2) => {
  const elements = getElements(mutations2);
  if (elements) {
    elements.forEach((el) => animate(el));
  }
};
const handleResizes = (entries) => {
  entries.forEach((entry) => {
    if (entry.target === root$1)
      updateAllPos();
    if (coords.has(entry.target))
      updatePos(entry.target);
  });
};
function observePosition(el) {
  const oldObserver = intersections.get(el);
  oldObserver === null || oldObserver === void 0 ? void 0 : oldObserver.disconnect();
  let rect = coords.get(el);
  let invocations = 0;
  const buffer = 5;
  if (!rect) {
    rect = getCoords(el);
    coords.set(el, rect);
  }
  const { offsetWidth, offsetHeight } = root$1;
  const rootMargins = [
    rect.top - buffer,
    offsetWidth - (rect.left + buffer + rect.width),
    offsetHeight - (rect.top + buffer + rect.height),
    rect.left - buffer
  ];
  const rootMargin = rootMargins.map((px) => `${-1 * Math.floor(px)}px`).join(" ");
  const observer = new IntersectionObserver(() => {
    ++invocations > 1 && updatePos(el);
  }, {
    root: root$1,
    threshold: 1,
    rootMargin
  });
  observer.observe(el);
  intersections.set(el, observer);
}
function updatePos(el) {
  clearTimeout(debounces.get(el));
  const optionsOrPlugin = getOptions(el);
  const delay = typeof optionsOrPlugin === "function" ? 500 : optionsOrPlugin.duration;
  debounces.set(el, setTimeout(async () => {
    const currentAnimation = animations.get(el);
    try {
      await (currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.finished);
      coords.set(el, getCoords(el));
      observePosition(el);
    } catch {
    }
  }, delay));
}
function updateAllPos() {
  clearTimeout(debounces.get(root$1));
  debounces.set(root$1, setTimeout(() => {
    parents.forEach((parent) => forEach(parent, (el) => lowPriority(() => updatePos(el))));
  }, 100));
}
function poll(el) {
  setTimeout(() => {
    intervals.set(el, setInterval(() => lowPriority(updatePos.bind(null, el)), 2e3));
  }, Math.round(2e3 * Math.random()));
}
function lowPriority(callback) {
  if (typeof requestIdleCallback === "function") {
    requestIdleCallback(() => callback());
  } else {
    requestAnimationFrame(() => callback());
  }
}
let mutations;
let resize;
if (typeof window !== "undefined") {
  root$1 = document.documentElement;
  mutations = new MutationObserver(handleMutations);
  resize = new ResizeObserver(handleResizes);
  resize.observe(root$1);
}
function getElements(mutations2) {
  const observedNodes = mutations2.reduce((nodes, mutation) => {
    return [
      ...nodes,
      ...Array.from(mutation.addedNodes),
      ...Array.from(mutation.removedNodes)
    ];
  }, []);
  const onlyCommentNodesObserved = observedNodes.every((node) => node.nodeName === "#comment");
  if (onlyCommentNodesObserved)
    return false;
  return mutations2.reduce((elements, mutation) => {
    if (elements === false)
      return false;
    if (mutation.target instanceof Element) {
      target(mutation.target);
      if (!elements.has(mutation.target)) {
        elements.add(mutation.target);
        for (let i = 0; i < mutation.target.children.length; i++) {
          const child = mutation.target.children.item(i);
          if (!child)
            continue;
          if (DEL in child)
            return false;
          target(mutation.target, child);
          elements.add(child);
        }
      }
      if (mutation.removedNodes.length) {
        for (let i = 0; i < mutation.removedNodes.length; i++) {
          const child = mutation.removedNodes[i];
          if (DEL in child)
            return false;
          if (child instanceof Element) {
            elements.add(child);
            target(mutation.target, child);
            siblings.set(child, [
              mutation.previousSibling,
              mutation.nextSibling
            ]);
          }
        }
      }
    }
    return elements;
  }, /* @__PURE__ */ new Set());
}
function target(el, child) {
  if (!child && !(TGT in el))
    Object.defineProperty(el, TGT, { value: el });
  else if (child && !(TGT in child))
    Object.defineProperty(child, TGT, { value: el });
}
function animate(el) {
  var _a;
  const isMounted = el.isConnected;
  const preExisting = coords.has(el);
  if (isMounted && siblings.has(el))
    siblings.delete(el);
  if (animations.has(el)) {
    (_a = animations.get(el)) === null || _a === void 0 ? void 0 : _a.cancel();
  }
  if (preExisting && isMounted) {
    remain(el);
  } else if (preExisting && !isMounted) {
    remove(el);
  } else {
    add(el);
  }
}
function raw(str) {
  return Number(str.replace(/[^0-9.\-]/g, ""));
}
function getScrollOffset(el) {
  let p = el.parentElement;
  while (p) {
    if (p.scrollLeft || p.scrollTop) {
      return { x: p.scrollLeft, y: p.scrollTop };
    }
    p = p.parentElement;
  }
  return { x: 0, y: 0 };
}
function getCoords(el) {
  const rect = el.getBoundingClientRect();
  const { x, y } = getScrollOffset(el);
  return {
    top: rect.top + y,
    left: rect.left + x,
    width: rect.width,
    height: rect.height
  };
}
function getTransitionSizes(el, oldCoords, newCoords) {
  let widthFrom = oldCoords.width;
  let heightFrom = oldCoords.height;
  let widthTo = newCoords.width;
  let heightTo = newCoords.height;
  const styles2 = getComputedStyle(el);
  const sizing = styles2.getPropertyValue("box-sizing");
  if (sizing === "content-box") {
    const paddingY = raw(styles2.paddingTop) + raw(styles2.paddingBottom) + raw(styles2.borderTopWidth) + raw(styles2.borderBottomWidth);
    const paddingX = raw(styles2.paddingLeft) + raw(styles2.paddingRight) + raw(styles2.borderRightWidth) + raw(styles2.borderLeftWidth);
    widthFrom -= paddingX;
    widthTo -= paddingX;
    heightFrom -= paddingY;
    heightTo -= paddingY;
  }
  return [widthFrom, widthTo, heightFrom, heightTo].map(Math.round);
}
function getOptions(el) {
  return TGT in el && options.has(el[TGT]) ? options.get(el[TGT]) : { duration: 250, easing: "ease-in-out" };
}
function getTarget(el) {
  if (TGT in el)
    return el[TGT];
  return void 0;
}
function isEnabled(el) {
  const target2 = getTarget(el);
  return target2 ? enabled.has(target2) : false;
}
function forEach(parent, ...callbacks) {
  callbacks.forEach((callback) => callback(parent, options.has(parent)));
  for (let i = 0; i < parent.children.length; i++) {
    const child = parent.children.item(i);
    if (child) {
      callbacks.forEach((callback) => callback(child, options.has(child)));
    }
  }
}
function remain(el) {
  const oldCoords = coords.get(el);
  const newCoords = getCoords(el);
  if (!isEnabled(el))
    return coords.set(el, newCoords);
  let animation;
  if (!oldCoords)
    return;
  const pluginOrOptions = getOptions(el);
  if (typeof pluginOrOptions !== "function") {
    const deltaX = oldCoords.left - newCoords.left;
    const deltaY = oldCoords.top - newCoords.top;
    const [widthFrom, widthTo, heightFrom, heightTo] = getTransitionSizes(el, oldCoords, newCoords);
    const start2 = {
      transform: `translate(${deltaX}px, ${deltaY}px)`
    };
    const end2 = {
      transform: `translate(0, 0)`
    };
    if (widthFrom !== widthTo) {
      start2.width = `${widthFrom}px`;
      end2.width = `${widthTo}px`;
    }
    if (heightFrom !== heightTo) {
      start2.height = `${heightFrom}px`;
      end2.height = `${heightTo}px`;
    }
    animation = el.animate([start2, end2], {
      duration: pluginOrOptions.duration,
      easing: pluginOrOptions.easing
    });
  } else {
    animation = new Animation(pluginOrOptions(el, "remain", oldCoords, newCoords));
    animation.play();
  }
  animations.set(el, animation);
  coords.set(el, newCoords);
  animation.addEventListener("finish", updatePos.bind(null, el));
}
function add(el) {
  const newCoords = getCoords(el);
  coords.set(el, newCoords);
  const pluginOrOptions = getOptions(el);
  if (!isEnabled(el))
    return;
  let animation;
  if (typeof pluginOrOptions !== "function") {
    animation = el.animate([
      { transform: "scale(.98)", opacity: 0 },
      { transform: "scale(0.98)", opacity: 0, offset: 0.5 },
      { transform: "scale(1)", opacity: 1 }
    ], {
      duration: pluginOrOptions.duration * 1.5,
      easing: "ease-in"
    });
  } else {
    animation = new Animation(pluginOrOptions(el, "add", newCoords));
    animation.play();
  }
  animations.set(el, animation);
  animation.addEventListener("finish", updatePos.bind(null, el));
}
function remove(el) {
  var _a;
  if (!siblings.has(el) || !coords.has(el))
    return;
  const [prev, next] = siblings.get(el);
  Object.defineProperty(el, DEL, { value: true });
  if (next && next.parentNode && next.parentNode instanceof Element) {
    next.parentNode.insertBefore(el, next);
  } else if (prev && prev.parentNode) {
    prev.parentNode.appendChild(el);
  } else {
    (_a = getTarget(el)) === null || _a === void 0 ? void 0 : _a.appendChild(el);
  }
  function cleanUp() {
    var _a2;
    el.remove();
    coords.delete(el);
    siblings.delete(el);
    animations.delete(el);
    (_a2 = intersections.get(el)) === null || _a2 === void 0 ? void 0 : _a2.disconnect();
  }
  if (!isEnabled(el))
    return cleanUp();
  const [top2, left, width, height] = deletePosition(el);
  const optionsOrPlugin = getOptions(el);
  const oldCoords = coords.get(el);
  let animation;
  Object.assign(el.style, {
    position: "absolute",
    top: `${top2}px`,
    left: `${left}px`,
    width: `${width}px`,
    height: `${height}px`,
    margin: 0,
    pointerEvents: "none",
    transformOrigin: "center",
    zIndex: 100
  });
  if (typeof optionsOrPlugin !== "function") {
    animation = el.animate([
      {
        transform: "scale(1)",
        opacity: 1
      },
      {
        transform: "scale(.98)",
        opacity: 0
      }
    ], { duration: optionsOrPlugin.duration, easing: "ease-out" });
  } else {
    animation = new Animation(optionsOrPlugin(el, "remove", oldCoords));
    animation.play();
  }
  animations.set(el, animation);
  animation.addEventListener("finish", cleanUp);
}
function deletePosition(el) {
  const oldCoords = coords.get(el);
  const [width, , height] = getTransitionSizes(el, oldCoords, getCoords(el));
  let offsetParent = el.parentElement;
  while (offsetParent && (getComputedStyle(offsetParent).position === "static" || offsetParent instanceof HTMLBodyElement)) {
    offsetParent = offsetParent.parentElement;
  }
  if (!offsetParent)
    offsetParent = document.body;
  const parentStyles = getComputedStyle(offsetParent);
  const parentCoords = coords.get(offsetParent) || getCoords(offsetParent);
  const top2 = Math.round(oldCoords.top - parentCoords.top) - raw(parentStyles.borderTopWidth);
  const left = Math.round(oldCoords.left - parentCoords.left) - raw(parentStyles.borderLeftWidth);
  return [top2, left, width, height];
}
function autoAnimate(el, config = {}) {
  if (mutations && resize) {
    const mediaQuery = window.matchMedia("(prefers-reduced-motion: reduce)");
    const isDisabledDueToReduceMotion = mediaQuery.matches && typeof config !== "function" && !config.disrespectUserMotionPreference;
    if (!isDisabledDueToReduceMotion) {
      enabled.add(el);
      if (getComputedStyle(el).position === "static") {
        Object.assign(el.style, { position: "relative" });
      }
      forEach(el, updatePos, poll, (element) => resize === null || resize === void 0 ? void 0 : resize.observe(element));
      if (typeof config === "function") {
        options.set(el, config);
      } else {
        options.set(el, { duration: 250, easing: "ease-in-out", ...config });
      }
      mutations.observe(el, { childList: true });
      parents.add(el);
    }
  }
  return Object.freeze({
    parent: el,
    enable: () => {
      enabled.add(el);
    },
    disable: () => {
      enabled.delete(el);
    },
    isEnabled: () => enabled.has(el)
  });
}
function useAutoAnimate(options2) {
  const [controller, setController] = useState();
  const element = useCallback((node) => {
    if (node instanceof HTMLElement) {
      setController(autoAnimate(node, options2));
    } else {
      setController(void 0);
    }
  }, []);
  const setEnabled = (enabled2) => {
    if (controller) {
      enabled2 ? controller.enable() : controller.disable();
    }
  };
  return [element, setEnabled];
}
const summaryContainer = "_summaryContainer_1sc6r_13";
const validationContainer = "_validationContainer_1sc6r_22";
const error$8 = "_error_1sc6r_52";
const heading = "_heading_1sc6r_58";
const warning$8 = "_warning_1sc6r_62";
const info = "_info_1sc6r_72";
const valid$8 = "_valid_1sc6r_22";
const styles$n = {
  summaryContainer,
  validationContainer,
  error: error$8,
  heading,
  warning: warning$8,
  info,
  valid: valid$8
};
const themeVars$l = '"[]"';
const spacer = "_spacer_1414d_13";
const styles$m = {
  themeVars: themeVars$l,
  spacer
};
const SpaceFiller = () => /* @__PURE__ */ jsx("div", { className: styles$m.spacer });
function ValidationSummary({
  fieldValidationResults = EMPTY_OBJECT,
  generalValidationResults = EMPTY_ARRAY
}) {
  const [animateContainerRef] = useAutoAnimate({ duration: 100 });
  const groupedInvalidResults = useMemo(() => {
    const ret = {};
    Object.entries(fieldValidationResults).forEach(([field, validationResult]) => {
      validationResult.validations.forEach((singleValidationResult) => {
        if (!singleValidationResult.isValid) {
          ret[singleValidationResult.severity] = ret[singleValidationResult.severity] || [];
          ret[singleValidationResult.severity].push({
            field,
            message: singleValidationResult.invalidMessage || ""
          });
        }
      });
    });
    generalValidationResults.forEach((singleValidationResult) => {
      ret[singleValidationResult.severity] = ret[singleValidationResult.severity] || [];
      ret[singleValidationResult.severity].push({
        message: singleValidationResult.invalidMessage || ""
      });
    });
    return ret;
  }, [fieldValidationResults, generalValidationResults]);
  return /* @__PURE__ */ jsxs(
    "div",
    {
      ref: animateContainerRef,
      className: styles$n.summaryContainer,
      "data-validation-summary": true,
      children: [
        /* @__PURE__ */ jsx(
          ValidationDisplay,
          {
            issues: groupedInvalidResults.warning,
            severity: "warning",
            heading: "Validation warnings"
          }
        ),
        /* @__PURE__ */ jsx(
          ValidationDisplay,
          {
            issues: groupedInvalidResults.error,
            severity: "error",
            heading: "Validation errors"
          }
        )
      ]
    }
  );
}
const ValidationDisplay = ({
  heading: heading2,
  issues = EMPTY_ARRAY,
  severity = "error",
  onClose
}) => {
  const [animateContainerRef] = useAutoAnimate({ duration: 100 });
  if (issues.length === 0) {
    return null;
  }
  return /* @__PURE__ */ jsxs(
    "div",
    {
      className: classnames(styles$n.validationContainer, {
        [styles$n.valid]: severity === "valid",
        [styles$n.info]: severity === "info",
        [styles$n.warning]: severity === "warning",
        [styles$n.error]: severity === "error"
      }),
      style: { paddingTop: !onClose ? "0.5rem" : void 0 },
      "data-validation-display-severity": severity,
      children: [
        /* @__PURE__ */ jsxs(Stack, { orientation: "horizontal", verticalAlignment: "center", style: { gap: "0.5rem" }, children: [
          /* @__PURE__ */ jsx(Icon, { className: styles$n.heading, name: severity, size: "md" }),
          /* @__PURE__ */ jsx("div", { className: styles$n.heading, children: /* @__PURE__ */ jsx(Text, { children: heading2 }) }),
          !!onClose && /* @__PURE__ */ jsxs(Fragment, { children: [
            /* @__PURE__ */ jsx(SpaceFiller, {}),
            /* @__PURE__ */ jsx(
              Button,
              {
                onClick: onClose,
                variant: "ghost",
                themeColor: "secondary",
                icon: /* @__PURE__ */ jsx(Icon, { name: "close", size: "sm" }),
                orientation: "vertical"
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsx("ul", { ref: animateContainerRef, children: issues.map((issue, i) => /* @__PURE__ */ jsx(ValidationEntry, { issue }, i)) })
      ]
    }
  );
};
const ValidationEntry = ({ issue }) => {
  const { field, message } = issue;
  return /* @__PURE__ */ jsx("li", { children: /* @__PURE__ */ jsxs("span", { style: { display: "inline-flex", gap: field ? "0.25rem" : void 0 }, children: [
    field && /* @__PURE__ */ jsx(Text, { variant: "small", fontWeight: "bold", children: `${field}:` }),
    /* @__PURE__ */ jsx(Text, { variant: "small", preserveLinebreaks: true, children: message })
  ] }) });
};
const validationSeverityValues = ["error", "warning", "valid", "none"];
const defaultValidationMode = "errorLate";
const validationModeMd = [
  {
    value: "errorLate",
    description: "Display the error when the field loses focus.If an error is already displayed, continue for every keystroke until input is accepted."
  },
  {
    value: "onChanged",
    description: "Display error (if present) for every keystroke."
  },
  {
    value: "onLostFocus",
    description: "Show/hide error (if present) only if the field loses focus."
  }
];
const FormContext = createContext$1(void 0);
function useFormContextPart(selector) {
  return useContextSelector(FormContext, selector);
}
const formControlTypesMd = [
  {
    value: "text",
    description: "Renders TextBox"
  },
  {
    value: "password",
    description: "Renders TextBox with `password` type"
  },
  {
    value: "textarea",
    description: "Renders Textarea"
  },
  {
    value: "checkbox",
    description: "Renders Checkbox"
  },
  {
    value: "number",
    description: "Renders NumberBox"
  },
  {
    value: "integer",
    description: "Renders NumberBox with `integersOnly` set to true"
  },
  {
    value: "file",
    description: "Renders FileInput"
  },
  {
    value: "datePicker",
    description: "Renders DatePicker"
  },
  {
    value: "radioGroup",
    description: "Renders RadioGroup"
  },
  {
    value: "switch",
    description: "Renders Switch"
  },
  {
    value: "select",
    description: "Renders Select"
  },
  {
    value: "autocomplete",
    description: "Renders AutoComplete"
  },
  {
    value: "slider",
    description: "Renders Slider"
  },
  {
    value: "colorpicker",
    description: "Renders ColorPicker"
  },
  {
    value: "items",
    description: "Renders Items"
  },
  {
    value: "custom",
    description: "Custom control specified in children"
  }
];
function isInputEmpty(value) {
  if (value === void 0 || value === null || value === "") return true;
  if (typeof value === "string") return value.trim().length === 0;
  return isEmpty(value);
}
function isMinLengthValid(value = "", boundary) {
  if (typeof value === "string") {
    return value.length >= boundary;
  }
  console.warn("minLength can only be used on strings");
  return true;
}
function isMaxLengthValid(value = "", boundary) {
  if (typeof value === "string") {
    return value.length <= boundary;
  }
  console.warn("maxLength can only be used on strings");
  return true;
}
function isMinValueValid(value = "", minValue) {
  if (typeof value !== "string" && !isNumber(value)) {
    console.warn("Range can only be used on strings and numbers");
  }
  return Number(value) >= minValue;
}
function isMaxValueValid(value = "", maxValue) {
  if (typeof value !== "string" && !isNumber(value)) {
    console.warn("Range can only be used on strings and numbers");
  }
  return Number(value) <= maxValue;
}
function isRegexValid(value = "", regex) {
  if (typeof value === "string") {
    const _value = stringToRegex(regex).test(value);
    return _value;
  }
  console.warn("Regex can only be used on strings");
  return true;
  function stringToRegex(s) {
    const m = s.match(/^([/~@;%#'])(.*?)\1([gimsuy]*)$/);
    return m ? new RegExp(m[2], m[3]) : new RegExp(s);
  }
}
class FormItemValidator {
  constructor(validations, onValidate, value) {
    this.validations = validations;
    this.onValidate = onValidate;
    this.value = value;
    this.preValidate = () => {
      const requiredResult = this.validateRequired();
      let validationResults = [requiredResult];
      if (!requiredResult || requiredResult.isValid) {
        validationResults.push(
          this.validateLength(),
          this.validateRange(),
          this.validatePattern(),
          this.validateRegex()
        );
      }
      validationResults = validationResults.filter((result) => result !== void 0);
      return {
        isValid: validationResults.find((result) => !result.isValid) === void 0,
        validatedValue: this.value,
        partial: this.onValidate !== void 0,
        validations: validationResults
      };
    };
    this.validate = async () => {
      const preValidateResult = this.preValidate();
      const constValidationResult = await this.validateCustom() || [];
      preValidateResult.validations.push(...constValidationResult.map((res) => ({ ...res, async: true })));
      return {
        isValid: preValidateResult.validations.find((result) => !result.isValid) === void 0,
        validatedValue: this.value,
        partial: false,
        validations: preValidateResult.validations
      };
    };
  }
  validateRequired() {
    const { required: required2, requiredInvalidMessage } = this.validations;
    if (!required2) {
      return void 0;
    }
    return {
      isValid: !isInputEmpty(this.value),
      invalidMessage: requiredInvalidMessage || "This field is required",
      severity: "error"
    };
  }
  validateLength() {
    const { minLength, maxLength, lengthInvalidMessage, lengthInvalidSeverity = "error" } = this.validations;
    if (minLength === void 0 && maxLength === void 0) {
      return void 0;
    }
    if (minLength !== void 0 && maxLength === void 0) {
      return {
        isValid: isMinLengthValid(this.value, minLength),
        invalidMessage: lengthInvalidMessage || `Input should be at least ${minLength} ${pluralize(minLength, "character")}`,
        severity: lengthInvalidSeverity
      };
    }
    if (minLength === void 0 && maxLength !== void 0) {
      return {
        isValid: isMaxLengthValid(this.value, maxLength),
        invalidMessage: lengthInvalidMessage || `Input should be up to ${maxLength} ${pluralize(maxLength, "character")}`,
        severity: lengthInvalidSeverity
      };
    }
    return {
      isValid: isMinLengthValid(this.value, minLength) && isMaxLengthValid(this.value, maxLength),
      invalidMessage: lengthInvalidMessage || `Input length should be between ${minLength} and ${maxLength}`,
      severity: lengthInvalidSeverity
    };
  }
  validateRange() {
    const { minValue, maxValue, rangeInvalidMessage, rangeInvalidSeverity = "error" } = this.validations;
    if (minValue === void 0 && maxValue === void 0) {
      return void 0;
    }
    if (minValue !== void 0 && maxValue === void 0) {
      return {
        isValid: isMinValueValid(this.value, minValue),
        invalidMessage: rangeInvalidMessage || `Input should be bigger than ${minValue}`,
        severity: rangeInvalidSeverity
      };
    }
    if (minValue === void 0 && maxValue !== void 0) {
      return {
        isValid: isMaxValueValid(this.value, maxValue),
        invalidMessage: rangeInvalidMessage || `Input should be smaller than ${maxValue}`,
        severity: rangeInvalidSeverity
      };
    }
    return {
      isValid: isMinValueValid(this.value, minValue) && isMaxValueValid(this.value, maxValue),
      invalidMessage: rangeInvalidMessage || `Input should be between ${minValue} and ${maxValue}`,
      severity: rangeInvalidSeverity
    };
  }
  validatePattern() {
    const { pattern, patternInvalidMessage, patternInvalidSeverity = "error" } = this.validations;
    if (!pattern) {
      return void 0;
    }
    switch (pattern.toLowerCase()) {
      case "email":
        return {
          isValid: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/.test(this.value),
          invalidMessage: patternInvalidMessage || "Not a valid email address",
          severity: patternInvalidSeverity
        };
      case "phone":
        return {
          isValid: /^[a-zA-Z0-9#*)(+.\-_&']+$/g.test(this.value),
          invalidMessage: patternInvalidMessage || "Not a valid phone number",
          severity: patternInvalidSeverity
        };
      case "url":
        let url;
        try {
          url = new URL(this.value);
        } catch (e) {
        }
        if (!url || url.protocol && !["http:", "https:"].includes(url.protocol)) {
          return {
            isValid: false,
            invalidMessage: "Not a valid URL",
            severity: patternInvalidSeverity
          };
        }
        return {
          isValid: true,
          severity: "valid"
        };
      default: {
        console.warn("Unknown pattern provided");
        return {
          isValid: true,
          severity: "valid"
        };
      }
    }
  }
  validateRegex() {
    const { regex, regexInvalidMessage, regexInvalidSeverity = "error" } = this.validations;
    if (regex === void 0) {
      return void 0;
    }
    return {
      isValid: isRegexValid(this.value, regex),
      invalidMessage: regexInvalidMessage || "Input is not in the correct format",
      severity: regexInvalidSeverity
    };
  }
  async validateCustom() {
    if (!this.onValidate) {
      return void 0;
    }
    const validationFnResult = await this.onValidate(this.value);
    if (typeof validationFnResult === "boolean") {
      return [
        {
          isValid: validationFnResult,
          invalidMessage: "Invalid input",
          severity: "error"
        }
      ];
    }
    if (!isArray(validationFnResult)) {
      return [validationFnResult];
    }
    return validationFnResult;
  }
}
async function asyncValidate(validations, onValidate, deferredValue) {
  const validator = new FormItemValidator(validations, onValidate, deferredValue);
  return await validator.validate();
}
function useValidation(validations, onValidate, value, dispatch, bindTo, throttleWaitInMs = 0) {
  const deferredValue = useDeferredValue(value);
  const throttledAsyncValidate = useMemo(() => {
    if (throttleWaitInMs !== 0) {
      return asyncThrottle(asyncValidate, throttleWaitInMs, {
        trailing: true,
        leading: true
      });
    }
    return asyncValidate;
  }, [throttleWaitInMs]);
  useEffect(
    function runAllValidations() {
      const validator = new FormItemValidator(validations, onValidate, deferredValue);
      let ignore = false;
      const partialResult = validator.preValidate();
      if (!ignore) {
        dispatch(fieldValidated(bindTo, partialResult));
        if (partialResult.partial) {
          (async () => {
            const result = await throttledAsyncValidate(validations, onValidate, deferredValue);
            if (!ignore) {
              dispatch(fieldValidated(bindTo, result));
            }
          })();
        }
      }
      return () => {
        ignore = true;
      };
    },
    [bindTo, deferredValue, dispatch, onValidate, throttledAsyncValidate, validations]
  );
}
function useValidationDisplay(bindTo, value, validationResult, validationMode = defaultValidationMode) {
  const interactionFlags = useFormContextPart((value2) => value2.interactionFlags[bindTo]) || EMPTY_OBJECT;
  const forceShowValidationResult = interactionFlags.forceShowValidationResult;
  const focused2 = interactionFlags.focused;
  const isValidLostFocus = interactionFlags.isValidLostFocus;
  const isValidOnFocus = interactionFlags.isValidOnFocus;
  const invalidToValid = interactionFlags.invalidToValid;
  const validationInProgress = !validationResult || validationResult.validatedValue !== value;
  const isDirty = interactionFlags.isDirty;
  const isValid2 = (validationResult == null ? void 0 : validationResult.isValid) === true;
  let highestValidationSeverity = "none";
  for (const val of (validationResult == null ? void 0 : validationResult.validations) || []) {
    if (val.isValid) {
      continue;
    }
    if (highestValidationSeverity !== "error" && val.severity === "warning") {
      highestValidationSeverity = "warning";
    }
    if (val.severity === "error") {
      highestValidationSeverity = "error";
      break;
    }
  }
  let isHelperTextShown = false;
  switch (validationMode) {
    case "errorLate":
      isHelperTextShown = isDirty && (focused2 ? !invalidToValid && !isValidOnFocus : !isValidLostFocus);
      break;
    case "onChanged":
      isHelperTextShown = isDirty;
      break;
    case "onLostFocus":
      isHelperTextShown = isDirty && (!focused2 && !isValid2 || !isValidLostFocus && !isValid2);
  }
  isHelperTextShown = isHelperTextShown || forceShowValidationResult;
  const [prevStableShown, setPrevStableShown] = useState(isHelperTextShown);
  if (prevStableShown !== isHelperTextShown && !validationInProgress) {
    setPrevStableShown(isHelperTextShown);
  }
  if (validationInProgress) {
    isHelperTextShown = prevStableShown;
  }
  return {
    isHelperTextShown,
    validationStatus: isHelperTextShown ? highestValidationSeverity : "none"
  };
}
function groupInvalidValidationResultsBySeverity(validationResults) {
  const ret = {
    error: [],
    warning: [],
    valid: [],
    none: []
  };
  Object.entries(validationResults).forEach(([field, validationResult]) => {
    validationResult.validations.forEach((singleValidationResult) => {
      if (!singleValidationResult.isValid) {
        ret[singleValidationResult.severity] = ret[singleValidationResult.severity] || [];
        ret[singleValidationResult.severity].push(singleValidationResult);
      }
    });
  });
  return ret;
}
function pluralize(count, word) {
  return count === 1 ? word : word + "s";
}
const getByPath = (obj, path) => {
  return get(obj, path);
};
produce((state, action) => {
  var _a, _b, _c, _d;
  const { uid } = action.payload;
  if (uid !== void 0 && !state.interactionFlags[uid]) {
    state.interactionFlags[uid] = {
      isDirty: false,
      invalidToValid: false,
      isValidOnFocus: false,
      isValidLostFocus: false,
      focused: false,
      forceShowValidationResult: false
    };
  }
  switch (action.type) {
    case FormActionKind.FIELD_INITIALIZED: {
      if (!state.interactionFlags[uid].isDirty || action.payload.force) {
        set(state.subject, uid, action.payload.value);
      }
      break;
    }
    case FormActionKind.FIELD_REMOVED: {
      delete state.validationResults[uid];
      delete state.interactionFlags[uid];
      break;
    }
    case FormActionKind.FIELD_VALUE_CHANGED: {
      set(state.subject, uid, action.payload.value);
      state.interactionFlags[uid].isDirty = true;
      state.interactionFlags[uid].forceShowValidationResult = false;
      break;
    }
    case FormActionKind.FIELD_VALIDATED: {
      if (action.payload.validationResult.validations.length === 0) {
        delete state.validationResults[uid];
        break;
      }
      const prevValid = (_a = state.validationResults[uid]) == null ? void 0 : _a.isValid;
      if (action.payload.validationResult.partial) {
        const mergedValidations = [
          ...action.payload.validationResult.validations,
          ...(((_b = state.validationResults[uid]) == null ? void 0 : _b.validations.filter((val) => val.async)) || []).map(
            (val) => ({
              ...val,
              stale: true
            })
          )
        ];
        state.validationResults[uid] = {
          ...action.payload.validationResult,
          isValid: mergedValidations.find((val) => !val.isValid) === void 0,
          validations: mergedValidations
        };
      } else {
        state.validationResults[uid] = action.payload.validationResult;
      }
      state.interactionFlags[uid].invalidToValid = !prevValid && state.validationResults[uid].isValid;
      break;
    }
    case FormActionKind.FIELD_FOCUSED: {
      state.interactionFlags[uid].isValidOnFocus = !!((_c = state.validationResults[uid]) == null ? void 0 : _c.isValid);
      state.interactionFlags[uid].focused = true;
      break;
    }
    case FormActionKind.FIELD_LOST_FOCUS: {
      state.interactionFlags[uid].isValidLostFocus = !!((_d = state.validationResults[uid]) == null ? void 0 : _d.isValid);
      state.interactionFlags[uid].focused = false;
      break;
    }
    case FormActionKind.TRIED_TO_SUBMIT: {
      Object.keys(state.interactionFlags).forEach((key) => {
        state.interactionFlags[key].forceShowValidationResult = true;
      });
      break;
    }
    case FormActionKind.SUBMITTING: {
      state.submitInProgress = true;
      break;
    }
    case FormActionKind.SUBMITTED: {
      state.submitInProgress = false;
      state.generalValidationResults = [];
      state.interactionFlags = {};
      Object.keys(state.validationResults).forEach((key) => {
        var _a2;
        state.validationResults[key].validations = (_a2 = state.validationResults[key].validations) == null ? void 0 : _a2.filter(
          (validation) => !validation.fromBackend
        );
        state.validationResults[key].isValid = state.validationResults[key].validations.find((val) => !val.isValid) === void 0;
      });
      break;
    }
    case FormActionKind.BACKEND_VALIDATION_ARRIVED: {
      state.submitInProgress = false;
      state.generalValidationResults = action.payload.generalValidationResults;
      Object.keys(state.validationResults).forEach((key) => {
        var _a2;
        state.validationResults[key].validations = (_a2 = state.validationResults[key].validations) == null ? void 0 : _a2.filter(
          (validation) => !validation.fromBackend
        );
      });
      Object.entries(action.payload.fieldValidationResults).forEach(
        ([field, singleValidationResults]) => {
          var _a2;
          if (!state.validationResults[field]) {
            state.validationResults[field] = {
              isValid: false,
              validations: [],
              partial: false,
              validatedValue: state.subject[field]
            };
          }
          state.validationResults[field].validations = [
            ...((_a2 = state.validationResults[field]) == null ? void 0 : _a2.validations) || [],
            ...singleValidationResults || []
          ];
          state.validationResults[field].isValid = state.validationResults[field].validations.find((val) => !val.isValid) === void 0;
        }
      );
      break;
    }
    case FormActionKind.RESET: {
      const { originalSubject } = action.payload;
      return {
        ...initialState,
        subject: originalSubject,
        resetVersion: (state.resetVersion ?? 0) + 1
      };
    }
  }
});
const initialState = {
  subject: {},
  validationResults: {},
  generalValidationResults: [],
  interactionFlags: {},
  submitInProgress: false,
  resetVersion: 0
};
const defaultProps$6 = {
  cancelLabel: "Cancel",
  saveLabel: "Save",
  saveInProgressLabel: "Saving...",
  itemLabelPosition: "top",
  itemLabelBreak: true,
  keepModalOpenOnSubmit: false
};
function cleanUpSubject(subject) {
  return Object.entries(subject || {}).reduce(
    (acc, [key, value]) => {
      if (!key.endsWith(UNBOUND_FIELD_SUFFIX)) {
        acc[key] = value;
      }
      return acc;
    },
    {}
  );
}
const Form = forwardRef(function({
  formState,
  dispatch,
  initialValue = EMPTY_OBJECT,
  children,
  style,
  enabled: enabled2 = true,
  cancelLabel = "Cancel",
  saveLabel = "Save",
  saveInProgressLabel = "Saving...",
  swapCancelAndSave,
  onSubmit,
  onCancel,
  onReset,
  buttonRow: buttonRow2,
  id,
  registerComponentApi,
  itemLabelBreak = true,
  itemLabelWidth,
  itemLabelPosition = "top",
  keepModalOpenOnSubmit = false
}, ref) {
  const formRef = useRef(null);
  useImperativeHandle(ref, () => formRef.current);
  const [confirmSubmitModalVisible, setConfirmSubmitModalVisible] = useState(false);
  const requestModalFormClose = useModalFormClose();
  const isEnabled2 = enabled2 && !formState.submitInProgress;
  const formContextValue = useMemo(() => {
    return {
      itemLabelBreak,
      itemLabelWidth,
      itemLabelPosition,
      subject: formState.subject,
      originalSubject: initialValue,
      validationResults: formState.validationResults,
      interactionFlags: formState.interactionFlags,
      dispatch,
      enabled: isEnabled2
    };
  }, [
    dispatch,
    formState.interactionFlags,
    formState.subject,
    formState.validationResults,
    initialValue,
    isEnabled2,
    itemLabelBreak,
    itemLabelPosition,
    itemLabelWidth
  ]);
  const doCancel = useEvent(() => {
    onCancel == null ? void 0 : onCancel();
    requestModalFormClose();
  });
  const doSubmit = useEvent(async (event) => {
    var _a;
    event == null ? void 0 : event.preventDefault();
    if (!isEnabled2) {
      return;
    }
    setConfirmSubmitModalVisible(false);
    dispatch(triedToSubmit());
    const { error: error2, warning: warning2 } = groupInvalidValidationResultsBySeverity(
      Object.values(formState.validationResults)
    );
    if (error2.length) {
      return;
    }
    if (warning2.length && !confirmSubmitModalVisible) {
      setConfirmSubmitModalVisible(true);
      return;
    }
    const prevFocused = document.activeElement;
    dispatch(formSubmitting());
    try {
      const filteredSubject = cleanUpSubject(formState.subject);
      await (onSubmit == null ? void 0 : onSubmit(filteredSubject, {
        passAsDefaultBody: true
      }));
      dispatch(formSubmitted());
      if (!keepModalOpenOnSubmit) {
        requestModalFormClose();
      }
      if (initialValue === EMPTY_OBJECT) {
        flushSync(() => {
          doReset();
        });
      }
      if (prevFocused && typeof prevFocused.focus === "function") {
        prevFocused.focus();
      }
    } catch (e) {
      const generalValidationResults = [];
      const fieldValidationResults = {};
      if (e instanceof Error && "errorCategory" in e && e.errorCategory === "GenericBackendError" && ((_a = e.details) == null ? void 0 : _a.issues) && Array.isArray(e.details.issues)) {
        e.details.issues.forEach((issue) => {
          const validationResult = {
            isValid: false,
            invalidMessage: issue.message,
            severity: issue.severity || "error",
            fromBackend: true
          };
          if (issue.field !== void 0) {
            fieldValidationResults[issue.field] = fieldValidationResults[issue.field] || [];
            fieldValidationResults[issue.field].push(validationResult);
          } else {
            generalValidationResults.push(validationResult);
          }
        });
      } else {
        generalValidationResults.push({
          isValid: false,
          invalidMessage: e.message || "Couldn't save the form.",
          severity: "error",
          fromBackend: true
        });
      }
      dispatch(
        backendValidationArrived({
          generalValidationResults,
          fieldValidationResults
        })
      );
    }
  });
  const doReset = useEvent(() => {
    dispatch(formReset(initialValue));
    onReset == null ? void 0 : onReset();
  });
  const updateData = useEvent((change) => {
    if (typeof change !== "object" || change === null || change === void 0) {
      return;
    }
    Object.entries(change).forEach(([key, value]) => {
      dispatch({
        type: FormActionKind.FIELD_VALUE_CHANGED,
        payload: {
          uid: key,
          value
        }
      });
    });
  });
  const cancelButton = cancelLabel === "" ? null : /* @__PURE__ */ jsx(
    Button,
    {
      type: "button",
      themeColor: "secondary",
      variant: "ghost",
      onClick: doCancel,
      children: cancelLabel
    },
    "cancel"
  );
  const submitButton = useMemo(
    () => /* @__PURE__ */ jsx(Button, { type: "submit", disabled: !isEnabled2, children: formState.submitInProgress ? saveInProgressLabel : saveLabel }, "submit"),
    [isEnabled2, formState.submitInProgress, saveInProgressLabel, saveLabel]
  );
  useEffect(() => {
    registerComponentApi == null ? void 0 : registerComponentApi({
      reset: doReset,
      update: updateData
    });
  }, [doReset, updateData, registerComponentApi]);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsxs(
      "form",
      {
        style,
        className: styles$p.wrapper,
        onSubmit: doSubmit,
        onReset: doReset,
        id,
        ref: formRef,
        children: [
          /* @__PURE__ */ jsx(ValidationSummary, { generalValidationResults: formState.generalValidationResults }),
          /* @__PURE__ */ jsx(FormContext.Provider, { value: formContextValue, children }),
          buttonRow2 || /* @__PURE__ */ jsxs("div", { className: styles$p.buttonRow, children: [
            swapCancelAndSave && [submitButton, cancelButton],
            !swapCancelAndSave && [cancelButton, submitButton]
          ] })
        ]
      },
      formState.resetVersion
    ),
    confirmSubmitModalVisible && /* @__PURE__ */ jsx(
      ModalDialog,
      {
        onClose: () => setConfirmSubmitModalVisible(false),
        isInitiallyOpen: true,
        title: "Are you sure want to move forward?",
        children: /* @__PURE__ */ jsxs(Stack, { orientation: "vertical", style: { gap: "0.5rem" }, children: [
          /* @__PURE__ */ jsx(Text, { children: "The following warnings were found during validation. Please make sure you are willing to move forward despite these issues." }),
          /* @__PURE__ */ jsx(
            ValidationSummary,
            {
              generalValidationResults: formState.generalValidationResults,
              fieldValidationResults: formState.validationResults
            }
          ),
          /* @__PURE__ */ jsxs(Stack, { orientation: "horizontal", horizontalAlignment: "end", style: { gap: "1em" }, children: [
            /* @__PURE__ */ jsx(
              Button,
              {
                variant: "ghost",
                themeColor: "secondary",
                onClick: () => setConfirmSubmitModalVisible(false),
                children: "No"
              }
            ),
            /* @__PURE__ */ jsx(Button, { onClick: () => doSubmit(), autoFocus: true, children: "Yes, proceed" })
          ] })
        ] })
      }
    )
  ] });
});
Form.displayName = "Form";
const COMP$M = "Form";
const FormMd = createMetadata({
  status: "experimental",
  description: `A \`${COMP$M}\` is a fundamental component that displays user interfaces that allow users to input (or change) data and submit it to the app (a server) for further processing.`,
  props: {
    buttonRowTemplate: dComponent(
      `This property allows defining a custom component to display the buttons at the bottom of the form.`
    ),
    itemLabelPosition: {
      description: `This property sets the position of the item labels within the form.Individual \`FormItem\` instances can override this property.`,
      availableValues: labelPositionMd,
      type: "string",
      defaultValue: defaultProps$6.itemLabelPosition
    },
    itemLabelWidth: {
      description: `This property sets the width of the item labels within the form. Individual \`FormItem\` instances can override this property.`,
      type: "string"
    },
    itemLabelBreak: {
      description: `This boolean value indicates if form item labels can be split into multiple lines if it would overflow the available label width. Individual \`FormItem\` instances can override this property.`,
      type: "boolean",
      defaultValue: defaultProps$6.itemLabelBreak
    },
    keepModalOpenOnSubmit: {
      description: "This property prevents the modal from closing when the form is submitted.",
      type: "boolean",
      defaultValue: defaultProps$6.keepModalOpenOnSubmit
    },
    data: {
      description: `This property sets the initial value of the form's data structure. The form infrastructure uses this value to set the initial state of form items within the form.`
    },
    cancelLabel: {
      description: "This property defines the label of the Cancel button.",
      type: "string",
      defaultValue: defaultProps$6.cancelLabel
    },
    saveLabel: {
      description: `This property defines the label of the Save button.`,
      type: "string",
      defaultValue: defaultProps$6.saveLabel
    },
    saveInProgressLabel: {
      description: "This property defines the label of the Save button to display during the form data submit (save) operation.",
      type: "string",
      defaultValue: defaultProps$6.saveInProgressLabel
    },
    swapCancelAndSave: {
      description: `By default, the Cancel button is to the left of the Save button. Set this property to \`true\` to swap them or \`false\` to keep their original location.`,
      type: "boolean"
    },
    submitUrl: d(`URL to submit the form data.`),
    submitMethod: {
      description: "This property sets the HTTP method to use when submitting the form data. If not defined, `put` is used when the form has initial data; otherwise, `post`."
    },
    enabled: d(`Whether the form is enabled or not. The default value is \`true\`.`),
    _data_url: dInternal("when we have an api bound data prop, we inject the url here")
  },
  events: {
    submit: d(
      `The form infrastructure fires this event when the form is submitted. The event argument is the current \`data\` value to save.`
    ),
    cancel: d(`The form infrastructure fires this event when the form is canceled.`),
    reset: d(`The form infrastructure fires this event when the form is reset.`)
  },
  contextVars: {
    $data: d(
      `This property represents the value of the form data. You can access the fields of the form using the IDs in the \`bindTo\` property of nested \`FormItem\` instances. \`$data\` also provides an \`update\` method as a shortcut to the Form's exposed \`update\` method.`
    )
  },
  apis: {
    reset: d(`Call this event to reset the form to its initial state.`),
    update: d(
      "You can pass a data object to update the form data. The properties in the passed data object are updated to their values accordingly. Other form properties remain intact."
    )
  },
  themeVars: parseScssVar(styles$p.themeVars),
  defaultThemeVars: {
    "gap-Form": "$space-4",
    "gap-buttonRow-Form": "$space-4",
    "backgroundColor-ValidationDisplay-error": "$color-danger-100",
    "backgroundColor-ValidationDisplay-warning": "$color-warn-100",
    "backgroundColor-ValidationDisplay-info": "$color-primary-100",
    "backgroundColor-ValidationDisplay-valid": "$color-success-100",
    "color-accent-ValidationDisplay-error": "$color-error",
    "color-accent-ValidationDisplay-warning": "$color-warning",
    "color-accent-ValidationDisplay-info": "$color-info",
    "color-accent-ValidationDisplay-valid": "$color-valid",
    "textColor-ValidationDisplay-error": "$color-error",
    "textColor-ValidationDisplay-warning": "$color-warning",
    "textColor-ValidationDisplay-info": "$color-info",
    "textColor-ValidationDisplay-valid": "$color-valid"
  }
});
const T_BLOCK_STATEMENT = 1;
const T_EMPTY_STATEMENT = 2;
const T_EXPRESSION_STATEMENT = 3;
const T_LET_STATEMENT = 5;
const T_CONST_STATEMENT = 6;
const T_VAR_STATEMENT = 7;
const T_IF_STATEMENT = 8;
const T_RETURN_STATEMENT = 9;
const T_BREAK_STATEMENT = 10;
const T_CONTINUE_STATEMENT = 11;
const T_WHILE_STATEMENT = 12;
const T_DO_WHILE_STATEMENT = 13;
const T_FOR_STATEMENT = 14;
const T_FOR_IN_STATEMENT = 15;
const T_FOR_OF_STATEMENT = 16;
const T_THROW_STATEMENT = 17;
const T_TRY_STATEMENT = 18;
const T_SWITCH_STATEMENT = 19;
const T_FUNCTION_DECLARATION = 20;
const T_UNARY_EXPRESSION = 100;
const T_BINARY_EXPRESSION = 101;
const T_SEQUENCE_EXPRESSION = 102;
const T_CONDITIONAL_EXPRESSION = 103;
const T_FUNCTION_INVOCATION_EXPRESSION = 104;
const T_MEMBER_ACCESS_EXPRESSION = 105;
const T_CALCULATED_MEMBER_ACCESS_EXPRESSION = 106;
const T_IDENTIFIER = 107;
const T_TEMPLATE_LITERAL_EXPRESSION = 108;
const T_LITERAL = 109;
const T_ARRAY_LITERAL = 110;
const T_OBJECT_LITERAL = 111;
const T_SPREAD_EXPRESSION = 112;
const T_ASSIGNMENT_EXPRESSION = 113;
const T_NO_ARG_EXPRESSION = 114;
const T_ARROW_EXPRESSION = 115;
const T_PREFIX_OP_EXPRESSION = 116;
const T_POSTFIX_OP_EXPRESSION = 117;
const T_REACTIVE_VAR_DECLARATION = 118;
const T_VAR_DECLARATION = 200;
const T_DESTRUCTURE = 201;
const T_ARRAY_DESTRUCTURE = 202;
const T_OBJECT_DESTRUCTURE = 203;
const T_SWITCH_CASE = 204;
class InputStream {
  // Creates a stream that uses the specified source code
  constructor(source) {
    this.source = source;
    this._pos = 0;
    this._line = 1;
    this._column = 0;
  }
  // Gets the current position in the stream. Starts from 0.
  get position() {
    return this._pos;
  }
  // Gets the current line number. Starts from 1.
  get line() {
    return this._line;
  }
  // Gets the current column number. Starts from 0.
  get column() {
    return this._column;
  }
  // Peeks the next character in the stream. Returns null, if EOF; otherwise the current source code character
  peek() {
    return this.ahead(0);
  }
  // Looks ahead with `n` characters in the stream. Returns null, if EOF; otherwise the look-ahead character
  ahead(n = 1) {
    return this._pos + n > this.source.length - 1 ? null : this.source[this._pos + n];
  }
  // Gets the next character from the stream
  get() {
    if (this._pos >= this.source.length) {
      return null;
    }
    const ch = this.source[this._pos++];
    if (ch === "\n") {
      this._line++;
      this._column = 0;
    } else {
      this._column++;
    }
    return ch;
  }
  // Gets the tail of the input stream
  getTail(start2) {
    var _a;
    return ((_a = this.source) == null ? void 0 : _a.substring(start2)) ?? "";
  }
}
var TokenType = /* @__PURE__ */ ((TokenType2) => {
  TokenType2[TokenType2["Eof"] = -1] = "Eof";
  TokenType2[TokenType2["Ws"] = -2] = "Ws";
  TokenType2[TokenType2["BlockComment"] = -3] = "BlockComment";
  TokenType2[TokenType2["EolComment"] = -4] = "EolComment";
  TokenType2[TokenType2["Unknown"] = 0] = "Unknown";
  TokenType2[TokenType2["LParent"] = 1] = "LParent";
  TokenType2[TokenType2["RParent"] = 2] = "RParent";
  TokenType2[TokenType2["Identifier"] = 3] = "Identifier";
  TokenType2[TokenType2["Exponent"] = 4] = "Exponent";
  TokenType2[TokenType2["Divide"] = 5] = "Divide";
  TokenType2[TokenType2["Multiply"] = 6] = "Multiply";
  TokenType2[TokenType2["Remainder"] = 7] = "Remainder";
  TokenType2[TokenType2["Plus"] = 8] = "Plus";
  TokenType2[TokenType2["Minus"] = 9] = "Minus";
  TokenType2[TokenType2["BitwiseXor"] = 10] = "BitwiseXor";
  TokenType2[TokenType2["BitwiseOr"] = 11] = "BitwiseOr";
  TokenType2[TokenType2["LogicalOr"] = 12] = "LogicalOr";
  TokenType2[TokenType2["BitwiseAnd"] = 13] = "BitwiseAnd";
  TokenType2[TokenType2["LogicalAnd"] = 14] = "LogicalAnd";
  TokenType2[TokenType2["IncOp"] = 15] = "IncOp";
  TokenType2[TokenType2["DecOp"] = 16] = "DecOp";
  TokenType2[TokenType2["Assignment"] = 17] = "Assignment";
  TokenType2[TokenType2["AddAssignment"] = 18] = "AddAssignment";
  TokenType2[TokenType2["SubtractAssignment"] = 19] = "SubtractAssignment";
  TokenType2[TokenType2["ExponentAssignment"] = 20] = "ExponentAssignment";
  TokenType2[TokenType2["MultiplyAssignment"] = 21] = "MultiplyAssignment";
  TokenType2[TokenType2["DivideAssignment"] = 22] = "DivideAssignment";
  TokenType2[TokenType2["RemainderAssignment"] = 23] = "RemainderAssignment";
  TokenType2[TokenType2["ShiftLeftAssignment"] = 24] = "ShiftLeftAssignment";
  TokenType2[TokenType2["ShiftRightAssignment"] = 25] = "ShiftRightAssignment";
  TokenType2[TokenType2["SignedShiftRightAssignment"] = 26] = "SignedShiftRightAssignment";
  TokenType2[TokenType2["BitwiseAndAssignment"] = 27] = "BitwiseAndAssignment";
  TokenType2[TokenType2["BitwiseXorAssignment"] = 28] = "BitwiseXorAssignment";
  TokenType2[TokenType2["BitwiseOrAssignment"] = 29] = "BitwiseOrAssignment";
  TokenType2[TokenType2["LogicalAndAssignment"] = 30] = "LogicalAndAssignment";
  TokenType2[TokenType2["LogicalOrAssignment"] = 31] = "LogicalOrAssignment";
  TokenType2[TokenType2["NullCoalesceAssignment"] = 32] = "NullCoalesceAssignment";
  TokenType2[TokenType2["Semicolon"] = 33] = "Semicolon";
  TokenType2[TokenType2["Comma"] = 34] = "Comma";
  TokenType2[TokenType2["Colon"] = 35] = "Colon";
  TokenType2[TokenType2["LSquare"] = 36] = "LSquare";
  TokenType2[TokenType2["RSquare"] = 37] = "RSquare";
  TokenType2[TokenType2["QuestionMark"] = 38] = "QuestionMark";
  TokenType2[TokenType2["NullCoalesce"] = 39] = "NullCoalesce";
  TokenType2[TokenType2["OptionalChaining"] = 40] = "OptionalChaining";
  TokenType2[TokenType2["BinaryNot"] = 41] = "BinaryNot";
  TokenType2[TokenType2["LBrace"] = 42] = "LBrace";
  TokenType2[TokenType2["RBrace"] = 43] = "RBrace";
  TokenType2[TokenType2["Equal"] = 44] = "Equal";
  TokenType2[TokenType2["StrictEqual"] = 45] = "StrictEqual";
  TokenType2[TokenType2["LogicalNot"] = 46] = "LogicalNot";
  TokenType2[TokenType2["NotEqual"] = 47] = "NotEqual";
  TokenType2[TokenType2["StrictNotEqual"] = 48] = "StrictNotEqual";
  TokenType2[TokenType2["LessThan"] = 49] = "LessThan";
  TokenType2[TokenType2["LessThanOrEqual"] = 50] = "LessThanOrEqual";
  TokenType2[TokenType2["ShiftLeft"] = 51] = "ShiftLeft";
  TokenType2[TokenType2["GreaterThan"] = 52] = "GreaterThan";
  TokenType2[TokenType2["GreaterThanOrEqual"] = 53] = "GreaterThanOrEqual";
  TokenType2[TokenType2["ShiftRight"] = 54] = "ShiftRight";
  TokenType2[TokenType2["SignedShiftRight"] = 55] = "SignedShiftRight";
  TokenType2[TokenType2["Dot"] = 56] = "Dot";
  TokenType2[TokenType2["Spread"] = 57] = "Spread";
  TokenType2[TokenType2["Global"] = 58] = "Global";
  TokenType2[TokenType2["Backtick"] = 59] = "Backtick";
  TokenType2[TokenType2["DollarLBrace"] = 60] = "DollarLBrace";
  TokenType2[TokenType2["Arrow"] = 61] = "Arrow";
  TokenType2[TokenType2["DecimalLiteral"] = 62] = "DecimalLiteral";
  TokenType2[TokenType2["HexadecimalLiteral"] = 63] = "HexadecimalLiteral";
  TokenType2[TokenType2["BinaryLiteral"] = 64] = "BinaryLiteral";
  TokenType2[TokenType2["RealLiteral"] = 65] = "RealLiteral";
  TokenType2[TokenType2["StringLiteral"] = 66] = "StringLiteral";
  TokenType2[TokenType2["Infinity"] = 67] = "Infinity";
  TokenType2[TokenType2["NaN"] = 68] = "NaN";
  TokenType2[TokenType2["True"] = 69] = "True";
  TokenType2[TokenType2["False"] = 70] = "False";
  TokenType2[TokenType2["Typeof"] = 71] = "Typeof";
  TokenType2[TokenType2["Null"] = 72] = "Null";
  TokenType2[TokenType2["Undefined"] = 73] = "Undefined";
  TokenType2[TokenType2["In"] = 74] = "In";
  TokenType2[TokenType2["Let"] = 75] = "Let";
  TokenType2[TokenType2["Const"] = 76] = "Const";
  TokenType2[TokenType2["Var"] = 77] = "Var";
  TokenType2[TokenType2["If"] = 78] = "If";
  TokenType2[TokenType2["Else"] = 79] = "Else";
  TokenType2[TokenType2["Return"] = 80] = "Return";
  TokenType2[TokenType2["Break"] = 81] = "Break";
  TokenType2[TokenType2["Continue"] = 82] = "Continue";
  TokenType2[TokenType2["Do"] = 83] = "Do";
  TokenType2[TokenType2["While"] = 84] = "While";
  TokenType2[TokenType2["For"] = 85] = "For";
  TokenType2[TokenType2["Of"] = 86] = "Of";
  TokenType2[TokenType2["Try"] = 87] = "Try";
  TokenType2[TokenType2["Catch"] = 88] = "Catch";
  TokenType2[TokenType2["Finally"] = 89] = "Finally";
  TokenType2[TokenType2["Throw"] = 90] = "Throw";
  TokenType2[TokenType2["Switch"] = 91] = "Switch";
  TokenType2[TokenType2["Case"] = 92] = "Case";
  TokenType2[TokenType2["Default"] = 93] = "Default";
  TokenType2[TokenType2["Delete"] = 94] = "Delete";
  TokenType2[TokenType2["Function"] = 95] = "Function";
  TokenType2[TokenType2["As"] = 96] = "As";
  TokenType2[TokenType2["From"] = 97] = "From";
  return TokenType2;
})(TokenType || {});
class Lexer {
  /**
   * Initializes the tokenizer with the input stream
   * @param input Input source code stream
   */
  constructor(input2) {
    this.input = input2;
    this._ahead = [];
    this._prefetched = null;
    this._prefetchedPos = null;
    this._prefetchedColumn = null;
    this._lastFetchPosition = 0;
    this._phaseExternallySet = null;
  }
  /**
   * Fetches the next token without advancing to its position
   * @param ws If true, retrieve whitespaces too
   */
  peek(ws = false) {
    return this.ahead(0, ws);
  }
  /**
   * Reads tokens ahead
   * @param n Number of token positions to read ahead
   * @param ws If true, retrieve whitespaces too
   */
  ahead(n = 1, ws = false) {
    if (n > 16) {
      throw new Error("Cannot look ahead more than 16 tokens");
    }
    while (this._ahead.length <= n) {
      const token = this.fetch();
      if (isEof(token)) {
        return token;
      }
      if (ws || !ws && !isWs(token)) {
        this._ahead.push(token);
      }
    }
    return this._ahead[n];
  }
  /**
   * Fetches the next token and advances the stream position
   * @param ws If true, retrieve whitespaces too
   */
  get(ws = false) {
    if (this._ahead.length > 0) {
      const token = this._ahead.shift();
      if (!token) {
        throw new Error("Token expected");
      }
      return token;
    }
    while (true) {
      const token = this.fetch();
      if (isEof(token) || ws || !ws && !isWs(token)) {
        return token;
      }
    }
  }
  /**
   * Gets a RegEx from the current position
   */
  getRegEx() {
    return this.fetchRegEx();
  }
  /**
   * Gets the remaining characters after the parsing phase
   */
  getTail() {
    return this._ahead.length > 0 ? this.input.getTail(this._ahead[0].startPosition) : this.input.getTail(this._lastFetchPosition);
  }
  /** Parsing template literals requires a context sensitive lexer.
   * This method has to be called by the parser when the lexer needs to scan a string inside a template literal.
   * Call this after the first opening backing and after the parser is done with parsing a placeholder, after the right brace.
   */
  setStartingPhaseToTemplateLiteral() {
    this._phaseExternallySet = 34;
  }
  /**
   * Fetches the next character from the input stream
   */
  fetchNextChar() {
    if (!this._prefetched) {
      this._prefetchedPos = this.input.position;
      this._prefetchedColumn = this.input.column;
      this._prefetched = this.input.get();
    }
    return this._prefetched;
  }
  /**
   * Fetches the next token from the input stream
   */
  fetch() {
    const lexer = this;
    const input2 = this.input;
    const startPos = this._prefetchedPos || input2.position;
    const line = input2.line;
    const startColumn = this._prefetchedColumn || input2.column;
    this._lastFetchPosition = this.input.position;
    let stringState = null;
    let text2 = "";
    let tokenType = TokenType.Eof;
    let lastEndPos = input2.position;
    let lastEndColumn = input2.column;
    let ch = null;
    let useResolver = false;
    let phase = this.getStartingPhaseThenReset();
    while (true) {
      ch = this.fetchNextChar();
      if (ch === null) {
        return makeToken();
      }
      if (tokenType === TokenType.Eof) {
        tokenType = TokenType.Unknown;
      }
      phaseSwitch: switch (phase) {
        case 0:
          switch (ch) {
            case " ":
            case "	":
            case "\n":
            case "\r":
              phase = 1;
              tokenType = TokenType.Ws;
              break;
            case "/":
              phase = 5;
              tokenType = TokenType.Divide;
              break;
            case "$":
              phase = 6;
              tokenType = TokenType.Identifier;
              break;
            case "*":
              phase = 8;
              tokenType = TokenType.Multiply;
              break;
            case "%":
              phase = 54;
              tokenType = TokenType.Remainder;
              break;
            case "+":
              phase = 51;
              tokenType = TokenType.Plus;
              break;
            case "-":
              phase = 52;
              tokenType = TokenType.Minus;
              break;
            case "^":
              phase = 58;
              tokenType = TokenType.BitwiseXor;
              break;
            case "|":
              phase = 7;
              tokenType = TokenType.BitwiseOr;
              break;
            case "&":
              phase = 9;
              tokenType = TokenType.BitwiseAnd;
              break;
            case "?":
              phase = 22;
              tokenType = TokenType.QuestionMark;
              break;
            case ";":
              return completeToken(TokenType.Semicolon);
            case ",":
              return completeToken(TokenType.Comma);
            case "(":
              return completeToken(TokenType.LParent);
            case ")":
              return completeToken(TokenType.RParent);
            case ":":
              phase = 20;
              tokenType = TokenType.Colon;
              break;
            case "`":
              return completeToken(TokenType.Backtick);
            case "[":
              return completeToken(TokenType.LSquare);
            case "]":
              return completeToken(TokenType.RSquare);
            case "~":
              return completeToken(TokenType.BinaryNot);
            case "{":
              return completeToken(TokenType.LBrace);
            case "}":
              return completeToken(TokenType.RBrace);
            case "=":
              phase = 10;
              tokenType = TokenType.Assignment;
              break;
            case "!":
              phase = 13;
              tokenType = TokenType.LogicalNot;
              break;
            case "<":
              phase = 14;
              tokenType = TokenType.LessThan;
              break;
            case ">":
              phase = 15;
              tokenType = TokenType.GreaterThan;
              break;
            case "0":
              phase = 21;
              tokenType = TokenType.DecimalLiteral;
              break;
            case ".":
              phase = 18;
              tokenType = TokenType.Dot;
              break;
            case '"':
            case "'":
              stringState = ch;
              phase = 35;
              break;
            default:
              if (isIdStart(ch)) {
                useResolver = true;
                phase = 17;
                tokenType = TokenType.Identifier;
              } else if (isDecimalDigit(ch)) {
                phase = 27;
                tokenType = TokenType.DecimalLiteral;
              } else {
                completeToken(TokenType.Unknown);
              }
              break;
          }
          break;
        case 1:
          if (ch !== " " && ch !== "	" && ch !== "\r" && ch !== "\n") {
            return makeToken();
          }
          break;
        case 3:
          if (ch === "*") {
            phase = 4;
          }
          break;
        case 4:
          if (ch === "/") {
            return completeToken(TokenType.BlockComment);
          }
          break;
        case 2:
          if (ch === "\n") {
            return completeToken();
          }
          break;
        case 17:
          if (!isIdContinuation(ch)) {
            return makeToken();
          }
          break;
        case 20:
          return ch === ":" ? completeToken(TokenType.Global) : makeToken();
        case 5:
          if (ch === "*") {
            phase = 3;
          } else if (ch === "/") {
            phase = 2;
            tokenType = TokenType.EolComment;
          } else if (ch === "=") {
            return completeToken(TokenType.DivideAssignment);
          } else {
            return makeToken();
          }
          break;
        case 51:
          if (ch === "+") {
            return completeToken(TokenType.IncOp);
          }
          return ch === "=" ? completeToken(TokenType.AddAssignment) : makeToken();
        case 52:
          if (ch === "-") {
            return completeToken(TokenType.DecOp);
          }
          return ch === "=" ? completeToken(TokenType.SubtractAssignment) : makeToken();
        case 54:
          return ch === "=" ? completeToken(TokenType.RemainderAssignment) : makeToken();
        case 58:
          return ch === "=" ? completeToken(TokenType.BitwiseXorAssignment) : makeToken();
        case 7:
          if (ch === "=") {
            return completeToken(TokenType.BitwiseOrAssignment);
          }
          if (ch === "|") {
            phase = 59;
            tokenType = TokenType.LogicalOr;
            break;
          }
          return makeToken();
        case 59:
          return ch === "=" ? completeToken(TokenType.LogicalOrAssignment) : makeToken();
        case 9:
          if (ch === "=") {
            return completeToken(TokenType.BitwiseAndAssignment);
          }
          if (ch === "&") {
            phase = 57;
            tokenType = TokenType.LogicalAnd;
            break;
          }
          return makeToken();
        case 57:
          return ch === "=" ? completeToken(TokenType.LogicalAndAssignment) : makeToken();
        case 8:
          if (ch === "*") {
            phase = 50;
            tokenType = TokenType.Exponent;
            break;
          } else if (ch === "=") {
            return completeToken(TokenType.MultiplyAssignment);
          }
          return makeToken();
        case 50:
          return ch === "=" ? completeToken(TokenType.ExponentAssignment) : makeToken();
        case 22:
          if (ch === "?") {
            phase = 60;
            tokenType = TokenType.NullCoalesce;
            break;
          }
          if (ch === ".") {
            return completeToken(TokenType.OptionalChaining);
          }
          return makeToken();
        case 60:
          return ch === "=" ? completeToken(TokenType.NullCoalesceAssignment) : makeToken();
        case 10:
          if (ch === ">") {
            return completeToken(TokenType.Arrow);
          }
          if (ch === "=") {
            phase = 11;
            tokenType = TokenType.Equal;
            break;
          }
          return makeToken();
        case 11:
          return ch === "=" ? completeToken(TokenType.StrictEqual) : makeToken();
        case 13:
          if (ch === "=") {
            phase = 12;
            tokenType = TokenType.NotEqual;
            break;
          }
          return makeToken();
        case 12:
          return ch === "=" ? completeToken(TokenType.StrictNotEqual) : makeToken();
        case 14:
          if (ch === "=") {
            return completeToken(TokenType.LessThanOrEqual);
          }
          if (ch === "<") {
            phase = 55;
            tokenType = TokenType.ShiftLeft;
            break;
          }
          return makeToken();
        case 55:
          return ch === "=" ? completeToken(TokenType.ShiftLeftAssignment) : makeToken();
        case 15:
          if (ch === "=") {
            return completeToken(TokenType.GreaterThanOrEqual);
          }
          if (ch === ">") {
            phase = 16;
            tokenType = TokenType.SignedShiftRight;
            break;
          }
          return makeToken();
        case 16:
          if (ch === ">") {
            phase = 56;
            tokenType = TokenType.ShiftRight;
            break;
          }
          if (ch === "=") {
            return completeToken(TokenType.SignedShiftRightAssignment);
          }
          return makeToken();
        case 56:
          return ch === "=" ? completeToken(TokenType.ShiftRightAssignment) : makeToken();
        case 21:
          if (ch === "x") {
            phase = 23;
            tokenType = TokenType.Unknown;
          } else if (ch === "b") {
            phase = 25;
            tokenType = TokenType.Unknown;
          } else if (isDecimalDigit(ch) || ch === "_") {
            phase = 27;
          } else if (ch === ".") {
            phase = 28;
            tokenType = TokenType.Unknown;
          } else if (ch === "e" || ch === "E") {
            phase = 30;
            tokenType = TokenType.Unknown;
          } else {
            return makeToken();
          }
          break;
        case 18:
          if (ch === ".") {
            phase = 19;
            tokenType = TokenType.Unknown;
            break;
          }
          if (!isDecimalDigit(ch)) {
            return makeToken();
          }
          phase = 29;
          tokenType = TokenType.RealLiteral;
          break;
        case 19:
          return ch === "." ? completeToken(TokenType.Spread) : makeToken();
        case 23:
          if (ch === "_") {
            break;
          }
          if (!isHexadecimalDigit(ch)) {
            return makeToken();
          }
          phase = 24;
          tokenType = TokenType.HexadecimalLiteral;
          break;
        case 24:
          if (!isHexadecimalDigit(ch) && ch !== "_") {
            return makeToken();
          }
          break;
        case 25:
          if (ch === "_") {
            break;
          }
          if (!isBinaryDigit(ch)) {
            return makeToken();
          }
          phase = 26;
          tokenType = TokenType.BinaryLiteral;
          break;
        case 26:
          if (!isBinaryDigit(ch) && ch !== "_") {
            return makeToken();
          }
          tokenType = TokenType.BinaryLiteral;
          break;
        case 27:
          if (isDecimalDigit(ch) || ch === "_") {
            break;
          } else if (ch === "." && (this.input.peek() === null || isDecimalDigit(this.input.peek()))) {
            phase = 28;
            tokenType = TokenType.Unknown;
          } else if (ch === "e" || ch === "E") {
            phase = 30;
            tokenType = TokenType.Unknown;
          } else {
            return makeToken();
          }
          break;
        case 28:
          if (isDecimalDigit(ch)) {
            phase = 29;
            tokenType = TokenType.RealLiteral;
          } else if (ch === "e" || ch === "E") {
            phase = 30;
          } else {
            return makeToken();
          }
          break;
        case 29:
          if (ch === "e" || ch === "E") {
            phase = 30;
            tokenType = TokenType.Unknown;
          } else if (!isDecimalDigit(ch) && ch !== "_") {
            return makeToken();
          }
          break;
        case 30:
          if (ch === "+" || ch === "-") {
            phase = 31;
          } else if (isDecimalDigit(ch)) {
            phase = 32;
            tokenType = TokenType.RealLiteral;
          } else {
            return makeToken();
          }
          break;
        case 31:
          if (isDecimalDigit(ch)) {
            phase = 32;
            tokenType = TokenType.RealLiteral;
          } else {
            return makeToken();
          }
          break;
        case 32:
          if (!isDecimalDigit(ch)) {
            return makeToken();
          }
          break;
        case 6:
          if (ch === "{") {
            return completeToken(TokenType.DollarLBrace);
          }
          phase = 17;
          useResolver = true;
          tokenType = TokenType.Identifier;
          if (!isIdContinuation(ch)) {
            makeToken();
          }
          break;
        case 33: {
          phase = 34;
          const charAhead12 = this.input.ahead(0);
          const charAhead22 = this.input.ahead(1);
          if (charAhead12 === "`" || charAhead12 === "$" && charAhead22 === "{") {
            return completeToken(TokenType.StringLiteral);
          }
          break;
        }
        case 34:
          switch (ch) {
            case "\\":
              phase = 33;
              tokenType = TokenType.Unknown;
              break phaseSwitch;
            case "`":
              return completeToken(TokenType.Backtick);
            case "$":
              const charAhead = this.input.ahead(0);
              if (charAhead === "{") {
                appendTokenChar();
                this.fetchNextChar();
                return completeToken(TokenType.DollarLBrace);
              }
          }
          const charAhead1 = this.input.ahead(0);
          const charAhead2 = this.input.ahead(1);
          if (charAhead1 === "`" || charAhead1 === "$" && charAhead2 === "{") {
            return completeToken(TokenType.StringLiteral);
          }
          break;
        case 35:
          if (ch === stringState) {
            return completeToken(TokenType.StringLiteral);
          } else if (isRestrictedInString(ch)) {
            return completeToken(TokenType.Unknown);
          } else if (ch === "\\") {
            phase = 36;
            tokenType = TokenType.Unknown;
          }
          break;
        case 36:
          switch (ch) {
            case "b":
            case "f":
            case "n":
            case "r":
            case "t":
            case "v":
            case "S":
            case "0":
            case "'":
            case '"':
            case "`":
            case "\\":
              phase = 35;
              break;
            case "x":
              phase = 37;
              break;
            case "u":
              phase = 39;
              break;
            default:
              phase = 35;
              break;
          }
          break;
        case 37:
          if (isHexadecimalDigit(ch)) {
            phase = 38;
          } else {
            return completeToken(TokenType.Unknown);
          }
          break;
        case 38:
          if (isHexadecimalDigit(ch)) {
            phase = 35;
          } else {
            return completeToken(TokenType.Unknown);
          }
          break;
        case 39:
          if (ch === "{") {
            phase = 43;
            break;
          }
          if (isHexadecimalDigit(ch)) {
            phase = 40;
          } else {
            return completeToken(TokenType.Unknown);
          }
          break;
        case 40:
          if (isHexadecimalDigit(ch)) {
            phase = 41;
          } else {
            return completeToken(TokenType.Unknown);
          }
          break;
        case 41:
          if (isHexadecimalDigit(ch)) {
            phase = 42;
          } else {
            return completeToken(TokenType.Unknown);
          }
          break;
        case 42:
          if (isHexadecimalDigit(ch)) {
            phase = 35;
          } else {
            return completeToken(TokenType.Unknown);
          }
          break;
        case 43:
          if (isHexadecimalDigit(ch)) {
            phase = 44;
          } else {
            return completeToken(TokenType.Unknown);
          }
          break;
        case 44:
          if (ch === "}") {
            phase = 35;
          } else if (isHexadecimalDigit(ch)) {
            phase = 45;
          } else {
            return completeToken(TokenType.Unknown);
          }
          break;
        case 45:
          if (ch === "}") {
            phase = 35;
          } else if (isHexadecimalDigit(ch)) {
            phase = 46;
          } else {
            return completeToken(TokenType.Unknown);
          }
          break;
        case 46:
          if (ch === "}") {
            phase = 35;
          } else if (isHexadecimalDigit(ch)) {
            phase = 47;
          } else {
            return completeToken(TokenType.Unknown);
          }
          break;
        case 47:
          if (ch === "}") {
            phase = 35;
          } else if (isHexadecimalDigit(ch)) {
            phase = 48;
          } else {
            return completeToken(TokenType.Unknown);
          }
          break;
        case 48:
          if (ch === "}") {
            phase = 35;
          } else if (isHexadecimalDigit(ch)) {
            phase = 49;
          } else {
            return completeToken(TokenType.Unknown);
          }
          break;
        case 49:
          if (ch === "}") {
            phase = 35;
          } else {
            return completeToken(TokenType.Unknown);
          }
          break;
        default:
          return makeToken();
      }
      appendTokenChar();
    }
    function appendTokenChar() {
      text2 += ch;
      lexer._prefetched = null;
      lexer._prefetchedPos = null;
      lexer._prefetchedColumn = null;
      lastEndPos = input2.position;
      lastEndColumn = input2.position;
    }
    function makeToken() {
      if (useResolver) {
        tokenType = resolverHash.get(text2) ?? (isIdStart(text2[0]) && text2[text2.length - 1] !== "'" ? TokenType.Identifier : TokenType.Unknown);
      }
      return {
        text: text2,
        type: tokenType,
        startPosition: startPos,
        endPosition: lastEndPos,
        startLine: line,
        endLine: line,
        startColumn,
        endColumn: lastEndColumn
      };
    }
    function completeToken(suggestedType) {
      appendTokenChar();
      if (suggestedType !== void 0) {
        tokenType = suggestedType;
      }
      return makeToken();
    }
  }
  getStartingPhaseThenReset() {
    if (this._phaseExternallySet !== null) {
      const phase = this._phaseExternallySet;
      this._phaseExternallySet = null;
      return phase;
    }
    return 0;
  }
  /**
   * Fetches the next RegEx token from the input stream
   */
  fetchRegEx() {
    const tailPosition = this._ahead.length > 0 ? this._ahead[0].startPosition : this._lastFetchPosition;
    const tail = this.input.getTail(tailPosition);
    try {
      const regexpResult = parseRegExpLiteral(tail);
      const text2 = regexpResult.raw;
      for (let i = 1; i < text2.length; i++) {
        this.fetchNextChar();
        this._prefetched = null;
        this._prefetchedPos = null;
        this._prefetchedColumn = null;
      }
      this._ahead.length = 0;
      return {
        success: true,
        pattern: regexpResult.pattern.raw,
        flags: regexpResult.flags.raw,
        length: text2.length
      };
    } catch (parseErr) {
      let errorIndex = parseErr.index;
      if (parseErr.toString().includes("Invalid flag")) {
        while (errorIndex < tail.length && "dgimsuy".includes(tail[errorIndex])) {
          errorIndex++;
        }
      }
      if (errorIndex === void 0) {
        return {
          success: false,
          pattern: tail[0]
        };
      }
      const tailBeforeError = tail.substring(0, errorIndex);
      try {
        const regexpResult = parseRegExpLiteral(tailBeforeError);
        const text2 = regexpResult.raw;
        for (let i = 1; i < text2.length; i++) {
          this.fetchNextChar();
          this._prefetched = null;
          this._prefetchedPos = null;
          this._prefetchedColumn = null;
        }
        this._ahead.length = 0;
        return {
          success: true,
          pattern: regexpResult.pattern.raw,
          flags: regexpResult.flags.raw,
          length: text2.length
        };
      } catch (parseErr2) {
        return {
          success: false,
          pattern: tailBeforeError
        };
      }
    }
  }
}
const resolverHash = /* @__PURE__ */ new Map();
resolverHash.set("typeof", TokenType.Typeof);
resolverHash.set("Infinity", TokenType.Infinity);
resolverHash.set("NaN", TokenType.NaN);
resolverHash.set("true", TokenType.True);
resolverHash.set("false", TokenType.False);
resolverHash.set("undefined", TokenType.Undefined);
resolverHash.set("null", TokenType.Null);
resolverHash.set("in", TokenType.In);
resolverHash.set("let", TokenType.Let);
resolverHash.set("const", TokenType.Const);
resolverHash.set("var", TokenType.Var);
resolverHash.set("if", TokenType.If);
resolverHash.set("else", TokenType.Else);
resolverHash.set("return", TokenType.Return);
resolverHash.set("break", TokenType.Break);
resolverHash.set("continue", TokenType.Continue);
resolverHash.set("do", TokenType.Do);
resolverHash.set("while", TokenType.While);
resolverHash.set("for", TokenType.For);
resolverHash.set("of", TokenType.Of);
resolverHash.set("try", TokenType.Try);
resolverHash.set("catch", TokenType.Catch);
resolverHash.set("finally", TokenType.Finally);
resolverHash.set("throw", TokenType.Throw);
resolverHash.set("switch", TokenType.Switch);
resolverHash.set("case", TokenType.Case);
resolverHash.set("default", TokenType.Default);
resolverHash.set("delete", TokenType.Delete);
resolverHash.set("function", TokenType.Function);
resolverHash.set("as", TokenType.As);
resolverHash.set("from", TokenType.From);
function isEof(t) {
  return t.type === TokenType.Eof;
}
function isWs(t) {
  return t.type <= TokenType.Ws;
}
function isIdStart(ch) {
  return ch >= "a" && ch <= "z" || ch >= "A" && ch <= "Z" || ch === "_" || ch === "$";
}
function isIdContinuation(ch) {
  return ch >= "a" && ch <= "z" || ch >= "A" && ch <= "Z" || ch >= "0" && ch <= "9" || ch === "_" || ch === "$";
}
function isBinaryDigit(ch) {
  return ch === "0" || ch === "1";
}
function isDecimalDigit(ch) {
  return ch >= "0" && ch <= "9";
}
function isHexadecimalDigit(ch) {
  return ch >= "0" && ch <= "9" || ch >= "A" && ch <= "F" || ch >= "a" && ch <= "f";
}
function isRestrictedInString(ch) {
  return ch === "\r" || ch === "\n" || ch === "" || ch === "\u2028" || ch === "\u2029";
}
let ParserError$1 = class ParserError extends Error {
  constructor(message, code2) {
    super(message);
    this.code = code2;
    Object.setPrototypeOf(this, ParserError.prototype);
  }
};
const errorMessages$1 = {
  W001: "An expression expected",
  W002: "Unexpected token: {0}",
  W003: "An identifier expected",
  W004: "'}' expected",
  W005: "']' expected",
  W006: "')' expected",
  W007: "Invalid object property name type",
  W008: "':' expected",
  W009: "'=' expected",
  W010: "Invalid argument list",
  W011: "For loop variable must be initialized",
  W012: "'{' expected",
  W013: "'catch' or 'finally' expected",
  W014: "'(' or expected",
  W015: "'case' or 'default' expected",
  W016: "'default' case can be used only once within a switch statement",
  W017: "Invalid sequence expression",
  W018: "Invalid object literal",
  W019: "Identifier '{0}' is already imported",
  W020: "Function '{0}' is already defined in the module",
  W021: "'{0}' is already exported from the module",
  W022: "Cannot find module '{0}'",
  W023: "Module '{0}' does not export '{1}'",
  W024: "'function' expected",
  W025: "'from' expected",
  W026: "A string literal expected",
  W027: "Cannot declare var ('{0}') in an imported module",
  W028: "Invalid statement used in a module.",
  W029: "An imported module can contain only exported functions",
  W030: "Nested declarations cannot be exported",
  W031: "An identifier in a declaration cannot start with '$'"
};
const tokenTraits = {
  [TokenType.Eof]: {},
  [TokenType.Ws]: {},
  [TokenType.DollarLBrace]: {},
  [TokenType.Backtick]: { expressionStart: true },
  [TokenType.BlockComment]: {},
  [TokenType.EolComment]: {},
  [TokenType.Unknown]: {},
  [TokenType.LParent]: { expressionStart: true },
  [TokenType.RParent]: {},
  [TokenType.Identifier]: { expressionStart: true, keywordLike: true, isPropLiteral: true },
  [TokenType.Exponent]: {},
  [TokenType.Divide]: {},
  [TokenType.Multiply]: {},
  [TokenType.Remainder]: {},
  [TokenType.Plus]: { expressionStart: true, canBeUnary: true },
  [TokenType.Minus]: { expressionStart: true, canBeUnary: true },
  [TokenType.BitwiseXor]: {},
  [TokenType.BitwiseOr]: {},
  [TokenType.LogicalOr]: {},
  [TokenType.BitwiseAnd]: {},
  [TokenType.LogicalAnd]: {},
  [TokenType.Assignment]: { isAssignment: true },
  [TokenType.AddAssignment]: { isAssignment: true },
  [TokenType.SubtractAssignment]: { isAssignment: true },
  [TokenType.ExponentAssignment]: { isAssignment: true },
  [TokenType.MultiplyAssignment]: { isAssignment: true },
  [TokenType.DivideAssignment]: { isAssignment: true },
  [TokenType.RemainderAssignment]: { isAssignment: true },
  [TokenType.ShiftLeftAssignment]: { isAssignment: true },
  [TokenType.ShiftRightAssignment]: { isAssignment: true },
  [TokenType.SignedShiftRightAssignment]: { isAssignment: true },
  [TokenType.BitwiseAndAssignment]: { isAssignment: true },
  [TokenType.BitwiseXorAssignment]: { isAssignment: true },
  [TokenType.BitwiseOrAssignment]: { isAssignment: true },
  [TokenType.LogicalAndAssignment]: { isAssignment: true },
  [TokenType.LogicalOrAssignment]: { isAssignment: true },
  [TokenType.NullCoalesceAssignment]: { isAssignment: true },
  [TokenType.Semicolon]: {},
  [TokenType.Comma]: {},
  [TokenType.Colon]: {},
  [TokenType.LSquare]: { expressionStart: true },
  [TokenType.RSquare]: {},
  [TokenType.QuestionMark]: {},
  [TokenType.NullCoalesce]: {},
  [TokenType.OptionalChaining]: {},
  [TokenType.BinaryNot]: { expressionStart: true, canBeUnary: true },
  [TokenType.LBrace]: { expressionStart: true },
  [TokenType.RBrace]: {},
  [TokenType.Equal]: {},
  [TokenType.StrictEqual]: {},
  [TokenType.LogicalNot]: { expressionStart: true, canBeUnary: true },
  [TokenType.NotEqual]: {},
  [TokenType.StrictNotEqual]: {},
  [TokenType.LessThan]: {},
  [TokenType.LessThanOrEqual]: {},
  [TokenType.ShiftLeft]: {},
  [TokenType.GreaterThan]: {},
  [TokenType.GreaterThanOrEqual]: {},
  [TokenType.ShiftRight]: {},
  [TokenType.SignedShiftRight]: {},
  [TokenType.Dot]: {},
  [TokenType.Spread]: { expressionStart: true, isPropLiteral: true },
  [TokenType.Global]: { expressionStart: true },
  [TokenType.DecimalLiteral]: { expressionStart: true, isPropLiteral: true },
  [TokenType.HexadecimalLiteral]: { expressionStart: true, isPropLiteral: true },
  [TokenType.BinaryLiteral]: { expressionStart: true, isPropLiteral: true },
  [TokenType.RealLiteral]: { expressionStart: true, isPropLiteral: true },
  [TokenType.StringLiteral]: { expressionStart: true, isPropLiteral: true },
  [TokenType.IncOp]: { expressionStart: true },
  [TokenType.DecOp]: { expressionStart: true },
  [TokenType.Infinity]: { expressionStart: true, keywordLike: true },
  [TokenType.NaN]: { expressionStart: true, keywordLike: true },
  [TokenType.True]: { expressionStart: true, keywordLike: true, isPropLiteral: true },
  [TokenType.False]: { expressionStart: true, keywordLike: true, isPropLiteral: true },
  [TokenType.Typeof]: { expressionStart: true, canBeUnary: true, keywordLike: true },
  [TokenType.Null]: { expressionStart: true, keywordLike: true },
  [TokenType.Undefined]: { expressionStart: true, keywordLike: true },
  [TokenType.In]: { keywordLike: true },
  [TokenType.Let]: { keywordLike: true },
  [TokenType.Const]: { keywordLike: true },
  [TokenType.Var]: { keywordLike: true },
  [TokenType.If]: { keywordLike: true },
  [TokenType.Else]: { keywordLike: true },
  [TokenType.Arrow]: { keywordLike: true },
  [TokenType.Return]: { keywordLike: true },
  [TokenType.Break]: { keywordLike: true },
  [TokenType.Continue]: { keywordLike: true },
  [TokenType.Do]: { keywordLike: true },
  [TokenType.While]: { keywordLike: true },
  [TokenType.For]: { keywordLike: true },
  [TokenType.Of]: { keywordLike: true },
  [TokenType.Throw]: { keywordLike: true },
  [TokenType.Try]: { keywordLike: true },
  [TokenType.Catch]: { keywordLike: true },
  [TokenType.Finally]: { keywordLike: true },
  [TokenType.Switch]: { keywordLike: true },
  [TokenType.Case]: { keywordLike: true },
  [TokenType.Default]: { keywordLike: true },
  [TokenType.Delete]: { expressionStart: true, canBeUnary: true, keywordLike: true },
  [TokenType.Function]: { keywordLike: true, expressionStart: true },
  [TokenType.As]: { keywordLike: true },
  [TokenType.From]: { keywordLike: true }
};
let lastNodeId = 0;
function createXmlUiTreeNodeId() {
  return ++lastNodeId;
}
class Parser {
  /**
   * Initializes the parser with the specified source code
   * @param source Source code to parse
   */
  constructor(source) {
    this._parseErrors = [];
    this._statementLevel = 0;
    this._lexer = new Lexer(new InputStream(source ?? ""));
  }
  /**
   * Sets the source code to parse
   * @param source Source code to parse
   */
  setSource(source) {
    this._lexer = new Lexer(new InputStream(source));
  }
  /**
   * The errors raised during the parse phase
   */
  get errors() {
    return this._parseErrors;
  }
  /**
   * Gets the current token
   */
  get current() {
    return this._lexer.peek();
  }
  /**
   * Checks if we're at the end of the expression
   */
  get isEof() {
    return this._lexer.peek().type === TokenType.Eof;
  }
  /**
   * Gets the characters remaining after parsing
   */
  getTail() {
    return this._lexer.getTail();
  }
  // ==========================================================================
  // Statement parsing
  /**
   * Parses a list of statements:
   *
   * statements
   *   : statement*
   *   ;
   *
   * statement
   *   : emptyStatement
   *   | expressionStatement
   *   | letStatement
   *   | returnStatement
   *   ;
   */
  parseStatements() {
    this._statementLevel = 0;
    const statements = [];
    while (!this.isEof) {
      const statement = this.parseStatement();
      if (!statement) return null;
      statements.push(statement);
      if (statement.type !== T_EMPTY_STATEMENT) {
        this.skipToken(TokenType.Semicolon);
      }
    }
    return statements;
  }
  /**
   * Parses a single statement
   */
  parseStatement(allowSequence = true) {
    this._statementLevel++;
    try {
      const startToken = this._lexer.peek();
      switch (startToken.type) {
        case TokenType.Semicolon:
          return this.parseEmptyStatement();
        case TokenType.Let:
          return this.parseLetStatement();
        case TokenType.Const:
          return this.parseConstStatement();
        case TokenType.Var:
          return this.parseVarStatement();
        case TokenType.LBrace:
          return this.parseBlockStatement();
        case TokenType.If:
          return this.parseIfStatement();
        case TokenType.Do:
          return this.parseDoWhileStatement();
        case TokenType.While:
          return this.parseWhileStatement();
        case TokenType.Return:
          return this.parseReturnStatement();
        case TokenType.Break:
          this._lexer.get();
          return this.createStatementNode(
            T_BREAK_STATEMENT,
            {},
            startToken,
            startToken
          );
        case TokenType.Continue:
          this._lexer.get();
          return this.createStatementNode(
            T_CONTINUE_STATEMENT,
            {},
            startToken,
            startToken
          );
        case TokenType.For:
          return this.parseForStatement();
        case TokenType.Throw:
          return this.parseThrowStatement();
        case TokenType.Try:
          return this.parseTryStatement();
        case TokenType.Switch:
          return this.parseSwitchStatement();
        case TokenType.Function:
          return this.parseFunctionDeclaration();
        default:
          if (this.isExpressionStart(startToken)) {
            return this.parseExpressionStatement(allowSequence);
          }
          this.reportError("W002", startToken, startToken.text);
          return null;
      }
    } finally {
      this._statementLevel--;
    }
  }
  /**
   * Parses an empty statement
   *
   * emptyStatement
   *   : ";"
   *   ;
   */
  parseEmptyStatement() {
    const startToken = this._lexer.get();
    return this.createStatementNode(T_EMPTY_STATEMENT, {}, startToken, startToken);
  }
  /**
   * Parses an expression statement
   *
   * expressionStatement
   *   : expression
   *   ;
   */
  parseExpressionStatement(allowSequence = true) {
    const startToken = this._lexer.peek();
    const expr = this.getExpression(allowSequence);
    return expr ? this.createStatementNode(
      T_EXPRESSION_STATEMENT,
      {
        expr
      },
      startToken,
      expr.endToken
    ) : null;
  }
  /**
   * Parses a let statement
   *
   * letStatement
   *   : "let" id ["=" expression] ("," id ["=" expression])*
   *   ;
   */
  parseLetStatement() {
    const startToken = this._lexer.get();
    let endToken = startToken;
    const decls = [];
    while (true) {
      const declStart = this._lexer.peek();
      let declarationProps = {};
      if (declStart.type === TokenType.LBrace) {
        endToken = this._lexer.ahead(1);
        const oDestr = this.parseObjectDestructure();
        if (oDestr === null) return null;
        declarationProps = {
          oDestr
        };
        endToken = oDestr.length > 0 ? oDestr[oDestr.length - 1].endToken : endToken;
      } else if (declStart.type === TokenType.LSquare) {
        endToken = this._lexer.ahead(1);
        const aDestr = this.parseArrayDestructure();
        if (aDestr === null) return null;
        declarationProps = {
          aDestr
        };
        endToken = aDestr.length > 0 ? aDestr[aDestr.length - 1].endToken : endToken;
      } else if (declStart.type === TokenType.Identifier) {
        if (declStart.text.startsWith("$")) {
          this.reportError("W031");
          return null;
        }
        endToken = this._lexer.get();
        declarationProps = {
          id: declStart.text
        };
      } else {
        this.reportError("W003");
        return null;
      }
      const initToken = this._lexer.peek();
      let expr = null;
      if (initToken.type === TokenType.Assignment) {
        this._lexer.get();
        expr = this.getExpression(false);
        if (expr === null) return null;
        declarationProps.expr = expr;
        endToken = expr.endToken;
      } else if (declarationProps.aDestr || declarationProps.oDestr) {
        this.reportError("W009", initToken);
        return null;
      }
      decls.push(
        this.createExpressionNode(
          T_VAR_DECLARATION,
          declarationProps,
          declStart,
          endToken
        )
      );
      if (this._lexer.peek().type !== TokenType.Comma) break;
      this._lexer.get();
    }
    return this.createStatementNode(
      T_LET_STATEMENT,
      {
        decls
      },
      startToken,
      endToken
    );
  }
  /**
   * Parses a const statement
   *
   * constStatement
   *   : "const" id "=" expression
   *   ;
   */
  parseConstStatement() {
    const startToken = this._lexer.get();
    let endToken = startToken;
    const decls = [];
    while (true) {
      const declStart = this._lexer.peek();
      let declarationProps = {};
      if (declStart.type === TokenType.LBrace) {
        endToken = this._lexer.ahead(1);
        const oDestr = this.parseObjectDestructure();
        if (oDestr === null) return null;
        declarationProps = {
          oDestr
        };
        endToken = oDestr.length > 0 ? oDestr[oDestr.length - 1].endToken : endToken;
      } else if (declStart.type === TokenType.LSquare) {
        endToken = this._lexer.ahead(1);
        const aDestr = this.parseArrayDestructure();
        if (aDestr === null) return null;
        declarationProps = {
          aDestr
        };
        endToken = aDestr.length > 0 ? aDestr[aDestr.length - 1].endToken : endToken;
      } else if (declStart.type === TokenType.Identifier) {
        if (declStart.text.startsWith("$")) {
          this.reportError("W031");
          return null;
        }
        endToken = this._lexer.get();
        declarationProps = {
          id: declStart.text
        };
      } else {
        this.reportError("W003");
        return null;
      }
      this.expectToken(TokenType.Assignment);
      const expr = this.getExpression(false);
      if (expr === null) return null;
      declarationProps.expr = expr;
      endToken = expr.endToken;
      decls.push(
        this.createExpressionNode(
          T_VAR_DECLARATION,
          declarationProps,
          declStart,
          endToken
        )
      );
      if (this._lexer.peek().type !== TokenType.Comma) break;
      this._lexer.get();
    }
    return this.createStatementNode(
      T_CONST_STATEMENT,
      {
        decls
      },
      startToken,
      endToken
    );
  }
  /**
   * Parses a var statement
   *
   * constStatement
   *   : "var" id "=" expression
   *   ;
   */
  parseVarStatement() {
    const startToken = this._lexer.get();
    let endToken = startToken;
    const decls = [];
    while (true) {
      const declStart = this._lexer.peek();
      let declarationProps = {};
      if (declStart.type === TokenType.Identifier) {
        if (declStart.text.startsWith("$")) {
          this.reportError("W031");
          return null;
        }
        endToken = this._lexer.get();
        declarationProps = {
          id: {
            type: T_IDENTIFIER,
            name: declStart.text,
            startToken: declStart,
            endToken
          }
        };
      } else {
        this.reportError("W003");
        return null;
      }
      this.expectToken(TokenType.Assignment);
      const expr = this.getExpression(false);
      if (expr === null) return null;
      declarationProps.expr = expr;
      endToken = expr.endToken;
      decls.push(
        this.createExpressionNode(
          T_REACTIVE_VAR_DECLARATION,
          declarationProps,
          declStart,
          endToken
        )
      );
      if (this._lexer.peek().type !== TokenType.Comma) break;
      this._lexer.get();
    }
    return this.createStatementNode(
      T_VAR_STATEMENT,
      {
        decls
      },
      startToken,
      endToken
    );
  }
  /**
   * Parses an object destructure expression
   */
  parseObjectDestructure() {
    const result = [];
    const startToken = this._lexer.get();
    let endToken = startToken;
    let nextToken = this._lexer.peek();
    while (nextToken.type === TokenType.Identifier) {
      const id = nextToken.text;
      if (id.startsWith("$")) {
        this.reportError("W031");
        return null;
      }
      let alias;
      let aDestr;
      let oDestr;
      this._lexer.get();
      nextToken = this._lexer.peek();
      if (nextToken.type === TokenType.Colon) {
        this._lexer.get();
        nextToken = this._lexer.peek();
        if (nextToken.type === TokenType.Identifier) {
          alias = nextToken.text;
          endToken = nextToken;
          this._lexer.get();
        } else if (nextToken.type === TokenType.LSquare) {
          aDestr = this.parseArrayDestructure();
          if (aDestr === null) return null;
          endToken = aDestr[aDestr.length - 1].endToken;
        } else if (nextToken.type === TokenType.LBrace) {
          oDestr = this.parseObjectDestructure();
          if (oDestr === null) return null;
          endToken = oDestr[oDestr.length - 1].endToken;
        }
      }
      nextToken = this._lexer.peek();
      if (nextToken.type === TokenType.Comma || nextToken.type === TokenType.RBrace) {
        result.push(
          this.createExpressionNode(
            T_OBJECT_DESTRUCTURE,
            { id, alias, aDestr, oDestr },
            startToken,
            endToken
          )
        );
        if (nextToken.type === TokenType.Comma) {
          this._lexer.get();
          nextToken = this._lexer.peek();
        }
      }
    }
    this.expectToken(TokenType.RBrace, "W004");
    return result;
  }
  parseArrayDestructure() {
    const result = [];
    const startToken = this._lexer.get();
    let endToken = startToken;
    do {
      let nextToken = this._lexer.peek();
      let id;
      let aDestr;
      let oDestr;
      if (nextToken.type === TokenType.Identifier) {
        id = nextToken.text;
        if (id.startsWith("$")) {
          this.reportError("W031");
          return null;
        }
        endToken = nextToken;
        nextToken = this._lexer.get();
      } else if (nextToken.type === TokenType.LSquare) {
        aDestr = this.parseArrayDestructure();
        if (aDestr === null) return null;
        endToken = aDestr[aDestr.length - 1].endToken;
      } else if (nextToken.type === TokenType.LBrace) {
        oDestr = this.parseObjectDestructure();
        if (oDestr === null) return null;
        endToken = oDestr[oDestr.length - 1].endToken;
      }
      nextToken = this._lexer.peek();
      if (nextToken.type === TokenType.Comma) {
        result.push(
          this.createExpressionNode(
            T_ARRAY_DESTRUCTURE,
            { id, aDestr, oDestr },
            startToken,
            endToken
          )
        );
        this._lexer.get();
      } else if (nextToken.type === TokenType.RSquare) {
        if (id || aDestr || oDestr) {
          result.push(
            this.createExpressionNode(
              T_ARRAY_DESTRUCTURE,
              { id, aDestr, oDestr },
              startToken,
              endToken
            )
          );
        }
        break;
      } else {
        this.reportError("W002", nextToken);
        return null;
      }
    } while (true);
    this.expectToken(TokenType.RSquare, "W005");
    return result;
  }
  /**
   * Parses a block statement
   *
   * blockStatement
   *   : "{" (statement [";"])* "}"
   *   ;
   */
  parseBlockStatement() {
    const startToken = this._lexer.get();
    const stmts = [];
    while (this._lexer.peek().type !== TokenType.RBrace) {
      const statement = this.parseStatement();
      if (!statement) return null;
      stmts.push(statement);
      if (statement.type !== T_EMPTY_STATEMENT) {
        this.skipToken(TokenType.Semicolon);
      }
    }
    const endToken = this._lexer.get();
    return this.createStatementNode(
      T_BLOCK_STATEMENT,
      { stmts },
      startToken,
      endToken
    );
  }
  /**
   * Parses an if statement
   *
   * ifStatement
   *   : "if" "(" expression ")" statement ["else" statement]
   *   ;
   */
  parseIfStatement() {
    const startToken = this._lexer.get();
    let endToken = startToken;
    this.expectToken(TokenType.LParent, "W014");
    const cond = this.getExpression();
    if (!cond) return null;
    this.expectToken(TokenType.RParent, "W006");
    const thenB = this.parseStatement();
    if (!thenB) return null;
    endToken = thenB.endToken;
    let elseCanFollow = true;
    if (thenB.type !== T_BLOCK_STATEMENT) {
      if (this._lexer.peek().type === TokenType.Semicolon) {
        this._lexer.get();
      } else {
        elseCanFollow = false;
      }
    }
    let elseB = null;
    if (elseCanFollow && this._lexer.peek().type === TokenType.Else) {
      this._lexer.get();
      elseB = this.parseStatement();
      if (!elseB) return null;
      endToken = elseB.endToken;
    }
    return this.createStatementNode(
      T_IF_STATEMENT,
      {
        cond,
        thenB,
        elseB
      },
      startToken,
      endToken
    );
  }
  /**
   * Parses a while statement
   *
   * whileStatement
   *   : "while" "(" condition ")" statement
   *   ;
   */
  parseWhileStatement() {
    const startToken = this._lexer.get();
    this.expectToken(TokenType.LParent, "W014");
    const cond = this.getExpression();
    if (!cond) return null;
    this.expectToken(TokenType.RParent, "W006");
    const body = this.parseStatement();
    if (!body) return null;
    return this.createStatementNode(
      T_WHILE_STATEMENT,
      {
        cond,
        body
      },
      startToken,
      body.endToken
    );
  }
  /**
   * Parses a do-while statement
   *
   * doWhileStatement
   *   : "do" statement "while" "(" condition ")"
   *   ;
   */
  parseDoWhileStatement() {
    const startToken = this._lexer.get();
    const body = this.parseStatement();
    if (!body) return null;
    if (body.type !== T_BLOCK_STATEMENT && body.type !== T_EMPTY_STATEMENT) {
      this.expectToken(TokenType.Semicolon);
    }
    this.expectToken(TokenType.While);
    this.expectToken(TokenType.LParent, "W014");
    const cond = this.getExpression();
    if (!cond) return null;
    const endToken = this._lexer.peek();
    this.expectToken(TokenType.RParent, "W006");
    return this.createStatementNode(
      T_DO_WHILE_STATEMENT,
      {
        cond,
        body
      },
      startToken,
      endToken
    );
  }
  /**
   * Parses an expression statement
   *
   * returnStatement
   *   : "return" expression?
   *   ;
   */
  parseReturnStatement() {
    const startToken = this._lexer.peek();
    let endToken = this._lexer.get();
    let expr;
    if (tokenTraits[this._lexer.peek().type].expressionStart) {
      expr = this.getExpression();
      if (expr === null) return null;
      endToken = expr.endToken;
    }
    return this.createStatementNode(
      T_RETURN_STATEMENT,
      {
        expr
      },
      startToken,
      endToken
    );
  }
  /**
   * forStatement
   *   : "for" "(" initStatement? ";" expression? ";" expression? ")" statement
   *   | forInOfStatement
   *   ;
   */
  parseForStatement() {
    const startToken = this._lexer.peek();
    this._lexer.get();
    this.expectToken(TokenType.LParent, "W014");
    let nextToken = this._lexer.peek();
    if (nextToken.type === TokenType.Identifier) {
      if (this._lexer.ahead(1).type === TokenType.In) {
        return this.parseForInOfStatement(startToken, "none", nextToken, T_FOR_IN_STATEMENT);
      } else if (this._lexer.ahead(1).type === TokenType.Of) {
        return this.parseForInOfStatement(startToken, "none", nextToken, T_FOR_OF_STATEMENT);
      }
    } else if (nextToken.type === TokenType.Let) {
      const idToken = this._lexer.ahead(1);
      if (idToken.type === TokenType.Identifier) {
        const inOfToken = this._lexer.ahead(2);
        if (inOfToken.type === TokenType.In) {
          return this.parseForInOfStatement(startToken, "let", idToken, T_FOR_IN_STATEMENT);
        } else if (inOfToken.type === TokenType.Of) {
          return this.parseForInOfStatement(startToken, "let", idToken, T_FOR_OF_STATEMENT);
        }
      }
    } else if (nextToken.type === TokenType.Const) {
      const idToken = this._lexer.ahead(1);
      if (idToken.type === TokenType.Identifier) {
        const inOfToken = this._lexer.ahead(2);
        if (inOfToken.type === TokenType.In) {
          return this.parseForInOfStatement(startToken, "const", idToken, T_FOR_IN_STATEMENT);
        } else if (inOfToken.type === TokenType.Of) {
          return this.parseForInOfStatement(startToken, "const", idToken, T_FOR_OF_STATEMENT);
        }
      }
    }
    let init;
    nextToken = this._lexer.peek();
    if (nextToken.type === TokenType.Semicolon) {
      this._lexer.get();
    } else if (nextToken.type === TokenType.Let) {
      const letStmt = this.parseLetStatement();
      if (letStmt === null) {
        return null;
      }
      init = letStmt;
      if (init.decls.some((d2) => !d2.expr)) {
        this.reportError("W011");
        return null;
      }
      this.expectToken(TokenType.Semicolon);
    } else if (tokenTraits[nextToken.type].expressionStart) {
      const exprStmt = this.parseExpressionStatement();
      if (exprStmt === null) {
        return null;
      }
      init = exprStmt;
      this.expectToken(TokenType.Semicolon);
    }
    let cond;
    nextToken = this._lexer.peek();
    if (nextToken.type === TokenType.Semicolon) {
      this._lexer.get();
    } else {
      cond = this.getExpression();
      if (cond === null) {
        return null;
      }
      this.expectToken(TokenType.Semicolon);
    }
    let upd;
    nextToken = this._lexer.peek();
    if (nextToken.type !== TokenType.RParent) {
      upd = this.getExpression();
      if (upd === null) {
        return null;
      }
    }
    this.expectToken(TokenType.RParent, "W006");
    const body = this.parseStatement();
    if (!body) return null;
    return this.createStatementNode(
      T_FOR_STATEMENT,
      {
        init,
        cond,
        upd,
        body
      },
      startToken,
      body.endToken
    );
  }
  /**
   * forInOfStatement
   *   : "for" "(" [ "let" | "const" ] identifier ( "in" | "of" ) expression? ")" statement
   *   | forInOfStatement
   *   ;
   *
   * @param startToken Statement start token
   * @param varB Variable binding of the for..in/of statement
   * @param id ID name
   * @param type Is it a for..in or a for..of?
   */
  parseForInOfStatement(startToken, varB, idToken, type) {
    if (varB !== "none") {
      if (idToken.text.startsWith("$")) {
        this.reportError("W031");
        return null;
      }
      this._lexer.get();
    }
    this._lexer.get();
    this._lexer.get();
    const expr = this.getExpression(true);
    this.expectToken(TokenType.RParent, "W006");
    const body = this.parseStatement();
    if (!body) return null;
    return type === T_FOR_IN_STATEMENT ? this.createStatementNode(
      T_FOR_IN_STATEMENT,
      {
        varB,
        id: {
          type: T_IDENTIFIER,
          name: idToken.text,
          startToken: idToken,
          endToken: idToken
        },
        expr,
        body
      },
      startToken,
      body.endToken
    ) : this.createStatementNode(
      T_FOR_OF_STATEMENT,
      {
        varB,
        id: {
          type: T_IDENTIFIER,
          name: idToken.text,
          startToken: idToken,
          endToken: idToken
        },
        expr,
        body
      },
      startToken,
      body.endToken
    );
  }
  /**
   * Parses a throw statement
   *
   * throwStatement
   *   : "throw" expression
   *   ;
   */
  parseThrowStatement() {
    const startToken = this._lexer.peek();
    this._lexer.get();
    let expr;
    expr = this.getExpression();
    if (expr === null) return null;
    return this.createStatementNode(
      T_THROW_STATEMENT,
      {
        expr
      },
      startToken,
      expr.endToken
    );
  }
  /**
   * Parses a try..catch..finally statement
   *
   * tryStatement
   *   : "try" blockStatement catchClause finallyClause?
   *   | "try" blockStatement catchClause? finallyClause
   *   ;
   *
   * catchClause
   *   : "catch" [ "(" identifier ") ]? blockStatement
   *   ;
   *
   * finallyClause
   *   : "finally" blockStatement
   */
  parseTryStatement() {
    const startToken = this._lexer.peek();
    let endToken = this._lexer.get();
    const parser = this;
    const tryB = getBlock();
    let catchB;
    let catchV;
    let finallyB;
    let nextToken = this._lexer.peek();
    if (nextToken.type === TokenType.Catch) {
      this._lexer.get();
      nextToken = this._lexer.peek();
      if (nextToken.type === TokenType.LParent) {
        this._lexer.get();
        nextToken = this._lexer.peek();
        if (nextToken.type !== TokenType.Identifier) {
          this.reportError("W003", nextToken);
          return null;
        }
        catchV = {
          type: T_IDENTIFIER,
          nodeId: createXmlUiTreeNodeId(),
          name: nextToken.text,
          startToken: nextToken,
          endToken: nextToken
        };
        this._lexer.get();
        this.expectToken(TokenType.RParent, "W006");
      }
      catchB = getBlock();
      endToken = catchB.endToken;
      if (this._lexer.peek().type === TokenType.Finally) {
        this._lexer.get();
        finallyB = getBlock();
        endToken = finallyB.endToken;
      }
    } else if (nextToken.type === TokenType.Finally) {
      this._lexer.get();
      finallyB = getBlock();
      endToken = finallyB.endToken;
    } else {
      this.reportError("W013", nextToken);
      return null;
    }
    return this.createStatementNode(
      T_TRY_STATEMENT,
      {
        tryB,
        catchB,
        catchV,
        finallyB
      },
      startToken,
      endToken
    );
    function getBlock() {
      const nextToken2 = parser._lexer.peek();
      if (nextToken2.type !== TokenType.LBrace) {
        parser.reportError("W012", nextToken2);
        return null;
      }
      return parser.parseBlockStatement();
    }
  }
  /**
   * Parses a switch statement
   *
   * switchStatement
   *   : "switch" "(" expression ")" "{" caseClauses "}"
   *   ;
   *
   * caseClauses
   *   : "case" expression ":" statement*
   *   | "default" ":" statement*
   *   ;
   */
  parseSwitchStatement() {
    const startToken = this._lexer.get();
    this.expectToken(TokenType.LParent, "W014");
    const expr = this.getExpression();
    if (!expr) return null;
    this.expectToken(TokenType.RParent, "W006");
    this.expectToken(TokenType.LBrace, "W012");
    const cases = [];
    let defaultCaseFound = false;
    while (true) {
      let nextToken = this._lexer.peek();
      let caseE;
      if (nextToken.type === TokenType.Case) {
        this._lexer.get();
        caseE = this.getExpression();
        if (!caseE) return null;
      } else if (nextToken.type === TokenType.Default) {
        if (defaultCaseFound) {
          this.reportError("W016");
          return null;
        }
        defaultCaseFound = true;
        this._lexer.get();
      } else if (nextToken.type === TokenType.RBrace) {
        break;
      } else {
        this.reportError("W015");
        return null;
      }
      this.expectToken(TokenType.Colon, "W008");
      let stmts = [];
      let collected = false;
      while (!collected) {
        const stmtToken = this._lexer.peek();
        switch (stmtToken.type) {
          case TokenType.Case:
          case TokenType.Default:
          case TokenType.RBrace:
            collected = true;
            break;
          default:
            const stmt = this.parseStatement();
            if (stmt === null) {
              collected = true;
              break;
            }
            stmts.push(stmt);
            if (stmt.type !== T_EMPTY_STATEMENT) {
              this.skipToken(TokenType.Semicolon);
            }
        }
      }
      cases.push(
        this.createNode(
          T_SWITCH_CASE,
          {
            caseE,
            stmts
          },
          startToken
        )
      );
    }
    const endToken = this._lexer.peek();
    this.expectToken(TokenType.RBrace, "W004");
    return this.createStatementNode(
      T_SWITCH_STATEMENT,
      {
        expr,
        cases
      },
      startToken,
      endToken
    );
  }
  /**
   * Parses a function declaration
   *
   * functionDeclaration
   *   : "function" identifier "(" [parameterList] ")" blockStatement
   *   ;
   */
  parseFunctionDeclaration(allowNoName = false) {
    const startToken = this._lexer.get();
    let functionName;
    const funcId = this._lexer.peek();
    if (allowNoName) {
      if (funcId.type !== TokenType.LParent) {
        if (funcId.type !== TokenType.Identifier) {
          this.reportError("W003", funcId);
          return null;
        }
        functionName = funcId.text;
        this._lexer.get();
      }
    } else {
      if (funcId.type !== TokenType.Identifier) {
        this.reportError("W003", funcId);
        return null;
      }
      functionName = funcId.text;
      this._lexer.get();
    }
    const nextToken = this._lexer.peek();
    if (nextToken.type !== TokenType.LParent) {
      this.reportError("W014", nextToken);
      return null;
    }
    const exprList = this.getExpression(true);
    let isValid2;
    const args = [];
    switch (exprList.type) {
      case T_NO_ARG_EXPRESSION:
        isValid2 = true;
        break;
      case T_IDENTIFIER:
        isValid2 = (exprList.parenthesized ?? 0) <= 1;
        args.push(exprList);
        break;
      case T_SEQUENCE_EXPRESSION:
        isValid2 = exprList.parenthesized === 1;
        let spreadFound = false;
        if (isValid2) {
          for (const expr of exprList.exprs) {
            if (spreadFound) {
              isValid2 = false;
              break;
            }
            switch (expr.type) {
              case T_IDENTIFIER:
                isValid2 = !expr.parenthesized;
                args.push(expr);
                break;
              case T_OBJECT_LITERAL: {
                isValid2 = !expr.parenthesized;
                if (isValid2) {
                  const des = this.convertToObjectDestructure(expr);
                  if (des) args.push(des);
                }
                break;
              }
              case T_ARRAY_LITERAL: {
                isValid2 = !expr.parenthesized;
                if (isValid2) {
                  const des = this.convertToArrayDestructure(expr);
                  if (des) args.push(des);
                }
                break;
              }
              case T_SPREAD_EXPRESSION: {
                spreadFound = true;
                if (expr.expr.type !== T_IDENTIFIER) {
                  isValid2 = false;
                  break;
                }
                args.push(expr);
                break;
              }
              default:
                isValid2 = false;
                break;
            }
          }
        }
        break;
      case T_OBJECT_LITERAL:
        isValid2 = exprList.parenthesized === 1;
        if (isValid2) {
          const des = this.convertToObjectDestructure(exprList);
          if (des) args.push(des);
        }
        break;
      case T_ARRAY_LITERAL:
        isValid2 = exprList.parenthesized === 1;
        if (isValid2) {
          const des = this.convertToArrayDestructure(exprList);
          if (des) args.push(des);
        }
        break;
      case T_SPREAD_EXPRESSION:
        if (exprList.expr.type !== T_IDENTIFIER) {
          isValid2 = false;
          break;
        }
        isValid2 = true;
        args.push(exprList);
        break;
      default:
        isValid2 = false;
    }
    if (!isValid2) {
      this.reportError("W010", startToken);
      return null;
    }
    if (this._lexer.peek().type !== TokenType.LBrace) {
      this.reportError("W012", this._lexer.peek());
      return null;
    }
    const stmt = this.parseBlockStatement();
    if (!stmt) return null;
    return this.createStatementNode(
      T_FUNCTION_DECLARATION,
      {
        id: { type: T_IDENTIFIER, name: functionName },
        args,
        stmt
      },
      startToken,
      stmt.endToken
    );
  }
  // ==========================================================================
  // Expression parsing
  /**
   * Parses an expression:
   *
   * expr
   *   : sequenceExpr
   *   ;
   */
  parseExpr(allowSequence = true) {
    return allowSequence ? this.parseSequenceExpression() : this.parseCondOrSpreadOrAsgnOrArrowExpr();
  }
  /**
   * sequenceExpr
   *   : conditionalExpr ( "," conditionalExpr )?
   */
  parseSequenceExpression() {
    const start2 = this._lexer.peek();
    let endToken = start2;
    let leftExpr = this.parseCondOrSpreadOrAsgnOrArrowExpr();
    if (!leftExpr) {
      return null;
    }
    endToken = leftExpr.endToken;
    const exprs = [];
    let loose = false;
    if (this._lexer.peek().type === TokenType.Comma) {
      exprs.push(leftExpr);
      while (this.skipToken(TokenType.Comma)) {
        if (this._lexer.peek().type === TokenType.Comma) {
          loose = true;
          endToken = this._lexer.peek();
          exprs.push(
            this.createExpressionNode(T_NO_ARG_EXPRESSION, {}, endToken, endToken)
          );
        } else {
          const nextExpr = this.parseCondOrSpreadOrAsgnOrArrowExpr();
          if (!nextExpr) {
            break;
          }
          endToken = nextExpr.endToken;
          exprs.push(nextExpr);
        }
      }
    }
    if (!exprs.length) {
      return leftExpr;
    }
    leftExpr = this.createExpressionNode(
      T_SEQUENCE_EXPRESSION,
      {
        exprs,
        loose
      },
      start2,
      endToken
    );
    if (loose) {
      leftExpr = this.convertToArrayDestructure(leftExpr);
    }
    return leftExpr;
  }
  /**
   * conditionalOrSpreadOrAsgnOrArrowExpr
   *   : nullCoalescingExpr ( "?" expr ":" expr )?
   *   | "..." nullCoalescingExpr
   *   | identifier "=" expr
   *   ;
   */
  parseCondOrSpreadOrAsgnOrArrowExpr() {
    const startToken = this._lexer.peek();
    if (startToken.type === TokenType.Spread) {
      this._lexer.get();
      const spreadOperand = this.parseNullCoalescingExpr();
      return spreadOperand ? this.createExpressionNode(
        T_SPREAD_EXPRESSION,
        {
          expr: spreadOperand
        },
        startToken,
        spreadOperand.endToken
      ) : null;
    }
    if (startToken.type === TokenType.Function) {
      const funcDecl = this.parseFunctionDeclaration(true);
      return funcDecl ? this.createExpressionNode(
        T_ARROW_EXPRESSION,
        {
          name: funcDecl.id.name,
          args: funcDecl.args,
          statement: funcDecl.stmt
        },
        startToken,
        funcDecl.endToken
      ) : null;
    }
    const otherExpr = this.parseNullCoalescingExpr();
    if (!otherExpr) {
      return null;
    }
    const nextToken = this._lexer.peek();
    if (nextToken.type === TokenType.Arrow) {
      return this.parseArrowExpression(startToken, otherExpr);
    }
    if (nextToken.type === TokenType.QuestionMark) {
      this._lexer.get();
      const trueExpr = this.getExpression(false);
      this.expectToken(TokenType.Colon);
      const falseExpr = this.getExpression(false);
      return this.createExpressionNode(
        T_CONDITIONAL_EXPRESSION,
        {
          cond: otherExpr,
          thenE: trueExpr,
          elseE: falseExpr
        },
        startToken,
        falseExpr.endToken
      );
    }
    if (tokenTraits[nextToken.type].isAssignment) {
      this._lexer.get();
      const expr = this.getExpression();
      return expr ? this.createExpressionNode(
        T_ASSIGNMENT_EXPRESSION,
        {
          leftValue: otherExpr,
          op: nextToken.text,
          expr
        },
        startToken,
        expr.endToken
      ) : null;
    }
    return otherExpr;
  }
  /**
   * Parses an arrow expression
   * @param start Start token
   * @param left Expression to the left from the arrow
   */
  parseArrowExpression(start2, left) {
    let isValid2;
    const args = [];
    switch (left.type) {
      case T_NO_ARG_EXPRESSION:
        isValid2 = true;
        break;
      case T_IDENTIFIER:
        isValid2 = (left.parenthesized ?? 0) <= 1;
        args.push(left);
        break;
      case T_SEQUENCE_EXPRESSION:
        isValid2 = left.parenthesized === 1;
        let spreadFound = false;
        if (isValid2) {
          for (const expr of left.exprs) {
            if (spreadFound) {
              isValid2 = false;
              break;
            }
            switch (expr.type) {
              case T_IDENTIFIER:
                isValid2 = !expr.parenthesized;
                args.push(expr);
                break;
              case T_OBJECT_LITERAL: {
                isValid2 = !expr.parenthesized;
                if (isValid2) {
                  const des = this.convertToObjectDestructure(expr);
                  if (des) args.push(des);
                }
                break;
              }
              case T_ARRAY_LITERAL: {
                isValid2 = !expr.parenthesized;
                if (isValid2) {
                  const des = this.convertToArrayDestructure(expr);
                  if (des) args.push(des);
                }
                break;
              }
              case T_SPREAD_EXPRESSION: {
                spreadFound = true;
                if (expr.expr.type !== T_IDENTIFIER) {
                  isValid2 = false;
                  break;
                }
                args.push(expr);
                break;
              }
              default:
                isValid2 = false;
                break;
            }
          }
        }
        break;
      case T_OBJECT_LITERAL:
        isValid2 = left.parenthesized === 1;
        if (isValid2) {
          const des = this.convertToObjectDestructure(left);
          if (des) args.push(des);
        }
        break;
      case T_ARRAY_LITERAL:
        isValid2 = left.parenthesized === 1;
        if (isValid2) {
          const des = this.convertToArrayDestructure(left);
          if (des) args.push(des);
        }
        break;
      case T_SPREAD_EXPRESSION:
        isValid2 = left.expr.type === T_IDENTIFIER;
        if (isValid2) {
          args.push(left);
        }
        break;
      default:
        isValid2 = false;
    }
    if (!isValid2) {
      this.reportError("W010", start2);
      return null;
    }
    this._lexer.get();
    const statement = this.parseStatement(false);
    return statement ? this.createExpressionNode(
      T_ARROW_EXPRESSION,
      {
        args,
        statement
      },
      start2,
      statement.endToken
    ) : null;
  }
  /**
   * nullCoalescingExpr
   *   : logicalOrExpr ( "??" logicalOrExpr )?
   *   ;
   */
  parseNullCoalescingExpr() {
    const startToken = this._lexer.peek();
    let leftExpr = this.parseLogicalOrExpr();
    if (!leftExpr) {
      return null;
    }
    while (this.skipToken(TokenType.NullCoalesce)) {
      const rightExpr = this.parseLogicalOrExpr();
      if (!rightExpr) {
        this.reportError("W001");
        return null;
      }
      let endToken = rightExpr.endToken;
      leftExpr = this.createExpressionNode(
        T_BINARY_EXPRESSION,
        {
          op: "??",
          left: leftExpr,
          right: rightExpr
        },
        startToken,
        endToken
      );
    }
    return leftExpr;
  }
  /**
   * logicalOrExpr
   *   : logicalAndExpr ( "||" logicalAndExpr )?
   *   ;
   */
  parseLogicalOrExpr() {
    const startToken = this._lexer.peek();
    let leftExpr = this.parseLogicalAndExpr();
    if (!leftExpr) {
      return null;
    }
    while (this.skipToken(TokenType.LogicalOr)) {
      const rightExpr = this.parseLogicalAndExpr();
      if (!rightExpr) {
        this.reportError("W001");
        return null;
      }
      let endToken = rightExpr.endToken;
      leftExpr = this.createExpressionNode(
        T_BINARY_EXPRESSION,
        {
          op: "||",
          left: leftExpr,
          right: rightExpr
        },
        startToken,
        endToken
      );
    }
    return leftExpr;
  }
  /**
   * logicalAndExpr
   *   : bitwiseOrExpr ( "&&" bitwiseOrExpr )?
   *   ;
   */
  parseLogicalAndExpr() {
    const startToken = this._lexer.peek();
    let leftExpr = this.parseBitwiseOrExpr();
    if (!leftExpr) {
      return null;
    }
    while (this.skipToken(TokenType.LogicalAnd)) {
      const rightExpr = this.parseBitwiseOrExpr();
      if (!rightExpr) {
        this.reportError("W001");
        return null;
      }
      let endToken = rightExpr.endToken;
      leftExpr = this.createExpressionNode(
        T_BINARY_EXPRESSION,
        {
          op: "&&",
          left: leftExpr,
          right: rightExpr
        },
        startToken,
        endToken
      );
    }
    return leftExpr;
  }
  /**
   * bitwiseOrExpr
   *   : bitwiseXorExpr ( "|" bitwiseXorExpr )?
   *   ;
   */
  parseBitwiseOrExpr() {
    const startToken = this._lexer.peek();
    let leftExpr = this.parseBitwiseXorExpr();
    if (!leftExpr) {
      return null;
    }
    while (this.skipToken(TokenType.BitwiseOr)) {
      const rightExpr = this.parseBitwiseXorExpr();
      if (!rightExpr) {
        this.reportError("W001");
        return null;
      }
      let endToken = rightExpr.endToken;
      leftExpr = this.createExpressionNode(
        T_BINARY_EXPRESSION,
        {
          op: "|",
          left: leftExpr,
          right: rightExpr
        },
        startToken,
        endToken
      );
    }
    return leftExpr;
  }
  /**
   * bitwiseXorExpr
   *   : bitwiseAndExpr ( "^" bitwiseAndExpr )?
   *   ;
   */
  parseBitwiseXorExpr() {
    const startToken = this._lexer.peek();
    let leftExpr = this.parseBitwiseAndExpr();
    if (!leftExpr) {
      return null;
    }
    while (this.skipToken(TokenType.BitwiseXor)) {
      const rightExpr = this.parseBitwiseAndExpr();
      if (!rightExpr) {
        this.reportError("W001");
        return null;
      }
      let endToken = rightExpr.endToken;
      leftExpr = this.createExpressionNode(
        T_BINARY_EXPRESSION,
        {
          op: "^",
          left: leftExpr,
          right: rightExpr
        },
        startToken,
        endToken
      );
    }
    return leftExpr;
  }
  /**
   * bitwiseAndExpr
   *   : equExpr ( "&" equExpr )?
   *   ;
   */
  parseBitwiseAndExpr() {
    const startToken = this._lexer.peek();
    let leftExpr = this.parseEquExpr();
    if (!leftExpr) {
      return null;
    }
    while (this.skipToken(TokenType.BitwiseAnd)) {
      const rightExpr = this.parseEquExpr();
      if (!rightExpr) {
        this.reportError("W001");
        return null;
      }
      let endToken = rightExpr.endToken;
      leftExpr = this.createExpressionNode(
        T_BINARY_EXPRESSION,
        {
          op: "&",
          left: leftExpr,
          right: rightExpr
        },
        startToken,
        endToken
      );
    }
    return leftExpr;
  }
  /**
   * equExpr
   *   : relOrInExpr ( ( "==" | "!=" | "===" | "!==" ) relOrInExpr )?
   *   ;
   */
  parseEquExpr() {
    const startToken = this._lexer.peek();
    let leftExpr = this.parseRelOrInExpr();
    if (!leftExpr) {
      return null;
    }
    let opType;
    while (opType = this.skipTokens(
      TokenType.Equal,
      TokenType.StrictEqual,
      TokenType.NotEqual,
      TokenType.StrictNotEqual
    )) {
      const rightExpr = this.parseRelOrInExpr();
      if (!rightExpr) {
        this.reportError("W001");
        return null;
      }
      let endToken = rightExpr.endToken;
      leftExpr = this.createExpressionNode(
        T_BINARY_EXPRESSION,
        {
          op: opType.text,
          left: leftExpr,
          right: rightExpr
        },
        startToken,
        endToken
      );
    }
    return leftExpr;
  }
  /**
   * relOrInExpr
   *   : shiftExpr ( ( "<" | "<=" | ">" | ">=", "in" ) shiftExpr )?
   *   ;
   */
  parseRelOrInExpr() {
    const startToken = this._lexer.peek();
    let leftExpr = this.parseShiftExpr();
    if (!leftExpr) {
      return null;
    }
    let opType;
    while (opType = this.skipTokens(
      TokenType.LessThan,
      TokenType.LessThanOrEqual,
      TokenType.GreaterThan,
      TokenType.GreaterThanOrEqual,
      TokenType.In
    )) {
      const rightExpr = this.parseShiftExpr();
      if (!rightExpr) {
        this.reportError("W001");
        return null;
      }
      let endToken = rightExpr.endToken;
      leftExpr = this.createExpressionNode(
        T_BINARY_EXPRESSION,
        {
          op: opType.text,
          left: leftExpr,
          right: rightExpr
        },
        startToken,
        endToken
      );
    }
    return leftExpr;
  }
  /**
   * shiftExpr
   *   : addExpr ( ( "<<" | ">>" | ">>>" ) addExpr )?
   *   ;
   */
  parseShiftExpr() {
    const startToken = this._lexer.peek();
    let leftExpr = this.parseAddExpr();
    if (!leftExpr) {
      return null;
    }
    let opType;
    while (opType = this.skipTokens(
      TokenType.ShiftLeft,
      TokenType.ShiftRight,
      TokenType.SignedShiftRight
    )) {
      const rightExpr = this.parseAddExpr();
      if (!rightExpr) {
        this.reportError("W001");
        return null;
      }
      let endToken = rightExpr.endToken;
      leftExpr = this.createExpressionNode(
        T_BINARY_EXPRESSION,
        {
          op: opType.text,
          left: leftExpr,
          right: rightExpr
        },
        startToken,
        endToken
      );
    }
    return leftExpr;
  }
  /**
   * addExpr
   *   : multExpr ( ( "+" | "-" ) multExpr )?
   *   ;
   */
  parseAddExpr() {
    const startToken = this._lexer.peek();
    let leftExpr = this.parseMultExpr();
    if (!leftExpr) {
      return null;
    }
    let opType;
    while (opType = this.skipTokens(TokenType.Plus, TokenType.Minus)) {
      const rightExpr = this.parseMultExpr();
      if (!rightExpr) {
        this.reportError("W001");
        return null;
      }
      let endToken = rightExpr.endToken;
      leftExpr = this.createExpressionNode(
        T_BINARY_EXPRESSION,
        {
          op: opType.text,
          left: leftExpr,
          right: rightExpr
        },
        startToken,
        endToken
      );
    }
    return leftExpr;
  }
  /**
   * multExpr
   *   : exponentialExpr ( ( "*" | "/" | "%") exponentialExpr )?
   *   ;
   */
  parseMultExpr() {
    const startToken = this._lexer.peek();
    let leftExpr = this.parseExponentialExpr();
    if (!leftExpr) {
      return null;
    }
    let opType;
    while (opType = this.skipTokens(TokenType.Multiply, TokenType.Divide, TokenType.Remainder)) {
      const rightExpr = this.parseExponentialExpr();
      if (!rightExpr) {
        this.reportError("W001");
        return null;
      }
      let endToken = rightExpr.endToken;
      leftExpr = this.createExpressionNode(
        T_BINARY_EXPRESSION,
        {
          op: opType.text,
          left: leftExpr,
          right: rightExpr
        },
        startToken,
        endToken
      );
    }
    return leftExpr;
  }
  /**
   * exponentialExpr
   *   : unaryExpr ( "**" unaryExpr )?
   *   ;
   */
  parseExponentialExpr() {
    const startToken = this._lexer.peek();
    let leftExpr = this.parseUnaryOrPrefixExpr();
    if (!leftExpr) {
      return null;
    }
    let opType;
    let count = 0;
    while (opType = this.skipToken(TokenType.Exponent)) {
      let rightExpr = this.parseUnaryOrPrefixExpr();
      if (!rightExpr) {
        this.reportError("W001");
        return null;
      }
      let endToken = rightExpr.endToken;
      if (count === 0) {
        leftExpr = this.createExpressionNode(
          T_BINARY_EXPRESSION,
          {
            op: opType.text,
            left: leftExpr,
            right: rightExpr
          },
          startToken,
          endToken
        );
      } else {
        const prevLeft = leftExpr;
        leftExpr = this.createExpressionNode(
          T_BINARY_EXPRESSION,
          {
            op: opType.text,
            left: prevLeft.left,
            right: {
              type: T_BINARY_EXPRESSION,
              op: opType.text,
              left: prevLeft.right,
              right: rightExpr
            }
          },
          startToken,
          endToken
        );
      }
      count++;
    }
    return leftExpr;
  }
  /**
   * unaryExpr
   *   : ( "typeof" | "delete" | "+" | "-" | "~" | "!" ) memberOrInvocationExpr
   *   | memberOrInvocationExpr
   *   ;
   */
  parseUnaryOrPrefixExpr() {
    const startToken = this._lexer.peek();
    if (tokenTraits[startToken.type].canBeUnary) {
      this._lexer.get();
      const unaryOperand = this.parseUnaryOrPrefixExpr();
      if (!unaryOperand) {
        return null;
      }
      return this.createExpressionNode(
        T_UNARY_EXPRESSION,
        {
          op: startToken.text,
          expr: unaryOperand
        },
        startToken,
        unaryOperand.endToken
      );
    }
    if (startToken.type === TokenType.IncOp || startToken.type === TokenType.DecOp) {
      this._lexer.get();
      const prefixOperand = this.parseMemberOrInvocationExpr();
      if (!prefixOperand) {
        return null;
      }
      return this.createExpressionNode(
        T_PREFIX_OP_EXPRESSION,
        {
          op: startToken.text,
          expr: prefixOperand
        },
        startToken,
        prefixOperand.endToken
      );
    }
    return this.parseMemberOrInvocationExpr();
  }
  /**
   * memberOrInvocationExpr
   *   : primaryExpr "(" functionArgs ")"
   *   | primaryExpr "." identifier
   *   | primaryExpr "?." identifier
   *   | primaryExpr "[" expr "]"
   *   ;
   */
  parseMemberOrInvocationExpr() {
    const startToken = this._lexer.peek();
    let primary = this.parsePrimaryExpr();
    if (!primary) {
      return null;
    }
    let exitLoop = false;
    do {
      const currentStart = this._lexer.peek();
      switch (currentStart.type) {
        case TokenType.LParent: {
          this._lexer.get();
          let args = [];
          if (this._lexer.peek().type !== TokenType.RParent) {
            const expr = this.parseExpr();
            if (!expr) {
              this.reportError("W001");
              return null;
            }
            args = expr.type === T_SEQUENCE_EXPRESSION ? expr.exprs : [expr];
          }
          const endToken2 = this._lexer.peek();
          this.expectToken(TokenType.RParent, "W006");
          primary = this.createExpressionNode(
            T_FUNCTION_INVOCATION_EXPRESSION,
            {
              obj: primary,
              arguments: args
            },
            startToken,
            endToken2
          );
          break;
        }
        case TokenType.Dot:
        case TokenType.OptionalChaining:
          this._lexer.get();
          const member = this._lexer.get();
          const memberTrait = tokenTraits[member.type];
          if (!memberTrait.keywordLike) {
            this.reportError("W003");
            return null;
          }
          primary = this.createExpressionNode(
            T_MEMBER_ACCESS_EXPRESSION,
            {
              obj: primary,
              member: member.text,
              opt: currentStart.type === TokenType.OptionalChaining
            },
            startToken,
            member
          );
          break;
        case TokenType.LSquare:
          this._lexer.get();
          const memberExpr = this.getExpression();
          if (!memberExpr) {
            return null;
          }
          const endToken = this._lexer.peek();
          this.expectToken(TokenType.RSquare, "W005");
          primary = this.createExpressionNode(
            T_CALCULATED_MEMBER_ACCESS_EXPRESSION,
            {
              obj: primary,
              member: memberExpr
            },
            startToken,
            endToken
          );
          break;
        default:
          exitLoop = true;
          break;
      }
    } while (!exitLoop);
    const nextToken = this._lexer.peek();
    if (nextToken.type === TokenType.IncOp || nextToken.type === TokenType.DecOp) {
      this._lexer.get();
      return this.createExpressionNode(
        T_POSTFIX_OP_EXPRESSION,
        {
          op: nextToken.text,
          expr: primary
        },
        startToken,
        nextToken
      );
    }
    return primary;
  }
  /**
   * primaryExpr
   *   : literal
   *   | identifier
   *   | "::" identifier
   *   | "$item"
   *   | "(" expr ")"
   *   ;
   */
  parsePrimaryExpr() {
    const start2 = this._lexer.peek();
    switch (start2.type) {
      case TokenType.LParent:
        this._lexer.get();
        if (this._lexer.peek().type === TokenType.RParent) {
          const endToken2 = this._lexer.get();
          return this.createExpressionNode(
            T_NO_ARG_EXPRESSION,
            {},
            start2,
            endToken2
          );
        }
        let parenthesizedExpr = this.parseExpr();
        if (!parenthesizedExpr) {
          return null;
        }
        const endToken = this._lexer.peek();
        this.expectToken(TokenType.RParent, "W006");
        return {
          ...parenthesizedExpr,
          parenthesized: (parenthesizedExpr.parenthesized ?? 0) + 1,
          startToken: start2,
          endToken
        };
      case TokenType.Identifier: {
        const idToken = this._lexer.get();
        return this.createExpressionNode(
          T_IDENTIFIER,
          {
            name: idToken.text
          },
          idToken,
          idToken
        );
      }
      case TokenType.Global: {
        this._lexer.get();
        const idToken = this._lexer.get();
        if (idToken.type !== TokenType.Identifier) {
          this.reportError("W003");
          return null;
        }
        return this.createExpressionNode(
          T_IDENTIFIER,
          {
            name: idToken.text,
            isGlobal: true
          },
          idToken,
          idToken
        );
      }
      case TokenType.Backtick:
        return this.parseTemplateLiteral();
      case TokenType.False:
      case TokenType.True:
        this._lexer.get();
        return this.createExpressionNode(
          T_LITERAL,
          {
            value: start2.type === TokenType.True
          },
          start2,
          start2
        );
      case TokenType.BinaryLiteral:
        this._lexer.get();
        return this.parseBinaryLiteral(start2);
      case TokenType.DecimalLiteral:
        this._lexer.get();
        return this.parseDecimalLiteral(start2);
      case TokenType.HexadecimalLiteral:
        this._lexer.get();
        return this.parseHexadecimalLiteral(start2);
      case TokenType.RealLiteral:
        this._lexer.get();
        return this.parseRealLiteral(start2);
      case TokenType.StringLiteral:
        this._lexer.get();
        return this.parseStringLiteral(start2);
      case TokenType.Infinity:
        this._lexer.get();
        return this.createExpressionNode(
          T_LITERAL,
          {
            value: Infinity
          },
          start2,
          start2
        );
      case TokenType.NaN:
        this._lexer.get();
        return this.createExpressionNode(
          T_LITERAL,
          {
            value: NaN
          },
          start2,
          start2
        );
      case TokenType.Null:
        this._lexer.get();
        return this.createExpressionNode(
          T_LITERAL,
          {
            value: null
          },
          start2,
          start2
        );
      case TokenType.Undefined:
        this._lexer.get();
        return this.createExpressionNode(
          T_LITERAL,
          {
            value: void 0
          },
          start2,
          start2
        );
      case TokenType.LSquare:
        return this.parseArrayLiteral();
      case TokenType.LBrace:
        return this.parseObjectLiteral();
      case TokenType.Divide:
        return this.parseRegExpLiteral();
    }
    return null;
  }
  parseTemplateLiteral() {
    const startToken = this._lexer.get();
    this._lexer.setStartingPhaseToTemplateLiteral();
    const segments = [];
    loop: while (true) {
      let nextToken = this._lexer.peek();
      switch (nextToken.type) {
        case TokenType.StringLiteral:
          this._lexer.get();
          const str = this.parseStringLiteral(nextToken, false);
          segments.push(str);
          break;
        case TokenType.DollarLBrace:
          this._lexer.get();
          const innerExpr = this.parseExpr();
          segments.push(innerExpr);
          this.expectToken(TokenType.RBrace, "W004");
          this._lexer.setStartingPhaseToTemplateLiteral();
          break;
        case TokenType.Backtick:
          break loop;
        default:
          this.reportError("W004");
      }
    }
    const endToken = this._lexer.get();
    return this.createExpressionNode(
      T_TEMPLATE_LITERAL_EXPRESSION,
      { segments },
      startToken,
      endToken
    );
  }
  /**
   * Parses an array literal
   */
  parseArrayLiteral() {
    const start2 = this._lexer.get();
    let expressions = [];
    if (this._lexer.peek().type !== TokenType.RSquare) {
      const expr = this.getExpression();
      if (expr) {
        expressions = expr.type === T_SEQUENCE_EXPRESSION ? expr.exprs : [expr];
      }
    }
    const endToken = this._lexer.peek();
    this.expectToken(TokenType.RSquare);
    return this.createExpressionNode(
      T_ARRAY_LITERAL,
      {
        items: expressions
      },
      start2,
      endToken
    );
  }
  /**
   * Parses an object literal
   */
  parseObjectLiteral() {
    const start2 = this._lexer.get();
    let props = [];
    if (this._lexer.peek().type !== TokenType.RBrace) {
      while (this._lexer.peek().type !== TokenType.RBrace) {
        const nextToken = this._lexer.peek();
        const traits = tokenTraits[nextToken.type];
        let nameExpr;
        if (traits.expressionStart) {
          if (nextToken.type === TokenType.LSquare) {
            this._lexer.get();
            nameExpr = this.getExpression();
            if (!nameExpr) {
              return null;
            }
            this.expectToken(TokenType.RSquare, "W005");
            nameExpr = this.createExpressionNode(
              T_SEQUENCE_EXPRESSION,
              {
                exprs: [nameExpr]
              },
              start2
            );
          } else if (traits.isPropLiteral) {
            nameExpr = this.getExpression(false);
            if (!nameExpr) {
              return null;
            }
            if (nameExpr.type !== T_IDENTIFIER && nameExpr.type !== T_LITERAL && nameExpr.type !== T_SPREAD_EXPRESSION) {
              this.reportError("W007");
              return null;
            }
          } else {
            this.reportError("W007");
            return null;
          }
        } else if (traits.keywordLike) {
          nameExpr = {
            type: T_IDENTIFIER,
            nodeId: createXmlUiTreeNodeId(),
            name: nextToken.text,
            startToken: nextToken,
            endToken: nextToken
          };
          this._lexer.get();
        } else {
          this.reportError("W001");
          return null;
        }
        const nameType = nameExpr.type;
        if (nameType === T_SPREAD_EXPRESSION) {
          props.push(nameExpr);
        } else {
          if (nameType === T_LITERAL) {
            const val = nameExpr.value;
            if (typeof val !== "number" && typeof val !== "string") {
              this.expectToken(TokenType.RBrace, "W007");
              return null;
            }
          }
          let valueExpr = null;
          if (nameType === T_IDENTIFIER) {
            const nameFollowerToken = this._lexer.peek();
            if (nameFollowerToken.type === TokenType.Comma || nameFollowerToken.type === TokenType.RBrace) {
              valueExpr = { ...nameExpr };
            }
          }
          if (!valueExpr) {
            this.expectToken(TokenType.Colon, "W008");
            valueExpr = this.getExpression(false);
            if (!valueExpr) {
              return null;
            }
          }
          props.push([nameExpr, valueExpr]);
        }
        const next = this._lexer.peek().type;
        if (next === TokenType.Comma) {
          this._lexer.get();
        } else {
          if (next !== TokenType.RBrace) {
            break;
          }
        }
      }
    }
    const endToken = this._lexer.peek();
    this.expectToken(TokenType.RBrace, "W004");
    return this.createExpressionNode(
      T_OBJECT_LITERAL,
      {
        props
      },
      start2,
      endToken
    );
  }
  parseRegExpLiteral() {
    const startToken = this._lexer.peek();
    const result = this._lexer.getRegEx();
    if (result.success) {
      return this.createExpressionNode(
        T_LITERAL,
        {
          value: new RegExp(result.pattern, result.flags)
        },
        startToken,
        this._lexer.peek()
      );
    }
    this.reportError("W002", startToken, result.pattern ?? "");
    return null;
  }
  /**
   * Gets an expression
   */
  getExpression(allowSequence = true) {
    const expr = this.parseExpr(allowSequence);
    if (expr) {
      return expr;
    }
    this.reportError("W001");
    return null;
  }
  // ==========================================================================
  // Helpers
  /**
   * Tests the type of the next token
   * @param type Expected token type
   * @param errorCode Error to raise if the next token is not expected
   * @param allowEof Allow an EOF instead of the expected token?
   */
  expectToken(type, errorCode, allowEof) {
    const next = this._lexer.peek();
    if (next.type === type || allowEof && next.type === TokenType.Eof) {
      return this._lexer.get();
    }
    this.reportError(errorCode ?? "W002", next, next.text);
    return null;
  }
  /**
   * Skips the next token if the type is the specified one
   * @param type Token type to check
   */
  skipToken(type) {
    const next = this._lexer.peek();
    if (next.type === type) {
      this._lexer.get();
      return next;
    }
    return null;
  }
  /**
   * Skips the next token if the type is the specified one
   * @param types Token types to check
   */
  skipTokens(...types) {
    const next = this._lexer.peek();
    for (const type of types) {
      if (next.type === type) {
        this._lexer.get();
        return next;
      }
    }
    return null;
  }
  /**
   * Reports the specified error
   * @param errorCode Error code
   * @param token Token that represents the error's position
   * @param options Error message options
   */
  reportError(errorCode, token, ...options2) {
    let errorText = errorMessages$1[errorCode] ?? "Unkonwn error";
    if (options2) {
      options2.forEach(
        (o, idx) => errorText = replace(errorText, `{${idx}}`, options2[idx].toString())
      );
    }
    if (!token) {
      token = this._lexer.peek();
    }
    this._parseErrors.push({
      code: errorCode,
      text: errorText,
      line: token.startLine,
      column: token.startColumn
    });
    throw new ParserError$1(errorText, errorCode);
    function replace(input2, placeholder2, replacement) {
      do {
        input2 = input2.replace(placeholder2, replacement);
      } while (input2.includes(placeholder2));
      return input2;
    }
  }
  /**
   * Creates an expression node
   * @param type Expression type
   * @param stump Stump properties
   * @param startToken The token that starts the expression
   * @param endToken The token that ends the expression
   * @param source Expression source code to store to the node
   */
  createNode(type, stump, startToken, endToken) {
    if (!endToken) {
      endToken = this._lexer.peek();
    }
    return Object.assign({}, stump, {
      type,
      startToken,
      endToken
    });
  }
  /**
   * Creates an expression node
   * @param type Expression type
   * @param stump Stump properties
   * @param startToken The token that starts the expression
   * @param endToken The token that ends the expression
   * @param source Expression source code to store to the node
   */
  createExpressionNode(type, stump = {}, startToken, endToken) {
    if (!endToken) {
      endToken = this._lexer.peek();
    }
    if (!startToken) {
      startToken = endToken;
    }
    return Object.assign({}, stump, {
      type,
      nodeId: createXmlUiTreeNodeId(),
      startToken,
      endToken
    });
  }
  /**
   * Creates a statement node
   * @param type Statement type
   * @param stump Stump properties
   * @param startToken The token that starts the statement
   * @param endToken The token that ends the statement
   */
  createStatementNode(type, stump, startToken, endToken) {
    return Object.assign({}, stump, {
      type,
      nodeId: createXmlUiTreeNodeId(),
      startToken,
      endToken
    });
  }
  /**
   * Parses a binary literal
   * @param token Literal token
   */
  parseBinaryLiteral(token) {
    let value;
    const bigValue = BigInt(token.text.replace(/[_']/g, ""));
    if (bigValue < Number.MIN_SAFE_INTEGER || bigValue > Number.MAX_SAFE_INTEGER) {
      value = bigValue;
    } else {
      value = parseInt(token.text.substring(2).replace(/[_']/g, ""), 2);
    }
    return this.createExpressionNode(
      T_LITERAL,
      {
        value
      },
      token,
      token
    );
  }
  /**
   * Parses a decimal literal
   * @param token Literal token
   */
  parseDecimalLiteral(token) {
    let value;
    const bigValue = BigInt(token.text.replace(/[_']/g, ""));
    if (bigValue < Number.MIN_SAFE_INTEGER || bigValue > Number.MAX_SAFE_INTEGER) {
      value = bigValue;
    } else {
      value = parseInt(token.text.replace(/[_']/g, ""), 10);
    }
    return this.createExpressionNode(
      T_LITERAL,
      {
        value
      },
      token,
      token
    );
  }
  /**
   * Parses a hexadecimal literal
   * @param token Literal token
   */
  parseHexadecimalLiteral(token) {
    let value;
    const bigValue = BigInt(token.text.replace(/[_']/g, ""));
    if (bigValue < Number.MIN_SAFE_INTEGER || bigValue > Number.MAX_SAFE_INTEGER) {
      value = bigValue;
    } else {
      value = parseInt(token.text.substring(2).replace(/[_']/g, ""), 16);
    }
    return this.createExpressionNode(
      T_LITERAL,
      {
        value
      },
      token,
      token
    );
  }
  /**
   * Parses a real literal
   * @param token Literal token
   */
  parseRealLiteral(token) {
    let value = parseFloat(token.text.replace(/[_']/g, ""));
    return this.createExpressionNode(
      T_LITERAL,
      {
        value
      },
      token,
      token
    );
  }
  /**
   * Converts a string token to intrinsic string
   * @param token Literal token
   */
  parseStringLiteral(token, quoteSurrounded = true) {
    let input2 = token.text;
    if (quoteSurrounded) {
      input2 = token.text.length < 2 ? "" : input2.substring(1, input2.length - 1);
    }
    let result = "";
    let state = 0;
    let collect = 0;
    for (const ch of input2) {
      switch (state) {
        case 0:
          if (ch === "\\") {
            state = 1;
          } else {
            result += ch;
          }
          break;
        case 1:
          state = 0;
          switch (ch) {
            case "b":
              result += "\b";
              break;
            case "f":
              result += "\f";
              break;
            case "n":
              result += "\n";
              break;
            case "r":
              result += "\r";
              break;
            case "t":
              result += "	";
              break;
            case "v":
              result += "\v";
              break;
            case "S":
              result += " ";
              break;
            case "0":
              result += String.fromCharCode(0);
              break;
            case "'":
              result += "'";
              break;
            case '"':
              result += '"';
              break;
            case "\\":
              result += "\\";
              break;
            case "x":
              state = 2;
              break;
            case "u":
              state = 4;
              break;
            default:
              result += ch;
              break;
          }
          break;
        case 2:
          if (isHexaDecimal(ch)) {
            collect = parseInt(ch, 16);
            state = 3;
          } else {
            result += "x";
            state = 0;
          }
          break;
        case 3:
          if (isHexaDecimal(ch)) {
            collect = collect * 16 + parseInt(ch, 16);
            result += String.fromCharCode(collect);
            state = 0;
          } else {
            result += String.fromCharCode(collect);
            result += ch;
            state = 0;
          }
          break;
        case 4:
          if (ch === "{") {
            state = 8;
            break;
          }
          if (isHexaDecimal(ch)) {
            collect = parseInt(ch, 16);
            state = 5;
          } else {
            result += "x";
            state = 0;
          }
          break;
        case 5:
          if (isHexaDecimal(ch)) {
            collect = collect * 16 + parseInt(ch, 16);
            state = 6;
          } else {
            result += String.fromCharCode(collect);
            result += ch;
            state = 0;
          }
          break;
        case 6:
          if (isHexaDecimal(ch)) {
            collect = collect * 16 + parseInt(ch, 16);
            state = 7;
          } else {
            result += String.fromCharCode(collect);
            result += ch;
            state = 0;
          }
          break;
        case 7:
          if (isHexaDecimal(ch)) {
            collect = collect * 16 + parseInt(ch, 16);
            result += String.fromCharCode(collect);
            state = 0;
          } else {
            result += String.fromCharCode(collect);
            result += ch;
            state = 0;
          }
          break;
        case 8:
          if (isHexaDecimal(ch)) {
            collect = parseInt(ch, 16);
            state = 9;
          } else {
            result += "x";
            state = 0;
          }
          break;
        case 9:
          if (isHexaDecimal(ch)) {
            collect = collect * 16 + parseInt(ch, 16);
            state = 10;
          } else {
            result += String.fromCharCode(collect);
            result += ch;
            state = 0;
          }
          break;
        case 10:
          if (isHexaDecimal(ch)) {
            collect = collect * 16 + parseInt(ch, 16);
            state = 11;
          } else {
            result += String.fromCharCode(collect);
            result += ch;
            state = 0;
          }
          break;
        case 11:
          if (isHexaDecimal(ch)) {
            collect = collect * 16 + parseInt(ch, 16);
            state = 12;
          } else {
            result += String.fromCharCode(collect);
            result += ch;
            state = 0;
          }
          break;
        case 12:
          if (isHexaDecimal(ch)) {
            collect = collect * 16 + parseInt(ch, 16);
            state = 13;
          } else {
            result += String.fromCharCode(collect);
            result += ch;
            state = 0;
          }
          break;
        case 13:
          if (isHexaDecimal(ch)) {
            collect = collect * 16 + parseInt(ch, 16);
            state = 14;
          } else {
            result += String.fromCharCode(collect);
            result += ch;
            state = 0;
          }
          break;
        case 14:
          result += String.fromCharCode(collect);
          if (ch !== "}") {
            result += ch;
          }
          state = 0;
          break;
      }
    }
    switch (state) {
      case 1:
        result += "\\";
        break;
      case 2:
        result += "x";
        break;
      case 3:
        result += String.fromCharCode(collect);
        break;
    }
    return this.createExpressionNode(
      T_LITERAL,
      {
        value: result
      },
      token,
      token
    );
    function isHexaDecimal(ch) {
      return ch >= "0" && ch <= "9" || ch >= "a" && ch <= "f" || ch >= "A" && ch <= "F";
    }
  }
  convertToArrayDestructure(seq) {
    var _a;
    const items = seq.type === T_SEQUENCE_EXPRESSION ? seq.exprs : seq.items;
    const result = this.createExpressionNode(
      T_DESTRUCTURE,
      { aDestr: [] },
      seq.startToken,
      seq.endToken
    );
    for (const item of items) {
      let arrayD;
      switch (item.type) {
        case T_NO_ARG_EXPRESSION:
          arrayD = this.createExpressionNode(
            T_ARRAY_DESTRUCTURE,
            {},
            item.startToken,
            item.endToken
          );
          break;
        case T_IDENTIFIER:
          arrayD = this.createExpressionNode(
            T_ARRAY_DESTRUCTURE,
            { id: item.name },
            item.startToken,
            item.endToken
          );
          break;
        case T_DESTRUCTURE:
          result.aDestr.push(...item.aDestr);
          break;
        case T_ARRAY_DESTRUCTURE:
          arrayD = item;
          break;
        case T_ARRAY_LITERAL: {
          const destructure = this.convertToArrayDestructure(item);
          if (destructure) {
            arrayD = this.createExpressionNode(
              T_ARRAY_DESTRUCTURE,
              {
                aDestr: destructure.aDestr
              },
              item.startToken,
              item.endToken
            );
          }
          break;
        }
        case T_OBJECT_DESTRUCTURE:
          arrayD = this.createExpressionNode(
            T_ARRAY_DESTRUCTURE,
            {
              oDestr: item
            },
            item.startToken,
            item.endToken
          );
          break;
        case T_OBJECT_LITERAL: {
          const destructure = this.convertToObjectDestructure(item);
          if (destructure) {
            arrayD = this.createExpressionNode(
              T_ARRAY_DESTRUCTURE,
              {
                oDestr: destructure.oDestr
              },
              item.startToken,
              item.endToken
            );
          }
          break;
        }
        default:
          this.reportError("W017");
          return null;
      }
      if (arrayD) (_a = result.aDestr) == null ? void 0 : _a.push(arrayD);
    }
    return result;
  }
  convertToObjectDestructure(objLit) {
    var _a;
    const result = this.createExpressionNode(
      T_DESTRUCTURE,
      { oDestr: [] },
      objLit.startToken,
      objLit.endToken
    );
    for (const prop of objLit.props) {
      if (Array.isArray(prop)) ;
      else {
        reportError("W018");
        return null;
      }
      const [propKey, propValue] = prop;
      if (propKey.type !== T_IDENTIFIER) {
        reportError("W018");
        return null;
      }
      let objD;
      switch (propValue.type) {
        case T_IDENTIFIER:
          if (propValue.name === propKey.name) {
            objD = this.createExpressionNode(
              T_OBJECT_DESTRUCTURE,
              { id: propKey.name },
              propValue.startToken,
              propValue.endToken
            );
          } else {
            objD = this.createExpressionNode(
              T_OBJECT_DESTRUCTURE,
              {
                id: propKey.name,
                alias: propValue.name
              },
              propValue.startToken,
              propValue.endToken
            );
          }
          break;
        case T_ARRAY_DESTRUCTURE: {
          objD = this.createExpressionNode(
            T_OBJECT_DESTRUCTURE,
            {
              id: propKey.name,
              aDestr: propValue
            },
            propKey.startToken,
            propValue.endToken
          );
          break;
        }
        case T_ARRAY_LITERAL: {
          const destructure = this.convertToArrayDestructure(propValue);
          if (destructure) {
            objD = this.createExpressionNode(
              T_OBJECT_DESTRUCTURE,
              {
                id: propKey.name,
                aDestr: destructure.aDestr
              },
              propKey.startToken,
              propValue.endToken
            );
          }
          break;
        }
        case T_OBJECT_DESTRUCTURE:
          objD = propValue;
          break;
        case T_OBJECT_LITERAL: {
          const destructure = this.convertToObjectDestructure(propValue);
          if (destructure) {
            objD = this.createExpressionNode(
              T_OBJECT_DESTRUCTURE,
              {
                id: propKey.name,
                oDestr: destructure.oDestr
              },
              propKey.startToken,
              propValue.endToken
            );
          }
          break;
        }
        default:
          this.reportError("W018");
          return null;
      }
      if (objD) (_a = result.oDestr) == null ? void 0 : _a.push(objD);
    }
    return result;
  }
  /**
   * Tests if the specified token can be the start of an expression
   */
  isExpressionStart(token) {
    var _a;
    return ((_a = tokenTraits[token.type]) == null ? void 0 : _a.expressionStart) ?? false;
  }
}
function asOptionalBoolean(value, defValue) {
  if (value === void 0 || value === null) return defValue;
  if (typeof value === "number") {
    return value !== 0;
  }
  if (typeof value === "string") {
    value = value.trim().toLowerCase();
    if (value === "") {
      return false;
    }
    if (value === "true") {
      return true;
    }
    if (value === "false") {
      return false;
    }
    if (value !== "") {
      return true;
    }
  }
  if (typeof value === "boolean") {
    return value;
  }
  throw new Error(`A boolean value expected but ${typeof value} received.`);
}
const themeVars$k = `'{"Input:gap-adornment-NumberBox": "var(--xmlui-gap-adornment-NumberBox)", "Input:borderRadius-NumberBox-default": "var(--xmlui-borderRadius-NumberBox-default)", "Input:borderColor-NumberBox-default": "var(--xmlui-borderColor-NumberBox-default)", "Input:borderWidth-NumberBox-default": "var(--xmlui-borderWidth-NumberBox-default)", "Input:borderStyle-NumberBox-default": "var(--xmlui-borderStyle-NumberBox-default)", "Input:fontSize-NumberBox-default": "var(--xmlui-fontSize-NumberBox-default)", "Input:backgroundColor-NumberBox-default": "var(--xmlui-backgroundColor-NumberBox-default)", "Input:boxShadow-NumberBox-default": "var(--xmlui-boxShadow-NumberBox-default)", "Input:textColor-NumberBox-default": "var(--xmlui-textColor-NumberBox-default)", "Input:borderColor-NumberBox-default--hover": "var(--xmlui-borderColor-NumberBox-default--hover)", "Input:backgroundColor-NumberBox-default--hover": "var(--xmlui-backgroundColor-NumberBox-default--hover)", "Input:boxShadow-NumberBox-default--hover": "var(--xmlui-boxShadow-NumberBox-default--hover)", "Input:textColor-NumberBox-default--hover": "var(--xmlui-textColor-NumberBox-default--hover)", "Input:borderColor-NumberBox-default--focus": "var(--xmlui-borderColor-NumberBox-default--focus)", "Input:backgroundColor-NumberBox-default--focus": "var(--xmlui-backgroundColor-NumberBox-default--focus)", "Input:boxShadow-NumberBox-default--focus": "var(--xmlui-boxShadow-NumberBox-default--focus)", "Input:textColor-NumberBox-default--focus": "var(--xmlui-textColor-NumberBox-default--focus)", "Input:outlineWidth-NumberBox-default--focus": "var(--xmlui-outlineWidth-NumberBox-default--focus)", "Input:outlineColor-NumberBox-default--focus": "var(--xmlui-outlineColor-NumberBox-default--focus)", "Input:outlineStyle-NumberBox-default--focus": "var(--xmlui-outlineStyle-NumberBox-default--focus)", "Input:outlineOffset-NumberBox-default--focus": "var(--xmlui-outlineOffset-NumberBox-default--focus)", "Input:textColor-placeholder-NumberBox-default": "var(--xmlui-textColor-placeholder-NumberBox-default)", "Input:textColor-adornment-NumberBox-default": "var(--xmlui-textColor-adornment-NumberBox-default)", "Input:borderRadius-NumberBox-error": "var(--xmlui-borderRadius-NumberBox-error)", "Input:borderColor-NumberBox-error": "var(--xmlui-borderColor-NumberBox-error)", "Input:borderWidth-NumberBox-error": "var(--xmlui-borderWidth-NumberBox-error)", "Input:borderStyle-NumberBox-error": "var(--xmlui-borderStyle-NumberBox-error)", "Input:fontSize-NumberBox-error": "var(--xmlui-fontSize-NumberBox-error)", "Input:backgroundColor-NumberBox-error": "var(--xmlui-backgroundColor-NumberBox-error)", "Input:boxShadow-NumberBox-error": "var(--xmlui-boxShadow-NumberBox-error)", "Input:textColor-NumberBox-error": "var(--xmlui-textColor-NumberBox-error)", "Input:borderColor-NumberBox-error--hover": "var(--xmlui-borderColor-NumberBox-error--hover)", "Input:backgroundColor-NumberBox-error--hover": "var(--xmlui-backgroundColor-NumberBox-error--hover)", "Input:boxShadow-NumberBox-error--hover": "var(--xmlui-boxShadow-NumberBox-error--hover)", "Input:textColor-NumberBox-error--hover": "var(--xmlui-textColor-NumberBox-error--hover)", "Input:borderColor-NumberBox-error--focus": "var(--xmlui-borderColor-NumberBox-error--focus)", "Input:backgroundColor-NumberBox-error--focus": "var(--xmlui-backgroundColor-NumberBox-error--focus)", "Input:boxShadow-NumberBox-error--focus": "var(--xmlui-boxShadow-NumberBox-error--focus)", "Input:textColor-NumberBox-error--focus": "var(--xmlui-textColor-NumberBox-error--focus)", "Input:outlineWidth-NumberBox-error--focus": "var(--xmlui-outlineWidth-NumberBox-error--focus)", "Input:outlineColor-NumberBox-error--focus": "var(--xmlui-outlineColor-NumberBox-error--focus)", "Input:outlineStyle-NumberBox-error--focus": "var(--xmlui-outlineStyle-NumberBox-error--focus)", "Input:outlineOffset-NumberBox-error--focus": "var(--xmlui-outlineOffset-NumberBox-error--focus)", "Input:textColor-placeholder-NumberBox-error": "var(--xmlui-textColor-placeholder-NumberBox-error)", "Input:textColor-adornment-NumberBox-error": "var(--xmlui-textColor-adornment-NumberBox-error)", "Input:borderRadius-NumberBox-warning": "var(--xmlui-borderRadius-NumberBox-warning)", "Input:borderColor-NumberBox-warning": "var(--xmlui-borderColor-NumberBox-warning)", "Input:borderWidth-NumberBox-warning": "var(--xmlui-borderWidth-NumberBox-warning)", "Input:borderStyle-NumberBox-warning": "var(--xmlui-borderStyle-NumberBox-warning)", "Input:fontSize-NumberBox-warning": "var(--xmlui-fontSize-NumberBox-warning)", "Input:backgroundColor-NumberBox-warning": "var(--xmlui-backgroundColor-NumberBox-warning)", "Input:boxShadow-NumberBox-warning": "var(--xmlui-boxShadow-NumberBox-warning)", "Input:textColor-NumberBox-warning": "var(--xmlui-textColor-NumberBox-warning)", "Input:borderColor-NumberBox-warning--hover": "var(--xmlui-borderColor-NumberBox-warning--hover)", "Input:backgroundColor-NumberBox-warning--hover": "var(--xmlui-backgroundColor-NumberBox-warning--hover)", "Input:boxShadow-NumberBox-warning--hover": "var(--xmlui-boxShadow-NumberBox-warning--hover)", "Input:textColor-NumberBox-warning--hover": "var(--xmlui-textColor-NumberBox-warning--hover)", "Input:borderColor-NumberBox-warning--focus": "var(--xmlui-borderColor-NumberBox-warning--focus)", "Input:backgroundColor-NumberBox-warning--focus": "var(--xmlui-backgroundColor-NumberBox-warning--focus)", "Input:boxShadow-NumberBox-warning--focus": "var(--xmlui-boxShadow-NumberBox-warning--focus)", "Input:textColor-NumberBox-warning--focus": "var(--xmlui-textColor-NumberBox-warning--focus)", "Input:outlineWidth-NumberBox-warning--focus": "var(--xmlui-outlineWidth-NumberBox-warning--focus)", "Input:outlineColor-NumberBox-warning--focus": "var(--xmlui-outlineColor-NumberBox-warning--focus)", "Input:outlineStyle-NumberBox-warning--focus": "var(--xmlui-outlineStyle-NumberBox-warning--focus)", "Input:outlineOffset-NumberBox-warning--focus": "var(--xmlui-outlineOffset-NumberBox-warning--focus)", "Input:textColor-placeholder-NumberBox-warning": "var(--xmlui-textColor-placeholder-NumberBox-warning)", "Input:textColor-adornment-NumberBox-warning": "var(--xmlui-textColor-adornment-NumberBox-warning)", "Input:borderRadius-NumberBox-success": "var(--xmlui-borderRadius-NumberBox-success)", "Input:borderColor-NumberBox-success": "var(--xmlui-borderColor-NumberBox-success)", "Input:borderWidth-NumberBox-success": "var(--xmlui-borderWidth-NumberBox-success)", "Input:borderStyle-NumberBox-success": "var(--xmlui-borderStyle-NumberBox-success)", "Input:fontSize-NumberBox-success": "var(--xmlui-fontSize-NumberBox-success)", "Input:backgroundColor-NumberBox-success": "var(--xmlui-backgroundColor-NumberBox-success)", "Input:boxShadow-NumberBox-success": "var(--xmlui-boxShadow-NumberBox-success)", "Input:textColor-NumberBox-success": "var(--xmlui-textColor-NumberBox-success)", "Input:borderColor-NumberBox-success--hover": "var(--xmlui-borderColor-NumberBox-success--hover)", "Input:backgroundColor-NumberBox-success--hover": "var(--xmlui-backgroundColor-NumberBox-success--hover)", "Input:boxShadow-NumberBox-success--hover": "var(--xmlui-boxShadow-NumberBox-success--hover)", "Input:textColor-NumberBox-success--hover": "var(--xmlui-textColor-NumberBox-success--hover)", "Input:borderColor-NumberBox-success--focus": "var(--xmlui-borderColor-NumberBox-success--focus)", "Input:backgroundColor-NumberBox-success--focus": "var(--xmlui-backgroundColor-NumberBox-success--focus)", "Input:boxShadow-NumberBox-success--focus": "var(--xmlui-boxShadow-NumberBox-success--focus)", "Input:textColor-NumberBox-success--focus": "var(--xmlui-textColor-NumberBox-success--focus)", "Input:outlineWidth-NumberBox-success--focus": "var(--xmlui-outlineWidth-NumberBox-success--focus)", "Input:outlineColor-NumberBox-success--focus": "var(--xmlui-outlineColor-NumberBox-success--focus)", "Input:outlineStyle-NumberBox-success--focus": "var(--xmlui-outlineStyle-NumberBox-success--focus)", "Input:outlineOffset-NumberBox-success--focus": "var(--xmlui-outlineOffset-NumberBox-success--focus)", "Input:textColor-placeholder-NumberBox-success": "var(--xmlui-textColor-placeholder-NumberBox-success)", "Input:textColor-adornment-NumberBox-success": "var(--xmlui-textColor-adornment-NumberBox-success)", "Input:backgroundColor-NumberBox--disabled": "var(--xmlui-backgroundColor-NumberBox--disabled)", "Input:textColor-NumberBox--disabled": "var(--xmlui-textColor-NumberBox--disabled)", "Input:borderColor-NumberBox--disabled": "var(--xmlui-borderColor-NumberBox--disabled)"}'`;
const inputRoot = "_inputRoot_1ynbq_13";
const input = "_input_1ynbq_13";
const adornment = "_adornment_1ynbq_53";
const error$7 = "_error_1ynbq_56";
const warning$7 = "_warning_1ynbq_90";
const valid$7 = "_valid_1ynbq_124";
const spinnerBox = "_spinnerBox_1ynbq_184";
const spinnerButton = "_spinnerButton_1ynbq_191";
const readOnly$1 = "_readOnly_1ynbq_197";
const styles$l = {
  themeVars: themeVars$k,
  inputRoot,
  input,
  adornment,
  error: error$7,
  warning: warning$7,
  valid: valid$7,
  spinnerBox,
  spinnerButton,
  readOnly: readOnly$1
};
const NUMBERBOX_MAX_VALUE = 999999999999999;
const DECIMAL_SEPARATOR = ".";
const EXPONENTIAL_SEPARATOR = "e";
const INT_REGEXP = /^-?\d+$/;
const FLOAT_REGEXP = /^-?\d+(\.\d+)?([eE][+-]?\d+)?$/;
const DEFAULT_STEP = 1;
function isEmptyLike(value) {
  return typeof value === "undefined" || value === null || value === "";
}
function mapToRepresentation(value) {
  if (typeof value === "string") return value;
  if (typeof value === "number") return value.toString();
  return "";
}
function clamp(value, min, max) {
  let clamped = value;
  if (value < min) clamped = min;
  if (value > max) clamped = max;
  return clamped;
}
function toUsableNumber(value, isInteger = false) {
  const isUsable = isInteger ? isUsableInteger : isUsableFloat;
  if (!isUsable(value)) return null;
  if (typeof value === "string") {
    value = isInteger ? Number.parseInt(value) : +value;
  }
  return value;
}
function isUsableFloat(value) {
  if (typeof value === "string" && value.length > 0) {
    return !Number.isNaN(+value) && naiveFloatBounding(value);
  }
  return typeof value === "number";
}
function naiveFloatBounding(value) {
  const integerPart = value.split(".")[0];
  return Math.abs(Number.parseInt(integerPart)) <= NUMBERBOX_MAX_VALUE;
}
function isUsableInteger(value) {
  if (typeof value === "string" && value.length > 0 && ![EXPONENTIAL_SEPARATOR, DECIMAL_SEPARATOR].some((item) => value.includes(item))) {
    return Number.isSafeInteger(+value);
  } else if (typeof value === "number") {
    return Number.isSafeInteger(value);
  }
  return false;
}
const NumberBox = forwardRef(function NumberBox2({
  id,
  value,
  initialValue,
  style,
  enabled: enabled2 = true,
  placeholder: placeholder2,
  validationStatus = "none",
  hasSpinBox = true,
  step,
  integersOnly = false,
  zeroOrPositive = false,
  min = zeroOrPositive ? 0 : -999999999999999,
  max = NUMBERBOX_MAX_VALUE,
  maxLength,
  updateState = noop$1,
  onDidChange = noop$1,
  onFocus = noop$1,
  onBlur = noop$1,
  registerComponentApi,
  startText,
  startIcon,
  endText,
  endIcon,
  gap,
  autoFocus,
  readOnly: readOnly2,
  required: required2,
  label: label2,
  labelPosition,
  labelWidth,
  labelBreak: labelBreak2
}, forwardedRef) {
  min = Math.max(zeroOrPositive ? 0 : -999999999999999, min);
  const _step = toUsableNumber(step, true) ?? DEFAULT_STEP;
  const inputRef = useRef(null);
  const upButton = useRef(null);
  const downButton = useRef(null);
  useEffect(() => {
    if (autoFocus) {
      setTimeout(() => {
        var _a;
        (_a = inputRef.current) == null ? void 0 : _a.focus();
      }, 0);
    }
  }, [autoFocus]);
  const [valueStrRep, setValueStrRep] = React__default.useState(mapToRepresentation(value));
  useEffect(() => {
    setValueStrRep(mapToRepresentation(value));
  }, [value]);
  useEffect(() => {
    updateState({ value: initialValue }, { initial: true });
  }, [initialValue, updateState]);
  const updateValue = useCallback(
    (newValue, rep) => {
      setValueStrRep(rep);
      updateState({ value: newValue });
      onDidChange(newValue);
    },
    [onDidChange, updateState]
  );
  const onInputChange = useCallback(
    (event) => {
      const value2 = event.target.value;
      const repr = value2;
      updateValue(value2, repr);
    },
    [updateValue]
  );
  const handleIncStep = useCallback(() => {
    if (readOnly2) return;
    const newValue = applyStep(valueStrRep, _step, min, max, integersOnly);
    if (newValue === void 0) return;
    updateValue(newValue, newValue.toString());
  }, [valueStrRep, _step, min, max, integersOnly, updateValue, readOnly2]);
  const handleDecStep = useCallback(() => {
    if (readOnly2) return;
    const newValue = applyStep(valueStrRep, -_step, min, max, integersOnly);
    if (newValue === void 0) return;
    updateValue(newValue, newValue.toString());
  }, [valueStrRep, _step, min, max, integersOnly, updateValue, readOnly2]);
  useLongPress$1(upButton.current, handleIncStep);
  useLongPress$1(downButton.current, handleDecStep);
  const handleOnBeforeInput = (event) => {
    var _a;
    let shouldPreventDefault = false;
    const currentValue = event.target.value ?? "";
    const currentPos = event.target.selectionStart;
    const beforeCaret = currentValue.substring(0, event.target.selectionStart);
    const expPos = beforeCaret.indexOf(EXPONENTIAL_SEPARATOR);
    switch (event.data) {
      case "-":
        shouldPreventDefault = true;
        if (expPos === -1) {
          if (!currentValue.startsWith("-")) {
            setNewValue("-" + currentValue, currentPos + 1);
          }
        } else {
          if (currentValue[expPos + 1] !== "-") {
            setNewValue(
              currentValue.substring(0, expPos + 1) + "-" + currentValue.substring(expPos + 1),
              currentPos + 1
            );
          }
        }
        break;
      case "+":
        shouldPreventDefault = true;
        if (expPos === -1) {
          if (currentValue.startsWith("-")) {
            setNewValue(currentValue.substring(1), currentPos - 1);
          }
        } else {
          if (currentValue[expPos + 1] === "-") {
            setNewValue(
              currentValue.substring(0, expPos + 1) + currentValue.substring(expPos + 2),
              currentPos - 1
            );
          }
        }
        break;
      case DECIMAL_SEPARATOR:
        if (integersOnly || currentValue.includes(DECIMAL_SEPARATOR) || expPos !== -1) {
          shouldPreventDefault = true;
        }
        break;
      case EXPONENTIAL_SEPARATOR:
        if (integersOnly) {
          shouldPreventDefault = true;
          break;
        }
        if (currentValue.includes(EXPONENTIAL_SEPARATOR) || tooManyDigitsAfterExponentialSeparator(currentPos, 2)) {
          shouldPreventDefault = true;
        }
        break;
      default:
        let newInput = event.data;
        const selectionStart = event.target.selectionStart;
        if (((_a = event.data) == null ? void 0 : _a.length) > 0) {
          if (newInput.startsWith("-")) {
            if (selectionStart > 0) {
              shouldPreventDefault = true;
              break;
            }
          } else if (newInput.startsWith("+")) {
            shouldPreventDefault = true;
            break;
          }
          const newValue = currentValue.substring(0, selectionStart) + newInput + currentValue.substring(event.target.selectionEnd);
          if (integersOnly && !INT_REGEXP.test(newValue)) {
            shouldPreventDefault = true;
          } else if (!FLOAT_REGEXP.test(newValue)) {
            shouldPreventDefault = true;
          }
          break;
        }
        if (event.data < "0" || event.data > "9") {
          shouldPreventDefault = true;
          break;
        }
        if (currentValue.startsWith("-") && selectionStart === 0) {
          shouldPreventDefault = true;
          break;
        }
        if (expPos !== -1 && tooManyDigitsAfterExponentialSeparator(expPos + 1, 1)) {
          shouldPreventDefault = true;
        }
        break;
    }
    if (shouldPreventDefault) {
      event.preventDefault();
    }
    return;
    function tooManyDigitsAfterExponentialSeparator(pos, maxDigits) {
      let numDigitsAfter = 0;
      while (pos < currentValue.length) {
        if (/\d/.test(currentValue[pos++])) {
          numDigitsAfter++;
        } else {
          numDigitsAfter = maxDigits + 1;
          break;
        }
      }
      return numDigitsAfter > maxDigits;
    }
    function setNewValue(newValue, pos) {
      var _a2;
      event.target.value = newValue;
      updateValue(newValue, newValue);
      (_a2 = inputRef.current) == null ? void 0 : _a2.setSelectionRange(pos, pos);
    }
  };
  const handleOnKey = useCallback(
    (event) => {
      if (event.code === "ArrowUp") {
        event.preventDefault();
        handleIncStep();
      }
      if (event.code === "ArrowDown") {
        event.preventDefault();
        handleDecStep();
      }
    },
    [handleIncStep, handleDecStep]
  );
  const handleOnFocus = useCallback(() => {
    onFocus == null ? void 0 : onFocus();
  }, [onFocus]);
  const handleOnBlur = useCallback(() => {
    setValueStrRep(mapToRepresentation(value));
    onBlur == null ? void 0 : onBlur();
  }, [value, onBlur]);
  const focus = useCallback(() => {
    var _a;
    (_a = inputRef.current) == null ? void 0 : _a.focus();
  }, []);
  const setValue = useEvent((newValue) => {
    updateValue(newValue, isEmptyLike(newValue) ? "" : String(newValue));
  });
  useEffect(() => {
    registerComponentApi == null ? void 0 : registerComponentApi({
      focus,
      setValue
    });
  }, [focus, registerComponentApi, setValue]);
  return /* @__PURE__ */ jsx(
    ItemWithLabel,
    {
      ref: forwardedRef,
      labelPosition,
      label: label2,
      labelWidth,
      labelBreak: labelBreak2,
      required: required2,
      enabled: enabled2,
      onFocus,
      onBlur,
      style,
      children: /* @__PURE__ */ jsxs(
        "div",
        {
          className: classnames(styles$l.inputRoot, {
            [styles$l.readOnly]: readOnly2,
            [styles$l.disabled]: !enabled2,
            [styles$l.noSpinBox]: !hasSpinBox,
            [styles$l.error]: validationStatus === "error",
            [styles$l.warning]: validationStatus === "warning",
            [styles$l.valid]: validationStatus === "valid"
          }),
          tabIndex: -1,
          onFocus: () => {
            var _a;
            (_a = inputRef.current) == null ? void 0 : _a.focus();
          },
          style: { gap },
          children: [
            /* @__PURE__ */ jsx(Adornment, { text: startText, iconName: startIcon, className: styles$l.adornment }),
            /* @__PURE__ */ jsx(
              "input",
              {
                id,
                type: "text",
                inputMode: "numeric",
                className: classnames(styles$l.input, { [styles$l.readOnly]: readOnly2 }),
                disabled: !enabled2,
                value: valueStrRep,
                step,
                placeholder: placeholder2,
                onChange: onInputChange,
                onFocus: handleOnFocus,
                onBlur: handleOnBlur,
                onBeforeInput: handleOnBeforeInput,
                onKeyDown: handleOnKey,
                readOnly: readOnly2,
                ref: inputRef,
                autoFocus,
                maxLength,
                required: required2
              }
            ),
            /* @__PURE__ */ jsx(Adornment, { text: endText, iconName: endIcon, className: styles$l.adornment }),
            hasSpinBox && /* @__PURE__ */ jsxs("div", { className: styles$l.spinnerBox, children: [
              /* @__PURE__ */ jsx(
                Button,
                {
                  "data-spinner": "up",
                  type: "button",
                  variant: "ghost",
                  themeColor: "secondary",
                  tabIndex: -1,
                  className: styles$l.spinnerButton,
                  disabled: !enabled2 || readOnly2,
                  ref: upButton,
                  children: /* @__PURE__ */ jsx(Icon, { name: "chevronup", size: "sm" })
                }
              ),
              /* @__PURE__ */ jsx(
                Button,
                {
                  "data-spinner": "down",
                  type: "button",
                  tabIndex: -1,
                  variant: "ghost",
                  themeColor: "secondary",
                  className: styles$l.spinnerButton,
                  disabled: !enabled2 || readOnly2,
                  ref: downButton,
                  children: /* @__PURE__ */ jsx(Icon, { name: "chevrondown", size: "sm" })
                }
              )
            ] })
          ]
        }
      )
    }
  );
});
function applyStep(valueStrRep, step, min, max, integersOnly) {
  const currentValue = toUsableNumber(valueStrRep, integersOnly);
  if (isEmptyLike(currentValue)) {
    return;
  }
  return clamp(currentValue + step, min, max);
}
function useLongPress$1(elementRef, action, delay = 500) {
  const timeoutId = useRef(0);
  const intervalId = useRef(0);
  const savedAction = useRef(action);
  useEffect(() => {
    savedAction.current = action;
  }, [action]);
  useEffect(() => {
    const onMouseDown = () => {
      var _a;
      (_a = savedAction.current) == null ? void 0 : _a.call(savedAction);
      timeoutId.current = window.setTimeout(() => {
        intervalId.current = window.setInterval(() => {
          var _a2;
          (_a2 = savedAction.current) == null ? void 0 : _a2.call(savedAction);
        }, 100);
      }, delay);
    };
    const onMouseUp = () => {
      clearTimeout(timeoutId.current);
      clearInterval(intervalId.current);
    };
    const onMouseOut = () => {
      clearTimeout(timeoutId.current);
      clearInterval(intervalId.current);
    };
    elementRef == null ? void 0 : elementRef.addEventListener("mousedown", onMouseDown);
    elementRef == null ? void 0 : elementRef.addEventListener("mouseup", onMouseUp);
    elementRef == null ? void 0 : elementRef.addEventListener("mouseout", onMouseOut);
    return () => {
      elementRef == null ? void 0 : elementRef.removeEventListener("mousedown", onMouseDown);
      elementRef == null ? void 0 : elementRef.removeEventListener("mouseup", onMouseUp);
      elementRef == null ? void 0 : elementRef.removeEventListener("mouseout", onMouseOut);
    };
  }, [elementRef, action, delay]);
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
function $6ed0406888f73fc4$var$setRef(ref, value) {
  if (typeof ref === "function") ref(value);
  else if (ref !== null && ref !== void 0) ref.current = value;
}
function $6ed0406888f73fc4$export$43e446d32b3d21af(...refs) {
  return (node) => refs.forEach(
    (ref) => $6ed0406888f73fc4$var$setRef(ref, node)
  );
}
function $6ed0406888f73fc4$export$c7b2cbe3552a0d05(...refs) {
  return useCallback($6ed0406888f73fc4$export$43e446d32b3d21af(...refs), refs);
}
const $5e63c961fc1ce211$export$8c6ed5c666ac1360 = /* @__PURE__ */ forwardRef((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  const childrenArray = Children.toArray(children);
  const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable);
  if (slottable) {
    const newElement = slottable.props.children;
    const newChildren = childrenArray.map((child) => {
      if (child === slottable) {
        if (Children.count(newElement) > 1) return Children.only(null);
        return /* @__PURE__ */ isValidElement(newElement) ? newElement.props.children : null;
      } else return child;
    });
    return /* @__PURE__ */ createElement($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
      ref: forwardedRef
    }), /* @__PURE__ */ isValidElement(newElement) ? /* @__PURE__ */ cloneElement(newElement, void 0, newChildren) : null);
  }
  return /* @__PURE__ */ createElement($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
    ref: forwardedRef
  }), children);
});
$5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = "Slot";
const $5e63c961fc1ce211$var$SlotClone = /* @__PURE__ */ forwardRef((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  if (/* @__PURE__ */ isValidElement(children)) return /* @__PURE__ */ cloneElement(children, {
    ...$5e63c961fc1ce211$var$mergeProps(slotProps, children.props),
    ref: forwardedRef ? $6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef, children.ref) : children.ref
  });
  return Children.count(children) > 1 ? Children.only(null) : null;
});
$5e63c961fc1ce211$var$SlotClone.displayName = "SlotClone";
const $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({ children }) => {
  return /* @__PURE__ */ createElement(Fragment$1, null, children);
};
function $5e63c961fc1ce211$var$isSlottable(child) {
  return /* @__PURE__ */ isValidElement(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;
}
function $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {
  const overrideProps = {
    ...childProps
  };
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler) {
      if (slotPropValue && childPropValue) overrideProps[propName] = (...args) => {
        childPropValue(...args);
        slotPropValue(...args);
      };
      else if (slotPropValue) overrideProps[propName] = slotPropValue;
    } else if (propName === "style") overrideProps[propName] = {
      ...slotPropValue,
      ...childPropValue
    };
    else if (propName === "className") overrideProps[propName] = [
      slotPropValue,
      childPropValue
    ].filter(Boolean).join(" ");
  }
  return {
    ...slotProps,
    ...overrideProps
  };
}
const $8927f6f2acc4f386$var$NODES = [
  "a",
  "button",
  "div",
  "form",
  "h2",
  "h3",
  "img",
  "input",
  "label",
  "li",
  "nav",
  "ol",
  "p",
  "span",
  "svg",
  "ul"
];
const $8927f6f2acc4f386$export$250ffa63cdc0d034 = $8927f6f2acc4f386$var$NODES.reduce((primitive, node) => {
  const Node = /* @__PURE__ */ forwardRef((props, forwardedRef) => {
    const { asChild, ...primitiveProps } = props;
    const Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac1360 : node;
    useEffect(() => {
      window[Symbol.for("radix-ui")] = true;
    }, []);
    return /* @__PURE__ */ createElement(Comp, _extends({}, primitiveProps, {
      ref: forwardedRef
    }));
  });
  Node.displayName = `Primitive.${node}`;
  return {
    ...primitive,
    [node]: Node
  };
}, {});
function $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(callback) {
  const callbackRef = useRef(callback);
  useEffect(() => {
    callbackRef.current = callback;
  });
  return useMemo(
    () => (...args) => {
      var _callbackRef$current;
      return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);
    },
    []
  );
}
const $d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT = "focusScope.autoFocusOnMount";
const $d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT = "focusScope.autoFocusOnUnmount";
const $d3863c46a17e8a28$var$EVENT_OPTIONS = {
  bubbles: false,
  cancelable: true
};
const $d3863c46a17e8a28$export$20e40289641fbbb6 = /* @__PURE__ */ forwardRef((props, forwardedRef) => {
  const { loop = false, trapped = false, onMountAutoFocus: onMountAutoFocusProp, onUnmountAutoFocus: onUnmountAutoFocusProp, ...scopeProps } = props;
  const [container1, setContainer] = useState(null);
  const onMountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onMountAutoFocusProp);
  const onUnmountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onUnmountAutoFocusProp);
  const lastFocusedElementRef = useRef(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
    forwardedRef,
    (node) => setContainer(node)
  );
  const focusScope = useRef({
    paused: false,
    pause() {
      this.paused = true;
    },
    resume() {
      this.paused = false;
    }
  }).current;
  useEffect(() => {
    if (trapped) {
      let handleFocusIn = function(event) {
        if (focusScope.paused || !container1) return;
        const target2 = event.target;
        if (container1.contains(target2)) lastFocusedElementRef.current = target2;
        else $d3863c46a17e8a28$var$focus(lastFocusedElementRef.current, {
          select: true
        });
      }, handleFocusOut = function(event) {
        if (focusScope.paused || !container1) return;
        const relatedTarget = event.relatedTarget;
        if (relatedTarget === null) return;
        if (!container1.contains(relatedTarget)) $d3863c46a17e8a28$var$focus(lastFocusedElementRef.current, {
          select: true
        });
      }, handleMutations2 = function(mutations2) {
        const focusedElement = document.activeElement;
        if (focusedElement !== document.body) return;
        for (const mutation of mutations2) if (mutation.removedNodes.length > 0) $d3863c46a17e8a28$var$focus(container1);
      };
      document.addEventListener("focusin", handleFocusIn);
      document.addEventListener("focusout", handleFocusOut);
      const mutationObserver = new MutationObserver(handleMutations2);
      if (container1) mutationObserver.observe(container1, {
        childList: true,
        subtree: true
      });
      return () => {
        document.removeEventListener("focusin", handleFocusIn);
        document.removeEventListener("focusout", handleFocusOut);
        mutationObserver.disconnect();
      };
    }
  }, [
    trapped,
    container1,
    focusScope.paused
  ]);
  useEffect(() => {
    if (container1) {
      $d3863c46a17e8a28$var$focusScopesStack.add(focusScope);
      const previouslyFocusedElement = document.activeElement;
      const hasFocusedCandidate = container1.contains(previouslyFocusedElement);
      if (!hasFocusedCandidate) {
        const mountEvent = new CustomEvent($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, $d3863c46a17e8a28$var$EVENT_OPTIONS);
        container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
        container1.dispatchEvent(mountEvent);
        if (!mountEvent.defaultPrevented) {
          $d3863c46a17e8a28$var$focusFirst($d3863c46a17e8a28$var$removeLinks($d3863c46a17e8a28$var$getTabbableCandidates(container1)), {
            select: true
          });
          if (document.activeElement === previouslyFocusedElement) $d3863c46a17e8a28$var$focus(container1);
        }
      }
      return () => {
        container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
        setTimeout(() => {
          const unmountEvent = new CustomEvent($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, $d3863c46a17e8a28$var$EVENT_OPTIONS);
          container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
          container1.dispatchEvent(unmountEvent);
          if (!unmountEvent.defaultPrevented) $d3863c46a17e8a28$var$focus(previouslyFocusedElement !== null && previouslyFocusedElement !== void 0 ? previouslyFocusedElement : document.body, {
            select: true
          });
          container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
          $d3863c46a17e8a28$var$focusScopesStack.remove(focusScope);
        }, 0);
      };
    }
  }, [
    container1,
    onMountAutoFocus,
    onUnmountAutoFocus,
    focusScope
  ]);
  const handleKeyDown = useCallback((event) => {
    if (!loop && !trapped) return;
    if (focusScope.paused) return;
    const isTabKey = event.key === "Tab" && !event.altKey && !event.ctrlKey && !event.metaKey;
    const focusedElement = document.activeElement;
    if (isTabKey && focusedElement) {
      const container2 = event.currentTarget;
      const [first, last] = $d3863c46a17e8a28$var$getTabbableEdges(container2);
      const hasTabbableElementsInside = first && last;
      if (!hasTabbableElementsInside) {
        if (focusedElement === container2) event.preventDefault();
      } else {
        if (!event.shiftKey && focusedElement === last) {
          event.preventDefault();
          if (loop) $d3863c46a17e8a28$var$focus(first, {
            select: true
          });
        } else if (event.shiftKey && focusedElement === first) {
          event.preventDefault();
          if (loop) $d3863c46a17e8a28$var$focus(last, {
            select: true
          });
        }
      }
    }
  }, [
    loop,
    trapped,
    focusScope.paused
  ]);
  return /* @__PURE__ */ createElement($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    tabIndex: -1
  }, scopeProps, {
    ref: composedRefs,
    onKeyDown: handleKeyDown
  }));
});
function $d3863c46a17e8a28$var$focusFirst(candidates, { select = false } = {}) {
  const previouslyFocusedElement = document.activeElement;
  for (const candidate of candidates) {
    $d3863c46a17e8a28$var$focus(candidate, {
      select
    });
    if (document.activeElement !== previouslyFocusedElement) return;
  }
}
function $d3863c46a17e8a28$var$getTabbableEdges(container2) {
  const candidates = $d3863c46a17e8a28$var$getTabbableCandidates(container2);
  const first = $d3863c46a17e8a28$var$findVisible(candidates, container2);
  const last = $d3863c46a17e8a28$var$findVisible(candidates.reverse(), container2);
  return [
    first,
    last
  ];
}
function $d3863c46a17e8a28$var$getTabbableCandidates(container2) {
  const nodes = [];
  const walker = document.createTreeWalker(container2, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => {
      const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;
      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  while (walker.nextNode()) nodes.push(walker.currentNode);
  return nodes;
}
function $d3863c46a17e8a28$var$findVisible(elements, container2) {
  for (const element of elements) {
    if (!$d3863c46a17e8a28$var$isHidden(element, {
      upTo: container2
    })) return element;
  }
}
function $d3863c46a17e8a28$var$isHidden(node, { upTo }) {
  if (getComputedStyle(node).visibility === "hidden") return true;
  while (node) {
    if (upTo !== void 0 && node === upTo) return false;
    if (getComputedStyle(node).display === "none") return true;
    node = node.parentElement;
  }
  return false;
}
function $d3863c46a17e8a28$var$isSelectableInput(element) {
  return element instanceof HTMLInputElement && "select" in element;
}
function $d3863c46a17e8a28$var$focus(element, { select = false } = {}) {
  if (element && element.focus) {
    const previouslyFocusedElement = document.activeElement;
    element.focus({
      preventScroll: true
    });
    if (element !== previouslyFocusedElement && $d3863c46a17e8a28$var$isSelectableInput(element) && select) element.select();
  }
}
const $d3863c46a17e8a28$var$focusScopesStack = $d3863c46a17e8a28$var$createFocusScopesStack();
function $d3863c46a17e8a28$var$createFocusScopesStack() {
  let stack = [];
  return {
    add(focusScope) {
      const activeFocusScope = stack[0];
      if (focusScope !== activeFocusScope) activeFocusScope === null || activeFocusScope === void 0 || activeFocusScope.pause();
      stack = $d3863c46a17e8a28$var$arrayRemove(stack, focusScope);
      stack.unshift(focusScope);
    },
    remove(focusScope) {
      var _stack$;
      stack = $d3863c46a17e8a28$var$arrayRemove(stack, focusScope);
      (_stack$ = stack[0]) === null || _stack$ === void 0 || _stack$.resume();
    }
  };
}
function $d3863c46a17e8a28$var$arrayRemove(array, item) {
  const updatedArray = [
    ...array
  ];
  const index = updatedArray.indexOf(item);
  if (index !== -1) updatedArray.splice(index, 1);
  return updatedArray;
}
function $d3863c46a17e8a28$var$removeLinks(items) {
  return items.filter(
    (item) => item.tagName !== "A"
  );
}
const themeVars$j = `'{"padding-item-Select": "var(--xmlui-padding-item-Select)", "paddingHorizontal-item-Select": "var(--xmlui-paddingHorizontal-item-Select, var(--xmlui-padding-item-Select))", "paddingVertical-item-Select": "var(--xmlui-paddingVertical-item-Select, var(--xmlui-padding-item-Select))", "paddingLeft-item-Select": "var(--xmlui-paddingLeft-item-Select, var(--xmlui-paddingHorizontal-item-Select, var(--xmlui-padding-item-Select)))", "paddingRight-item-Select": "var(--xmlui-paddingRight-item-Select, var(--xmlui-paddingHorizontal-item-Select, var(--xmlui-padding-item-Select)))", "paddingTop-item-Select": "var(--xmlui-paddingTop-item-Select, var(--xmlui-paddingVertical-item-Select, var(--xmlui-padding-item-Select)))", "paddingBottom-item-Select": "var(--xmlui-paddingBottom-item-Select, var(--xmlui-paddingVertical-item-Select, var(--xmlui-padding-item-Select)))", "Input:fontSize-Select-default": "var(--xmlui-fontSize-Select-default)", "Input:textColor-placeholder-Select-default": "var(--xmlui-textColor-placeholder-Select-default)", "Input:textColor-Select-default": "var(--xmlui-textColor-Select-default)", "Input:fontSize-Select-error": "var(--xmlui-fontSize-Select-error)", "Input:textColor-placeholder-Select-error": "var(--xmlui-textColor-placeholder-Select-error)", "Input:textColor-Select-error": "var(--xmlui-textColor-Select-error)", "Input:fontSize-Select-warning": "var(--xmlui-fontSize-Select-warning)", "Input:textColor-placeholder-Select-warning": "var(--xmlui-textColor-placeholder-Select-warning)", "Input:textColor-Select-warning": "var(--xmlui-textColor-Select-warning)", "Input:fontSize-Select-success": "var(--xmlui-fontSize-Select-success)", "Input:textColor-placeholder-Select-success": "var(--xmlui-textColor-placeholder-Select-success)", "Input:textColor-Select-success": "var(--xmlui-textColor-Select-success)", "Input:borderRadius-Select-default": "var(--xmlui-borderRadius-Select-default)", "Input:borderColor-Select-default": "var(--xmlui-borderColor-Select-default)", "Input:borderWidth-Select-default": "var(--xmlui-borderWidth-Select-default)", "Input:borderStyle-Select-default": "var(--xmlui-borderStyle-Select-default)", "Input:backgroundColor-Select-default": "var(--xmlui-backgroundColor-Select-default)", "Input:boxShadow-Select-default": "var(--xmlui-boxShadow-Select-default)", "Input:borderColor-Select-default--hover": "var(--xmlui-borderColor-Select-default--hover)", "Input:backgroundColor-Select-default--hover": "var(--xmlui-backgroundColor-Select-default--hover)", "Input:boxShadow-Select-default--hover": "var(--xmlui-boxShadow-Select-default--hover)", "Input:textColor-Select-default--hover": "var(--xmlui-textColor-Select-default--hover)", "Input:outlineWidth-Select-default--focus": "var(--xmlui-outlineWidth-Select-default--focus)", "Input:outlineColor-Select-default--focus": "var(--xmlui-outlineColor-Select-default--focus)", "Input:outlineStyle-Select-default--focus": "var(--xmlui-outlineStyle-Select-default--focus)", "Input:outlineOffset-Select-default--focus": "var(--xmlui-outlineOffset-Select-default--focus)", "Input:borderRadius-Select-error": "var(--xmlui-borderRadius-Select-error)", "Input:borderColor-Select-error": "var(--xmlui-borderColor-Select-error)", "Input:borderWidth-Select-error": "var(--xmlui-borderWidth-Select-error)", "Input:borderStyle-Select-error": "var(--xmlui-borderStyle-Select-error)", "Input:backgroundColor-Select-error": "var(--xmlui-backgroundColor-Select-error)", "Input:boxShadow-Select-error": "var(--xmlui-boxShadow-Select-error)", "Input:borderColor-Select-error--hover": "var(--xmlui-borderColor-Select-error--hover)", "Input:backgroundColor-Select-error--hover": "var(--xmlui-backgroundColor-Select-error--hover)", "Input:boxShadow-Select-error--hover": "var(--xmlui-boxShadow-Select-error--hover)", "Input:textColor-Select-error--hover": "var(--xmlui-textColor-Select-error--hover)", "Input:outlineWidth-Select-error--focus": "var(--xmlui-outlineWidth-Select-error--focus)", "Input:outlineColor-Select-error--focus": "var(--xmlui-outlineColor-Select-error--focus)", "Input:outlineStyle-Select-error--focus": "var(--xmlui-outlineStyle-Select-error--focus)", "Input:outlineOffset-Select-error--focus": "var(--xmlui-outlineOffset-Select-error--focus)", "Input:borderRadius-Select-warning": "var(--xmlui-borderRadius-Select-warning)", "Input:borderColor-Select-warning": "var(--xmlui-borderColor-Select-warning)", "Input:borderWidth-Select-warning": "var(--xmlui-borderWidth-Select-warning)", "Input:borderStyle-Select-warning": "var(--xmlui-borderStyle-Select-warning)", "Input:backgroundColor-Select-warning": "var(--xmlui-backgroundColor-Select-warning)", "Input:boxShadow-Select-warning": "var(--xmlui-boxShadow-Select-warning)", "Input:borderColor-Select-warning--hover": "var(--xmlui-borderColor-Select-warning--hover)", "Input:backgroundColor-Select-warning--hover": "var(--xmlui-backgroundColor-Select-warning--hover)", "Input:boxShadow-Select-warning--hover": "var(--xmlui-boxShadow-Select-warning--hover)", "Input:textColor-Select-warning--hover": "var(--xmlui-textColor-Select-warning--hover)", "Input:outlineWidth-Select-warning--focus": "var(--xmlui-outlineWidth-Select-warning--focus)", "Input:outlineColor-Select-warning--focus": "var(--xmlui-outlineColor-Select-warning--focus)", "Input:outlineStyle-Select-warning--focus": "var(--xmlui-outlineStyle-Select-warning--focus)", "Input:outlineOffset-Select-warning--focus": "var(--xmlui-outlineOffset-Select-warning--focus)", "Input:borderRadius-Select-success": "var(--xmlui-borderRadius-Select-success)", "Input:borderColor-Select-success": "var(--xmlui-borderColor-Select-success)", "Input:borderWidth-Select-success": "var(--xmlui-borderWidth-Select-success)", "Input:borderStyle-Select-success": "var(--xmlui-borderStyle-Select-success)", "Input:backgroundColor-Select-success": "var(--xmlui-backgroundColor-Select-success)", "Input:boxShadow-Select-success": "var(--xmlui-boxShadow-Select-success)", "Input:borderColor-Select-success--hover": "var(--xmlui-borderColor-Select-success--hover)", "Input:backgroundColor-Select-success--hover": "var(--xmlui-backgroundColor-Select-success--hover)", "Input:boxShadow-Select-success--hover": "var(--xmlui-boxShadow-Select-success--hover)", "Input:textColor-Select-success--hover": "var(--xmlui-textColor-Select-success--hover)", "Input:outlineWidth-Select-success--focus": "var(--xmlui-outlineWidth-Select-success--focus)", "Input:outlineColor-Select-success--focus": "var(--xmlui-outlineColor-Select-success--focus)", "Input:outlineStyle-Select-success--focus": "var(--xmlui-outlineStyle-Select-success--focus)", "Input:outlineOffset-Select-success--focus": "var(--xmlui-outlineOffset-Select-success--focus)", "opacity-Select--disabled": "var(--xmlui-opacity-Select--disabled)", "Input:backgroundColor-Select--disabled": "var(--xmlui-backgroundColor-Select--disabled)", "Input:textColor-Select--disabled": "var(--xmlui-textColor-Select--disabled)", "Input:borderColor-Select--disabled": "var(--xmlui-borderColor-Select--disabled)", "paddingVertical-Select-badge": "var(--xmlui-paddingVertical-Select-badge)", "paddingHorizontal-Select-badge": "var(--xmlui-paddingHorizontal-Select-badge)", "Input:fontSize-Select-badge": "var(--xmlui-fontSize-Select-badge)", "Input:backgroundColor-Select-badge": "var(--xmlui-backgroundColor-Select-badge)", "Input:textColor-Select-badge": "var(--xmlui-textColor-Select-badge)", "Input:backgroundColor-Select-badge--hover": "var(--xmlui-backgroundColor-Select-badge--hover)", "Input:textColor-Select-badge--hover": "var(--xmlui-textColor-Select-badge--hover)", "Input:backgroundColor-Select-badge--active": "var(--xmlui-backgroundColor-Select-badge--active)", "Input:textColor-Select-badge--active": "var(--xmlui-textColor-Select-badge--active)", "Input:textColor-placeholder-Select": "var(--xmlui-textColor-placeholder-Select)", "Input:backgroundColor-menu-Select": "var(--xmlui-backgroundColor-menu-Select)", "Input:borderRadius-menu-Select": "var(--xmlui-borderRadius-menu-Select)", "Input:boxShadow-menu-Select": "var(--xmlui-boxShadow-menu-Select)", "Input:borderWidth-menu-Select": "var(--xmlui-borderWidth-menu-Select)", "Input:borderColor-menu-Select": "var(--xmlui-borderColor-menu-Select)", "backgroundColor-item-Select": "var(--xmlui-backgroundColor-item-Select)", "backgroundColor-item-Select--hover": "var(--xmlui-backgroundColor-item-Select--hover)", "opacity-text-item-Select--disabled": "var(--xmlui-opacity-text-item-Select--disabled)", "fontSize-Select": "var(--xmlui-fontSize-Select)", "backgroundColor-item-Select--active": "var(--xmlui-backgroundColor-item-Select--active)", "textColor-indicator-Select": "var(--xmlui-textColor-indicator-Select)"}'`;
const selectValue = "_selectValue_1cwq0_13";
const error$6 = "_error_1cwq0_21";
const warning$6 = "_warning_1cwq0_29";
const valid$6 = "_valid_1cwq0_37";
const selectTrigger = "_selectTrigger_1cwq0_46";
const badgeListContainer = "_badgeListContainer_1cwq0_170";
const badgeList$1 = "_badgeList_1cwq0_170";
const badge$1 = "_badge_1cwq0_170";
const actions$1 = "_actions_1cwq0_210";
const placeholder = "_placeholder_1cwq0_216";
const emptyList = "_emptyList_1cwq0_221";
const selectScrollUpButton = "_selectScrollUpButton_1cwq0_231";
const selectScrollDownButton = "_selectScrollDownButton_1cwq0_240";
const command$1 = "_command_1cwq0_249";
const commandInputContainer = "_commandInputContainer_1cwq0_259";
const commandInput$1 = "_commandInput_1cwq0_259";
const commandList$1 = "_commandList_1cwq0_284";
const selectContent = "_selectContent_1cwq0_289";
const fadeIn = "_fadeIn_1cwq0_1";
const zoomIn = "_zoomIn_1cwq0_1";
const fadeOut = "_fadeOut_1cwq0_1";
const zoomOut = "_zoomOut_1cwq0_1";
const slideInFromTop = "_slideInFromTop_1cwq0_1";
const slideInFromRight = "_slideInFromRight_1cwq0_1";
const slideInFromLeft = "_slideInFromLeft_1cwq0_1";
const slideInFromBottom = "_slideInFromBottom_1cwq0_1";
const multiComboboxOption = "_multiComboboxOption_1cwq0_331";
const multiComboboxOptionContent = "_multiComboboxOptionContent_1cwq0_331";
const selectItem = "_selectItem_1cwq0_356";
const selectItemContent = "_selectItemContent_1cwq0_371";
const selectItemIndicator = "_selectItemIndicator_1cwq0_392";
const selectViewport = "_selectViewport_1cwq0_403";
const selectEmpty = "_selectEmpty_1cwq0_409";
const loading = "_loading_1cwq0_420";
const srOnly = "_srOnly_1cwq0_424";
const styles$k = {
  themeVars: themeVars$j,
  selectValue,
  error: error$6,
  warning: warning$6,
  valid: valid$6,
  selectTrigger,
  badgeListContainer,
  badgeList: badgeList$1,
  badge: badge$1,
  actions: actions$1,
  placeholder,
  emptyList,
  selectScrollUpButton,
  selectScrollDownButton,
  command: command$1,
  commandInputContainer,
  commandInput: commandInput$1,
  commandList: commandList$1,
  selectContent,
  fadeIn,
  zoomIn,
  fadeOut,
  zoomOut,
  slideInFromTop,
  slideInFromRight,
  slideInFromLeft,
  slideInFromBottom,
  multiComboboxOption,
  multiComboboxOptionContent,
  selectItem,
  selectItemContent,
  selectItemIndicator,
  selectViewport,
  selectEmpty,
  loading,
  srOnly
};
const SelectContext = createContext(null);
function useSelect() {
  return useContext(SelectContext);
}
const OptionTypeContext = React__default.createContext(null);
function useOptionType() {
  return React__default.useContext(OptionTypeContext);
}
function OptionTypeProvider({
  children,
  Component
}) {
  return /* @__PURE__ */ jsx(OptionTypeContext.Provider, { value: Component, children });
}
const OptionContext = createContext({
  onOptionAdd: () => {
  },
  onOptionRemove: () => {
  }
});
function useOption() {
  return useContext(OptionContext);
}
const SimpleSelect = forwardRef(function SimpleSelect2(props, forwardedRef) {
  var _a;
  const { root: root2 } = useTheme();
  const {
    enabled: enabled2,
    onBlur,
    autoFocus,
    onValueChange,
    validationStatus,
    value,
    height,
    style,
    placeholder: placeholder2,
    id,
    triggerRef,
    onFocus,
    options: options2,
    children,
    readOnly: readOnly2
  } = props;
  const ref = forwardedRef ? composeRefs(triggerRef, forwardedRef) : triggerRef;
  const stringValue = useMemo(() => {
    return value != void 0 ? value + "" : void 0;
  }, [value]);
  const onValChange = useCallback(
    (val) => {
      if (readOnly2) {
        return;
      }
      const match = Array.from(options2).find((o) => `${o.value}` === val);
      onValueChange((match == null ? void 0 : match.value) ?? val);
    },
    [onValueChange, options2]
  );
  return /* @__PURE__ */ jsxs(Root, { value: stringValue, onValueChange: onValChange, children: [
    /* @__PURE__ */ jsxs(
      Trigger,
      {
        id,
        "aria-haspopup": "listbox",
        style,
        onFocus,
        onBlur,
        disabled: !enabled2,
        className: classnames(styles$k.selectTrigger, {
          [styles$k.error]: validationStatus === "error",
          [styles$k.warning]: validationStatus === "warning",
          [styles$k.valid]: validationStatus === "valid"
        }),
        ref,
        autoFocus,
        children: [
          /* @__PURE__ */ jsx("div", { className: styles$k.selectValue, children: readOnly2 ? ((_a = Array.from(options2).find((o) => `${o.value}` === stringValue)) == null ? void 0 : _a.label) || /* @__PURE__ */ jsx("span", { children: placeholder2 }) : /* @__PURE__ */ jsx(Value, { placeholder: placeholder2 }) }),
          /* @__PURE__ */ jsx(Icon$1, { asChild: true, children: /* @__PURE__ */ jsx(Icon, { name: "chevrondown" }) })
        ]
      }
    ),
    /* @__PURE__ */ jsx(Portal, { container: root2, children: /* @__PURE__ */ jsxs(
      Content,
      {
        className: styles$k.selectContent,
        position: "popper",
        style: { height },
        children: [
          /* @__PURE__ */ jsx(ScrollUpButton, { className: styles$k.selectScrollUpButton, children: /* @__PURE__ */ jsx(Icon, { name: "chevronup" }) }),
          /* @__PURE__ */ jsx(SelectViewport, { className: styles$k.selectViewport, role: "listbox", children }),
          /* @__PURE__ */ jsx(ScrollDownButton, { className: styles$k.selectScrollDownButton, children: /* @__PURE__ */ jsx(Icon, { name: "chevrondown" }) })
        ]
      }
    ) })
  ] });
});
const Select = forwardRef(function Select2({
  id,
  initialValue,
  value,
  enabled: enabled2 = true,
  placeholder: placeholder2,
  updateState = noop$1,
  validationStatus = "none",
  onDidChange = noop$1,
  onFocus = noop$1,
  onBlur = noop$1,
  registerComponentApi,
  emptyListTemplate,
  optionLabelRenderer,
  optionRenderer,
  valueRenderer,
  style,
  dropdownHeight,
  children,
  autoFocus = false,
  searchable = false,
  multiSelect = false,
  label: label2,
  labelPosition,
  labelWidth,
  labelBreak: labelBreak2 = false,
  required: required2 = false,
  inProgress = false,
  inProgressNotificationMessage = "Loading...",
  readOnly: readOnly2 = false
}, ref) {
  var _a;
  const [referenceElement, setReferenceElement] = useState(null);
  const [open, setOpen] = useState(false);
  const [width, setWidth] = useState(0);
  const observer = useRef();
  const { root: root2 } = useTheme();
  const [options2, setOptions] = useState(/* @__PURE__ */ new Set());
  const generatedId = useId();
  const inputId = id || generatedId;
  useEffect(() => {
    if (initialValue !== void 0) {
      updateState({ value: initialValue }, { initial: true });
    }
  }, [initialValue, updateState]);
  useEffect(() => {
    var _a2;
    const current = referenceElement;
    (_a2 = observer.current) == null ? void 0 : _a2.disconnect();
    if (current) {
      observer.current = new ResizeObserver(() => setWidth(current.clientWidth));
      observer.current.observe(current);
    }
    return () => {
      var _a3;
      (_a3 = observer.current) == null ? void 0 : _a3.disconnect();
    };
  }, [referenceElement]);
  const toggleOption = useCallback(
    (selectedValue) => {
      const newSelectedValue = multiSelect ? Array.isArray(value) ? value.includes(selectedValue) ? value.filter((v) => v !== selectedValue) : [...value, selectedValue] : [selectedValue] : selectedValue === value ? null : selectedValue;
      updateState({ value: newSelectedValue });
      onDidChange(newSelectedValue);
      if (!multiSelect) {
        setOpen(false);
      }
    },
    [multiSelect, value, updateState, onDidChange]
  );
  const clearValue = useCallback(() => {
    const newValue = multiSelect ? [] : "";
    updateState({ value: newValue });
    onDidChange(newValue);
  }, [multiSelect, updateState, onDidChange]);
  const focus = useCallback(() => {
    referenceElement == null ? void 0 : referenceElement.focus();
  }, [referenceElement]);
  const setValue = useEvent((newValue) => {
    toggleOption(newValue);
  });
  const reset = useEvent(() => {
    if (initialValue !== void 0) {
      updateState({ value: initialValue });
      onDidChange(initialValue);
    } else {
      clearValue();
    }
  });
  useEffect(() => {
    registerComponentApi == null ? void 0 : registerComponentApi({
      focus,
      setValue,
      reset
    });
  }, [focus, registerComponentApi, setValue, reset]);
  const emptyListNode = useMemo(
    () => emptyListTemplate ?? /* @__PURE__ */ jsxs("div", { className: styles$k.selectEmpty, children: [
      /* @__PURE__ */ jsx(Icon, { name: "noresult" }),
      /* @__PURE__ */ jsx("span", { children: "List is empty" })
    ] }),
    [emptyListTemplate]
  );
  const onOptionAdd = useCallback((option) => {
    setOptions((prev) => new Set(prev).add(option));
  }, []);
  const onOptionRemove = useCallback((option) => {
    setOptions((prev) => {
      const optionsSet = new Set(prev);
      optionsSet.delete(option);
      return optionsSet;
    });
  }, []);
  const optionContextValue = useMemo(
    () => ({
      onOptionAdd,
      onOptionRemove
    }),
    [onOptionAdd, onOptionRemove]
  );
  const selectContextValue = useMemo(
    () => ({
      multiSelect,
      value,
      optionLabelRenderer,
      optionRenderer,
      onChange: toggleOption,
      setOpen
    }),
    [multiSelect, toggleOption, value, optionLabelRenderer, optionRenderer]
  );
  return /* @__PURE__ */ jsx(SelectContext.Provider, { value: selectContextValue, children: /* @__PURE__ */ jsx(OptionContext.Provider, { value: optionContextValue, children: /* @__PURE__ */ jsxs(OptionTypeProvider, { Component: HiddenOption, children: [
    /* @__PURE__ */ jsx(
      ItemWithLabel,
      {
        ref,
        id: inputId,
        labelPosition,
        label: label2,
        labelWidth,
        labelBreak: labelBreak2,
        required: required2,
        enabled: enabled2,
        onFocus,
        onBlur,
        style,
        children: searchable || multiSelect ? /* @__PURE__ */ jsxs(Popover, { open, onOpenChange: setOpen, modal: false, children: [
          /* @__PURE__ */ jsxs(
            PopoverTrigger,
            {
              id: inputId,
              "aria-haspopup": "listbox",
              style,
              ref: setReferenceElement,
              onFocus,
              onBlur,
              disabled: !enabled2,
              "aria-expanded": open,
              onClick: () => setOpen((prev) => !prev),
              className: classnames(styles$k.selectTrigger, styles$k[validationStatus], {
                [styles$k.disabled]: !enabled2,
                [styles$k.multi]: multiSelect
              }),
              placeholder: placeholder2,
              autoFocus,
              children: [
                multiSelect ? Array.isArray(value) && value.length > 0 ? /* @__PURE__ */ jsx("div", { className: styles$k.badgeListContainer, children: /* @__PURE__ */ jsx("div", { className: styles$k.badgeList, children: value.map(
                  (v) => {
                    var _a2;
                    return valueRenderer ? valueRenderer(
                      Array.from(options2).find((o) => o.value === `${v}`),
                      () => {
                        toggleOption(v);
                      }
                    ) : /* @__PURE__ */ jsxs("span", { className: styles$k.badge, children: [
                      (_a2 = Array.from(options2).find((o) => o.value === `${v}`)) == null ? void 0 : _a2.label,
                      /* @__PURE__ */ jsx(
                        Icon,
                        {
                          name: "close",
                          size: "sm",
                          onClick: (event) => {
                            event.stopPropagation();
                            toggleOption(v);
                          }
                        }
                      )
                    ] }, v);
                  }
                ) }) }) : /* @__PURE__ */ jsx("span", { className: styles$k.placeholder, children: placeholder2 }) : value !== void 0 && value !== null ? /* @__PURE__ */ jsx("div", { children: (_a = Array.from(options2).find((o) => o.value === value)) == null ? void 0 : _a.label }) : /* @__PURE__ */ jsx("span", { className: styles$k.placeholder, children: placeholder2 || "" }),
                /* @__PURE__ */ jsxs("div", { className: styles$k.actions, children: [
                  multiSelect && Array.isArray(value) && value.length > 0 && /* @__PURE__ */ jsx(
                    Icon,
                    {
                      name: "close",
                      onClick: (event) => {
                        event.stopPropagation();
                        clearValue();
                      }
                    }
                  ),
                  /* @__PURE__ */ jsx(Icon, { name: "chevrondown" })
                ] })
              ]
            }
          ),
          open && /* @__PURE__ */ jsx(Portal, { container: root2, children: /* @__PURE__ */ jsx($d3863c46a17e8a28$export$20e40289641fbbb6, { asChild: true, loop: true, trapped: true, children: /* @__PURE__ */ jsx(
            PopoverContent,
            {
              style: { width, height: dropdownHeight },
              className: styles$k.selectContent,
              children: /* @__PURE__ */ jsxs(
                Command,
                {
                  className: styles$k.command,
                  shouldFilter: searchable,
                  filter: (value2, search, keywords) => {
                    const extendedValue = value2 + " " + keywords.join(" ");
                    if (extendedValue.toLowerCase().includes(search.toLowerCase()))
                      return 1;
                    return 0;
                  },
                  children: [
                    searchable ? /* @__PURE__ */ jsxs("div", { className: styles$k.commandInputContainer, children: [
                      /* @__PURE__ */ jsx(Icon, { name: "search" }),
                      /* @__PURE__ */ jsx(
                        CommandInput,
                        {
                          className: classnames(styles$k.commandInput),
                          placeholder: "Search..."
                        }
                      )
                    ] }) : (
                      // https://github.com/pacocoursey/cmdk/issues/322#issuecomment-2444703817
                      /* @__PURE__ */ jsx("button", { autoFocus: true, "aria-hidden": "true", className: styles$k.srOnly })
                    ),
                    /* @__PURE__ */ jsxs(CommandList, { className: styles$k.commandList, children: [
                      inProgress && /* @__PURE__ */ jsx("div", { className: styles$k.loading, children: inProgressNotificationMessage }),
                      Array.from(options2).map(({ value: value2, label: label22, enabled: enabled22, keywords }) => /* @__PURE__ */ jsx(
                        ComboboxOption,
                        {
                          readOnly: readOnly2,
                          value: value2,
                          label: label22,
                          enabled: enabled22,
                          keywords
                        },
                        value2
                      )),
                      !inProgress && /* @__PURE__ */ jsx(CommandEmpty, { children: emptyListNode })
                    ] })
                  ]
                }
              )
            }
          ) }) })
        ] }) : /* @__PURE__ */ jsx(
          SimpleSelect,
          {
            readOnly: !!readOnly2,
            ref,
            value,
            options: options2,
            onValueChange: toggleOption,
            id: inputId,
            style,
            onFocus,
            onBlur,
            enabled: enabled2,
            validationStatus,
            triggerRef: setReferenceElement,
            autoFocus,
            placeholder: placeholder2,
            height: dropdownHeight,
            children: options2.size > 0 ? Array.from(options2).map((option) => /* @__PURE__ */ jsx(
              SelectOption,
              {
                value: option.value,
                label: option.label,
                enabled: option.enabled
              },
              option.value
            )) : emptyListNode
          }
        )
      }
    ),
    children
  ] }) }) });
});
const ComboboxOption = forwardRef(function Combobox(option, forwardedRef) {
  const id = useId();
  const { label: label2, value, enabled: enabled2 = true, keywords, readOnly: readOnly2 } = option;
  const {
    value: selectedValue,
    onChange,
    multiSelect,
    optionLabelRenderer,
    optionRenderer,
    setOpen
  } = useSelect();
  const selected2 = useMemo(() => {
    return Array.isArray(selectedValue) && multiSelect ? selectedValue.includes(value) : selectedValue === value;
  }, [selectedValue, value, multiSelect]);
  return /* @__PURE__ */ jsx(
    CommandItem,
    {
      id,
      ref: forwardedRef,
      disabled: !enabled2,
      value,
      className: styles$k.multiComboboxOption,
      onSelect: () => {
        if (readOnly2) {
          setOpen(false);
          return;
        }
        onChange(value);
      },
      "data-state": selected2 ? "checked" : void 0,
      keywords,
      children: /* @__PURE__ */ jsx("div", { className: styles$k.multiComboboxOptionContent, children: optionRenderer ? optionRenderer({ label: label2, value, enabled: enabled2, keywords }, selectedValue, false) : /* @__PURE__ */ jsxs(Fragment, { children: [
        optionLabelRenderer ? optionLabelRenderer({ label: label2, value }) : label2,
        selected2 && /* @__PURE__ */ jsx(Icon, { name: "checkmark" })
      ] }) })
    },
    id
  );
});
function HiddenOption(option) {
  const { optionRenderer, label: label2 } = option;
  const { onOptionRemove, onOptionAdd } = useOption();
  const [node, setNode] = useState(null);
  const opt = useMemo(() => {
    return {
      ...option,
      label: label2 ?? (node == null ? void 0 : node.textContent) ?? "",
      keywords: [(node == null ? void 0 : node.textContent) ?? ""]
    };
  }, [option, node]);
  useEffect(() => {
    onOptionAdd(opt);
    return () => onOptionRemove(opt);
  }, [opt, onOptionAdd, onOptionRemove]);
  return /* @__PURE__ */ jsx("div", { ref: (el) => setNode(el), style: { display: "none" }, children: optionRenderer == null ? void 0 : optionRenderer({}) });
}
const SelectOption = React__default.forwardRef(
  (option, ref) => {
    const { value, label: label2, enabled: enabled2 = true } = option;
    const { optionLabelRenderer, optionRenderer, value: selectedValue } = useSelect();
    return /* @__PURE__ */ jsx(
      Item,
      {
        ref,
        className: styles$k.selectItem,
        value: value + "",
        disabled: !enabled2,
        "data-state": selectedValue === value && "checked",
        children: /* @__PURE__ */ jsx("div", { className: styles$k.selectItemContent, children: optionRenderer ? optionRenderer(
          {
            label: label2,
            value,
            enabled: enabled2
          },
          selectedValue,
          false
        ) : /* @__PURE__ */ jsxs(Fragment, { children: [
          /* @__PURE__ */ jsx(ItemText, { className: styles$k.selectItemContent, children: optionLabelRenderer ? optionLabelRenderer({ value, label: label2 }) : label2 }),
          selectedValue === value && /* @__PURE__ */ jsx("span", { className: styles$k.selectItemIndicator, children: /* @__PURE__ */ jsx(ItemIndicator, { children: /* @__PURE__ */ jsx(Icon, { name: "checkmark" }) }) })
        ] }) })
      }
    );
  }
);
SelectOption.displayName = "SelectOption";
const themeVars$i = `'{"gap-RadioGroupOption": "var(--xmlui-gap-RadioGroupOption)", "Input:backgroundColor-RadioGroupOption-default": "var(--xmlui-backgroundColor-RadioGroupOption-default)", "borderWidth-RadioGroupOption": "var(--xmlui-borderWidth-RadioGroupOption)", "Input:borderColor-RadioGroupOption-default": "var(--xmlui-borderColor-RadioGroupOption-default)", "Input:borderColor-RadioGroupOption-default--hover": "var(--xmlui-borderColor-RadioGroupOption-default--hover)", "Input:borderColor-RadioGroupOption-default--active": "var(--xmlui-borderColor-RadioGroupOption-default--active)", "Input:borderColor-RadioGroupOption--disabled": "var(--xmlui-borderColor-RadioGroupOption--disabled)", "Input:color-RadioGroupOption--disabled": "var(--xmlui-color-RadioGroupOption--disabled)", "Input:borderColor-RadioGroupOption-error": "var(--xmlui-borderColor-RadioGroupOption-error)", "Input:borderColor-RadioGroupOption-warning": "var(--xmlui-borderColor-RadioGroupOption-warning)", "Input:borderColor-RadioGroupOption-success": "var(--xmlui-borderColor-RadioGroupOption-success)", "backgroundColor-checked-RadioGroupOption-default": "var(--xmlui-backgroundColor-checked-RadioGroupOption-default)", "backgroundColor-checked-RadioGroupOption--disabled": "var(--xmlui-backgroundColor-checked-RadioGroupOption--disabled)", "backgroundColor-checked-RadioGroupOption-error": "var(--xmlui-backgroundColor-checked-RadioGroupOption-error)", "backgroundColor-checked-RadioGroupOption-warning": "var(--xmlui-backgroundColor-checked-RadioGroupOption-warning)", "backgroundColor-checked-RadioGroupOption-success": "var(--xmlui-backgroundColor-checked-RadioGroupOption-success)", "Input:fontSize-RadioGroupOption": "var(--xmlui-fontSize-RadioGroupOption)", "Input:fontWeight-RadioGroupOption": "var(--xmlui-fontWeight-RadioGroupOption)", "Input:color-RadioGroupOption-default": "var(--xmlui-color-RadioGroupOption-default)", "Input:color-RadioGroupOption-error": "var(--xmlui-color-RadioGroupOption-error)", "Input:color-RadioGroupOption-warning": "var(--xmlui-color-RadioGroupOption-warning)", "Input:color-RadioGroupOption-success": "var(--xmlui-color-RadioGroupOption-success)", "Input:outlineWidth-RadioGroupOption--focus": "var(--xmlui-outlineWidth-RadioGroupOption--focus)", "Input:outlineColor-RadioGroupOption--focus": "var(--xmlui-outlineColor-RadioGroupOption--focus)", "Input:outlineStyle-RadioGroupOption--focus": "var(--xmlui-outlineStyle-RadioGroupOption--focus)", "Input:outlineOffset-RadioGroupOption--focus": "var(--xmlui-outlineOffset-RadioGroupOption--focus)"}'`;
const radioGroupContainer = "_radioGroupContainer_294hm_13";
const radioOptionContainer = "_radioOptionContainer_294hm_20";
const radioOption = "_radioOption_294hm_20";
const error$5 = "_error_294hm_55";
const warning$5 = "_warning_294hm_58";
const valid$5 = "_valid_294hm_61";
const indicator$1 = "_indicator_294hm_65";
const disabled$3 = "_disabled_294hm_78";
const itemContainer = "_itemContainer_294hm_91";
const optionLabel = "_optionLabel_294hm_99";
const label = "_label_294hm_104";
const styles$j = {
  themeVars: themeVars$i,
  radioGroupContainer,
  radioOptionContainer,
  radioOption,
  error: error$5,
  warning: warning$5,
  valid: valid$5,
  indicator: indicator$1,
  disabled: disabled$3,
  itemContainer,
  optionLabel,
  label
};
const RadioGroupValidationStatusContext = createContext({
  status: "none"
});
const RadioGroup = forwardRef(function RadioGroup2({
  id,
  value = "",
  initialValue = "",
  enabled: enabled2 = true,
  validationStatus = "none",
  label: label2,
  labelPosition,
  labelWidth,
  labelBreak: labelBreak2,
  required: required2 = false,
  updateState = noop$1,
  onDidChange = noop$1,
  onFocus = noop$1,
  onBlur = noop$1,
  children,
  registerComponentApi,
  style
}, forwardedRef) {
  const [focused2, setFocused] = React__default.useState(false);
  useEffect(() => {
    updateState({ value: initialValue }, { initial: true });
  }, [initialValue, updateState]);
  const updateValue = useCallback(
    (value2) => {
      updateState({ value: value2 });
      onDidChange(value2);
    },
    [onDidChange, updateState]
  );
  const onInputChange = useCallback(
    (value2) => {
      updateValue(value2);
    },
    [updateValue]
  );
  const handleOnFocus = useCallback(() => {
    setFocused(true);
    onFocus == null ? void 0 : onFocus();
  }, [onFocus]);
  const handleOnBlur = useCallback(() => {
    setFocused(false);
    onBlur == null ? void 0 : onBlur();
  }, [onBlur]);
  const setValue = useEvent((val) => {
    updateValue(val);
  });
  useEffect(() => {
    registerComponentApi == null ? void 0 : registerComponentApi({
      //focus,
      setValue
    });
  }, [
    /* focus, */
    registerComponentApi,
    setValue
  ]);
  const contextValue2 = useMemo(() => {
    return { value, status: validationStatus };
  }, [value, validationStatus]);
  return /* @__PURE__ */ jsx(
    ItemWithLabel,
    {
      ref: forwardedRef,
      labelPosition,
      label: label2,
      labelWidth,
      labelBreak: labelBreak2,
      required: required2,
      enabled: enabled2,
      onFocus,
      onBlur,
      style,
      children: /* @__PURE__ */ jsx(OptionTypeProvider, { Component: RadioGroupOption, children: /* @__PURE__ */ jsx(RadioGroupValidationStatusContext.Provider, { value: contextValue2, children: /* @__PURE__ */ jsx(
        InnerRadioGroup.Root,
        {
          id,
          onBlur: handleOnBlur,
          onFocus: handleOnFocus,
          onValueChange: onInputChange,
          value,
          disabled: !enabled2,
          className: classnames(styles$j.radioGroupContainer, {
            [styles$j.focused]: focused2,
            [styles$j.disabled]: !enabled2
          }),
          children
        }
      ) }) })
    }
  );
});
const RadioGroupOption = ({
  value,
  label: label2,
  enabled: enabled2 = true,
  optionRenderer,
  style
}) => {
  const id = useId();
  const validationContext = useContext(RadioGroupValidationStatusContext);
  const statusStyles = useMemo(
    () => ({
      [styles$j.disabled]: !enabled2,
      [styles$j.error]: value === validationContext.value && validationContext.status === "error",
      [styles$j.warning]: value === validationContext.value && validationContext.status === "warning",
      [styles$j.valid]: value === validationContext.value && validationContext.status === "valid"
    }),
    [enabled2, validationContext.status, validationContext.value, value]
  );
  const item = useMemo(
    () => /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(
        InnerRadioGroup.Item,
        {
          className: classnames(styles$j.radioOption, statusStyles),
          value,
          disabled: !enabled2,
          id,
          children: /* @__PURE__ */ jsx(InnerRadioGroup.Indicator, { className: classnames(styles$j.indicator, statusStyles) })
        }
      ),
      /* @__PURE__ */ jsx("label", { htmlFor: id, className: classnames(styles$j.label, statusStyles), children: label2 ?? value })
    ] }),
    [enabled2, id, label2, statusStyles, value]
  );
  return /* @__PURE__ */ jsx("div", { className: styles$j.radioOptionContainer, style, children: optionRenderer ? /* @__PURE__ */ jsxs("label", { className: styles$j.optionLabel, children: [
    /* @__PURE__ */ jsx("div", { className: styles$j.itemContainer, children: item }),
    optionRenderer({
      $checked: value === validationContext.value
    })
  ] }) : item }, id);
};
const themeVars$h = `'{"Input:borderRadius-Textarea-default": "var(--xmlui-borderRadius-Textarea-default)", "Input:borderColor-Textarea-default": "var(--xmlui-borderColor-Textarea-default)", "Input:borderWidth-Textarea-default": "var(--xmlui-borderWidth-Textarea-default)", "Input:borderStyle-Textarea-default": "var(--xmlui-borderStyle-Textarea-default)", "Input:fontSize-Textarea-default": "var(--xmlui-fontSize-Textarea-default)", "Input:padding-Textarea-default": "var(--xmlui-padding-Textarea-default)", "Input:backgroundColor-Textarea-default": "var(--xmlui-backgroundColor-Textarea-default)", "Input:boxShadow-Textarea-default": "var(--xmlui-boxShadow-Textarea-default)", "Input:textColor-Textarea-default": "var(--xmlui-textColor-Textarea-default)", "Input:borderColor-Textarea-default--hover": "var(--xmlui-borderColor-Textarea-default--hover)", "Input:backgroundColor-Textarea-default--hover": "var(--xmlui-backgroundColor-Textarea-default--hover)", "Input:boxShadow-Textarea-default--hover": "var(--xmlui-boxShadow-Textarea-default--hover)", "Input:textColor-Textarea-default--hover": "var(--xmlui-textColor-Textarea-default--hover)", "Input:borderColor-Textarea-default--focus": "var(--xmlui-borderColor-Textarea-default--focus)", "Input:backgroundColor-Textarea-default--focus": "var(--xmlui-backgroundColor-Textarea-default--focus)", "Input:boxShadow-Textarea-default--focus": "var(--xmlui-boxShadow-Textarea-default--focus)", "Input:textColor-Textarea-default--focus": "var(--xmlui-textColor-Textarea-default--focus)", "Input:outlineWidth-Textarea-default--focus": "var(--xmlui-outlineWidth-Textarea-default--focus)", "Input:outlineColor-Textarea-default--focus": "var(--xmlui-outlineColor-Textarea-default--focus)", "Input:outlineStyle-Textarea-default--focus": "var(--xmlui-outlineStyle-Textarea-default--focus)", "Input:outlineOffset-Textarea-default--focus": "var(--xmlui-outlineOffset-Textarea-default--focus)", "Input:color-placeholder-Textarea-default": "var(--xmlui-color-placeholder-Textarea-default)", "Input:borderRadius-Textarea-error": "var(--xmlui-borderRadius-Textarea-error)", "Input:borderColor-Textarea-error": "var(--xmlui-borderColor-Textarea-error)", "Input:borderWidth-Textarea-error": "var(--xmlui-borderWidth-Textarea-error)", "Input:borderStyle-Textarea-error": "var(--xmlui-borderStyle-Textarea-error)", "Input:fontSize-Textarea-error": "var(--xmlui-fontSize-Textarea-error)", "Input:padding-Textarea-error": "var(--xmlui-padding-Textarea-error)", "Input:backgroundColor-Textarea-error": "var(--xmlui-backgroundColor-Textarea-error)", "Input:boxShadow-Textarea-error": "var(--xmlui-boxShadow-Textarea-error)", "Input:textColor-Textarea-error": "var(--xmlui-textColor-Textarea-error)", "Input:borderColor-Textarea-error--hover": "var(--xmlui-borderColor-Textarea-error--hover)", "Input:backgroundColor-Textarea-error--hover": "var(--xmlui-backgroundColor-Textarea-error--hover)", "Input:boxShadow-Textarea-error--hover": "var(--xmlui-boxShadow-Textarea-error--hover)", "Input:textColor-Textarea-error--hover": "var(--xmlui-textColor-Textarea-error--hover)", "Input:borderColor-Textarea-error--focus": "var(--xmlui-borderColor-Textarea-error--focus)", "Input:backgroundColor-Textarea-error--focus": "var(--xmlui-backgroundColor-Textarea-error--focus)", "Input:boxShadow-Textarea-error--focus": "var(--xmlui-boxShadow-Textarea-error--focus)", "Input:textColor-Textarea-error--focus": "var(--xmlui-textColor-Textarea-error--focus)", "Input:outlineWidth-Textarea-error--focus": "var(--xmlui-outlineWidth-Textarea-error--focus)", "Input:outlineColor-Textarea-error--focus": "var(--xmlui-outlineColor-Textarea-error--focus)", "Input:outlineStyle-Textarea-error--focus": "var(--xmlui-outlineStyle-Textarea-error--focus)", "Input:outlineOffset-Textarea-error--focus": "var(--xmlui-outlineOffset-Textarea-error--focus)", "Input:color-placeholder-Textarea-error": "var(--xmlui-color-placeholder-Textarea-error)", "Input:borderRadius-Textarea-warning": "var(--xmlui-borderRadius-Textarea-warning)", "Input:borderColor-Textarea-warning": "var(--xmlui-borderColor-Textarea-warning)", "Input:borderWidth-Textarea-warning": "var(--xmlui-borderWidth-Textarea-warning)", "Input:borderStyle-Textarea-warning": "var(--xmlui-borderStyle-Textarea-warning)", "Input:fontSize-Textarea-warning": "var(--xmlui-fontSize-Textarea-warning)", "Input:padding-Textarea-warning": "var(--xmlui-padding-Textarea-warning)", "Input:backgroundColor-Textarea-warning": "var(--xmlui-backgroundColor-Textarea-warning)", "Input:boxShadow-Textarea-warning": "var(--xmlui-boxShadow-Textarea-warning)", "Input:textColor-Textarea-warning": "var(--xmlui-textColor-Textarea-warning)", "Input:borderColor-Textarea-warning--hover": "var(--xmlui-borderColor-Textarea-warning--hover)", "Input:backgroundColor-Textarea-warning--hover": "var(--xmlui-backgroundColor-Textarea-warning--hover)", "Input:boxShadow-Textarea-warning--hover": "var(--xmlui-boxShadow-Textarea-warning--hover)", "Input:textColor-Textarea-warning--hover": "var(--xmlui-textColor-Textarea-warning--hover)", "Input:borderColor-Textarea-warning--focus": "var(--xmlui-borderColor-Textarea-warning--focus)", "Input:backgroundColor-Textarea-warning--focus": "var(--xmlui-backgroundColor-Textarea-warning--focus)", "Input:boxShadow-Textarea-warning--focus": "var(--xmlui-boxShadow-Textarea-warning--focus)", "Input:textColor-Textarea-warning--focus": "var(--xmlui-textColor-Textarea-warning--focus)", "Input:outlineWidth-Textarea-warning--focus": "var(--xmlui-outlineWidth-Textarea-warning--focus)", "Input:outlineColor-Textarea-warning--focus": "var(--xmlui-outlineColor-Textarea-warning--focus)", "Input:outlineStyle-Textarea-warning--focus": "var(--xmlui-outlineStyle-Textarea-warning--focus)", "Input:outlineOffset-Textarea-warning--focus": "var(--xmlui-outlineOffset-Textarea-warning--focus)", "Input:color-placeholder-Textarea-warning": "var(--xmlui-color-placeholder-Textarea-warning)", "Input:borderRadius-Textarea-success": "var(--xmlui-borderRadius-Textarea-success)", "Input:borderColor-Textarea-success": "var(--xmlui-borderColor-Textarea-success)", "Input:borderWidth-Textarea-success": "var(--xmlui-borderWidth-Textarea-success)", "Input:borderStyle-Textarea-success": "var(--xmlui-borderStyle-Textarea-success)", "Input:fontSize-Textarea-success": "var(--xmlui-fontSize-Textarea-success)", "Input:padding-Textarea-success": "var(--xmlui-padding-Textarea-success)", "Input:backgroundColor-Textarea-success": "var(--xmlui-backgroundColor-Textarea-success)", "Input:boxShadow-Textarea-success": "var(--xmlui-boxShadow-Textarea-success)", "Input:textColor-Textarea-success": "var(--xmlui-textColor-Textarea-success)", "Input:borderColor-Textarea-success--hover": "var(--xmlui-borderColor-Textarea-success--hover)", "Input:backgroundColor-Textarea-success--hover": "var(--xmlui-backgroundColor-Textarea-success--hover)", "Input:boxShadow-Textarea-success--hover": "var(--xmlui-boxShadow-Textarea-success--hover)", "Input:textColor-Textarea-success--hover": "var(--xmlui-textColor-Textarea-success--hover)", "Input:borderColor-Textarea-success--focus": "var(--xmlui-borderColor-Textarea-success--focus)", "Input:backgroundColor-Textarea-success--focus": "var(--xmlui-backgroundColor-Textarea-success--focus)", "Input:boxShadow-Textarea-success--focus": "var(--xmlui-boxShadow-Textarea-success--focus)", "Input:textColor-Textarea-success--focus": "var(--xmlui-textColor-Textarea-success--focus)", "Input:outlineWidth-Textarea-success--focus": "var(--xmlui-outlineWidth-Textarea-success--focus)", "Input:outlineColor-Textarea-success--focus": "var(--xmlui-outlineColor-Textarea-success--focus)", "Input:outlineStyle-Textarea-success--focus": "var(--xmlui-outlineStyle-Textarea-success--focus)", "Input:outlineOffset-Textarea-success--focus": "var(--xmlui-outlineOffset-Textarea-success--focus)", "Input:color-placeholder-Textarea-success": "var(--xmlui-color-placeholder-Textarea-success)", "Input:backgroundColor-Textarea--disabled": "var(--xmlui-backgroundColor-Textarea--disabled)", "Input:textColor-Textarea--disabled": "var(--xmlui-textColor-Textarea--disabled)", "Input:borderColor-Textarea--disabled": "var(--xmlui-borderColor-Textarea--disabled)"}'`;
const textarea = "_textarea_y6osp_13";
const error$4 = "_error_y6osp_53";
const warning$4 = "_warning_y6osp_85";
const valid$4 = "_valid_y6osp_117";
const resizeHorizontal = "_resizeHorizontal_y6osp_156";
const resizeVertical = "_resizeVertical_y6osp_160";
const resizeBoth = "_resizeBoth_y6osp_164";
const styles$i = {
  themeVars: themeVars$h,
  textarea,
  error: error$4,
  warning: warning$4,
  valid: valid$4,
  resizeHorizontal,
  resizeVertical,
  resizeBoth
};
const updateRef = (ref, value) => {
  if (typeof ref === "function") {
    ref(value);
    return;
  }
  ref.current = value;
};
const useComposedRef = (libRef, userRef) => {
  const prevUserRef = React.useRef();
  return React.useCallback(
    (instance) => {
      libRef.current = instance;
      if (prevUserRef.current) {
        updateRef(prevUserRef.current, null);
      }
      prevUserRef.current = userRef;
      if (!userRef) {
        return;
      }
      updateRef(userRef, instance);
    },
    [userRef]
  );
};
const noop = () => {
};
const TextAreaResizable = ({ maxRows, minRows, onChange = noop, style, ...props }, userRef) => {
  const libRef = useRef(null);
  const ref = useComposedRef(libRef, userRef);
  const [minCompHeight, setMinCompHeight] = React.useState();
  const [maxCompHeight, setMaxCompHeight] = React.useState();
  useEffect(() => {
    if (!libRef.current) return;
    const style2 = getComputedStyle(libRef.current);
    const lineHeight = parseFloat(style2.lineHeight);
    const paddingSize = parseFloat(style2.paddingTop) + parseFloat(style2.paddingBottom);
    const borderSize = parseFloat(style2.borderTop) + parseFloat(style2.borderBottom);
    const extraSize = (style2.boxSizing === "border-box" ? borderSize : 0) + paddingSize;
    setMinCompHeight(lineHeight * (minRows ?? 1) + extraSize);
    setMaxCompHeight(lineHeight * (maxRows ?? 1e4) + extraSize);
  }, [libRef.current, maxRows, minRows]);
  return /* @__PURE__ */ jsx(
    "textarea",
    {
      ref,
      ...props,
      onChange,
      style: { ...style, minHeight: minCompHeight, maxHeight: maxCompHeight }
    }
  );
};
const TextAreaResizable$1 = React.forwardRef(TextAreaResizable);
const resizeMap = {
  horizontal: styles$i.resizeHorizontal,
  vertical: styles$i.resizeVertical,
  both: styles$i.resizeBoth
};
const TextArea = forwardRef(function TextArea2({
  id,
  value = "",
  placeholder: placeholder2 = "",
  required: required2 = false,
  readOnly: readOnly2 = false,
  allowCopy = true,
  updateState = noop$1,
  validationStatus,
  autoFocus = false,
  initialValue = "",
  resize: resize2,
  onDidChange = noop$1,
  onFocus = noop$1,
  onBlur = noop$1,
  controlled = true,
  enterSubmits = true,
  escResets,
  style,
  registerComponentApi,
  autoSize,
  maxRows,
  minRows,
  maxLength,
  rows = 2,
  enabled: enabled2 = true,
  label: label2,
  labelPosition,
  labelWidth,
  labelBreak: labelBreak2
}, forwardedRef) {
  const inputRef = useRef(null);
  const [cursorPosition, setCursorPosition] = useState(null);
  const [focused2, setFocused] = React__default.useState(false);
  const updateValue = useCallback(
    (value2) => {
      updateState({ value: value2 });
      onDidChange(value2);
    },
    [onDidChange, updateState]
  );
  const onInputChange = useCallback(
    (event) => {
      updateValue(event.target.value);
    },
    [updateValue]
  );
  useEffect(() => {
    updateState({ value: initialValue }, { initial: true });
  }, [initialValue, updateState]);
  const handleCopy = (event) => {
    if (allowCopy) {
      return true;
    } else {
      event.preventDefault();
      return false;
    }
  };
  const handleOnFocus = () => {
    setFocused(true);
    onFocus == null ? void 0 : onFocus();
  };
  const handleOnBlur = () => {
    setFocused(false);
    onBlur == null ? void 0 : onBlur();
  };
  const focus = useCallback(() => {
    setTimeout(() => {
      var _a;
      (_a = inputRef.current) == null ? void 0 : _a.focus();
    }, 0);
  }, []);
  const insert = useCallback(
    (text2) => {
      const input2 = inputRef == null ? void 0 : inputRef.current;
      if (input2 && text2) {
        const start2 = input2.selectionStart;
        const value2 = input2.value;
        onInputChange({
          // @ts-ignore
          target: {
            value: value2.substring(0, start2) + text2 + value2.substring(start2)
          }
        });
        setCursorPosition(start2 + text2.length);
      }
    },
    [inputRef, onInputChange]
  );
  const setValue = useEvent((val) => {
    updateValue(val);
  });
  useEffect(() => {
    if (cursorPosition) {
      const input2 = inputRef == null ? void 0 : inputRef.current;
      if (input2) {
        input2.setSelectionRange(cursorPosition, cursorPosition);
        setCursorPosition(null);
      }
    }
  }, [value, cursorPosition, inputRef]);
  useEffect(() => {
    registerComponentApi == null ? void 0 : registerComponentApi({
      focus,
      insert,
      setValue
    });
  }, [focus, insert, registerComponentApi, setValue]);
  const handleEnter = useCallback(
    (e) => {
      var _a, _b;
      if (e.currentTarget.form && enterSubmits && e.key.toLowerCase() === "enter" && !e.shiftKey) {
        e.preventDefault();
        (_a = e.currentTarget.form) == null ? void 0 : _a.requestSubmit();
      }
      if (e.currentTarget.form && escResets && e.key.toLowerCase() === "escape" && !e.shiftKey) {
        e.preventDefault();
        (_b = e.currentTarget.form) == null ? void 0 : _b.reset();
      }
    },
    [enterSubmits, escResets]
  );
  const textareaProps = {
    className: classnames(styles$i.textarea, resize2 ? resizeMap[resize2] : "", {
      [styles$i.focused]: focused2,
      [styles$i.disabled]: !enabled2,
      [styles$i.error]: validationStatus === "error",
      [styles$i.warning]: validationStatus === "warning",
      [styles$i.valid]: validationStatus === "valid"
    }),
    ref: inputRef,
    style,
    value: controlled ? value || "" : void 0,
    disabled: !enabled2,
    autoFocus,
    name: id,
    placeholder: placeholder2,
    required: required2,
    maxLength,
    "aria-multiline": true,
    "aria-readonly": readOnly2,
    readOnly: readOnly2,
    onChange: onInputChange,
    onCopy: handleCopy,
    onFocus: handleOnFocus,
    onBlur: handleOnBlur,
    onKeyDown: handleEnter,
    autoComplete: "off"
  };
  if (resize2 === "both" || resize2 === "horizontal" || resize2 === "vertical") {
    return /* @__PURE__ */ jsx(
      ItemWithLabel,
      {
        ref: forwardedRef,
        labelPosition,
        label: label2,
        labelWidth,
        labelBreak: labelBreak2,
        required: required2,
        enabled: enabled2,
        onFocus,
        onBlur,
        style,
        children: /* @__PURE__ */ jsx(
          TextAreaResizable$1,
          {
            ...textareaProps,
            style,
            maxRows,
            minRows,
            rows
          }
        )
      }
    );
  }
  if (autoSize || !isNil(maxRows) || !isNil(minRows)) {
    return /* @__PURE__ */ jsx(
      ItemWithLabel,
      {
        ref: forwardedRef,
        labelPosition,
        label: label2,
        labelWidth,
        labelBreak: labelBreak2,
        required: required2,
        enabled: enabled2,
        onFocus,
        onBlur,
        style,
        children: /* @__PURE__ */ jsx(
          TextareaAutosize,
          {
            ...textareaProps,
            style,
            maxRows,
            minRows,
            rows
          }
        )
      }
    );
  }
  return /* @__PURE__ */ jsx(
    ItemWithLabel,
    {
      ref: forwardedRef,
      labelPosition,
      label: label2,
      labelWidth,
      labelBreak: labelBreak2,
      required: required2,
      enabled: enabled2,
      onFocus,
      onBlur,
      style,
      children: /* @__PURE__ */ jsx("textarea", { ...textareaProps, rows })
    }
  );
});
const themeVars$g = `'{"border-AutoComplete": "var(--xmlui-border-AutoComplete)", "borderHorizontal-AutoComplete": "var(--xmlui-borderHorizontal-AutoComplete, var(--xmlui-border-AutoComplete))", "borderVertical-AutoComplete": "var(--xmlui-borderVertical-AutoComplete, var(--xmlui-border-AutoComplete))", "borderLeft-AutoComplete": "var(--xmlui-borderLeft-AutoComplete, var(--xmlui-borderHorizontal-AutoComplete, var(--xmlui-border-AutoComplete)))", "borderRight-AutoComplete": "var(--xmlui-borderRight-AutoComplete, var(--xmlui-borderHorizontal-AutoComplete, var(--xmlui-border-AutoComplete)))", "borderTop-AutoComplete": "var(--xmlui-borderTop-AutoComplete, var(--xmlui-borderVertical-AutoComplete, var(--xmlui-border-AutoComplete)))", "borderBottom-AutoComplete": "var(--xmlui-borderBottom-AutoComplete, var(--xmlui-borderVertical-AutoComplete, var(--xmlui-border-AutoComplete)))", "borderWidth-AutoComplete": "var(--xmlui-borderWidth-AutoComplete)", "borderHorizontalWidth-AutoComplete": "var(--xmlui-borderHorizontalWidth-AutoComplete, var(--xmlui-borderWidth-AutoComplete))", "borderLeftWidth-AutoComplete": "var(--xmlui-borderLeftWidth-AutoComplete, var(--xmlui-borderHorizontalWidth-AutoComplete, var(--xmlui-borderWidth-AutoComplete)))", "borderRightWidth-AutoComplete": "var(--xmlui-borderRightWidth-AutoComplete, var(--xmlui-borderHorizontalWidth-AutoComplete, var(--xmlui-borderWidth-AutoComplete)))", "borderVerticalWidth-AutoComplete": "var(--xmlui-borderVerticalWidth-AutoComplete, var(--xmlui-borderWidth-AutoComplete))", "borderTopWidth-AutoComplete": "var(--xmlui-borderTopWidth-AutoComplete, var(--xmlui-borderVerticalWidth-AutoComplete, var(--xmlui-borderWidth-AutoComplete)))", "borderBottomWidth-AutoComplete": "var(--xmlui-borderBottomWidth-AutoComplete, var(--xmlui-borderVerticalWidth-AutoComplete, var(--xmlui-borderWidth-AutoComplete)))", "borderStyle-AutoComplete": "var(--xmlui-borderStyle-AutoComplete)", "borderHorizontalStyle-AutoComplete": "var(--xmlui-borderHorizontalStyle-AutoComplete, var(--xmlui-borderStyle-AutoComplete))", "borderLeftStyle-AutoComplete": "var(--xmlui-borderLeftStyle-AutoComplete, var(--xmlui-borderHorizontalStyle-AutoComplete, var(--xmlui-borderStyle-AutoComplete)))", "borderRightStyle-AutoComplete": "var(--xmlui-borderRightStyle-AutoComplete, var(--xmlui-borderHorizontalStyle-AutoComplete, var(--xmlui-borderStyle-AutoComplete)))", "borderVerticalStyle-AutoComplete": "var(--xmlui-borderVerticalStyle-AutoComplete, var(--xmlui-borderStyle-AutoComplete))", "borderTopStyle-AutoComplete": "var(--xmlui-borderTopStyle-AutoComplete, var(--xmlui-borderVerticalStyle-AutoComplete, var(--xmlui-borderStyle-AutoComplete)))", "borderBottomStyle-AutoComplete": "var(--xmlui-borderBottomStyle-AutoComplete, var(--xmlui-borderVerticalStyle-AutoComplete, var(--xmlui-borderStyle-AutoComplete)))", "borderColor-AutoComplete": "var(--xmlui-borderColor-AutoComplete)", "borderHorizontalColor-AutoComplete": "var(--xmlui-borderHorizontalColor-AutoComplete, var(--xmlui-borderColor-AutoComplete))", "borderLeftColor-AutoComplete": "var(--xmlui-borderLeftColor-AutoComplete, var(--xmlui-borderHorizontalColor-AutoComplete, var(--xmlui-borderColor-AutoComplete)))", "borderRightColor-AutoComplete": "var(--xmlui-borderRightColor-AutoComplete, var(--xmlui-borderHorizontalColor-AutoComplete, var(--xmlui-borderColor-AutoComplete)))", "borderVerticalColor-AutoComplete": "var(--xmlui-borderVerticalColor-AutoComplete, var(--xmlui-borderColor-AutoComplete))", "borderTopColor-AutoComplete": "var(--xmlui-borderTopColor-AutoComplete, var(--xmlui-borderVerticalColor-AutoComplete, var(--xmlui-borderColor-AutoComplete)))", "borderBottomColor-AutoComplete": "var(--xmlui-borderBottomColor-AutoComplete, var(--xmlui-borderVerticalColor-AutoComplete, var(--xmlui-borderColor-AutoComplete)))", "borderStartStartRadius-AutoComplete": "var(--xmlui-borderStartStartRadius-AutoComplete, var(--xmlui-borderRadius-AutoComplete))", "borderStartEndRadius-AutoComplete": "var(--xmlui-borderStartEndRadius-AutoComplete, var(--xmlui-borderRadius-AutoComplete))", "borderEndStartRadius-AutoComplete": "var(--xmlui-borderEndStartRadius-AutoComplete, var(--xmlui-borderRadius-AutoComplete))", "borderEndEndRadius-AutoComplete": "var(--xmlui-borderEndEndRadius-AutoComplete, var(--xmlui-borderRadius-AutoComplete))", "Input:borderRadius-AutoComplete-default": "var(--xmlui-borderRadius-AutoComplete-default)", "Input:borderColor-AutoComplete-default": "var(--xmlui-borderColor-AutoComplete-default)", "Input:borderWidth-AutoComplete-default": "var(--xmlui-borderWidth-AutoComplete-default)", "Input:borderStyle-AutoComplete-default": "var(--xmlui-borderStyle-AutoComplete-default)", "Input:fontSize-AutoComplete-default": "var(--xmlui-fontSize-AutoComplete-default)", "Input:backgroundColor-AutoComplete-default": "var(--xmlui-backgroundColor-AutoComplete-default)", "Input:boxShadow-AutoComplete-default": "var(--xmlui-boxShadow-AutoComplete-default)", "Input:textColor-AutoComplete-default": "var(--xmlui-textColor-AutoComplete-default)", "Input:borderColor-AutoComplete-default--hover": "var(--xmlui-borderColor-AutoComplete-default--hover)", "Input:backgroundColor-AutoComplete-default--hover": "var(--xmlui-backgroundColor-AutoComplete-default--hover)", "Input:boxShadow-AutoComplete-default--hover": "var(--xmlui-boxShadow-AutoComplete-default--hover)", "Input:textColor-AutoComplete-default--hover": "var(--xmlui-textColor-AutoComplete-default--hover)", "Input:textColor-placeholder-AutoComplete-default": "var(--xmlui-textColor-placeholder-AutoComplete-default)", "Input:borderRadius-AutoComplete-error": "var(--xmlui-borderRadius-AutoComplete-error)", "Input:borderColor-AutoComplete-error": "var(--xmlui-borderColor-AutoComplete-error)", "Input:borderWidth-AutoComplete-error": "var(--xmlui-borderWidth-AutoComplete-error)", "Input:borderStyle-AutoComplete-error": "var(--xmlui-borderStyle-AutoComplete-error)", "Input:fontSize-AutoComplete-error": "var(--xmlui-fontSize-AutoComplete-error)", "Input:backgroundColor-AutoComplete-error": "var(--xmlui-backgroundColor-AutoComplete-error)", "Input:boxShadow-AutoComplete-error": "var(--xmlui-boxShadow-AutoComplete-error)", "Input:textColor-AutoComplete-error": "var(--xmlui-textColor-AutoComplete-error)", "Input:borderColor-AutoComplete-error--hover": "var(--xmlui-borderColor-AutoComplete-error--hover)", "Input:backgroundColor-AutoComplete-error--hover": "var(--xmlui-backgroundColor-AutoComplete-error--hover)", "Input:boxShadow-AutoComplete-error--hover": "var(--xmlui-boxShadow-AutoComplete-error--hover)", "Input:textColor-AutoComplete-error--hover": "var(--xmlui-textColor-AutoComplete-error--hover)", "Input:textColor-placeholder-AutoComplete-error": "var(--xmlui-textColor-placeholder-AutoComplete-error)", "Input:borderRadius-AutoComplete-warning": "var(--xmlui-borderRadius-AutoComplete-warning)", "Input:borderColor-AutoComplete-warning": "var(--xmlui-borderColor-AutoComplete-warning)", "Input:borderWidth-AutoComplete-warning": "var(--xmlui-borderWidth-AutoComplete-warning)", "Input:borderStyle-AutoComplete-warning": "var(--xmlui-borderStyle-AutoComplete-warning)", "Input:fontSize-AutoComplete-warning": "var(--xmlui-fontSize-AutoComplete-warning)", "Input:backgroundColor-AutoComplete-warning": "var(--xmlui-backgroundColor-AutoComplete-warning)", "Input:boxShadow-AutoComplete-warning": "var(--xmlui-boxShadow-AutoComplete-warning)", "Input:textColor-AutoComplete-warning": "var(--xmlui-textColor-AutoComplete-warning)", "Input:borderColor-AutoComplete-warning--hover": "var(--xmlui-borderColor-AutoComplete-warning--hover)", "Input:backgroundColor-AutoComplete-warning--hover": "var(--xmlui-backgroundColor-AutoComplete-warning--hover)", "Input:boxShadow-AutoComplete-warning--hover": "var(--xmlui-boxShadow-AutoComplete-warning--hover)", "Input:textColor-AutoComplete-warning--hover": "var(--xmlui-textColor-AutoComplete-warning--hover)", "Input:textColor-placeholder-AutoComplete-warning": "var(--xmlui-textColor-placeholder-AutoComplete-warning)", "Input:borderRadius-AutoComplete-success": "var(--xmlui-borderRadius-AutoComplete-success)", "Input:borderColor-AutoComplete-success": "var(--xmlui-borderColor-AutoComplete-success)", "Input:borderWidth-AutoComplete-success": "var(--xmlui-borderWidth-AutoComplete-success)", "Input:borderStyle-AutoComplete-success": "var(--xmlui-borderStyle-AutoComplete-success)", "Input:fontSize-AutoComplete-success": "var(--xmlui-fontSize-AutoComplete-success)", "Input:backgroundColor-AutoComplete-success": "var(--xmlui-backgroundColor-AutoComplete-success)", "Input:boxShadow-AutoComplete-success": "var(--xmlui-boxShadow-AutoComplete-success)", "Input:textColor-AutoComplete-success": "var(--xmlui-textColor-AutoComplete-success)", "Input:borderColor-AutoComplete-success--hover": "var(--xmlui-borderColor-AutoComplete-success--hover)", "Input:backgroundColor-AutoComplete-success--hover": "var(--xmlui-backgroundColor-AutoComplete-success--hover)", "Input:boxShadow-AutoComplete-success--hover": "var(--xmlui-boxShadow-AutoComplete-success--hover)", "Input:textColor-AutoComplete-success--hover": "var(--xmlui-textColor-AutoComplete-success--hover)", "Input:textColor-placeholder-AutoComplete-success": "var(--xmlui-textColor-placeholder-AutoComplete-success)", "Input:backgroundColor-AutoComplete--disabled": "var(--xmlui-backgroundColor-AutoComplete--disabled)", "Input:textColor-AutoComplete--disabled": "var(--xmlui-textColor-AutoComplete--disabled)", "Input:borderColor-AutoComplete--disabled": "var(--xmlui-borderColor-AutoComplete--disabled)", "Input:outlineWidth-AutoComplete--focus": "var(--xmlui-outlineWidth-AutoComplete--focus)", "Input:outlineColor-AutoComplete--focus": "var(--xmlui-outlineColor-AutoComplete--focus)", "Input:outlineStyle-AutoComplete--focus": "var(--xmlui-outlineStyle-AutoComplete--focus)", "Input:outlineOffset-AutoComplete--focus": "var(--xmlui-outlineOffset-AutoComplete--focus)", "paddingVertical-AutoComplete-badge": "var(--xmlui-paddingVertical-AutoComplete-badge)", "paddingHorizontal-AutoComplete-badge": "var(--xmlui-paddingHorizontal-AutoComplete-badge)", "Input:fontSize-AutoComplete-badge": "var(--xmlui-fontSize-AutoComplete-badge)", "Input:backgroundColor-AutoComplete-badge": "var(--xmlui-backgroundColor-AutoComplete-badge)", "Input:textColor-AutoComplete-badge": "var(--xmlui-textColor-AutoComplete-badge)", "Input:backgroundColor-AutoComplete-badge--hover": "var(--xmlui-backgroundColor-AutoComplete-badge--hover)", "Input:textColor-AutoComplete-badge--hover": "var(--xmlui-textColor-AutoComplete-badge--hover)", "Input:backgroundColor-AutoComplete-badge--active": "var(--xmlui-backgroundColor-AutoComplete-badge--active)", "Input:textColor-AutoComplete-badge--active": "var(--xmlui-textColor-AutoComplete-badge--active)", "Input:textColor-placeholder-AutoComplete": "var(--xmlui-textColor-placeholder-AutoComplete)", "Input:backgroundColor-menu-AutoComplete": "var(--xmlui-backgroundColor-menu-AutoComplete)", "Input:borderRadius-menu-AutoComplete": "var(--xmlui-borderRadius-menu-AutoComplete)", "Input:boxShadow-menu-AutoComplete": "var(--xmlui-boxShadow-menu-AutoComplete)", "backgroundColor-item-AutoComplete": "var(--xmlui-backgroundColor-item-AutoComplete)", "backgroundColor-item-AutoComplete--hover": "var(--xmlui-backgroundColor-item-AutoComplete--hover)", "textColor-item-AutoComplete--disabled": "var(--xmlui-textColor-item-AutoComplete--disabled)"}'`;
const command = "_command_1xx47_13";
const badgeListWrapper = "_badgeListWrapper_1xx47_20";
const error$3 = "_error_1xx47_44";
const warning$3 = "_warning_1xx47_63";
const valid$3 = "_valid_1xx47_82";
const disabled$2 = "_disabled_1xx47_101";
const focused$1 = "_focused_1xx47_108";
const badgeList = "_badgeList_1xx47_20";
const badge = "_badge_1xx47_20";
const commandInput = "_commandInput_1xx47_150";
const actions = "_actions_1xx47_166";
const autoCompleteEmpty = "_autoCompleteEmpty_1xx47_172";
const commandList = "_commandList_1xx47_182";
const autoCompleteOption = "_autoCompleteOption_1xx47_195";
const styles$h = {
  themeVars: themeVars$g,
  command,
  badgeListWrapper,
  error: error$3,
  warning: warning$3,
  valid: valid$3,
  disabled: disabled$2,
  focused: focused$1,
  badgeList,
  badge,
  commandInput,
  actions,
  autoCompleteEmpty,
  commandList,
  "fade-in": "_fade-in_1xx47_1",
  autoCompleteOption
};
const AutoCompleteContext = createContext({
  value: null,
  onChange: (selectedValue) => {
  },
  optionRenderer: (option) => /* @__PURE__ */ jsx("div", { children: option.label }),
  inputValue: "",
  options: /* @__PURE__ */ new Set(),
  open: false,
  setOpen: (open) => {
  }
});
function useAutoComplete() {
  return useContext(AutoCompleteContext);
}
function defaultRenderer(item) {
  return /* @__PURE__ */ jsx("div", { children: item.label });
}
function isOptionsExist(options2, newOptions) {
  return newOptions.some(
    (option) => Array.from(options2).some((o) => o.value === option.value || o.label === option.label)
  );
}
const AutoComplete = forwardRef(function AutoComplete2({
  id,
  initialValue,
  value,
  enabled: enabled2 = true,
  placeholder: placeholder2,
  updateState = noop$1,
  validationStatus = "none",
  onDidChange = noop$1,
  onFocus = noop$1,
  onBlur = noop$1,
  registerComponentApi,
  optionRenderer = defaultRenderer,
  emptyListTemplate,
  style,
  children,
  autoFocus = false,
  dropdownHeight,
  multi = false,
  label: label2,
  labelPosition,
  labelWidth,
  labelBreak: labelBreak2,
  required: required2 = false
}, forwardedRef) {
  const [referenceElement, setReferenceElement] = useState(null);
  const inputRef = useRef(null);
  const [open, setOpen] = useState(false);
  const dropdownRef = useRef(null);
  const [options2, setOptions] = useState(/* @__PURE__ */ new Set());
  const [inputValue, setInputValue] = useState("");
  const { root: root2 } = useTheme();
  const [width, setWidth] = useState(0);
  const observer = useRef();
  const generatedId = useId();
  const inputId = id || generatedId;
  useEffect(() => {
    if (initialValue !== void 0) {
      updateState({ value: initialValue || [] }, { initial: true });
    }
  }, [initialValue, updateState]);
  useEffect(() => {
    var _a;
    const current = referenceElement;
    (_a = observer.current) == null ? void 0 : _a.disconnect();
    if (current) {
      observer.current = new ResizeObserver(() => setWidth(current.clientWidth));
      observer.current.observe(current);
    }
    return () => {
      var _a2;
      (_a2 = observer.current) == null ? void 0 : _a2.disconnect();
    };
  }, [referenceElement]);
  const toggleOption = useCallback(
    (selectedValue) => {
      if (multi) {
        setInputValue("");
      } else {
        setOpen(true);
      }
      if (selectedValue === "") return;
      const newSelectedValue = multi ? Array.isArray(value) ? value.includes(selectedValue) ? value.filter((v) => v !== selectedValue) : [...value, selectedValue] : [selectedValue] : selectedValue === value ? null : selectedValue;
      updateState({ value: newSelectedValue });
      onDidChange(newSelectedValue);
    },
    [multi, value, updateState, onDidChange]
  );
  useEffect(() => {
    var _a;
    if (!multi) {
      const label22 = (_a = Array.from(options2).find((o) => o.value === value)) == null ? void 0 : _a.label;
      setInputValue(label22 ? label22 + "" : "");
    }
  }, [multi, options2, value]);
  const clearValue = useCallback(() => {
    const newValue = multi ? [] : "";
    setInputValue("");
    updateState({ value: newValue });
    onDidChange(newValue);
  }, [multi, updateState, onDidChange]);
  const onOptionAdd = useCallback((option) => {
    setOptions((prev) => new Set(prev).add(option));
  }, []);
  const onOptionRemove = useCallback((option) => {
    setOptions((prev) => {
      const optionsSet = new Set(prev);
      optionsSet.delete(option);
      return optionsSet;
    });
  }, []);
  const handleClickOutside = (event) => {
    if (dropdownRef.current && !dropdownRef.current.contains(event.target) && inputRef.current && !inputRef.current.contains(event.target)) {
      setOpen(false);
      inputRef.current.blur();
    }
  };
  useEffect(() => {
    if (open) {
      document.addEventListener("mousedown", handleClickOutside);
      document.addEventListener("touchend", handleClickOutside);
    } else {
      document.removeEventListener("mousedown", handleClickOutside);
      document.removeEventListener("touchend", handleClickOutside);
    }
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
      document.removeEventListener("touchend", handleClickOutside);
    };
  }, [open]);
  const emptyListNode = useMemo(
    () => emptyListTemplate ?? /* @__PURE__ */ jsxs("div", { className: styles$h.autoCompleteEmpty, children: [
      /* @__PURE__ */ jsx(Icon, { name: "noresult" }),
      /* @__PURE__ */ jsx("span", { children: "List is empty" })
    ] }),
    [emptyListTemplate]
  );
  const focus = useCallback(() => {
    var _a;
    (_a = inputRef == null ? void 0 : inputRef.current) == null ? void 0 : _a.focus();
  }, [inputRef]);
  const setValue = useEvent((newValue) => {
    updateState({ value: Array.isArray(newValue) ? newValue : [newValue] });
  });
  useEffect(() => {
    registerComponentApi == null ? void 0 : registerComponentApi({
      focus,
      setValue
    });
  }, [focus, registerComponentApi, setValue]);
  const optionContextValue = useMemo(
    () => ({
      onOptionAdd,
      onOptionRemove
    }),
    [onOptionAdd, onOptionRemove]
  );
  const autoCompleteContextValue = useMemo(() => {
    return {
      multi,
      value,
      onChange: toggleOption,
      optionRenderer,
      options: options2,
      inputValue,
      open,
      setOpen
    };
  }, [inputValue, multi, optionRenderer, options2, toggleOption, value, open, setOpen]);
  return /* @__PURE__ */ jsx(AutoCompleteContext.Provider, { value: autoCompleteContextValue, children: /* @__PURE__ */ jsx(OptionTypeProvider, { Component: HiddenOption, children: /* @__PURE__ */ jsxs(OptionContext.Provider, { value: optionContextValue, children: [
    children,
    /* @__PURE__ */ jsx(
      ItemWithLabel,
      {
        id: inputId,
        ref: forwardedRef,
        labelPosition,
        label: label2,
        labelWidth,
        labelBreak: labelBreak2,
        required: required2,
        enabled: enabled2,
        onFocus,
        onBlur,
        style,
        children: /* @__PURE__ */ jsx(Popover, { open, children: /* @__PURE__ */ jsxs(
          Command,
          {
            ref: dropdownRef,
            className: styles$h.command,
            filter: (value2, search, keywords) => {
              const extendedValue = value2 + " " + keywords.join(" ");
              if (extendedValue.toLowerCase().includes(search.toLowerCase())) return 1;
              return 0;
            },
            children: [
              /* @__PURE__ */ jsx(
                PopoverTrigger,
                {
                  style: { width: "100%" },
                  id: inputId,
                  onClick: () => {
                    var _a;
                    if (!enabled2) return;
                    (_a = inputRef == null ? void 0 : inputRef.current) == null ? void 0 : _a.focus();
                  },
                  children: /* @__PURE__ */ jsxs(
                    "div",
                    {
                      ref: setReferenceElement,
                      style,
                      className: classnames(styles$h.badgeListWrapper, styles$h[validationStatus], {
                        [styles$h.disabled]: !enabled2,
                        [styles$h.focused]: document.activeElement === inputRef.current
                      }),
                      children: [
                        multi ? /* @__PURE__ */ jsxs("div", { className: styles$h.badgeList, children: [
                          Array.isArray(value) && value.map((v) => {
                            var _a;
                            return /* @__PURE__ */ jsxs("span", { className: styles$h.badge, children: [
                              (_a = Array.from(options2).find((o) => o.value === v)) == null ? void 0 : _a.label,
                              /* @__PURE__ */ jsx(
                                Icon,
                                {
                                  name: "close",
                                  size: "sm",
                                  onClick: (event) => {
                                    event.stopPropagation();
                                    toggleOption(v);
                                  }
                                }
                              )
                            ] }, v);
                          }),
                          /* @__PURE__ */ jsx(
                            CommandInput,
                            {
                              id,
                              autoFocus,
                              ref: inputRef,
                              value: inputValue,
                              disabled: !enabled2,
                              onValueChange: (value2) => {
                                setOpen(true);
                                setInputValue(value2);
                              },
                              onFocus: () => {
                                setOpen(true);
                                onFocus();
                              },
                              onBlur: () => {
                                setOpen(false);
                                onBlur();
                              },
                              placeholder: placeholder2,
                              className: styles$h.commandInput
                            }
                          )
                        ] }) : /* @__PURE__ */ jsx(
                          CommandInput,
                          {
                            id,
                            autoFocus,
                            ref: inputRef,
                            value: inputValue,
                            disabled: !enabled2,
                            onValueChange: (value2) => {
                              setOpen(true);
                              setInputValue(value2);
                            },
                            onFocus: () => {
                              setOpen(true);
                              onFocus();
                            },
                            onBlur: () => {
                              setOpen(false);
                              onBlur();
                            },
                            placeholder: placeholder2,
                            className: styles$h.commandInput
                          }
                        ),
                        /* @__PURE__ */ jsxs("div", { className: styles$h.actions, children: [
                          (value == null ? void 0 : value.length) > 0 && enabled2 && /* @__PURE__ */ jsx(
                            "span",
                            {
                              onClick: (event) => {
                                event.stopPropagation();
                                clearValue();
                              },
                              children: /* @__PURE__ */ jsx(Icon, { name: "close" })
                            }
                          ),
                          /* @__PURE__ */ jsx("span", { onClick: () => setOpen(true), children: /* @__PURE__ */ jsx(Icon, { name: "chevrondown" }) })
                        ] })
                      ]
                    }
                  )
                }
              ),
              open && /* @__PURE__ */ jsx(Portal$1, { container: root2, children: /* @__PURE__ */ jsx(
                PopoverContent,
                {
                  asChild: true,
                  style: { width, height: dropdownHeight },
                  className: styles$h.popoverContent,
                  align: "start",
                  onOpenAutoFocus: (e) => e.preventDefault(),
                  children: /* @__PURE__ */ jsxs(
                    CommandList,
                    {
                      className: styles$h.commandList,
                      onMouseUp: () => {
                        var _a;
                        (_a = inputRef == null ? void 0 : inputRef.current) == null ? void 0 : _a.focus();
                      },
                      style: { height: dropdownHeight },
                      children: [
                        /* @__PURE__ */ jsx(CommandEmpty, { children: emptyListNode }),
                        /* @__PURE__ */ jsx(CreatableItem, {}),
                        /* @__PURE__ */ jsx(CommandGroup, { children: Array.from(options2).map(
                          ({ value: value2, label: label22, enabled: enabled22, keywords, labelText }) => /* @__PURE__ */ jsx(
                            AutoCompleteOption,
                            {
                              value: value2,
                              label: label22,
                              enabled: enabled22,
                              keywords,
                              labelText
                            },
                            value2
                          )
                        ) })
                      ]
                    }
                  )
                }
              ) })
            ]
          }
        ) })
      }
    )
  ] }) }) });
});
function CreatableItem() {
  const { value, options: options2, inputValue, onChange, setOpen } = useAutoComplete();
  const { onOptionAdd } = useOption();
  if (isOptionsExist(options2, [{ value: inputValue, label: inputValue }]) || Array.isArray(value) && (value == null ? void 0 : value.find((s) => s === inputValue)) || inputValue === value) {
    return /* @__PURE__ */ jsx("span", { style: { display: "none" } });
  }
  const Item2 = /* @__PURE__ */ jsx(
    CommandItem,
    {
      value: inputValue,
      className: styles$h.autoCompleteOption,
      onMouseDown: (e) => {
        e.preventDefault();
        e.stopPropagation();
      },
      onSelect: (value2) => {
        const newOption = { value: value2, label: value2, enabled: true, labelText: value2 };
        onOptionAdd(newOption);
        onChange(value2);
        setOpen(false);
      },
      children: `Create "${inputValue}"`
    }
  );
  if (inputValue.length > 0) {
    return Item2;
  }
  return /* @__PURE__ */ jsx("span", { style: { display: "none" } });
}
function AutoCompleteOption({ value, label: label2, enabled: enabled2 = true, keywords }) {
  const id = useId();
  const { value: selectedValue, onChange, optionRenderer, multi, setOpen } = useAutoComplete();
  const selected2 = multi ? selectedValue == null ? void 0 : selectedValue.includes(value) : selectedValue === value;
  return /* @__PURE__ */ jsxs(
    CommandItem,
    {
      id,
      disabled: !enabled2,
      value: `${value}`,
      className: styles$h.autoCompleteOption,
      onMouseDown: (e) => {
        e.preventDefault();
        e.stopPropagation();
      },
      onSelect: () => {
        onChange(value);
        setOpen(false);
      },
      "data-state": selected2 ? "checked" : void 0,
      keywords,
      children: [
        optionRenderer({ label: label2, value }),
        selected2 && /* @__PURE__ */ jsx(Icon, { name: "checkmark" })
      ]
    },
    id
  );
}
const themeVars$f = `'{"Input:backgroundColor-track-Slider": "var(--xmlui-backgroundColor-track-Slider)", "Input:borderRadius-Slider-default": "var(--xmlui-borderRadius-Slider-default)", "Input:borderColor-Slider-default": "var(--xmlui-borderColor-Slider-default)", "Input:borderWidth-Slider-default": "var(--xmlui-borderWidth-Slider-default)", "Input:borderStyle-Slider-default": "var(--xmlui-borderStyle-Slider-default)", "Input:boxShadow-Slider-default": "var(--xmlui-boxShadow-Slider-default)", "Input:borderColor-Slider-default--hover": "var(--xmlui-borderColor-Slider-default--hover)", "Input:boxShadow-Slider-default--hover": "var(--xmlui-boxShadow-Slider-default--hover)", "Input:borderColor-Slider-default--focus": "var(--xmlui-borderColor-Slider-default--focus)", "Input:boxShadow-Slider-default--focus": "var(--xmlui-boxShadow-Slider-default--focus)", "Input:borderRadius-Slider-error": "var(--xmlui-borderRadius-Slider-error)", "Input:borderColor-Slider-error": "var(--xmlui-borderColor-Slider-error)", "Input:borderWidth-Slider-error": "var(--xmlui-borderWidth-Slider-error)", "Input:borderStyle-Slider-error": "var(--xmlui-borderStyle-Slider-error)", "Input:boxShadow-Slider-error": "var(--xmlui-boxShadow-Slider-error)", "Input:borderColor-Slider-error--hover": "var(--xmlui-borderColor-Slider-error--hover)", "Input:boxShadow-Slider-error--hover": "var(--xmlui-boxShadow-Slider-error--hover)", "Input:borderColor-Slider-error--focus": "var(--xmlui-borderColor-Slider-error--focus)", "Input:boxShadow-Slider-error--focus": "var(--xmlui-boxShadow-Slider-error--focus)", "Input:borderRadius-Slider-warning": "var(--xmlui-borderRadius-Slider-warning)", "Input:borderColor-Slider-warning": "var(--xmlui-borderColor-Slider-warning)", "Input:borderWidth-Slider-warning": "var(--xmlui-borderWidth-Slider-warning)", "Input:borderStyle-Slider-warning": "var(--xmlui-borderStyle-Slider-warning)", "Input:boxShadow-Slider-warning": "var(--xmlui-boxShadow-Slider-warning)", "Input:borderColor-Slider-warning--hover": "var(--xmlui-borderColor-Slider-warning--hover)", "Input:boxShadow-Slider-warning--hover": "var(--xmlui-boxShadow-Slider-warning--hover)", "Input:borderColor-Slider-warning--focus": "var(--xmlui-borderColor-Slider-warning--focus)", "Input:boxShadow-Slider-warning--focus": "var(--xmlui-boxShadow-Slider-warning--focus)", "Input:borderRadius-Slider-success": "var(--xmlui-borderRadius-Slider-success)", "Input:borderColor-Slider-success": "var(--xmlui-borderColor-Slider-success)", "Input:borderWidth-Slider-success": "var(--xmlui-borderWidth-Slider-success)", "Input:borderStyle-Slider-success": "var(--xmlui-borderStyle-Slider-success)", "Input:boxShadow-Slider-success": "var(--xmlui-boxShadow-Slider-success)", "Input:borderColor-Slider-success--hover": "var(--xmlui-borderColor-Slider-success--hover)", "Input:boxShadow-Slider-success--hover": "var(--xmlui-boxShadow-Slider-success--hover)", "Input:borderColor-Slider-success--focus": "var(--xmlui-borderColor-Slider-success--focus)", "Input:boxShadow-Slider-success--focus": "var(--xmlui-boxShadow-Slider-success--focus)", "Input:backgroundColor-track-Slider--disabled": "var(--xmlui-backgroundColor-track-Slider--disabled)", "Input:backgroundColor-range-Slider": "var(--xmlui-backgroundColor-range-Slider)", "Input:backgroundColor-range-Slider--disabled": "var(--xmlui-backgroundColor-range-Slider--disabled)", "Input:borderWidth-thumb-Slider": "var(--xmlui-borderWidth-thumb-Slider)", "Input:borderStyle-thumb-Slider": "var(--xmlui-borderStyle-thumb-Slider)", "Input:borderColor-thumb-Slider": "var(--xmlui-borderColor-thumb-Slider)", "Input:backgroundColor-thumb-Slider": "var(--xmlui-backgroundColor-thumb-Slider)", "Input:boxShadow-thumb-Slider": "var(--xmlui-boxShadow-thumb-Slider)"}'`;
const sliderContainer = "_sliderContainer_d4hsx_13";
const sliderRoot = "_sliderRoot_d4hsx_19";
const sliderTrack = "_sliderTrack_d4hsx_29";
const error$2 = "_error_d4hsx_51";
const warning$2 = "_warning_d4hsx_66";
const valid$2 = "_valid_d4hsx_81";
const disabled$1 = "_disabled_d4hsx_96";
const sliderRange = "_sliderRange_d4hsx_100";
const sliderThumb = "_sliderThumb_d4hsx_110";
const readOnly = "_readOnly_d4hsx_133";
const styles$g = {
  themeVars: themeVars$f,
  sliderContainer,
  sliderRoot,
  sliderTrack,
  error: error$2,
  warning: warning$2,
  valid: valid$2,
  disabled: disabled$1,
  sliderRange,
  sliderThumb,
  readOnly
};
const formatValue = (val, defaultVal = 0) => {
  if (val === void 0) {
    return [defaultVal];
  }
  if (typeof val === "number") {
    return [val];
  }
  if (Array.isArray(val) && val.length > 0) {
    return val;
  }
  return [defaultVal];
};
const Slider = forwardRef(
  ({
    style,
    step = 1,
    min = 0,
    max = 10,
    inverted,
    updateState,
    onDidChange = noop$1,
    onFocus = noop$1,
    onBlur = noop$1,
    registerComponentApi,
    enabled: enabled2 = true,
    value,
    autoFocus,
    readOnly: readOnly2,
    tabIndex = -1,
    label: label2,
    labelPosition,
    labelWidth,
    labelBreak: labelBreak2,
    required: required2,
    validationStatus = "none",
    initialValue,
    minStepsBetweenThumbs,
    rangeStyle,
    thumbStyle,
    showValues = true,
    valueFormat = (value2) => value2.toString()
  }, forwardedRef) => {
    const inputRef = useRef(null);
    const [localValue, setLocalValue] = React__default.useState([]);
    useEffect(() => {
      let initialVal;
      if (typeof initialValue === "string") {
        try {
          initialVal = JSON.parse(initialValue);
        } catch (e) {
          const num = parseFloat(initialValue);
          if (!isNaN(num)) {
            initialVal = num;
          }
        }
      } else {
        initialVal = initialValue;
      }
      const formattedValue = formatValue(initialVal, min);
      setLocalValue(formattedValue);
      if (updateState) {
        updateState({
          value: formattedValue.length === 1 ? formattedValue[0] : formattedValue
        }, { initial: true });
      }
    }, [initialValue, min, updateState]);
    useEffect(() => {
      if (value !== void 0) {
        const formattedValue = formatValue(value, min);
        setLocalValue(formattedValue);
      }
    }, [value, min]);
    const updateValue = useCallback(
      (value2) => {
        if (updateState) {
          updateState({ value: value2 });
        }
        onDidChange(value2);
      },
      [onDidChange, updateState]
    );
    const onInputChange = useCallback(
      (value2) => {
        setLocalValue(value2);
        if (inputRef.current) {
          inputRef.current.value = value2;
        }
        if (value2.length > 1) {
          updateValue(value2);
        } else if (value2.length === 1) {
          updateValue(value2[0]);
        }
      },
      [updateValue]
    );
    const handleOnFocus = useCallback(() => {
      onFocus == null ? void 0 : onFocus();
    }, [onFocus]);
    const handleOnBlur = useCallback(() => {
      onBlur == null ? void 0 : onBlur();
    }, [onBlur]);
    const focus = useCallback(() => {
      var _a;
      (_a = inputRef.current) == null ? void 0 : _a.focus();
    }, []);
    const setValue = useEvent((newValue) => {
      updateValue(newValue);
    });
    useEffect(() => {
      registerComponentApi == null ? void 0 : registerComponentApi({
        focus,
        setValue
      });
    }, [focus, registerComponentApi, setValue]);
    const displayValue = localValue.length > 0 ? localValue : [min];
    const valuesText = displayValue.map((v) => valueFormat(v)).join(", ");
    const displayLabel = label2 ? showValues ? `${label2} ${valuesText}` : label2 : showValues ? valuesText : "";
    return /* @__PURE__ */ jsx(
      ItemWithLabel,
      {
        labelPosition,
        label: displayLabel,
        labelWidth,
        labelBreak: labelBreak2,
        required: required2,
        enabled: enabled2,
        onFocus,
        onBlur,
        style,
        ref: forwardedRef,
        children: /* @__PURE__ */ jsx("div", { className: styles$g.sliderContainer, children: /* @__PURE__ */ jsxs(
          Root$1,
          {
            minStepsBetweenThumbs: minStepsBetweenThumbs || 1,
            ref: inputRef,
            tabIndex,
            "aria-readonly": readOnly2,
            className: classnames(styles$g.sliderRoot, {
              [styles$g.disabled]: !enabled2,
              [styles$g.readOnly]: readOnly2
            }),
            style,
            max,
            min,
            inverted,
            step,
            disabled: !enabled2,
            onFocus: handleOnFocus,
            onBlur: handleOnBlur,
            onValueChange: onInputChange,
            "aria-required": required2,
            value: displayValue,
            autoFocus,
            children: [
              /* @__PURE__ */ jsx(
                Track,
                {
                  className: classnames(styles$g.sliderTrack, {
                    [styles$g.disabled]: !enabled2,
                    [styles$g.readOnly]: readOnly2,
                    [styles$g.error]: validationStatus === "error",
                    [styles$g.warning]: validationStatus === "warning",
                    [styles$g.valid]: validationStatus === "valid"
                  }),
                  style: rangeStyle ? { ...rangeStyle } : void 0,
                  children: /* @__PURE__ */ jsx(
                    Range,
                    {
                      className: classnames(styles$g.sliderRange, {
                        [styles$g.disabled]: !enabled2
                      })
                    }
                  )
                }
              ),
              displayValue.map((_, index) => /* @__PURE__ */ jsx(
                Thumb,
                {
                  className: classnames(styles$g.sliderThumb, {
                    [styles$g.disabled]: !enabled2
                  }),
                  style: thumbStyle ? { ...thumbStyle } : void 0
                },
                index
              ))
            ]
          }
        ) })
      }
    );
  }
);
Slider.displayName = Root$1.displayName;
const themeVars$e = `'{"Input:backgroundColor-ColorPicker": "var(--xmlui-backgroundColor-ColorPicker)", "Input:borderRadius-ColorPicker-default": "var(--xmlui-borderRadius-ColorPicker-default)", "Input:borderColor-ColorPicker-default": "var(--xmlui-borderColor-ColorPicker-default)", "Input:borderWidth-ColorPicker-default": "var(--xmlui-borderWidth-ColorPicker-default)", "Input:borderStyle-ColorPicker-default": "var(--xmlui-borderStyle-ColorPicker-default)", "Input:boxShadow-ColorPicker-default": "var(--xmlui-boxShadow-ColorPicker-default)", "Input:borderColor-ColorPicker-default--hover": "var(--xmlui-borderColor-ColorPicker-default--hover)", "Input:boxShadow-ColorPicker-default--hover": "var(--xmlui-boxShadow-ColorPicker-default--hover)", "Input:borderColor-ColorPicker-default--focus": "var(--xmlui-borderColor-ColorPicker-default--focus)", "Input:boxShadow-ColorPicker-default--focus": "var(--xmlui-boxShadow-ColorPicker-default--focus)", "Input:borderRadius-ColorPicker-error": "var(--xmlui-borderRadius-ColorPicker-error)", "Input:borderColor-ColorPicker-error": "var(--xmlui-borderColor-ColorPicker-error)", "Input:borderWidth-ColorPicker-error": "var(--xmlui-borderWidth-ColorPicker-error)", "Input:borderStyle-ColorPicker-error": "var(--xmlui-borderStyle-ColorPicker-error)", "Input:boxShadow-ColorPicker-error": "var(--xmlui-boxShadow-ColorPicker-error)", "Input:borderColor-ColorPicker-error--hover": "var(--xmlui-borderColor-ColorPicker-error--hover)", "Input:boxShadow-ColorPicker-error--hover": "var(--xmlui-boxShadow-ColorPicker-error--hover)", "Input:borderColor-ColorPicker-error--focus": "var(--xmlui-borderColor-ColorPicker-error--focus)", "Input:boxShadow-ColorPicker-error--focus": "var(--xmlui-boxShadow-ColorPicker-error--focus)", "Input:borderRadius-ColorPicker-warning": "var(--xmlui-borderRadius-ColorPicker-warning)", "Input:borderColor-ColorPicker-warning": "var(--xmlui-borderColor-ColorPicker-warning)", "Input:borderWidth-ColorPicker-warning": "var(--xmlui-borderWidth-ColorPicker-warning)", "Input:borderStyle-ColorPicker-warning": "var(--xmlui-borderStyle-ColorPicker-warning)", "Input:boxShadow-ColorPicker-warning": "var(--xmlui-boxShadow-ColorPicker-warning)", "Input:borderColor-ColorPicker-warning--hover": "var(--xmlui-borderColor-ColorPicker-warning--hover)", "Input:boxShadow-ColorPicker-warning--hover": "var(--xmlui-boxShadow-ColorPicker-warning--hover)", "Input:borderColor-ColorPicker-warning--focus": "var(--xmlui-borderColor-ColorPicker-warning--focus)", "Input:boxShadow-ColorPicker-warning--focus": "var(--xmlui-boxShadow-ColorPicker-warning--focus)", "Input:borderRadius-ColorPicker-success": "var(--xmlui-borderRadius-ColorPicker-success)", "Input:borderColor-ColorPicker-success": "var(--xmlui-borderColor-ColorPicker-success)", "Input:borderWidth-ColorPicker-success": "var(--xmlui-borderWidth-ColorPicker-success)", "Input:borderStyle-ColorPicker-success": "var(--xmlui-borderStyle-ColorPicker-success)", "Input:boxShadow-ColorPicker-success": "var(--xmlui-boxShadow-ColorPicker-success)", "Input:borderColor-ColorPicker-success--hover": "var(--xmlui-borderColor-ColorPicker-success--hover)", "Input:boxShadow-ColorPicker-success--hover": "var(--xmlui-boxShadow-ColorPicker-success--hover)", "Input:borderColor-ColorPicker-success--focus": "var(--xmlui-borderColor-ColorPicker-success--focus)", "Input:boxShadow-ColorPicker-success--focus": "var(--xmlui-boxShadow-ColorPicker-success--focus)"}'`;
const colorInput = "_colorInput_ays9f_13";
const error$1 = "_error_ays9f_41";
const warning$1 = "_warning_ays9f_56";
const valid$1 = "_valid_ays9f_71";
const styles$f = {
  themeVars: themeVars$e,
  colorInput,
  error: error$1,
  warning: warning$1,
  valid: valid$1
};
const defaultProps$5 = {
  initialValue: "",
  value: "",
  enabled: true,
  validationStatus: "none"
};
const ColorPicker = forwardRef(
  ({
    style,
    updateState,
    onDidChange = noop$1,
    onFocus = noop$1,
    onBlur = noop$1,
    registerComponentApi,
    enabled: enabled2 = defaultProps$5.enabled,
    value = defaultProps$5.value,
    autoFocus,
    tabIndex = -1,
    label: label2,
    labelPosition,
    labelWidth,
    labelBreak: labelBreak2,
    required: required2,
    validationStatus = defaultProps$5.validationStatus,
    initialValue = defaultProps$5.initialValue
  }, forwardedRef) => {
    const inputRef = useRef(null);
    const updateValue = useCallback(
      (value2) => {
        updateState({ value: value2 });
        onDidChange(value2);
      },
      [onDidChange, updateState]
    );
    const onInputChange = useCallback(
      (event) => {
        updateValue(event.target.value);
      },
      [updateValue]
    );
    useEffect(() => {
      updateState({ value: initialValue }, { initial: true });
    }, [initialValue, updateState]);
    const handleOnFocus = useCallback(() => {
      onFocus == null ? void 0 : onFocus();
    }, [onFocus]);
    const handleOnBlur = useCallback(() => {
      onBlur == null ? void 0 : onBlur();
    }, [onBlur]);
    const focus = useCallback(() => {
      var _a;
      (_a = inputRef.current) == null ? void 0 : _a.focus();
    }, []);
    const setValue = useEvent((newValue) => {
      updateValue(newValue);
    });
    useEffect(() => {
      registerComponentApi == null ? void 0 : registerComponentApi({
        focus,
        setValue
      });
    }, [focus, registerComponentApi, setValue]);
    return /* @__PURE__ */ jsx(
      ItemWithLabel,
      {
        labelPosition,
        label: label2,
        labelWidth,
        labelBreak: labelBreak2,
        required: required2,
        enabled: enabled2,
        onFocus,
        onBlur,
        style,
        ref: forwardedRef,
        children: /* @__PURE__ */ jsx(
          "input",
          {
            className: classnames(styles$f.colorInput, {
              [styles$f.disabled]: !enabled2,
              [styles$f.error]: validationStatus === "error",
              [styles$f.warning]: validationStatus === "warning",
              [styles$f.valid]: validationStatus === "valid"
            }),
            disabled: !enabled2,
            onFocus: handleOnFocus,
            onChange: onInputChange,
            autoFocus,
            onBlur: handleOnBlur,
            required: required2,
            type: "color",
            inputMode: "text",
            ref: inputRef,
            value,
            tabIndex
          }
        )
      }
    );
  }
);
ColorPicker.displayName = "ColorPicker";
const helper = "_helper_1qbfk_13";
const helperText = "_helperText_1qbfk_24";
const valid = "_valid_1qbfk_29";
const error = "_error_1qbfk_34";
const warning = "_warning_1qbfk_39";
const styles$e = {
  helper,
  helperText,
  valid,
  error,
  warning
};
function AiOutlineWarning(props) {
  return GenIcon({ "attr": { "viewBox": "0 0 1024 1024" }, "child": [{ "tag": "path", "attr": { "d": "M464 720a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm16-304v184c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V416c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8zm475.7 440l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48zm-783.5-27.9L512 239.9l339.8 588.2H172.2z" } }] })(props);
}
const WarningIcon = (props) => /* @__PURE__ */ jsx(AiOutlineWarning, { ...props });
function BiErrorCircle(props) {
  return GenIcon({ "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M11.953 2C6.465 2 2 6.486 2 12s4.486 10 10 10 10-4.486 10-10S17.493 2 11.953 2zM12 20c-4.411 0-8-3.589-8-8s3.567-8 7.953-8C16.391 4 20 7.589 20 12s-3.589 8-8 8z" } }, { "tag": "path", "attr": { "d": "M11 7h2v7h-2zm0 8h2v2h-2z" } }] })(props);
}
const ErrorIcon = (props) => /* @__PURE__ */ jsx(BiErrorCircle, { ...props });
const HelperText = ({ text: text2 = "", status, style }) => {
  const renderStatusIcon = () => {
    if (status === "warning") {
      return /* @__PURE__ */ jsx(WarningIcon, { color: "var(--xmlui-color-warning)" });
    } else if (status === "error") {
      return /* @__PURE__ */ jsx(ErrorIcon, { color: "var(--xmlui-color-error)" });
    }
  };
  return /* @__PURE__ */ jsxs(
    "div",
    {
      "data-validation-status": status,
      style,
      className: classnames(styles$e.helper, {
        [styles$e.valid]: status === "valid",
        [styles$e.warning]: status === "warning",
        [styles$e.error]: status === "error"
      }),
      children: [
        status && /* @__PURE__ */ jsx("div", { style: { flexShrink: 0 }, children: renderStatusIcon() }),
        text2 && /* @__PURE__ */ jsx("div", { className: styles$e.helperText, children: text2 })
      ]
    }
  );
};
const NumberBox22 = forwardRef(function NumberBox222({
  id,
  style,
  value,
  initialValue,
  zeroOrPositive = false,
  min = zeroOrPositive ? 0 : -999999999999999,
  max = NUMBERBOX_MAX_VALUE,
  maxFractionDigits = 3,
  enabled: enabled2 = true,
  placeholder: placeholder2,
  step,
  integersOnly = false,
  validationStatus = "none",
  hasSpinBox = true,
  updateState = noop$1,
  onDidChange = noop$1,
  onFocus = noop$1,
  onBlur = noop$1,
  registerComponentApi,
  startText,
  startIcon,
  endText,
  endIcon,
  autoFocus,
  readOnly: readOnly2,
  required: required2,
  label: label2,
  labelPosition,
  labelWidth,
  labelBreak: labelBreak2
}, forwardedRef) {
  const inputRef = useRef(null);
  const upButton = useRef(null);
  const downButton = useRef(null);
  const locale = "en-US";
  const formatOptions = useMemo(() => {
    return {
      useGrouping: false,
      minimumFractionDigits: 0,
      maximumFractionDigits: integersOnly ? 0 : maxFractionDigits
    };
  }, [maxFractionDigits, integersOnly]);
  const formatter = useNumberFormatter(locale, formatOptions);
  const parser = useNumberParser(locale, formatOptions);
  min = clamp(
    toUsableNumber(min, true) ?? (zeroOrPositive ? 0 : -999999999999999),
    zeroOrPositive ? 0 : -999999999999999,
    NUMBERBOX_MAX_VALUE
  );
  max = clamp(
    toUsableNumber(max, true) ?? (zeroOrPositive ? 0 : -999999999999999),
    zeroOrPositive ? 0 : -999999999999999,
    NUMBERBOX_MAX_VALUE
  );
  const initializeValue = useCallback(
    (value2, defaultValue = "") => {
      return isEmptyLike(value2) || isNaN$1(parser.parse(value2.toString())) ? defaultValue : formatter.format(clamp(+value2, min, max));
    },
    [formatter, parser, min, max]
  );
  const [valueStrRep, setValueStrRep] = React__default.useState(initializeValue(value));
  useLayoutEffect(() => {
    setValueStrRep(initializeValue(value));
  }, [value, initializeValue]);
  const onFixCursorPosition = useCursorCorrection(valueStrRep, inputRef);
  const _step = toUsableNumber(step, true) ?? DEFAULT_STEP;
  const inputMode = useMemo(() => {
    const hasDecimals = formatter.resolvedOptions().maximumFractionDigits > 0;
    return hasDecimals ? "decimal" : "numeric";
  }, [formatter]);
  useEffect(() => {
    updateState({ value: initialValue }, { initial: true });
  }, [initialValue, updateState]);
  const clampInputValue = useCallback(
    (value2) => {
      return clamp(value2, min, max);
    },
    [min, max]
  );
  const clampAndSaveInput = useCallback(
    (value2) => {
      if (isEmptyLike(value2)) {
        updateState({ value: null });
        return;
      }
      value2 = value2.toString();
      if (!value2.length) {
        updateState({ value: null });
        return;
      }
      let parsedValue = parser.parse(value2);
      parsedValue = clampInputValue(parsedValue);
      if (isNaN$1(parsedValue)) {
        updateState({ value: value2 });
        return;
      }
      setValueStrRep((lastVal) => {
        const formatted = formatter.format(parsedValue);
        if (lastVal !== formatted) {
          return formatted;
        }
        return lastVal;
      });
      updateState({ value: parsedValue });
    },
    [clampInputValue, updateState, parser, formatter]
  );
  const increment = useCallback(() => {
    if (!enabled2) return;
    if (readOnly2) return;
    const currentValue = isEmptyLike(value) || isNaN$1(value) ? "0" : value.toString();
    const newValue = handleChangingValue(currentValue, parser, "increase", _step, min, max);
    updateState({ value: newValue });
  }, [value, enabled2, readOnly2, parser, _step, min, max, updateState]);
  const decrement = useCallback(() => {
    if (!enabled2) return;
    if (readOnly2) return;
    const currentValue = isEmptyLike(value) || isNaN$1(value) ? "0" : value.toString();
    const newValue = handleChangingValue(currentValue, parser, "decrease", _step, min, max);
    updateState({ value: newValue });
  }, [value, enabled2, readOnly2, parser, _step, min, max, updateState]);
  useLongPress(upButton.current, increment);
  useLongPress(downButton.current, decrement);
  const _onBeforeInput = useCallback(
    (event) => {
      const target2 = event.target;
      const nextValue = parser.parse(
        target2.value.slice(0, target2.selectionStart ?? void 0) + (event.nativeEvent.data ?? "") + target2.value.slice(target2.selectionEnd ?? void 0)
      ).toString();
      if (!parser.isValidPartialNumber(nextValue, min, max)) {
        event.preventDefault();
      }
    },
    [parser, min, max]
  );
  const _onChange = useCallback(
    (event) => {
      const strValue = event.target.value;
      let parsed = clampInputValue(parser.parse(event.target.value));
      if (integersOnly && Number.isInteger(parsed)) {
        parsed = Math.trunc(parsed);
      }
      if (canSynchronizeValue(strValue, locale, formatOptions)) {
        updateState({ value: parsed });
      } else {
        setValueStrRep(strValue);
      }
      onFixCursorPosition(event);
      onDidChange(parsed);
    },
    [
      clampInputValue,
      parser,
      onDidChange,
      locale,
      formatOptions,
      onFixCursorPosition,
      updateState,
      integersOnly
    ]
  );
  const _onFocus = useCallback(() => {
    onFocus == null ? void 0 : onFocus();
  }, [onFocus]);
  const _onBlur = useCallback(
    (event) => {
      const value2 = event.target.value;
      clampAndSaveInput(value2);
      onBlur();
    },
    [clampAndSaveInput, onBlur]
  );
  const _onKeyDown = useCallback(
    (event) => {
      if (event.key === "Enter") {
        clampAndSaveInput(value);
      }
      if (event.code === "ArrowUp") {
        event.preventDefault();
        increment();
      }
      if (event.code === "ArrowDown") {
        event.preventDefault();
        decrement();
      }
    },
    [clampAndSaveInput, increment, decrement, value]
  );
  const focus = useCallback(() => {
    var _a;
    (_a = inputRef.current) == null ? void 0 : _a.focus();
  }, []);
  useEffect(() => {
    if (autoFocus) {
      setTimeout(() => {
        var _a;
        (_a = inputRef.current) == null ? void 0 : _a.focus();
      }, 0);
    }
  }, [autoFocus]);
  const setValue = useEvent((newValue) => {
    updateState({ value: newValue });
  });
  useEffect(() => {
    registerComponentApi == null ? void 0 : registerComponentApi({
      focus,
      setValue
    });
  }, [focus, registerComponentApi, setValue]);
  return /* @__PURE__ */ jsx(
    ItemWithLabel,
    {
      ref: forwardedRef,
      labelPosition,
      label: label2,
      labelWidth,
      labelBreak: labelBreak2,
      required: required2,
      enabled: enabled2,
      onFocus,
      onBlur,
      style,
      children: /* @__PURE__ */ jsxs(
        "div",
        {
          className: classnames(styles$l.inputRoot, {
            [styles$l.readOnly]: readOnly2,
            [styles$l.disabled]: !enabled2,
            [styles$l.noSpinBox]: !hasSpinBox,
            [styles$l.error]: validationStatus === "error",
            [styles$l.warning]: validationStatus === "warning",
            [styles$l.valid]: validationStatus === "valid"
          }),
          tabIndex: -1,
          onFocus: () => {
            var _a;
            (_a = inputRef.current) == null ? void 0 : _a.focus();
          },
          children: [
            /* @__PURE__ */ jsx(Adornment, { text: startText, iconName: startIcon, className: styles$l.adornment }),
            /* @__PURE__ */ jsx(
              "input",
              {
                id,
                ref: inputRef,
                type: "text",
                placeholder: placeholder2,
                required: required2,
                readOnly: readOnly2,
                disabled: !enabled2,
                inputMode,
                className: classnames(styles$l.input),
                value: valueStrRep,
                min,
                max,
                autoFocus,
                onBeforeInput: _onBeforeInput,
                onChange: _onChange,
                onFocus: _onFocus,
                onBlur: _onBlur,
                onKeyDown: _onKeyDown
              }
            ),
            /* @__PURE__ */ jsx(Adornment, { text: endText, iconName: endIcon, className: styles$l.adornment }),
            hasSpinBox && /* @__PURE__ */ jsxs("div", { className: styles$l.spinnerBox, children: [
              /* @__PURE__ */ jsx(
                Button,
                {
                  "data-spinner": "up",
                  type: "button",
                  variant: "ghost",
                  themeColor: "secondary",
                  tabIndex: -1,
                  className: styles$l.spinnerButton,
                  disabled: !enabled2 || readOnly2,
                  ref: upButton,
                  children: /* @__PURE__ */ jsx(Icon, { name: "chevronup", size: "sm" })
                }
              ),
              /* @__PURE__ */ jsx(
                Button,
                {
                  "data-spinner": "down",
                  type: "button",
                  tabIndex: -1,
                  variant: "ghost",
                  themeColor: "secondary",
                  className: styles$l.spinnerButton,
                  disabled: !enabled2 || readOnly2,
                  ref: downButton,
                  children: /* @__PURE__ */ jsx(Icon, { name: "chevrondown", size: "sm" })
                }
              )
            ] })
          ]
        }
      )
    }
  );
});
function useNumberFormatter(locale, options2) {
  return useMemo(() => {
    return new NumberFormatter(locale, options2);
  }, [locale, options2]);
}
function useNumberParser(locale, options2) {
  return useMemo(() => {
    return new NumberParser(locale, options2);
  }, [locale, options2]);
}
function useLongPress(elementRef, action, delay = 500) {
  const timeoutId = useRef(0);
  const intervalId = useRef(0);
  const savedAction = useRef(action);
  useEffect(() => {
    savedAction.current = action;
  }, [action]);
  useEffect(() => {
    const onMouseDown = () => {
      var _a;
      (_a = savedAction.current) == null ? void 0 : _a.call(savedAction);
      timeoutId.current = window.setTimeout(() => {
        intervalId.current = window.setInterval(() => {
          var _a2;
          (_a2 = savedAction.current) == null ? void 0 : _a2.call(savedAction);
        }, 100);
      }, delay);
    };
    const onMouseUp = () => {
      clearTimeout(timeoutId.current);
      clearInterval(intervalId.current);
    };
    const onMouseOut = () => {
      clearTimeout(timeoutId.current);
      clearInterval(intervalId.current);
    };
    elementRef == null ? void 0 : elementRef.addEventListener("mousedown", onMouseDown);
    elementRef == null ? void 0 : elementRef.addEventListener("mouseup", onMouseUp);
    elementRef == null ? void 0 : elementRef.addEventListener("mouseout", onMouseOut);
    return () => {
      elementRef == null ? void 0 : elementRef.removeEventListener("mousedown", onMouseDown);
      elementRef == null ? void 0 : elementRef.removeEventListener("mouseup", onMouseUp);
      elementRef == null ? void 0 : elementRef.removeEventListener("mouseout", onMouseOut);
    };
  }, [elementRef, action, delay]);
}
function handleChangingValue(value, parser, type, step = 1, min = -999999999999999, max = NUMBERBOX_MAX_VALUE) {
  const currentInputValue = parser.parse(value ?? "");
  if (isNaN$1(currentInputValue)) {
    return min ?? 0;
  }
  if (type === "increase") {
    return clamp(currentInputValue + (step ?? 1), min, max);
  } else {
    return clamp(currentInputValue - (step ?? 1), min, max);
  }
}
function canSynchronizeValue(value, locale, options2) {
  if (value.trim() === "") return true;
  if (isNaN$1(value)) return false;
  if (hasLeadingZeros(value, locale, options2)) return false;
  if (isFloatWithTrailingZeros(value, locale, options2)) return false;
  if (overMaximumFractionDigits(value, locale, options2)) return false;
  return true;
}
function hasLeadingZeros(input2, locale = "en-US", options2) {
  var _a, _b;
  const formatter = new Intl.NumberFormat(locale, options2);
  const parts = formatter.formatToParts(1234.5);
  const group = ((_a = parts.find((p) => p.type === "group")) == null ? void 0 : _a.value) || "";
  const decimal = ((_b = parts.find((p) => p.type === "decimal")) == null ? void 0 : _b.value) || "";
  const normalized = (group === "" ? input2 : input2.replace(new RegExp(`\\${group}`, "g"), "")).replace(decimal, ".");
  if (!/^-?\d*\.?\d*$/.test(normalized)) return false;
  const [integer, fraction] = normalized.split(".");
  if (!fraction) {
    return integer.length > 1 && integer.startsWith("0");
  }
  const leadingIntegerZeros = integer.startsWith("0") && integer.length >= 1;
  const leadingFractionZeros = (fraction.match(/^0+/) || [""])[0].length >= 2;
  return leadingIntegerZeros || leadingFractionZeros;
}
function isFloatWithTrailingZeros(input2, locale = "en-US", options2) {
  var _a, _b;
  const formatter = new Intl.NumberFormat(locale, options2);
  const parts = formatter.formatToParts(1234.5);
  const group = ((_a = parts.find((p) => p.type === "group")) == null ? void 0 : _a.value) || "";
  const decimal = ((_b = parts.find((p) => p.type === "decimal")) == null ? void 0 : _b.value) || ".";
  const normalized = (group === "" ? input2 : input2.replace(new RegExp(`\\${group}`, "g"), "")).replace(decimal, ".");
  if (!/^-?\d*\.?\d*$/.test(normalized)) return false;
  if (!normalized.includes(".")) return false;
  const [_, fraction] = normalized.split(".");
  if (!fraction || fraction.length === 0) return true;
  return /0+$/.test(fraction);
}
function overMaximumFractionDigits(input2, locale = "en-US", options2) {
  var _a, _b;
  const formatter = new Intl.NumberFormat(locale, options2);
  const parts = formatter.formatToParts(1234.5);
  const group = ((_a = parts.find((p) => p.type === "group")) == null ? void 0 : _a.value) || "";
  const decimal = ((_b = parts.find((p) => p.type === "decimal")) == null ? void 0 : _b.value) || "";
  const normalized = (group === "" ? input2 : input2.replace(new RegExp(`\\${group}`, "g"), "")).replace(decimal, ".");
  if (!/^-?\d*\.?\d*$/.test(normalized)) return false;
  const [_, fraction] = normalized.split(".");
  if (!fraction) {
    return false;
  }
  return fraction.length > options2.maximumFractionDigits;
}
function useCursorCorrection(value, inputRef) {
  const position = useRef({
    beforeStart: 0,
    beforeEnd: 0
  });
  useLayoutEffect(() => {
    inputRef.current.setSelectionRange(position.current.beforeStart, position.current.beforeEnd);
  }, [value]);
  const onInputChange = (event) => {
    position.current.beforeStart = event.target.selectionStart;
    position.current.beforeEnd = event.target.selectionEnd;
  };
  return onInputChange;
}
function Items({ items, renderItem, reverse: reverse2 = false }) {
  const itemsToRender = useMemo(() => {
    if (!items) {
      return [];
    }
    let normalizedItems = items;
    if (isPlainObject(items)) {
      normalizedItems = Object.values(items);
    }
    return reverse2 ? [...normalizedItems].reverse() : normalizedItems;
  }, [items, reverse2]);
  if (!itemsToRender || !Array.isArray(itemsToRender)) {
    return null;
  }
  return /* @__PURE__ */ jsx(Fragment, { children: itemsToRender.map((item, index) => {
    return /* @__PURE__ */ jsx(Fragment$1, { children: renderItem == null ? void 0 : renderItem(
      {
        $item: item,
        $itemIndex: index,
        $isFirst: index === 0,
        $isLast: index === itemsToRender.length - 1
      },
      index
    ) }, index);
  }) });
}
const DEFAULT_LABEL_POSITIONS = {
  checkbox: "end"
};
const defaultProps$4 = {
  type: "text",
  labelBreak: true,
  enabled: true,
  customValidationsDebounce: 0
};
const FormItemContext = createContext({ parentFormItemId: null });
function ArrayLikeFormItem({
  children,
  formItemId,
  registerComponentApi,
  value = EMPTY_ARRAY,
  updateState
}) {
  const formContextValue = useMemo(() => {
    return {
      parentFormItemId: formItemId
    };
  }, [formItemId]);
  const addItem = useEvent((item) => {
    updateState({ value: [...value, item] });
  });
  const removeItem = useEvent((index) => {
    updateState({ value: value.filter((item, i) => i !== index) });
  });
  useEffect(() => {
    registerComponentApi == null ? void 0 : registerComponentApi({
      addItem,
      removeItem
    });
  }, [addItem, registerComponentApi, removeItem]);
  return /* @__PURE__ */ jsx(FormItemContext.Provider, { value: formContextValue, children });
}
memo(function FormItem2({
  style,
  bindTo,
  type = defaultProps$4.type,
  label: label2,
  enabled: enabled2 = defaultProps$4.enabled,
  labelPosition,
  labelWidth,
  labelBreak: labelBreak2 = defaultProps$4.labelBreak,
  children,
  validations,
  onValidate,
  customValidationsDebounce = defaultProps$4.customValidationsDebounce,
  validationMode,
  registerComponentApi,
  maxTextLength,
  inputRenderer,
  itemIndex,
  initialValue: initialValueFromProps,
  gap,
  ...rest
}) {
  const defaultId = useId();
  const { parentFormItemId } = useContext(FormItemContext);
  const formItemId = useMemo(() => {
    const safeBindTo = bindTo || `${defaultId}${UNBOUND_FIELD_SUFFIX}`;
    if (parentFormItemId) {
      if (itemIndex !== void 0) {
        let parentFieldReference = `${parentFormItemId}[${itemIndex}]`;
        if (bindTo !== void 0 && bindTo.trim() === "") {
          return parentFieldReference;
        } else {
          return `${parentFieldReference}.${safeBindTo}`;
        }
      }
    } else {
      return safeBindTo;
    }
  }, [bindTo, defaultId, itemIndex, parentFormItemId]);
  const labelWidthValue = useFormContextPart((value2) => labelWidth || value2.itemLabelWidth);
  const labelBreakValue = useFormContextPart(
    (value2) => labelBreak2 !== void 0 ? labelBreak2 : value2.itemLabelBreak
  );
  const labelPositionValue = useFormContextPart(
    (value2) => labelPosition || value2.itemLabelPosition || DEFAULT_LABEL_POSITIONS[type]
  );
  const initialValueFromSubject = useFormContextPart(
    (value2) => getByPath(value2.originalSubject, formItemId)
  );
  const initialValue = initialValueFromSubject === void 0 ? initialValueFromProps : initialValueFromSubject;
  const value = useFormContextPart((value2) => getByPath(value2.subject, formItemId));
  const validationResult = useFormContextPart((value2) => value2.validationResults[formItemId]);
  const dispatch = useFormContextPart((value2) => value2.dispatch);
  const formEnabled = useFormContextPart((value2) => value2.enabled);
  const isEnabled2 = enabled2 && formEnabled;
  useEffect(() => {
    if (initialValue !== void 0) {
      dispatch(fieldInitialized(formItemId, initialValue));
    }
  }, [dispatch, formItemId, initialValue]);
  useValidation(validations, onValidate, value, dispatch, formItemId, customValidationsDebounce);
  const onStateChange = useCallback(
    ({ value: value2 }, options2) => {
      if (!(options2 == null ? void 0 : options2.initial)) {
        dispatch(fieldChanged(formItemId, value2));
      }
    },
    [formItemId, dispatch]
  );
  useEffect(() => {
    return () => {
      dispatch(fieldRemoved(formItemId));
    };
  }, [formItemId, dispatch]);
  const { validationStatus, isHelperTextShown } = useValidationDisplay(
    formItemId,
    value,
    validationResult,
    validationMode
  );
  let formControl = null;
  switch (type) {
    case "select": {
      formControl = /* @__PURE__ */ jsx(
        Select,
        {
          ...rest,
          value,
          updateState: onStateChange,
          registerComponentApi,
          enabled: isEnabled2,
          validationStatus,
          children
        }
      );
      break;
    }
    case "autocomplete": {
      formControl = /* @__PURE__ */ jsx(
        AutoComplete,
        {
          ...rest,
          value,
          updateState: onStateChange,
          registerComponentApi,
          enabled: isEnabled2,
          validationStatus,
          children
        }
      );
      break;
    }
    case "datePicker": {
      formControl = /* @__PURE__ */ jsx(
        DatePicker,
        {
          ...rest,
          value,
          updateState: onStateChange,
          enabled: isEnabled2,
          validationStatus
        }
      );
      break;
    }
    case "radioGroup": {
      formControl = /* @__PURE__ */ jsx(
        RadioGroup,
        {
          ...rest,
          value,
          updateState: onStateChange,
          enabled: isEnabled2,
          validationStatus,
          children
        }
      );
      break;
    }
    case "number":
    case "integer": {
      formControl = /* @__PURE__ */ jsx(
        NumberBox,
        {
          ...rest,
          value,
          updateState: onStateChange,
          registerComponentApi,
          enabled: isEnabled2,
          integersOnly: type === "integer",
          validationStatus,
          min: validations.minValue,
          max: validations.maxValue,
          maxLength: maxTextLength ?? (validations == null ? void 0 : validations.maxLength),
          gap
        }
      );
      break;
    }
    case "integer2":
    case "number2": {
      formControl = /* @__PURE__ */ jsx(
        NumberBox22,
        {
          ...rest,
          value,
          updateState: onStateChange,
          registerComponentApi,
          enabled: isEnabled2,
          min: validations.minValue,
          max: validations.maxValue,
          integersOnly: type === "integer2"
        }
      );
      break;
    }
    case "switch":
    case "checkbox": {
      formControl = /* @__PURE__ */ jsx(
        Toggle,
        {
          ...rest,
          value,
          updateState: onStateChange,
          enabled: isEnabled2,
          validationStatus,
          variant: type,
          inputRenderer
        }
      );
      break;
    }
    case "file": {
      formControl = /* @__PURE__ */ jsx(
        FileInput,
        {
          ...rest,
          value,
          updateState: onStateChange,
          registerComponentApi,
          enabled: isEnabled2,
          validationStatus,
          multiple: asOptionalBoolean(rest.multiple, false)
        }
      );
      break;
    }
    case "text": {
      console.log("gap", gap);
      formControl = /* @__PURE__ */ jsx(
        TextBox,
        {
          ...rest,
          value,
          updateState: onStateChange,
          registerComponentApi,
          enabled: isEnabled2,
          validationStatus,
          maxLength: maxTextLength ?? (validations == null ? void 0 : validations.maxLength),
          gap
        }
      );
      break;
    }
    case "password": {
      formControl = /* @__PURE__ */ jsx(
        TextBox,
        {
          ...rest,
          type: "password",
          value,
          updateState: onStateChange,
          registerComponentApi,
          enabled: isEnabled2,
          validationStatus,
          maxLength: maxTextLength ?? (validations == null ? void 0 : validations.maxLength)
        }
      );
      break;
    }
    case "textarea": {
      formControl = /* @__PURE__ */ jsx(
        TextArea,
        {
          ...rest,
          value,
          updateState: onStateChange,
          registerComponentApi,
          enabled: isEnabled2,
          validationStatus,
          maxLength: maxTextLength ?? (validations == null ? void 0 : validations.maxLength)
        }
      );
      break;
    }
    case "slider": {
      formControl = /* @__PURE__ */ jsx(
        Slider,
        {
          ...rest,
          value,
          updateState: onStateChange,
          registerComponentApi,
          enabled: isEnabled2,
          validationStatus,
          min: validations.minValue,
          max: validations.maxValue
        }
      );
      break;
    }
    case "colorpicker": {
      formControl = /* @__PURE__ */ jsx(
        ColorPicker,
        {
          ...rest,
          value,
          updateState: onStateChange,
          registerComponentApi,
          enabled: isEnabled2,
          validationStatus
        }
      );
      break;
    }
    case "items": {
      formControl = /* @__PURE__ */ jsx(
        ArrayLikeFormItem,
        {
          formItemId,
          registerComponentApi,
          updateState: onStateChange,
          value,
          children: /* @__PURE__ */ jsx(Items, { items: value, renderItem: inputRenderer })
        }
      );
      break;
    }
    case "custom": {
      formControl = children;
      break;
    }
    default: {
      console.warn(`unknown form item type ${type}`);
      formControl = /* @__PURE__ */ jsx("div", { children: value });
      break;
    }
  }
  const onFocus = useEvent(() => {
    dispatch(fieldFocused(formItemId));
  });
  const onBlur = useEvent(() => {
    dispatch(fieldLostFocus(formItemId));
  });
  const [animateContainerRef] = useAutoAnimate({ duration: 100 });
  return /* @__PURE__ */ jsx(
    ItemWithLabel,
    {
      labelPosition: labelPositionValue,
      label: label2,
      labelWidth: labelWidthValue,
      labelBreak: labelBreakValue,
      enabled: isEnabled2,
      required: validations.required,
      validationInProgress: validationResult == null ? void 0 : validationResult.partial,
      onFocus,
      onBlur,
      style,
      validationResult: /* @__PURE__ */ jsx("div", { ref: animateContainerRef, children: isHelperTextShown && (validationResult == null ? void 0 : validationResult.validations.map((singleValidation, i) => /* @__PURE__ */ jsxs(Fragment$1, { children: [
        singleValidation.isValid && !!singleValidation.validMessage && /* @__PURE__ */ jsx(
          HelperText,
          {
            text: singleValidation.validMessage,
            status: "valid",
            style: { opacity: singleValidation.stale ? 0.5 : void 0 }
          }
        ),
        !singleValidation.isValid && !!singleValidation.invalidMessage && /* @__PURE__ */ jsx(
          HelperText,
          {
            text: singleValidation.invalidMessage,
            status: singleValidation.severity,
            style: { opacity: singleValidation.stale ? 0.5 : void 0 }
          }
        )
      ] }, i))) }),
      children: formControl
    }
  );
});
const COMP$L = "FormItem";
const filteredValidationSeverityValues = validationSeverityValues.filter(
  (value) => value !== "none"
);
const FormItemMd = createMetadata({
  status: "experimental",
  description: `A \`${COMP$L}\` component represents a single input element within a \`Form\`. The value within the \`${COMP$L}\` may be associated with a particular property within the encapsulating \`Form\` component's data.`,
  props: {
    bindTo: {
      description: `This property binds a particular input field to one of the attributes of the \`Form\` data. It names the property of the form's \`data\` data to get the input's initial value.When the field is saved, its value will be stored in the \`data\` property with this name.`
    },
    autoFocus: dAutoFocus(),
    label: dLabel(),
    labelPosition: dLabelPosition(),
    labelWidth: d(`This property sets the width of the item label.`),
    labelBreak: {
      description: `This boolean value indicates if the label can be split into multiple lines if it would overflow the available label width.`,
      type: "boolean",
      defaultValue: defaultProps$4.labelBreak
    },
    enabled: dEnabled(),
    type: {
      description: `This property is used to determine the specific input control the FormItem will wrap around. Note that the control names start with a lowercase letter and map to input components found in XMLUI.`,
      availableValues: formControlTypesMd,
      defaultValue: defaultProps$4.type,
      valueType: "string"
    },
    customValidationsDebounce: {
      description: `This optional number prop determines the time interval between two runs of a custom validation.`,
      type: "number",
      defaultValue: defaultProps$4.customValidationsDebounce
    },
    validationMode: {
      description: `This property sets what kind of validation mode or strategy to employ for a particular input field.`,
      availableValues: validationModeMd,
      defaultValue: defaultValidationMode
    },
    initialValue: dInitialValue(),
    required: dRequired(),
    requiredInvalidMessage: {
      description: `This optional string property is used to customize the message that is displayed if the field is not filled in.`,
      valueType: "string"
    },
    minLength: {
      description: `Checks whether the input has a minimum length of a specified value.`,
      valueType: "number"
    },
    maxLength: {
      description: `Checks whether the input has a maximum length of a specified value.`,
      valueType: "number"
    },
    maxTextLength: {
      description: `The maximum length of the text in the input field`,
      valueType: "number"
    },
    lengthInvalidMessage: {
      description: `This optional string property is used to customize the message that is displayed on a failed length check: [minLength](#minlength) or [maxLength](#maxlength).`,
      valueType: "string"
    },
    lengthInvalidSeverity: {
      description: `This property sets the severity level of the length validation.`,
      valueType: "string",
      availableValues: filteredValidationSeverityValues,
      defaultValue: "error"
    },
    minValue: {
      description: `Checks whether the input has the minimum specified value.`,
      valueType: "number"
    },
    maxValue: {
      description: `Checks whether the input has the maximum specified value.`,
      valueType: "number"
    },
    rangeInvalidMessage: {
      description: `This optional string property is used to customize the message that is displayed when a value is out of range.`,
      valueType: "string"
    },
    rangeInvalidSeverity: {
      description: `This property sets the severity level of the value range validation.`,
      valueType: "string",
      availableValues: filteredValidationSeverityValues,
      defaultValue: "error"
    },
    pattern: {
      description: `Checks whether the input fits a predefined regular expression.`,
      valueType: "string"
    },
    patternInvalidMessage: {
      description: `This optional string property is used to customize the message that is displayed on a failed pattern test.`,
      valueType: "string"
    },
    patternInvalidSeverity: {
      description: `This property sets the severity level of the pattern validation.`,
      valueType: "string",
      availableValues: filteredValidationSeverityValues,
      defaultValue: "error"
    },
    regex: {
      description: `Checks whether the input fits the provided regular expression.`,
      valueType: "string"
    },
    regexInvalidMessage: {
      description: `This optional string property is used to customize the message that is displayed on a failed regular expression test.`,
      valueType: "string"
    },
    regexInvalidSeverity: {
      description: `This property sets the severity level of regular expression validation.`,
      valueType: "string",
      availableValues: filteredValidationSeverityValues,
      defaultValue: "error"
    },
    inputTemplate: {
      description: "This property is used to define a custom input template."
    },
    gap: {
      description: "This property defines the gap between the adornments and the input area."
    }
  },
  events: {
    validate: d(`This event is used to define a custom validation function.`)
  },
  contextVars: {
    $value: d(
      `The context variable represents the current value of the \`${COMP$L}\`. It can be used in expressions and code snippets within the \`${COMP$L}\` instance.`
    ),
    $setValue: d(
      `This function can be invoked to set the \`${COMP$L}\` instance's value. The function has a single argument, the new value to set.`
    ),
    $validationResult: d(
      `This variable represents the result of the latest validation of the \`${COMP$L}\` instance.`
    )
  },
  themeVars: parseScssVar(styles$I.themeVars),
  defaultThemeVars: {
    "textColor-FormItemLabel": "$textColor-primary",
    "fontSize-FormItemLabel": "$fontSize-small",
    "fontWeight-FormItemLabel": "$fontWeight-medium",
    "fontStyle-FormItemLabel": "normal",
    "textTransform-FormItemLabel": "none",
    "textColor-FormItemLabel-requiredMark": "$color-danger-400"
  }
});
const COMP$K = "Heading";
const VALUE_DESC = d(
  `This property determines the text displayed in the heading. \`${COMP$K}\` also accepts nested text instead of specifying the \`value\`. If both \`value\` and a nested text are used, the \`value\` will be displayed.`
);
const MAX_LINES_DESC = d(
  `This property determines the maximum number of lines the component can wrap to. If there is not enough space for all of the text, the component wraps the text up to as many lines as specified.`
);
const ELLIPSES_DESC = {
  description: `This property indicates whether ellipses should be displayed (\`true\`) when the heading text is cropped or not (\`false\`).`,
  type: "boolean",
  defaultValue: defaultProps$d.ellipses
};
const PRESERVE_DESC = d(
  `This property indicates whether linebreaks should be preserved when displaying text.`
);
const LEVEL_DESC = (level) => `Represents a heading level ${level} text`;
const OMIT_FROM_TOC_DESC = {
  description: "If true, this heading will be excluded from the table of contents.",
  type: "boolean",
  defaultValue: defaultProps$d.omitFromToc
};
const HeadingMd = createMetadata({
  description: "Represents a heading text",
  props: {
    value: VALUE_DESC,
    level: {
      description: "This property sets the visual significance (level) of the heading.",
      availableValues: ["h1", "h2", "h3", "h4", "h5", "h6"],
      defaultValue: defaultProps$d.level
    },
    maxLines: MAX_LINES_DESC,
    ellipses: ELLIPSES_DESC,
    preserveLinebreaks: PRESERVE_DESC,
    omitFromToc: OMIT_FROM_TOC_DESC
  },
  themeVars: parseScssVar(styles$y.themeVars),
  defaultThemeVars: {
    [`fontFamily-${COMP$K}`]: "$fontFamily",
    [`textColor-${COMP$K}`]: "inherit",
    [`fontWeight-${COMP$K}`]: "$fontWeight-bold",
    [`letterSpacing-${COMP$K} `]: "0",
    [`color-anchor-${COMP$K} `]: "$color-surface-400",
    [`gap-anchor-${COMP$K} `]: "$space-2",
    [`textDecorationLine-anchor-${COMP$K} `]: "underline",
    light: {
      // --- No light-specific theme vars
    },
    dark: {
      // --- No dark-specific theme vars
    }
  }
});
const H1 = "H1";
const H1Md = createMetadata({
  description: LEVEL_DESC(1),
  specializedFrom: COMP$K,
  props: {
    value: VALUE_DESC,
    maxLines: MAX_LINES_DESC,
    omitFromToc: OMIT_FROM_TOC_DESC
  },
  themeVars: parseScssVar(styles$y.themeVars),
  defaultThemeVars: {
    [`fontSize-${H1}`]: "$fontSize-large",
    [`marginTop-${H1}`]: "0",
    [`marginBottom-${H1}`]: "0",
    [`fontSize-${H1}-markdown`]: "$fontSize-larger",
    [`marginTop-${H1}-markdown`]: "0",
    [`marginBottom-${H1}-markdown`]: "$space-6",
    light: {
      // --- No light-specific theme vars
    },
    dark: {
      // --- No dark-specific theme vars
    }
  }
});
const H2 = "H2";
const H2Md = createMetadata({
  description: LEVEL_DESC(2),
  specializedFrom: COMP$K,
  props: {
    value: VALUE_DESC,
    maxLines: MAX_LINES_DESC,
    omitFromToc: OMIT_FROM_TOC_DESC
  },
  themeVars: parseScssVar(styles$y.themeVars),
  defaultThemeVars: {
    [`fontSize-${H2}`]: "$fontSize-medium",
    [`marginTop-${H2}`]: "0",
    [`marginBottom-${H2}`]: "0",
    [`marginTop-${H2}-markdown`]: "$space-10",
    [`marginBottom-${H2}-markdown`]: "$space-3",
    light: {
      // --- No light-specific theme vars
    },
    dark: {
      // --- No dark-specific theme vars
    }
  }
});
const H3 = "H3";
const H3Md = createMetadata({
  description: LEVEL_DESC(3),
  specializedFrom: COMP$K,
  props: {
    value: VALUE_DESC,
    maxLines: MAX_LINES_DESC,
    omitFromToc: OMIT_FROM_TOC_DESC
  },
  themeVars: parseScssVar(styles$y.themeVars),
  defaultThemeVars: {
    [`fontSize-${H3}`]: "$fontSize-normal",
    [`marginTop-${H3}`]: "0",
    [`marginBottom-${H3}`]: "0",
    [`marginTop-${H3}-markdown`]: "$space-6",
    [`marginBottom-${H3}-markdown`]: "$space-2",
    light: {
      // --- No light-specific theme vars
    },
    dark: {
      // --- No dark-specific theme vars
    }
  }
});
const H4 = "H4";
const H4Md = createMetadata({
  description: LEVEL_DESC(4),
  specializedFrom: COMP$K,
  props: {
    value: VALUE_DESC,
    maxLines: MAX_LINES_DESC,
    omitFromToc: OMIT_FROM_TOC_DESC
  },
  themeVars: parseScssVar(styles$y.themeVars),
  defaultThemeVars: {
    [`fontSize-${H4}`]: "$fontSize-small",
    [`marginTop-${H4}`]: "0",
    [`marginBottom-${H4}`]: "0",
    [`marginTop-${H4}-markdown`]: "$space-5",
    [`marginBottom-${H4}-markdown`]: "$space-1",
    light: {
      // --- No light-specific theme vars
    },
    dark: {
      // --- No dark-specific theme vars
    }
  }
});
const H5 = "H5";
const H5Md = createMetadata({
  description: LEVEL_DESC(5),
  specializedFrom: COMP$K,
  props: {
    value: VALUE_DESC,
    maxLines: MAX_LINES_DESC,
    omitFromToc: OMIT_FROM_TOC_DESC
  },
  themeVars: parseScssVar(styles$y.themeVars),
  defaultThemeVars: {
    [`fontSize-${H5}`]: "$fontSize-smaller",
    [`marginTop-${H5}`]: "0",
    [`marginBottom-${H5}`]: "0",
    [`marginTop-${H5}-markdown`]: "0",
    [`marginBottom-${H5}-markdown`]: "$space-0",
    light: {
      // --- No light-specific theme vars
    },
    dark: {
      // --- No dark-specific theme vars
    }
  }
});
const H6 = "H6";
const H6Md = createMetadata({
  description: LEVEL_DESC(6),
  specializedFrom: COMP$K,
  props: {
    value: VALUE_DESC,
    maxLines: MAX_LINES_DESC,
    omitFromToc: OMIT_FROM_TOC_DESC
  },
  themeVars: parseScssVar(styles$y.themeVars),
  defaultThemeVars: {
    [`fontSize-${H6}`]: "$fontSize-tiny",
    [`marginTop-${H6}`]: "0",
    [`marginBottom-${H6}`]: "0",
    [`marginTop-${H6}-markdown`]: "0",
    [`marginBottom-${H6}-markdown`]: "$space-0",
    light: {
      // --- No light-specific theme vars
    },
    dark: {
      // --- No dark-specific theme vars
    }
  }
});
const HoverCardMd = createMetadata({
  status: "deprecated",
  description: "(**OBSOLETE**) This component displays some content when its parent component is hovered.",
  props: {
    triggerTemplate: dComponent("The component that opens the hover card when hovered.")
  }
});
const COMP$J = "Icon";
const IconMd = createMetadata({
  status: "experimental",
  description: `This component is the representation of an icon.`,
  props: {
    name: d(
      `This string property specifies the name of the icon to display. All icons have unique names and identifying the name is case-sensitive.`
    ),
    size: {
      description: `This property defines the size of the \`${COMP$J}\`. Note that setting the \`height\` and/or the \`width\` of the component will override this property.`,
      availableValues: ["xs", "sm", "md", "lg"]
    },
    fallback: d(
      `This optional property provides a way to handle situations when the provided [icon name](#name) is not found in the registry.`
    )
  },
  themeVars: parseScssVar(styles$N.themeVars),
  defaultThemeVars: {
    [`size-${COMP$J}`]: "1.25em"
  }
});
const COMP$I = "Image";
const ImageMd = createMetadata({
  description: `The \`${COMP$I}\` component represents or depicts an object, scene, idea, or other concept with a picture.`,
  props: {
    src: d(`This property is used to indicate the source (path) of the image to display.`),
    alt: d(`This property specifies an alternate text for the image.`),
    fit: {
      description: "This property sets how the image content should be resized to fit its container.",
      type: "string",
      defaultValue: "contain"
    },
    lazyLoad: d(
      `Lazy loading instructs the browser to load the image only when it is imminently needed (e.g. user scrolls to it). The default value is eager (\`false\`).`
    ),
    aspectRatio: d(
      `This property sets a preferred aspect ratio for the image, which will be used in the calculation of auto sizes and some other layout functions.`
    ),
    animation: d(`The animation object to be applied to the component`)
  },
  events: {
    click: dClick(COMP$I)
  },
  themeVars: parseScssVar(styles$E.themeVars)
});
const COMP$H = "Items";
const ItemsMd = createMetadata({
  description: `The \`${COMP$H}\` component maps sequential data items into component instances, representing each data item as a particular component.`,
  props: {
    items: dInternal(`This property contains the list of data items this component renders.`),
    data: d(
      `This property contains the list of data items (obtained from a data source) this component renders.`
    ),
    reverse: {
      description: "This property reverses the order in which data is mapped to template components."
    },
    itemTemplate: dComponent("The component template to display a single item")
  },
  childrenAsTemplate: "itemTemplate",
  contextVars: {
    $item: dComponent(
      "This value represents the current iteration item while the component renders its children."
    ),
    $itemIndex: dComponent(
      "This integer value represents the current iteration index (zero-based) while rendering children."
    ),
    $isFirst: dComponent("This boolean value indicates if the component renders its first item."),
    $isLast: dComponent("This boolean value indicates if the component renders its last item.")
  },
  opaque: true
});
const COMP$G = "Link";
const LinkMd = createMetadata({
  description: `A \`${COMP$G}\` component represents a navigation target within the app or a reference to an external web URL.`,
  props: {
    to: d(`This property defines the URL of the link.`),
    enabled: dEnabled(),
    active: {
      description: `Indicates whether this link is active or not. If so, it will have a distinct visual appearance.`,
      type: "boolean",
      defaultValue: false
    },
    target: {
      description: `This property specifies where to open the link represented by the \`${COMP$G}\`. This property accepts the following values (in accordance with the HTML standard):`,
      availableValues: LinkTargetMd,
      type: "string",
      defaultValue: "_self"
    },
    label: dLabel(),
    icon: d(`This property allows you to add an icon (specify the icon's name) to the link.`)
  },
  themeVars: parseScssVar(styles$z.themeVars),
  themeVarDescriptions: {
    [`gap-icon-${COMP$G}`]: "This property defines the size of the gap between the icon and the label."
  },
  defaultThemeVars: {
    [`border-${COMP$G}`]: "0px solid $borderColor",
    [`textColor-${COMP$G}--hover--active`]: `$textColor-${COMP$G}--active`,
    [`textDecorationColor-${COMP$G}--hover`]: "$color-primary-400",
    [`textColor-${COMP$G}--hover`]: `$color-primary-400`,
    [`textDecorationColor-${COMP$G}--active`]: "$color-primary-200",
    [`fontWeight-${COMP$G}--active`]: "$fontWeight-bold",
    [`textDecorationColor-${COMP$G}`]: "$color-primary-400",
    [`textUnderlineOffset-${COMP$G}`]: "$space-1",
    [`textDecorationLine-${COMP$G}`]: "underline",
    [`textDecorationStyle-${COMP$G}`]: "solid",
    [`outlineColor-${COMP$G}--focus`]: "$outlineColor--focus",
    [`outlineWidth-${COMP$G}--focus`]: "$outlineWidth--focus",
    [`outlineStyle-${COMP$G}--focus`]: "$outlineStyle--focus",
    [`outlineOffset-${COMP$G}--focus`]: "$outlineOffset--focus",
    [`fontSize-${COMP$G}`]: "inherit",
    [`gap-icon-${COMP$G}`]: "$gap-tight",
    [`padding-icon-${COMP$G}`]: "$space-0_5",
    [`textColor-${COMP$G}`]: "$color-primary-500",
    [`textColor-${COMP$G}--active`]: "$color-primary-500"
  }
});
const themeVars$d = '"[]"';
const styles$d = {
  themeVars: themeVars$d
};
const COMP$F = "List";
const ListMd = createMetadata({
  status: "experimental",
  description: `The \`${COMP$F}\` component is a robust layout container that renders associated data items as a list of components. \`${COMP$F}\` is virtualized; it renders only items that are visible in the viewport.`,
  props: {
    data: d(
      `The component receives data via this property. The \`data\` property is a list of items that the \`List\` can display.`
    ),
    items: dInternal(
      `You can use \`items\` as an alias for the \`data\` property. When you bind the list to a data source (e.g. an API endpoint), the \`data\` acts as the property that accepts a URL to fetch information from an API.When both \`items\` and \`data\` are used, \`items\` has priority.`
    ),
    loading: d(
      `This property delays the rendering of children until it is set to \`false\`, or the component receives usable list items via the [\`data\`](#data) property.`
    ),
    limit: d(`This property limits the number of items displayed in the \`${COMP$F}\`.`),
    scrollAnchor: {
      description: `This property pins the scroll position to a specified location of the list. Available values are shown below.`,
      availableValues: scrollAnchoringValues,
      type: "string",
      defaultValue: "top"
    },
    groupBy: d(
      `This property sets which attribute of the data is used to group the list items. If the attribute does not appear in the data, it will be ignored.`
    ),
    orderBy: d(
      `This property enables the ordering of list items by specifying an attribute in the data.`
    ),
    availableGroups: d(
      `This property is an array of group names that the \`${COMP$F}\` will display.`
    ),
    groupHeaderTemplate: dComponent(
      `Enables the customization of how the groups are displayed, similarly to the [\`itemTemplate\`](#itemtemplate). You can use the \`$item\` context variable to access an item group and map its individual attributes.`
    ),
    groupFooterTemplate: dComponent(
      `Enables the customization of how the the footer of each group is displayed. Combine with [\`groupHeaderTemplate\`](#groupHeaderTemplate) to customize sections. You can use the \`$item\` context variable to access an item group and map its individual attributes.`
    ),
    itemTemplate: dComponent(
      `This property allows the customization of mapping data items to components. You can use the \`$item\` context variable to access an item and map its individual attributes.`
    ),
    emptyListTemplate: dComponent(
      `This property defines the template to display when the list is empty.`
    ),
    pageInfo: d(
      `This property contains the current page information. Setting this property also enures the \`${COMP$F}\` uses pagination.`
    ),
    idKey: {
      description: "Denotes which attribute of an item acts as the ID or key of the item",
      type: "string",
      defaultValue: "id"
    },
    groupsInitiallyExpanded: d(
      `This Boolean property defines whether the list groups are initially expanded.`
    ),
    defaultGroups: d(
      `This property adds a list of default groups for the \`${COMP$F}\` and displays the group headers in the specified order. If the data contains group headers not in this list, those headers are also displayed (after the ones in this list); however, their order is not deterministic.`
    ),
    hideEmptyGroups: {
      description: "This boolean property indicates if empty groups should be hidden (no header and footer are displayed).",
      valueType: "boolean",
      defaultValue: true
    },
    borderCollapse: {
      description: "Collapse items borders",
      valueType: "boolean",
      defaultValue: true
    }
  },
  childrenAsTemplate: "itemTemplate",
  apis: {
    scrollToTop: d("This method scrolls the list to the top."),
    scrollToBottom: d("This method scrolls the list to the bottom."),
    scrollToIndex: d(
      "This method scrolls the list to a specific index. The method accepts an index as a parameter."
    ),
    scrollToId: d(
      "This method scrolls the list to a specific item. The method accepts an item ID as a parameter."
    )
  },
  contextVars: {
    $item: d(`This property represents the value of an item in the data list.`),
    $itemIndex: dComponent(
      "This integer value represents the current row index (zero-based) while rendering children."
    ),
    $isFirst: dComponent("This boolean value indicates if the component renders its first item."),
    $isLast: dComponent("This boolean value indicates if the component renders its last item.")
  },
  themeVars: parseScssVar(styles$d.themeVars)
});
const COMP$E = "Logo";
const LogoMd = createMetadata({
  status: "experimental",
  description: `The \`${COMP$E}\` component represents a logo or a brand symbol. Usually, you use this component in the [\`AppHeader\`](./AppHeader.mdx#logotemplate).`
});
const themeVars$c = `'{"paddingTop-Markdown": "var(--xmlui-paddingTop-Markdown)", "paddingBottom-Markdown": "var(--xmlui-paddingBottom-Markdown)", "backgroundColor-Markdown": "var(--xmlui-backgroundColor-Markdown)", "padding-Blockquote": "var(--xmlui-padding-Blockquote)", "paddingHorizontal-Blockquote": "var(--xmlui-paddingHorizontal-Blockquote, var(--xmlui-padding-Blockquote))", "paddingVertical-Blockquote": "var(--xmlui-paddingVertical-Blockquote, var(--xmlui-padding-Blockquote))", "paddingLeft-Blockquote": "var(--xmlui-paddingLeft-Blockquote)", "paddingRight-Blockquote": "var(--xmlui-paddingRight-Blockquote, var(--xmlui-paddingHorizontal-Blockquote, var(--xmlui-padding-Blockquote)))", "paddingTop-Blockquote": "var(--xmlui-paddingTop-Blockquote, var(--xmlui-paddingVertical-Blockquote, var(--xmlui-padding-Blockquote)))", "paddingBottom-Blockquote": "var(--xmlui-paddingBottom-Blockquote, var(--xmlui-paddingVertical-Blockquote, var(--xmlui-padding-Blockquote)))", "border-Blockquote": "var(--xmlui-border-Blockquote)", "borderHorizontal-Blockquote": "var(--xmlui-borderHorizontal-Blockquote, var(--xmlui-border-Blockquote))", "borderVertical-Blockquote": "var(--xmlui-borderVertical-Blockquote, var(--xmlui-border-Blockquote))", "borderLeft-Blockquote": "var(--xmlui-borderLeft-Blockquote, var(--xmlui-borderHorizontal-Blockquote, var(--xmlui-border-Blockquote)))", "borderRight-Blockquote": "var(--xmlui-borderRight-Blockquote, var(--xmlui-borderHorizontal-Blockquote, var(--xmlui-border-Blockquote)))", "borderTop-Blockquote": "var(--xmlui-borderTop-Blockquote, var(--xmlui-borderVertical-Blockquote, var(--xmlui-border-Blockquote)))", "borderBottom-Blockquote": "var(--xmlui-borderBottom-Blockquote, var(--xmlui-borderVertical-Blockquote, var(--xmlui-border-Blockquote)))", "borderWidth-Blockquote": "var(--xmlui-borderWidth-Blockquote)", "borderHorizontalWidth-Blockquote": "var(--xmlui-borderHorizontalWidth-Blockquote, var(--xmlui-borderWidth-Blockquote))", "borderLeftWidth-Blockquote": "var(--xmlui-borderLeftWidth-Blockquote, var(--xmlui-borderHorizontalWidth-Blockquote, var(--xmlui-borderWidth-Blockquote)))", "borderRightWidth-Blockquote": "var(--xmlui-borderRightWidth-Blockquote, var(--xmlui-borderHorizontalWidth-Blockquote, var(--xmlui-borderWidth-Blockquote)))", "borderVerticalWidth-Blockquote": "var(--xmlui-borderVerticalWidth-Blockquote, var(--xmlui-borderWidth-Blockquote))", "borderTopWidth-Blockquote": "var(--xmlui-borderTopWidth-Blockquote, var(--xmlui-borderVerticalWidth-Blockquote, var(--xmlui-borderWidth-Blockquote)))", "borderBottomWidth-Blockquote": "var(--xmlui-borderBottomWidth-Blockquote, var(--xmlui-borderVerticalWidth-Blockquote, var(--xmlui-borderWidth-Blockquote)))", "borderStyle-Blockquote": "var(--xmlui-borderStyle-Blockquote)", "borderHorizontalStyle-Blockquote": "var(--xmlui-borderHorizontalStyle-Blockquote, var(--xmlui-borderStyle-Blockquote))", "borderLeftStyle-Blockquote": "var(--xmlui-borderLeftStyle-Blockquote, var(--xmlui-borderHorizontalStyle-Blockquote, var(--xmlui-borderStyle-Blockquote)))", "borderRightStyle-Blockquote": "var(--xmlui-borderRightStyle-Blockquote, var(--xmlui-borderHorizontalStyle-Blockquote, var(--xmlui-borderStyle-Blockquote)))", "borderVerticalStyle-Blockquote": "var(--xmlui-borderVerticalStyle-Blockquote, var(--xmlui-borderStyle-Blockquote))", "borderTopStyle-Blockquote": "var(--xmlui-borderTopStyle-Blockquote, var(--xmlui-borderVerticalStyle-Blockquote, var(--xmlui-borderStyle-Blockquote)))", "borderBottomStyle-Blockquote": "var(--xmlui-borderBottomStyle-Blockquote, var(--xmlui-borderVerticalStyle-Blockquote, var(--xmlui-borderStyle-Blockquote)))", "borderColor-Blockquote": "var(--xmlui-borderColor-Blockquote)", "borderHorizontalColor-Blockquote": "var(--xmlui-borderHorizontalColor-Blockquote, var(--xmlui-borderColor-Blockquote))", "borderLeftColor-Blockquote": "var(--xmlui-borderLeftColor-Blockquote, var(--xmlui-borderHorizontalColor-Blockquote, var(--xmlui-borderColor-Blockquote)))", "borderRightColor-Blockquote": "var(--xmlui-borderRightColor-Blockquote, var(--xmlui-borderHorizontalColor-Blockquote, var(--xmlui-borderColor-Blockquote)))", "borderVerticalColor-Blockquote": "var(--xmlui-borderVerticalColor-Blockquote, var(--xmlui-borderColor-Blockquote))", "borderTopColor-Blockquote": "var(--xmlui-borderTopColor-Blockquote, var(--xmlui-borderVerticalColor-Blockquote, var(--xmlui-borderColor-Blockquote)))", "borderBottomColor-Blockquote": "var(--xmlui-borderBottomColor-Blockquote, var(--xmlui-borderVerticalColor-Blockquote, var(--xmlui-borderColor-Blockquote)))", "borderStartStartRadius-Blockquote": "var(--xmlui-borderStartStartRadius-Blockquote, var(--xmlui-borderRadius-Blockquote))", "borderStartEndRadius-Blockquote": "var(--xmlui-borderStartEndRadius-Blockquote, var(--xmlui-borderRadius-Blockquote))", "borderEndStartRadius-Blockquote": "var(--xmlui-borderEndStartRadius-Blockquote, var(--xmlui-borderRadius-Blockquote))", "borderEndEndRadius-Blockquote": "var(--xmlui-borderEndEndRadius-Blockquote, var(--xmlui-borderRadius-Blockquote))", "accentColor-Blockquote": "var(--xmlui-accentColor-Blockquote)", "accentWidth-Blockquote": "var(--xmlui-accentWidth-Blockquote)", "backgroundColor-Blockquote": "var(--xmlui-backgroundColor-Blockquote)", "borderRadius-Blockquote": "var(--xmlui-borderRadius-Blockquote)", "marginTop-Blockquote": "var(--xmlui-marginTop-Blockquote)", "marginBottom-Blockquote": "var(--xmlui-marginBottom-Blockquote)", "padding-Admonition": "var(--xmlui-padding-Admonition)", "paddingHorizontal-Admonition": "var(--xmlui-paddingHorizontal-Admonition, var(--xmlui-padding-Admonition))", "paddingVertical-Admonition": "var(--xmlui-paddingVertical-Admonition, var(--xmlui-padding-Admonition))", "paddingLeft-Admonition": "var(--xmlui-paddingLeft-Admonition, var(--xmlui-paddingHorizontal-Admonition, var(--xmlui-padding-Admonition)))", "paddingRight-Admonition": "var(--xmlui-paddingRight-Admonition, var(--xmlui-paddingHorizontal-Admonition, var(--xmlui-padding-Admonition)))", "paddingTop-Admonition": "var(--xmlui-paddingTop-Admonition, var(--xmlui-paddingVertical-Admonition, var(--xmlui-padding-Admonition)))", "paddingBottom-Admonition": "var(--xmlui-paddingBottom-Admonition, var(--xmlui-paddingVertical-Admonition, var(--xmlui-padding-Admonition)))", "border-Admonition": "var(--xmlui-border-Admonition)", "borderHorizontal-Admonition": "var(--xmlui-borderHorizontal-Admonition, var(--xmlui-border-Admonition))", "borderVertical-Admonition": "var(--xmlui-borderVertical-Admonition, var(--xmlui-border-Admonition))", "borderLeft-Admonition": "var(--xmlui-borderLeft-Admonition, var(--xmlui-borderHorizontal-Admonition, var(--xmlui-border-Admonition)))", "borderRight-Admonition": "var(--xmlui-borderRight-Admonition, var(--xmlui-borderHorizontal-Admonition, var(--xmlui-border-Admonition)))", "borderTop-Admonition": "var(--xmlui-borderTop-Admonition, var(--xmlui-borderVertical-Admonition, var(--xmlui-border-Admonition)))", "borderBottom-Admonition": "var(--xmlui-borderBottom-Admonition, var(--xmlui-borderVertical-Admonition, var(--xmlui-border-Admonition)))", "borderWidth-Admonition": "var(--xmlui-borderWidth-Admonition)", "borderHorizontalWidth-Admonition": "var(--xmlui-borderHorizontalWidth-Admonition, var(--xmlui-borderWidth-Admonition))", "borderLeftWidth-Admonition": "var(--xmlui-borderLeftWidth-Admonition, var(--xmlui-borderHorizontalWidth-Admonition, var(--xmlui-borderWidth-Admonition)))", "borderRightWidth-Admonition": "var(--xmlui-borderRightWidth-Admonition, var(--xmlui-borderHorizontalWidth-Admonition, var(--xmlui-borderWidth-Admonition)))", "borderVerticalWidth-Admonition": "var(--xmlui-borderVerticalWidth-Admonition, var(--xmlui-borderWidth-Admonition))", "borderTopWidth-Admonition": "var(--xmlui-borderTopWidth-Admonition, var(--xmlui-borderVerticalWidth-Admonition, var(--xmlui-borderWidth-Admonition)))", "borderBottomWidth-Admonition": "var(--xmlui-borderBottomWidth-Admonition, var(--xmlui-borderVerticalWidth-Admonition, var(--xmlui-borderWidth-Admonition)))", "borderStyle-Admonition": "var(--xmlui-borderStyle-Admonition)", "borderHorizontalStyle-Admonition": "var(--xmlui-borderHorizontalStyle-Admonition, var(--xmlui-borderStyle-Admonition))", "borderLeftStyle-Admonition": "var(--xmlui-borderLeftStyle-Admonition, var(--xmlui-borderHorizontalStyle-Admonition, var(--xmlui-borderStyle-Admonition)))", "borderRightStyle-Admonition": "var(--xmlui-borderRightStyle-Admonition, var(--xmlui-borderHorizontalStyle-Admonition, var(--xmlui-borderStyle-Admonition)))", "borderVerticalStyle-Admonition": "var(--xmlui-borderVerticalStyle-Admonition, var(--xmlui-borderStyle-Admonition))", "borderTopStyle-Admonition": "var(--xmlui-borderTopStyle-Admonition, var(--xmlui-borderVerticalStyle-Admonition, var(--xmlui-borderStyle-Admonition)))", "borderBottomStyle-Admonition": "var(--xmlui-borderBottomStyle-Admonition, var(--xmlui-borderVerticalStyle-Admonition, var(--xmlui-borderStyle-Admonition)))", "borderColor-Admonition": "var(--xmlui-borderColor-Admonition)", "borderHorizontalColor-Admonition": "var(--xmlui-borderHorizontalColor-Admonition, var(--xmlui-borderColor-Admonition))", "borderLeftColor-Admonition": "var(--xmlui-borderLeftColor-Admonition, var(--xmlui-borderHorizontalColor-Admonition, var(--xmlui-borderColor-Admonition)))", "borderRightColor-Admonition": "var(--xmlui-borderRightColor-Admonition, var(--xmlui-borderHorizontalColor-Admonition, var(--xmlui-borderColor-Admonition)))", "borderVerticalColor-Admonition": "var(--xmlui-borderVerticalColor-Admonition, var(--xmlui-borderColor-Admonition))", "borderTopColor-Admonition": "var(--xmlui-borderTopColor-Admonition, var(--xmlui-borderVerticalColor-Admonition, var(--xmlui-borderColor-Admonition)))", "borderBottomColor-Admonition": "var(--xmlui-borderBottomColor-Admonition, var(--xmlui-borderVerticalColor-Admonition, var(--xmlui-borderColor-Admonition)))", "borderStartStartRadius-Admonition": "var(--xmlui-borderStartStartRadius-Admonition, var(--xmlui-borderRadius-Admonition))", "borderStartEndRadius-Admonition": "var(--xmlui-borderStartEndRadius-Admonition, var(--xmlui-borderRadius-Admonition))", "borderEndStartRadius-Admonition": "var(--xmlui-borderEndStartRadius-Admonition, var(--xmlui-borderRadius-Admonition))", "borderEndEndRadius-Admonition": "var(--xmlui-borderEndEndRadius-Admonition, var(--xmlui-borderRadius-Admonition))", "backgroundColor-Admonition": "var(--xmlui-backgroundColor-Admonition)", "borderRadius-Admonition": "var(--xmlui-borderRadius-Admonition)", "iconSize-Admonition": "var(--xmlui-iconSize-Admonition)", "marginTop-Admonition": "var(--xmlui-marginTop-Admonition)", "marginBottom-Admonition": "var(--xmlui-marginBottom-Admonition)", "marginLeft-Admonition-content": "var(--xmlui-marginLeft-Admonition-content)", "marginTop-HtmlVideo": "var(--xmlui-marginTop-HtmlVideo)", "marginBottom-HtmlVideo": "var(--xmlui-marginBottom-HtmlVideo)", "marginTop-H1-markdown": "var(--xmlui-marginTop-H1-markdown)", "marginBottom-H1-markdown": "var(--xmlui-marginBottom-H1-markdown)", "fontSize-H1-markdown": "var(--xmlui-fontSize-H1-markdown)", "marginTop-H2-markdown": "var(--xmlui-marginTop-H2-markdown)", "marginBottom-H2-markdown": "var(--xmlui-marginBottom-H2-markdown)", "marginTop-H3-markdown": "var(--xmlui-marginTop-H3-markdown)", "marginBottom-H3-markdown": "var(--xmlui-marginBottom-H3-markdown)", "marginTop-H4-markdown": "var(--xmlui-marginTop-H4-markdown)", "marginBottom-H4-markdown": "var(--xmlui-marginBottom-H4-markdown)", "marginTop-H5-markdown": "var(--xmlui-marginTop-H5-markdown)", "marginBottom-H5-markdown": "var(--xmlui-marginBottom-H5-markdown)", "marginTop-H6-markdown": "var(--xmlui-marginTop-H6-markdown)", "marginBottom-H6-markdown": "var(--xmlui-marginBottom-H6-markdown)", "borderColor-HorizontalRule": "var(--xmlui-borderColor-HorizontalRule)", "borderStyle-HorizontalRule": "var(--xmlui-borderStyle-HorizontalRule)", "borderWidth-HorizontalRule": "var(--xmlui-borderWidth-HorizontalRule)"}'`;
const styles$c = {
  themeVars: themeVars$c
};
const themeVarsTable = `'{"textColor-HtmlTable": "var(--xmlui-textColor-HtmlTable)", "backgroundColor-HtmlTable": "var(--xmlui-backgroundColor-HtmlTable)", "fontFamily-HtmlTable": "var(--xmlui-fontFamily-HtmlTable)", "fontSize-HtmlTable": "var(--xmlui-fontSize-HtmlTable)", "fontWeight-HtmlTable": "var(--xmlui-fontWeight-HtmlTable)", "textTransform-HtmlTable": "var(--xmlui-textTransform-HtmlTable)", "marginTop-HtmlTable": "var(--xmlui-marginTop-HtmlTable)", "marginBottom-HtmlTable": "var(--xmlui-marginBottom-HtmlTable)", "width-HtmlTable": "var(--xmlui-width-HtmlTable)", "border-HtmlTable": "var(--xmlui-border-HtmlTable)", "borderHorizontal-HtmlTable": "var(--xmlui-borderHorizontal-HtmlTable, var(--xmlui-border-HtmlTable))", "borderVertical-HtmlTable": "var(--xmlui-borderVertical-HtmlTable, var(--xmlui-border-HtmlTable))", "borderLeft-HtmlTable": "var(--xmlui-borderLeft-HtmlTable, var(--xmlui-borderHorizontal-HtmlTable, var(--xmlui-border-HtmlTable)))", "borderRight-HtmlTable": "var(--xmlui-borderRight-HtmlTable, var(--xmlui-borderHorizontal-HtmlTable, var(--xmlui-border-HtmlTable)))", "borderTop-HtmlTable": "var(--xmlui-borderTop-HtmlTable, var(--xmlui-borderVertical-HtmlTable, var(--xmlui-border-HtmlTable)))", "borderBottom-HtmlTable": "var(--xmlui-borderBottom-HtmlTable, var(--xmlui-borderVertical-HtmlTable, var(--xmlui-border-HtmlTable)))", "borderWidth-HtmlTable": "var(--xmlui-borderWidth-HtmlTable)", "borderHorizontalWidth-HtmlTable": "var(--xmlui-borderHorizontalWidth-HtmlTable, var(--xmlui-borderWidth-HtmlTable))", "borderLeftWidth-HtmlTable": "var(--xmlui-borderLeftWidth-HtmlTable, var(--xmlui-borderHorizontalWidth-HtmlTable, var(--xmlui-borderWidth-HtmlTable)))", "borderRightWidth-HtmlTable": "var(--xmlui-borderRightWidth-HtmlTable, var(--xmlui-borderHorizontalWidth-HtmlTable, var(--xmlui-borderWidth-HtmlTable)))", "borderVerticalWidth-HtmlTable": "var(--xmlui-borderVerticalWidth-HtmlTable, var(--xmlui-borderWidth-HtmlTable))", "borderTopWidth-HtmlTable": "var(--xmlui-borderTopWidth-HtmlTable, var(--xmlui-borderVerticalWidth-HtmlTable, var(--xmlui-borderWidth-HtmlTable)))", "borderBottomWidth-HtmlTable": "var(--xmlui-borderBottomWidth-HtmlTable, var(--xmlui-borderVerticalWidth-HtmlTable, var(--xmlui-borderWidth-HtmlTable)))", "borderStyle-HtmlTable": "var(--xmlui-borderStyle-HtmlTable)", "borderHorizontalStyle-HtmlTable": "var(--xmlui-borderHorizontalStyle-HtmlTable, var(--xmlui-borderStyle-HtmlTable))", "borderLeftStyle-HtmlTable": "var(--xmlui-borderLeftStyle-HtmlTable, var(--xmlui-borderHorizontalStyle-HtmlTable, var(--xmlui-borderStyle-HtmlTable)))", "borderRightStyle-HtmlTable": "var(--xmlui-borderRightStyle-HtmlTable, var(--xmlui-borderHorizontalStyle-HtmlTable, var(--xmlui-borderStyle-HtmlTable)))", "borderVerticalStyle-HtmlTable": "var(--xmlui-borderVerticalStyle-HtmlTable, var(--xmlui-borderStyle-HtmlTable))", "borderTopStyle-HtmlTable": "var(--xmlui-borderTopStyle-HtmlTable, var(--xmlui-borderVerticalStyle-HtmlTable, var(--xmlui-borderStyle-HtmlTable)))", "borderBottomStyle-HtmlTable": "var(--xmlui-borderBottomStyle-HtmlTable, var(--xmlui-borderVerticalStyle-HtmlTable, var(--xmlui-borderStyle-HtmlTable)))", "borderColor-HtmlTable": "var(--xmlui-borderColor-HtmlTable)", "borderHorizontalColor-HtmlTable": "var(--xmlui-borderHorizontalColor-HtmlTable, var(--xmlui-borderColor-HtmlTable))", "borderLeftColor-HtmlTable": "var(--xmlui-borderLeftColor-HtmlTable, var(--xmlui-borderHorizontalColor-HtmlTable, var(--xmlui-borderColor-HtmlTable)))", "borderRightColor-HtmlTable": "var(--xmlui-borderRightColor-HtmlTable, var(--xmlui-borderHorizontalColor-HtmlTable, var(--xmlui-borderColor-HtmlTable)))", "borderVerticalColor-HtmlTable": "var(--xmlui-borderVerticalColor-HtmlTable, var(--xmlui-borderColor-HtmlTable))", "borderTopColor-HtmlTable": "var(--xmlui-borderTopColor-HtmlTable, var(--xmlui-borderVerticalColor-HtmlTable, var(--xmlui-borderColor-HtmlTable)))", "borderBottomColor-HtmlTable": "var(--xmlui-borderBottomColor-HtmlTable, var(--xmlui-borderVerticalColor-HtmlTable, var(--xmlui-borderColor-HtmlTable)))", "borderStartStartRadius-HtmlTable": "var(--xmlui-borderStartStartRadius-HtmlTable, var(--xmlui-borderRadius-HtmlTable))", "borderStartEndRadius-HtmlTable": "var(--xmlui-borderStartEndRadius-HtmlTable, var(--xmlui-borderRadius-HtmlTable))", "borderEndStartRadius-HtmlTable": "var(--xmlui-borderEndStartRadius-HtmlTable, var(--xmlui-borderRadius-HtmlTable))", "borderEndEndRadius-HtmlTable": "var(--xmlui-borderEndEndRadius-HtmlTable, var(--xmlui-borderRadius-HtmlTable))", "padding-HtmlTable": "var(--xmlui-padding-HtmlTable)", "paddingHorizontal-HtmlTable": "var(--xmlui-paddingHorizontal-HtmlTable, var(--xmlui-padding-HtmlTable))", "paddingVertical-HtmlTable": "var(--xmlui-paddingVertical-HtmlTable, var(--xmlui-padding-HtmlTable))", "paddingLeft-HtmlTable": "var(--xmlui-paddingLeft-HtmlTable, var(--xmlui-paddingHorizontal-HtmlTable, var(--xmlui-padding-HtmlTable)))", "paddingRight-HtmlTable": "var(--xmlui-paddingRight-HtmlTable, var(--xmlui-paddingHorizontal-HtmlTable, var(--xmlui-padding-HtmlTable)))", "paddingTop-HtmlTable": "var(--xmlui-paddingTop-HtmlTable, var(--xmlui-paddingVertical-HtmlTable, var(--xmlui-padding-HtmlTable)))", "paddingBottom-HtmlTable": "var(--xmlui-paddingBottom-HtmlTable, var(--xmlui-paddingVertical-HtmlTable, var(--xmlui-padding-HtmlTable)))"}'`;
const themeVarsThead = `'{"backgroundColor-HtmlThead": "var(--xmlui-backgroundColor-HtmlThead)", "textColor-HtmlThead": "var(--xmlui-textColor-HtmlThead)", "fontWeight-HtmlThead": "var(--xmlui-fontWeight-HtmlThead)", "fontSize-HtmlThead": "var(--xmlui-fontSize-HtmlThead)", "textTransform-HtmlThead": "var(--xmlui-textTransform-HtmlThead)", "border-HtmlThead": "var(--xmlui-border-HtmlThead)", "borderHorizontal-HtmlThead": "var(--xmlui-borderHorizontal-HtmlThead, var(--xmlui-border-HtmlThead))", "borderVertical-HtmlThead": "var(--xmlui-borderVertical-HtmlThead, var(--xmlui-border-HtmlThead))", "borderLeft-HtmlThead": "var(--xmlui-borderLeft-HtmlThead, var(--xmlui-borderHorizontal-HtmlThead, var(--xmlui-border-HtmlThead)))", "borderRight-HtmlThead": "var(--xmlui-borderRight-HtmlThead, var(--xmlui-borderHorizontal-HtmlThead, var(--xmlui-border-HtmlThead)))", "borderTop-HtmlThead": "var(--xmlui-borderTop-HtmlThead, var(--xmlui-borderVertical-HtmlThead, var(--xmlui-border-HtmlThead)))", "borderBottom-HtmlThead": "var(--xmlui-borderBottom-HtmlThead, var(--xmlui-borderVertical-HtmlThead, var(--xmlui-border-HtmlThead)))", "borderWidth-HtmlThead": "var(--xmlui-borderWidth-HtmlThead)", "borderHorizontalWidth-HtmlThead": "var(--xmlui-borderHorizontalWidth-HtmlThead, var(--xmlui-borderWidth-HtmlThead))", "borderLeftWidth-HtmlThead": "var(--xmlui-borderLeftWidth-HtmlThead, var(--xmlui-borderHorizontalWidth-HtmlThead, var(--xmlui-borderWidth-HtmlThead)))", "borderRightWidth-HtmlThead": "var(--xmlui-borderRightWidth-HtmlThead, var(--xmlui-borderHorizontalWidth-HtmlThead, var(--xmlui-borderWidth-HtmlThead)))", "borderVerticalWidth-HtmlThead": "var(--xmlui-borderVerticalWidth-HtmlThead, var(--xmlui-borderWidth-HtmlThead))", "borderTopWidth-HtmlThead": "var(--xmlui-borderTopWidth-HtmlThead, var(--xmlui-borderVerticalWidth-HtmlThead, var(--xmlui-borderWidth-HtmlThead)))", "borderBottomWidth-HtmlThead": "var(--xmlui-borderBottomWidth-HtmlThead, var(--xmlui-borderVerticalWidth-HtmlThead, var(--xmlui-borderWidth-HtmlThead)))", "borderStyle-HtmlThead": "var(--xmlui-borderStyle-HtmlThead)", "borderHorizontalStyle-HtmlThead": "var(--xmlui-borderHorizontalStyle-HtmlThead, var(--xmlui-borderStyle-HtmlThead))", "borderLeftStyle-HtmlThead": "var(--xmlui-borderLeftStyle-HtmlThead, var(--xmlui-borderHorizontalStyle-HtmlThead, var(--xmlui-borderStyle-HtmlThead)))", "borderRightStyle-HtmlThead": "var(--xmlui-borderRightStyle-HtmlThead, var(--xmlui-borderHorizontalStyle-HtmlThead, var(--xmlui-borderStyle-HtmlThead)))", "borderVerticalStyle-HtmlThead": "var(--xmlui-borderVerticalStyle-HtmlThead, var(--xmlui-borderStyle-HtmlThead))", "borderTopStyle-HtmlThead": "var(--xmlui-borderTopStyle-HtmlThead, var(--xmlui-borderVerticalStyle-HtmlThead, var(--xmlui-borderStyle-HtmlThead)))", "borderBottomStyle-HtmlThead": "var(--xmlui-borderBottomStyle-HtmlThead, var(--xmlui-borderVerticalStyle-HtmlThead, var(--xmlui-borderStyle-HtmlThead)))", "borderColor-HtmlThead": "var(--xmlui-borderColor-HtmlThead)", "borderHorizontalColor-HtmlThead": "var(--xmlui-borderHorizontalColor-HtmlThead, var(--xmlui-borderColor-HtmlThead))", "borderLeftColor-HtmlThead": "var(--xmlui-borderLeftColor-HtmlThead, var(--xmlui-borderHorizontalColor-HtmlThead, var(--xmlui-borderColor-HtmlThead)))", "borderRightColor-HtmlThead": "var(--xmlui-borderRightColor-HtmlThead, var(--xmlui-borderHorizontalColor-HtmlThead, var(--xmlui-borderColor-HtmlThead)))", "borderVerticalColor-HtmlThead": "var(--xmlui-borderVerticalColor-HtmlThead, var(--xmlui-borderColor-HtmlThead))", "borderTopColor-HtmlThead": "var(--xmlui-borderTopColor-HtmlThead, var(--xmlui-borderVerticalColor-HtmlThead, var(--xmlui-borderColor-HtmlThead)))", "borderBottomColor-HtmlThead": "var(--xmlui-borderBottomColor-HtmlThead, var(--xmlui-borderVerticalColor-HtmlThead, var(--xmlui-borderColor-HtmlThead)))", "borderStartStartRadius-HtmlThead": "var(--xmlui-borderStartStartRadius-HtmlThead, var(--xmlui-borderRadius-HtmlThead))", "borderStartEndRadius-HtmlThead": "var(--xmlui-borderStartEndRadius-HtmlThead, var(--xmlui-borderRadius-HtmlThead))", "borderEndStartRadius-HtmlThead": "var(--xmlui-borderEndStartRadius-HtmlThead, var(--xmlui-borderRadius-HtmlThead))", "borderEndEndRadius-HtmlThead": "var(--xmlui-borderEndEndRadius-HtmlThead, var(--xmlui-borderRadius-HtmlThead))", "padding-HtmlThead": "var(--xmlui-padding-HtmlThead)", "paddingHorizontal-HtmlThead": "var(--xmlui-paddingHorizontal-HtmlThead, var(--xmlui-padding-HtmlThead))", "paddingVertical-HtmlThead": "var(--xmlui-paddingVertical-HtmlThead, var(--xmlui-padding-HtmlThead))", "paddingLeft-HtmlThead": "var(--xmlui-paddingLeft-HtmlThead, var(--xmlui-paddingHorizontal-HtmlThead, var(--xmlui-padding-HtmlThead)))", "paddingRight-HtmlThead": "var(--xmlui-paddingRight-HtmlThead, var(--xmlui-paddingHorizontal-HtmlThead, var(--xmlui-padding-HtmlThead)))", "paddingTop-HtmlThead": "var(--xmlui-paddingTop-HtmlThead, var(--xmlui-paddingVertical-HtmlThead, var(--xmlui-padding-HtmlThead)))", "paddingBottom-HtmlThead": "var(--xmlui-paddingBottom-HtmlThead, var(--xmlui-paddingVertical-HtmlThead, var(--xmlui-padding-HtmlThead)))"}'`;
const themeVarsTbody = `'{"backgroundColor-HtmlTbody": "var(--xmlui-backgroundColor-HtmlTbody)", "textColor-HtmlTbody": "var(--xmlui-textColor-HtmlTbody)", "textAlign-HtmlTbody": "var(--xmlui-textAlign-HtmlTbody)", "verticalAlign-HtmlTbody": "var(--xmlui-verticalAlign-HtmlTbody)", "textTransform-HtmlTbody": "var(--xmlui-textTransform-HtmlTbody)"}'`;
const themeVarsTfoot = `'{"backgroundColor-HtmlTfoot": "var(--xmlui-backgroundColor-HtmlTfoot)", "textColor-HtmlTfoot": "var(--xmlui-textColor-HtmlTfoot)"}'`;
const themeVarsTh = `'{"backgroundColor-HtmlTh": "var(--xmlui-backgroundColor-HtmlTh)", "textColor-HtmlTh": "var(--xmlui-textColor-HtmlTh)", "fontWeight-HtmlTh": "var(--xmlui-fontWeight-HtmlTh)", "fontSize-HtmlTh": "var(--xmlui-fontSize-HtmlTh)", "backgroundColor-HtmlTh--hover": "var(--xmlui-backgroundColor-HtmlTh--hover)", "border-HtmlTh": "var(--xmlui-border-HtmlTh)", "borderHorizontal-HtmlTh": "var(--xmlui-borderHorizontal-HtmlTh, var(--xmlui-border-HtmlTh))", "borderVertical-HtmlTh": "var(--xmlui-borderVertical-HtmlTh, var(--xmlui-border-HtmlTh))", "borderLeft-HtmlTh": "var(--xmlui-borderLeft-HtmlTh, var(--xmlui-borderHorizontal-HtmlTh, var(--xmlui-border-HtmlTh)))", "borderRight-HtmlTh": "var(--xmlui-borderRight-HtmlTh, var(--xmlui-borderHorizontal-HtmlTh, var(--xmlui-border-HtmlTh)))", "borderTop-HtmlTh": "var(--xmlui-borderTop-HtmlTh, var(--xmlui-borderVertical-HtmlTh, var(--xmlui-border-HtmlTh)))", "borderBottom-HtmlTh": "var(--xmlui-borderBottom-HtmlTh, var(--xmlui-borderVertical-HtmlTh, var(--xmlui-border-HtmlTh)))", "borderWidth-HtmlTh": "var(--xmlui-borderWidth-HtmlTh)", "borderHorizontalWidth-HtmlTh": "var(--xmlui-borderHorizontalWidth-HtmlTh, var(--xmlui-borderWidth-HtmlTh))", "borderLeftWidth-HtmlTh": "var(--xmlui-borderLeftWidth-HtmlTh, var(--xmlui-borderHorizontalWidth-HtmlTh, var(--xmlui-borderWidth-HtmlTh)))", "borderRightWidth-HtmlTh": "var(--xmlui-borderRightWidth-HtmlTh, var(--xmlui-borderHorizontalWidth-HtmlTh, var(--xmlui-borderWidth-HtmlTh)))", "borderVerticalWidth-HtmlTh": "var(--xmlui-borderVerticalWidth-HtmlTh, var(--xmlui-borderWidth-HtmlTh))", "borderTopWidth-HtmlTh": "var(--xmlui-borderTopWidth-HtmlTh, var(--xmlui-borderVerticalWidth-HtmlTh, var(--xmlui-borderWidth-HtmlTh)))", "borderBottomWidth-HtmlTh": "var(--xmlui-borderBottomWidth-HtmlTh, var(--xmlui-borderVerticalWidth-HtmlTh, var(--xmlui-borderWidth-HtmlTh)))", "borderStyle-HtmlTh": "var(--xmlui-borderStyle-HtmlTh)", "borderHorizontalStyle-HtmlTh": "var(--xmlui-borderHorizontalStyle-HtmlTh, var(--xmlui-borderStyle-HtmlTh))", "borderLeftStyle-HtmlTh": "var(--xmlui-borderLeftStyle-HtmlTh, var(--xmlui-borderHorizontalStyle-HtmlTh, var(--xmlui-borderStyle-HtmlTh)))", "borderRightStyle-HtmlTh": "var(--xmlui-borderRightStyle-HtmlTh, var(--xmlui-borderHorizontalStyle-HtmlTh, var(--xmlui-borderStyle-HtmlTh)))", "borderVerticalStyle-HtmlTh": "var(--xmlui-borderVerticalStyle-HtmlTh, var(--xmlui-borderStyle-HtmlTh))", "borderTopStyle-HtmlTh": "var(--xmlui-borderTopStyle-HtmlTh, var(--xmlui-borderVerticalStyle-HtmlTh, var(--xmlui-borderStyle-HtmlTh)))", "borderBottomStyle-HtmlTh": "var(--xmlui-borderBottomStyle-HtmlTh, var(--xmlui-borderVerticalStyle-HtmlTh, var(--xmlui-borderStyle-HtmlTh)))", "borderColor-HtmlTh": "var(--xmlui-borderColor-HtmlTh)", "borderHorizontalColor-HtmlTh": "var(--xmlui-borderHorizontalColor-HtmlTh, var(--xmlui-borderColor-HtmlTh))", "borderLeftColor-HtmlTh": "var(--xmlui-borderLeftColor-HtmlTh, var(--xmlui-borderHorizontalColor-HtmlTh, var(--xmlui-borderColor-HtmlTh)))", "borderRightColor-HtmlTh": "var(--xmlui-borderRightColor-HtmlTh, var(--xmlui-borderHorizontalColor-HtmlTh, var(--xmlui-borderColor-HtmlTh)))", "borderVerticalColor-HtmlTh": "var(--xmlui-borderVerticalColor-HtmlTh, var(--xmlui-borderColor-HtmlTh))", "borderTopColor-HtmlTh": "var(--xmlui-borderTopColor-HtmlTh, var(--xmlui-borderVerticalColor-HtmlTh, var(--xmlui-borderColor-HtmlTh)))", "borderBottomColor-HtmlTh": "var(--xmlui-borderBottomColor-HtmlTh, var(--xmlui-borderVerticalColor-HtmlTh, var(--xmlui-borderColor-HtmlTh)))", "borderStartStartRadius-HtmlTh": "var(--xmlui-borderStartStartRadius-HtmlTh, var(--xmlui-borderRadius-HtmlTh))", "borderStartEndRadius-HtmlTh": "var(--xmlui-borderStartEndRadius-HtmlTh, var(--xmlui-borderRadius-HtmlTh))", "borderEndStartRadius-HtmlTh": "var(--xmlui-borderEndStartRadius-HtmlTh, var(--xmlui-borderRadius-HtmlTh))", "borderEndEndRadius-HtmlTh": "var(--xmlui-borderEndEndRadius-HtmlTh, var(--xmlui-borderRadius-HtmlTh))", "padding-HtmlTh": "var(--xmlui-padding-HtmlTh)", "paddingHorizontal-HtmlTh": "var(--xmlui-paddingHorizontal-HtmlTh, var(--xmlui-padding-HtmlTh))", "paddingVertical-HtmlTh": "var(--xmlui-paddingVertical-HtmlTh, var(--xmlui-padding-HtmlTh))", "paddingLeft-HtmlTh": "var(--xmlui-paddingLeft-HtmlTh, var(--xmlui-paddingHorizontal-HtmlTh, var(--xmlui-padding-HtmlTh)))", "paddingRight-HtmlTh": "var(--xmlui-paddingRight-HtmlTh, var(--xmlui-paddingHorizontal-HtmlTh, var(--xmlui-padding-HtmlTh)))", "paddingTop-HtmlTh": "var(--xmlui-paddingTop-HtmlTh, var(--xmlui-paddingVertical-HtmlTh, var(--xmlui-padding-HtmlTh)))", "paddingBottom-HtmlTh": "var(--xmlui-paddingBottom-HtmlTh, var(--xmlui-paddingVertical-HtmlTh, var(--xmlui-padding-HtmlTh)))"}'`;
const themeVarsTr = `'{"backgroundColor-HtmlTr": "var(--xmlui-backgroundColor-HtmlTr)", "backgroundColor-HtmlTr--hover": "var(--xmlui-backgroundColor-HtmlTr--hover)", "backgroundColor-even-HtmlTr": "var(--xmlui-backgroundColor-even-HtmlTr)", "textColor-HtmlTr": "var(--xmlui-textColor-HtmlTr)", "textColor-HtmlTr--hover": "var(--xmlui-textColor-HtmlTr--hover)", "fontSize-HtmlTr": "var(--xmlui-fontSize-HtmlTr)", "fontWeight-HtmlTr": "var(--xmlui-fontWeight-HtmlTr)", "border-HtmlTr": "var(--xmlui-border-HtmlTr)", "borderHorizontal-HtmlTr": "var(--xmlui-borderHorizontal-HtmlTr, var(--xmlui-border-HtmlTr))", "borderVertical-HtmlTr": "var(--xmlui-borderVertical-HtmlTr, var(--xmlui-border-HtmlTr))", "borderLeft-HtmlTr": "var(--xmlui-borderLeft-HtmlTr, var(--xmlui-borderHorizontal-HtmlTr, var(--xmlui-border-HtmlTr)))", "borderRight-HtmlTr": "var(--xmlui-borderRight-HtmlTr, var(--xmlui-borderHorizontal-HtmlTr, var(--xmlui-border-HtmlTr)))", "borderTop-HtmlTr": "var(--xmlui-borderTop-HtmlTr, var(--xmlui-borderVertical-HtmlTr, var(--xmlui-border-HtmlTr)))", "borderBottom-HtmlTr": "var(--xmlui-borderBottom-HtmlTr, var(--xmlui-borderVertical-HtmlTr, var(--xmlui-border-HtmlTr)))", "borderWidth-HtmlTr": "var(--xmlui-borderWidth-HtmlTr)", "borderHorizontalWidth-HtmlTr": "var(--xmlui-borderHorizontalWidth-HtmlTr, var(--xmlui-borderWidth-HtmlTr))", "borderLeftWidth-HtmlTr": "var(--xmlui-borderLeftWidth-HtmlTr, var(--xmlui-borderHorizontalWidth-HtmlTr, var(--xmlui-borderWidth-HtmlTr)))", "borderRightWidth-HtmlTr": "var(--xmlui-borderRightWidth-HtmlTr, var(--xmlui-borderHorizontalWidth-HtmlTr, var(--xmlui-borderWidth-HtmlTr)))", "borderVerticalWidth-HtmlTr": "var(--xmlui-borderVerticalWidth-HtmlTr, var(--xmlui-borderWidth-HtmlTr))", "borderTopWidth-HtmlTr": "var(--xmlui-borderTopWidth-HtmlTr, var(--xmlui-borderVerticalWidth-HtmlTr, var(--xmlui-borderWidth-HtmlTr)))", "borderBottomWidth-HtmlTr": "var(--xmlui-borderBottomWidth-HtmlTr, var(--xmlui-borderVerticalWidth-HtmlTr, var(--xmlui-borderWidth-HtmlTr)))", "borderStyle-HtmlTr": "var(--xmlui-borderStyle-HtmlTr)", "borderHorizontalStyle-HtmlTr": "var(--xmlui-borderHorizontalStyle-HtmlTr, var(--xmlui-borderStyle-HtmlTr))", "borderLeftStyle-HtmlTr": "var(--xmlui-borderLeftStyle-HtmlTr, var(--xmlui-borderHorizontalStyle-HtmlTr, var(--xmlui-borderStyle-HtmlTr)))", "borderRightStyle-HtmlTr": "var(--xmlui-borderRightStyle-HtmlTr, var(--xmlui-borderHorizontalStyle-HtmlTr, var(--xmlui-borderStyle-HtmlTr)))", "borderVerticalStyle-HtmlTr": "var(--xmlui-borderVerticalStyle-HtmlTr, var(--xmlui-borderStyle-HtmlTr))", "borderTopStyle-HtmlTr": "var(--xmlui-borderTopStyle-HtmlTr, var(--xmlui-borderVerticalStyle-HtmlTr, var(--xmlui-borderStyle-HtmlTr)))", "borderBottomStyle-HtmlTr": "var(--xmlui-borderBottomStyle-HtmlTr, var(--xmlui-borderVerticalStyle-HtmlTr, var(--xmlui-borderStyle-HtmlTr)))", "borderColor-HtmlTr": "var(--xmlui-borderColor-HtmlTr)", "borderHorizontalColor-HtmlTr": "var(--xmlui-borderHorizontalColor-HtmlTr, var(--xmlui-borderColor-HtmlTr))", "borderLeftColor-HtmlTr": "var(--xmlui-borderLeftColor-HtmlTr, var(--xmlui-borderHorizontalColor-HtmlTr, var(--xmlui-borderColor-HtmlTr)))", "borderRightColor-HtmlTr": "var(--xmlui-borderRightColor-HtmlTr, var(--xmlui-borderHorizontalColor-HtmlTr, var(--xmlui-borderColor-HtmlTr)))", "borderVerticalColor-HtmlTr": "var(--xmlui-borderVerticalColor-HtmlTr, var(--xmlui-borderColor-HtmlTr))", "borderTopColor-HtmlTr": "var(--xmlui-borderTopColor-HtmlTr, var(--xmlui-borderVerticalColor-HtmlTr, var(--xmlui-borderColor-HtmlTr)))", "borderBottomColor-HtmlTr": "var(--xmlui-borderBottomColor-HtmlTr, var(--xmlui-borderVerticalColor-HtmlTr, var(--xmlui-borderColor-HtmlTr)))", "borderStartStartRadius-HtmlTr": "var(--xmlui-borderStartStartRadius-HtmlTr, var(--xmlui-borderRadius-HtmlTr))", "borderStartEndRadius-HtmlTr": "var(--xmlui-borderStartEndRadius-HtmlTr, var(--xmlui-borderRadius-HtmlTr))", "borderEndStartRadius-HtmlTr": "var(--xmlui-borderEndStartRadius-HtmlTr, var(--xmlui-borderRadius-HtmlTr))", "borderEndEndRadius-HtmlTr": "var(--xmlui-borderEndEndRadius-HtmlTr, var(--xmlui-borderRadius-HtmlTr))"}'`;
const themeVarsTd = `'{"backgroundColor-HtmlTd": "var(--xmlui-backgroundColor-HtmlTd)", "text-align-HtmlTd": "var(--xmlui-text-align-HtmlTd)", "verticalAlign-HtmlTd": "var(--xmlui-verticalAlign-HtmlTd)", "fontSize-HtmlTd": "var(--xmlui-fontSize-HtmlTd)", "fontWeight-HtmlTd": "var(--xmlui-fontWeight-HtmlTd)", "border-HtmlTd": "var(--xmlui-border-HtmlTd)", "borderHorizontal-HtmlTd": "var(--xmlui-borderHorizontal-HtmlTd, var(--xmlui-border-HtmlTd))", "borderVertical-HtmlTd": "var(--xmlui-borderVertical-HtmlTd, var(--xmlui-border-HtmlTd))", "borderLeft-HtmlTd": "var(--xmlui-borderLeft-HtmlTd, var(--xmlui-borderHorizontal-HtmlTd, var(--xmlui-border-HtmlTd)))", "borderRight-HtmlTd": "var(--xmlui-borderRight-HtmlTd, var(--xmlui-borderHorizontal-HtmlTd, var(--xmlui-border-HtmlTd)))", "borderTop-HtmlTd": "var(--xmlui-borderTop-HtmlTd, var(--xmlui-borderVertical-HtmlTd, var(--xmlui-border-HtmlTd)))", "borderBottom-HtmlTd": "var(--xmlui-borderBottom-HtmlTd, var(--xmlui-borderVertical-HtmlTd, var(--xmlui-border-HtmlTd)))", "borderWidth-HtmlTd": "var(--xmlui-borderWidth-HtmlTd)", "borderHorizontalWidth-HtmlTd": "var(--xmlui-borderHorizontalWidth-HtmlTd, var(--xmlui-borderWidth-HtmlTd))", "borderLeftWidth-HtmlTd": "var(--xmlui-borderLeftWidth-HtmlTd, var(--xmlui-borderHorizontalWidth-HtmlTd, var(--xmlui-borderWidth-HtmlTd)))", "borderRightWidth-HtmlTd": "var(--xmlui-borderRightWidth-HtmlTd, var(--xmlui-borderHorizontalWidth-HtmlTd, var(--xmlui-borderWidth-HtmlTd)))", "borderVerticalWidth-HtmlTd": "var(--xmlui-borderVerticalWidth-HtmlTd, var(--xmlui-borderWidth-HtmlTd))", "borderTopWidth-HtmlTd": "var(--xmlui-borderTopWidth-HtmlTd, var(--xmlui-borderVerticalWidth-HtmlTd, var(--xmlui-borderWidth-HtmlTd)))", "borderBottomWidth-HtmlTd": "var(--xmlui-borderBottomWidth-HtmlTd, var(--xmlui-borderVerticalWidth-HtmlTd, var(--xmlui-borderWidth-HtmlTd)))", "borderStyle-HtmlTd": "var(--xmlui-borderStyle-HtmlTd)", "borderHorizontalStyle-HtmlTd": "var(--xmlui-borderHorizontalStyle-HtmlTd, var(--xmlui-borderStyle-HtmlTd))", "borderLeftStyle-HtmlTd": "var(--xmlui-borderLeftStyle-HtmlTd, var(--xmlui-borderHorizontalStyle-HtmlTd, var(--xmlui-borderStyle-HtmlTd)))", "borderRightStyle-HtmlTd": "var(--xmlui-borderRightStyle-HtmlTd, var(--xmlui-borderHorizontalStyle-HtmlTd, var(--xmlui-borderStyle-HtmlTd)))", "borderVerticalStyle-HtmlTd": "var(--xmlui-borderVerticalStyle-HtmlTd, var(--xmlui-borderStyle-HtmlTd))", "borderTopStyle-HtmlTd": "var(--xmlui-borderTopStyle-HtmlTd, var(--xmlui-borderVerticalStyle-HtmlTd, var(--xmlui-borderStyle-HtmlTd)))", "borderBottomStyle-HtmlTd": "var(--xmlui-borderBottomStyle-HtmlTd, var(--xmlui-borderVerticalStyle-HtmlTd, var(--xmlui-borderStyle-HtmlTd)))", "borderColor-HtmlTd": "var(--xmlui-borderColor-HtmlTd)", "borderHorizontalColor-HtmlTd": "var(--xmlui-borderHorizontalColor-HtmlTd, var(--xmlui-borderColor-HtmlTd))", "borderLeftColor-HtmlTd": "var(--xmlui-borderLeftColor-HtmlTd, var(--xmlui-borderHorizontalColor-HtmlTd, var(--xmlui-borderColor-HtmlTd)))", "borderRightColor-HtmlTd": "var(--xmlui-borderRightColor-HtmlTd, var(--xmlui-borderHorizontalColor-HtmlTd, var(--xmlui-borderColor-HtmlTd)))", "borderVerticalColor-HtmlTd": "var(--xmlui-borderVerticalColor-HtmlTd, var(--xmlui-borderColor-HtmlTd))", "borderTopColor-HtmlTd": "var(--xmlui-borderTopColor-HtmlTd, var(--xmlui-borderVerticalColor-HtmlTd, var(--xmlui-borderColor-HtmlTd)))", "borderBottomColor-HtmlTd": "var(--xmlui-borderBottomColor-HtmlTd, var(--xmlui-borderVerticalColor-HtmlTd, var(--xmlui-borderColor-HtmlTd)))", "borderStartStartRadius-HtmlTd": "var(--xmlui-borderStartStartRadius-HtmlTd, var(--xmlui-borderRadius-HtmlTd))", "borderStartEndRadius-HtmlTd": "var(--xmlui-borderStartEndRadius-HtmlTd, var(--xmlui-borderRadius-HtmlTd))", "borderEndStartRadius-HtmlTd": "var(--xmlui-borderEndStartRadius-HtmlTd, var(--xmlui-borderRadius-HtmlTd))", "borderEndEndRadius-HtmlTd": "var(--xmlui-borderEndEndRadius-HtmlTd, var(--xmlui-borderRadius-HtmlTd))", "padding-HtmlTd": "var(--xmlui-padding-HtmlTd)", "paddingHorizontal-HtmlTd": "var(--xmlui-paddingHorizontal-HtmlTd, var(--xmlui-padding-HtmlTd))", "paddingVertical-HtmlTd": "var(--xmlui-paddingVertical-HtmlTd, var(--xmlui-padding-HtmlTd))", "paddingLeft-HtmlTd": "var(--xmlui-paddingLeft-HtmlTd, var(--xmlui-paddingHorizontal-HtmlTd, var(--xmlui-padding-HtmlTd)))", "paddingRight-HtmlTd": "var(--xmlui-paddingRight-HtmlTd, var(--xmlui-paddingHorizontal-HtmlTd, var(--xmlui-padding-HtmlTd)))", "paddingTop-HtmlTd": "var(--xmlui-paddingTop-HtmlTd, var(--xmlui-paddingVertical-HtmlTd, var(--xmlui-padding-HtmlTd)))", "paddingBottom-HtmlTd": "var(--xmlui-paddingBottom-HtmlTd, var(--xmlui-paddingVertical-HtmlTd, var(--xmlui-padding-HtmlTd)))"}'`;
const themeVarsList = `'{"border-HtmlOl": "var(--xmlui-border-HtmlOl)", "borderHorizontal-HtmlOl": "var(--xmlui-borderHorizontal-HtmlOl, var(--xmlui-border-HtmlOl))", "borderVertical-HtmlOl": "var(--xmlui-borderVertical-HtmlOl, var(--xmlui-border-HtmlOl))", "borderLeft-HtmlOl": "var(--xmlui-borderLeft-HtmlOl, var(--xmlui-borderHorizontal-HtmlOl, var(--xmlui-border-HtmlOl)))", "borderRight-HtmlOl": "var(--xmlui-borderRight-HtmlOl, var(--xmlui-borderHorizontal-HtmlOl, var(--xmlui-border-HtmlOl)))", "borderTop-HtmlOl": "var(--xmlui-borderTop-HtmlOl, var(--xmlui-borderVertical-HtmlOl, var(--xmlui-border-HtmlOl)))", "borderBottom-HtmlOl": "var(--xmlui-borderBottom-HtmlOl, var(--xmlui-borderVertical-HtmlOl, var(--xmlui-border-HtmlOl)))", "borderWidth-HtmlOl": "var(--xmlui-borderWidth-HtmlOl)", "borderHorizontalWidth-HtmlOl": "var(--xmlui-borderHorizontalWidth-HtmlOl, var(--xmlui-borderWidth-HtmlOl))", "borderLeftWidth-HtmlOl": "var(--xmlui-borderLeftWidth-HtmlOl, var(--xmlui-borderHorizontalWidth-HtmlOl, var(--xmlui-borderWidth-HtmlOl)))", "borderRightWidth-HtmlOl": "var(--xmlui-borderRightWidth-HtmlOl, var(--xmlui-borderHorizontalWidth-HtmlOl, var(--xmlui-borderWidth-HtmlOl)))", "borderVerticalWidth-HtmlOl": "var(--xmlui-borderVerticalWidth-HtmlOl, var(--xmlui-borderWidth-HtmlOl))", "borderTopWidth-HtmlOl": "var(--xmlui-borderTopWidth-HtmlOl, var(--xmlui-borderVerticalWidth-HtmlOl, var(--xmlui-borderWidth-HtmlOl)))", "borderBottomWidth-HtmlOl": "var(--xmlui-borderBottomWidth-HtmlOl, var(--xmlui-borderVerticalWidth-HtmlOl, var(--xmlui-borderWidth-HtmlOl)))", "borderStyle-HtmlOl": "var(--xmlui-borderStyle-HtmlOl)", "borderHorizontalStyle-HtmlOl": "var(--xmlui-borderHorizontalStyle-HtmlOl, var(--xmlui-borderStyle-HtmlOl))", "borderLeftStyle-HtmlOl": "var(--xmlui-borderLeftStyle-HtmlOl, var(--xmlui-borderHorizontalStyle-HtmlOl, var(--xmlui-borderStyle-HtmlOl)))", "borderRightStyle-HtmlOl": "var(--xmlui-borderRightStyle-HtmlOl, var(--xmlui-borderHorizontalStyle-HtmlOl, var(--xmlui-borderStyle-HtmlOl)))", "borderVerticalStyle-HtmlOl": "var(--xmlui-borderVerticalStyle-HtmlOl, var(--xmlui-borderStyle-HtmlOl))", "borderTopStyle-HtmlOl": "var(--xmlui-borderTopStyle-HtmlOl, var(--xmlui-borderVerticalStyle-HtmlOl, var(--xmlui-borderStyle-HtmlOl)))", "borderBottomStyle-HtmlOl": "var(--xmlui-borderBottomStyle-HtmlOl, var(--xmlui-borderVerticalStyle-HtmlOl, var(--xmlui-borderStyle-HtmlOl)))", "borderColor-HtmlOl": "var(--xmlui-borderColor-HtmlOl)", "borderHorizontalColor-HtmlOl": "var(--xmlui-borderHorizontalColor-HtmlOl, var(--xmlui-borderColor-HtmlOl))", "borderLeftColor-HtmlOl": "var(--xmlui-borderLeftColor-HtmlOl, var(--xmlui-borderHorizontalColor-HtmlOl, var(--xmlui-borderColor-HtmlOl)))", "borderRightColor-HtmlOl": "var(--xmlui-borderRightColor-HtmlOl, var(--xmlui-borderHorizontalColor-HtmlOl, var(--xmlui-borderColor-HtmlOl)))", "borderVerticalColor-HtmlOl": "var(--xmlui-borderVerticalColor-HtmlOl, var(--xmlui-borderColor-HtmlOl))", "borderTopColor-HtmlOl": "var(--xmlui-borderTopColor-HtmlOl, var(--xmlui-borderVerticalColor-HtmlOl, var(--xmlui-borderColor-HtmlOl)))", "borderBottomColor-HtmlOl": "var(--xmlui-borderBottomColor-HtmlOl, var(--xmlui-borderVerticalColor-HtmlOl, var(--xmlui-borderColor-HtmlOl)))", "borderStartStartRadius-HtmlOl": "var(--xmlui-borderStartStartRadius-HtmlOl, var(--xmlui-borderRadius-HtmlOl))", "borderStartEndRadius-HtmlOl": "var(--xmlui-borderStartEndRadius-HtmlOl, var(--xmlui-borderRadius-HtmlOl))", "borderEndStartRadius-HtmlOl": "var(--xmlui-borderEndStartRadius-HtmlOl, var(--xmlui-borderRadius-HtmlOl))", "borderEndEndRadius-HtmlOl": "var(--xmlui-borderEndEndRadius-HtmlOl, var(--xmlui-borderRadius-HtmlOl))", "padding-HtmlOl": "var(--xmlui-padding-HtmlOl)", "paddingHorizontal-HtmlOl": "var(--xmlui-paddingHorizontal-HtmlOl, var(--xmlui-padding-HtmlOl))", "paddingVertical-HtmlOl": "var(--xmlui-paddingVertical-HtmlOl, var(--xmlui-padding-HtmlOl))", "paddingLeft-HtmlOl": "var(--xmlui-paddingLeft-HtmlOl, var(--xmlui-paddingHorizontal-HtmlOl, var(--xmlui-padding-HtmlOl)))", "paddingRight-HtmlOl": "var(--xmlui-paddingRight-HtmlOl, var(--xmlui-paddingHorizontal-HtmlOl, var(--xmlui-padding-HtmlOl)))", "paddingTop-HtmlOl": "var(--xmlui-paddingTop-HtmlOl, var(--xmlui-paddingVertical-HtmlOl, var(--xmlui-padding-HtmlOl)))", "paddingBottom-HtmlOl": "var(--xmlui-paddingBottom-HtmlOl, var(--xmlui-paddingVertical-HtmlOl, var(--xmlui-padding-HtmlOl)))", "marginTop-HtmlOl": "var(--xmlui-marginTop-HtmlOl)", "marginBottom-HtmlOl": "var(--xmlui-marginBottom-HtmlOl)", "border-HtmlUl": "var(--xmlui-border-HtmlUl)", "borderHorizontal-HtmlUl": "var(--xmlui-borderHorizontal-HtmlUl, var(--xmlui-border-HtmlUl))", "borderVertical-HtmlUl": "var(--xmlui-borderVertical-HtmlUl, var(--xmlui-border-HtmlUl))", "borderLeft-HtmlUl": "var(--xmlui-borderLeft-HtmlUl, var(--xmlui-borderHorizontal-HtmlUl, var(--xmlui-border-HtmlUl)))", "borderRight-HtmlUl": "var(--xmlui-borderRight-HtmlUl, var(--xmlui-borderHorizontal-HtmlUl, var(--xmlui-border-HtmlUl)))", "borderTop-HtmlUl": "var(--xmlui-borderTop-HtmlUl, var(--xmlui-borderVertical-HtmlUl, var(--xmlui-border-HtmlUl)))", "borderBottom-HtmlUl": "var(--xmlui-borderBottom-HtmlUl, var(--xmlui-borderVertical-HtmlUl, var(--xmlui-border-HtmlUl)))", "borderWidth-HtmlUl": "var(--xmlui-borderWidth-HtmlUl)", "borderHorizontalWidth-HtmlUl": "var(--xmlui-borderHorizontalWidth-HtmlUl, var(--xmlui-borderWidth-HtmlUl))", "borderLeftWidth-HtmlUl": "var(--xmlui-borderLeftWidth-HtmlUl, var(--xmlui-borderHorizontalWidth-HtmlUl, var(--xmlui-borderWidth-HtmlUl)))", "borderRightWidth-HtmlUl": "var(--xmlui-borderRightWidth-HtmlUl, var(--xmlui-borderHorizontalWidth-HtmlUl, var(--xmlui-borderWidth-HtmlUl)))", "borderVerticalWidth-HtmlUl": "var(--xmlui-borderVerticalWidth-HtmlUl, var(--xmlui-borderWidth-HtmlUl))", "borderTopWidth-HtmlUl": "var(--xmlui-borderTopWidth-HtmlUl, var(--xmlui-borderVerticalWidth-HtmlUl, var(--xmlui-borderWidth-HtmlUl)))", "borderBottomWidth-HtmlUl": "var(--xmlui-borderBottomWidth-HtmlUl, var(--xmlui-borderVerticalWidth-HtmlUl, var(--xmlui-borderWidth-HtmlUl)))", "borderStyle-HtmlUl": "var(--xmlui-borderStyle-HtmlUl)", "borderHorizontalStyle-HtmlUl": "var(--xmlui-borderHorizontalStyle-HtmlUl, var(--xmlui-borderStyle-HtmlUl))", "borderLeftStyle-HtmlUl": "var(--xmlui-borderLeftStyle-HtmlUl, var(--xmlui-borderHorizontalStyle-HtmlUl, var(--xmlui-borderStyle-HtmlUl)))", "borderRightStyle-HtmlUl": "var(--xmlui-borderRightStyle-HtmlUl, var(--xmlui-borderHorizontalStyle-HtmlUl, var(--xmlui-borderStyle-HtmlUl)))", "borderVerticalStyle-HtmlUl": "var(--xmlui-borderVerticalStyle-HtmlUl, var(--xmlui-borderStyle-HtmlUl))", "borderTopStyle-HtmlUl": "var(--xmlui-borderTopStyle-HtmlUl, var(--xmlui-borderVerticalStyle-HtmlUl, var(--xmlui-borderStyle-HtmlUl)))", "borderBottomStyle-HtmlUl": "var(--xmlui-borderBottomStyle-HtmlUl, var(--xmlui-borderVerticalStyle-HtmlUl, var(--xmlui-borderStyle-HtmlUl)))", "borderColor-HtmlUl": "var(--xmlui-borderColor-HtmlUl)", "borderHorizontalColor-HtmlUl": "var(--xmlui-borderHorizontalColor-HtmlUl, var(--xmlui-borderColor-HtmlUl))", "borderLeftColor-HtmlUl": "var(--xmlui-borderLeftColor-HtmlUl, var(--xmlui-borderHorizontalColor-HtmlUl, var(--xmlui-borderColor-HtmlUl)))", "borderRightColor-HtmlUl": "var(--xmlui-borderRightColor-HtmlUl, var(--xmlui-borderHorizontalColor-HtmlUl, var(--xmlui-borderColor-HtmlUl)))", "borderVerticalColor-HtmlUl": "var(--xmlui-borderVerticalColor-HtmlUl, var(--xmlui-borderColor-HtmlUl))", "borderTopColor-HtmlUl": "var(--xmlui-borderTopColor-HtmlUl, var(--xmlui-borderVerticalColor-HtmlUl, var(--xmlui-borderColor-HtmlUl)))", "borderBottomColor-HtmlUl": "var(--xmlui-borderBottomColor-HtmlUl, var(--xmlui-borderVerticalColor-HtmlUl, var(--xmlui-borderColor-HtmlUl)))", "borderStartStartRadius-HtmlUl": "var(--xmlui-borderStartStartRadius-HtmlUl, var(--xmlui-borderRadius-HtmlUl))", "borderStartEndRadius-HtmlUl": "var(--xmlui-borderStartEndRadius-HtmlUl, var(--xmlui-borderRadius-HtmlUl))", "borderEndStartRadius-HtmlUl": "var(--xmlui-borderEndStartRadius-HtmlUl, var(--xmlui-borderRadius-HtmlUl))", "borderEndEndRadius-HtmlUl": "var(--xmlui-borderEndEndRadius-HtmlUl, var(--xmlui-borderRadius-HtmlUl))", "padding-HtmlUl": "var(--xmlui-padding-HtmlUl)", "paddingHorizontal-HtmlUl": "var(--xmlui-paddingHorizontal-HtmlUl, var(--xmlui-padding-HtmlUl))", "paddingVertical-HtmlUl": "var(--xmlui-paddingVertical-HtmlUl, var(--xmlui-padding-HtmlUl))", "paddingLeft-HtmlUl": "var(--xmlui-paddingLeft-HtmlUl, var(--xmlui-paddingHorizontal-HtmlUl, var(--xmlui-padding-HtmlUl)))", "paddingRight-HtmlUl": "var(--xmlui-paddingRight-HtmlUl, var(--xmlui-paddingHorizontal-HtmlUl, var(--xmlui-padding-HtmlUl)))", "paddingTop-HtmlUl": "var(--xmlui-paddingTop-HtmlUl, var(--xmlui-paddingVertical-HtmlUl, var(--xmlui-padding-HtmlUl)))", "paddingBottom-HtmlUl": "var(--xmlui-paddingBottom-HtmlUl, var(--xmlui-paddingVertical-HtmlUl, var(--xmlui-padding-HtmlUl)))", "marginTop-HtmlUl": "var(--xmlui-marginTop-HtmlUl)", "marginBottom-HtmlUl": "var(--xmlui-marginBottom-HtmlUl)", "border-HtmlLi": "var(--xmlui-border-HtmlLi)", "borderHorizontal-HtmlLi": "var(--xmlui-borderHorizontal-HtmlLi, var(--xmlui-border-HtmlLi))", "borderVertical-HtmlLi": "var(--xmlui-borderVertical-HtmlLi, var(--xmlui-border-HtmlLi))", "borderLeft-HtmlLi": "var(--xmlui-borderLeft-HtmlLi, var(--xmlui-borderHorizontal-HtmlLi, var(--xmlui-border-HtmlLi)))", "borderRight-HtmlLi": "var(--xmlui-borderRight-HtmlLi, var(--xmlui-borderHorizontal-HtmlLi, var(--xmlui-border-HtmlLi)))", "borderTop-HtmlLi": "var(--xmlui-borderTop-HtmlLi, var(--xmlui-borderVertical-HtmlLi, var(--xmlui-border-HtmlLi)))", "borderBottom-HtmlLi": "var(--xmlui-borderBottom-HtmlLi, var(--xmlui-borderVertical-HtmlLi, var(--xmlui-border-HtmlLi)))", "borderWidth-HtmlLi": "var(--xmlui-borderWidth-HtmlLi)", "borderHorizontalWidth-HtmlLi": "var(--xmlui-borderHorizontalWidth-HtmlLi, var(--xmlui-borderWidth-HtmlLi))", "borderLeftWidth-HtmlLi": "var(--xmlui-borderLeftWidth-HtmlLi, var(--xmlui-borderHorizontalWidth-HtmlLi, var(--xmlui-borderWidth-HtmlLi)))", "borderRightWidth-HtmlLi": "var(--xmlui-borderRightWidth-HtmlLi, var(--xmlui-borderHorizontalWidth-HtmlLi, var(--xmlui-borderWidth-HtmlLi)))", "borderVerticalWidth-HtmlLi": "var(--xmlui-borderVerticalWidth-HtmlLi, var(--xmlui-borderWidth-HtmlLi))", "borderTopWidth-HtmlLi": "var(--xmlui-borderTopWidth-HtmlLi, var(--xmlui-borderVerticalWidth-HtmlLi, var(--xmlui-borderWidth-HtmlLi)))", "borderBottomWidth-HtmlLi": "var(--xmlui-borderBottomWidth-HtmlLi, var(--xmlui-borderVerticalWidth-HtmlLi, var(--xmlui-borderWidth-HtmlLi)))", "borderStyle-HtmlLi": "var(--xmlui-borderStyle-HtmlLi)", "borderHorizontalStyle-HtmlLi": "var(--xmlui-borderHorizontalStyle-HtmlLi, var(--xmlui-borderStyle-HtmlLi))", "borderLeftStyle-HtmlLi": "var(--xmlui-borderLeftStyle-HtmlLi, var(--xmlui-borderHorizontalStyle-HtmlLi, var(--xmlui-borderStyle-HtmlLi)))", "borderRightStyle-HtmlLi": "var(--xmlui-borderRightStyle-HtmlLi, var(--xmlui-borderHorizontalStyle-HtmlLi, var(--xmlui-borderStyle-HtmlLi)))", "borderVerticalStyle-HtmlLi": "var(--xmlui-borderVerticalStyle-HtmlLi, var(--xmlui-borderStyle-HtmlLi))", "borderTopStyle-HtmlLi": "var(--xmlui-borderTopStyle-HtmlLi, var(--xmlui-borderVerticalStyle-HtmlLi, var(--xmlui-borderStyle-HtmlLi)))", "borderBottomStyle-HtmlLi": "var(--xmlui-borderBottomStyle-HtmlLi, var(--xmlui-borderVerticalStyle-HtmlLi, var(--xmlui-borderStyle-HtmlLi)))", "borderColor-HtmlLi": "var(--xmlui-borderColor-HtmlLi)", "borderHorizontalColor-HtmlLi": "var(--xmlui-borderHorizontalColor-HtmlLi, var(--xmlui-borderColor-HtmlLi))", "borderLeftColor-HtmlLi": "var(--xmlui-borderLeftColor-HtmlLi, var(--xmlui-borderHorizontalColor-HtmlLi, var(--xmlui-borderColor-HtmlLi)))", "borderRightColor-HtmlLi": "var(--xmlui-borderRightColor-HtmlLi, var(--xmlui-borderHorizontalColor-HtmlLi, var(--xmlui-borderColor-HtmlLi)))", "borderVerticalColor-HtmlLi": "var(--xmlui-borderVerticalColor-HtmlLi, var(--xmlui-borderColor-HtmlLi))", "borderTopColor-HtmlLi": "var(--xmlui-borderTopColor-HtmlLi, var(--xmlui-borderVerticalColor-HtmlLi, var(--xmlui-borderColor-HtmlLi)))", "borderBottomColor-HtmlLi": "var(--xmlui-borderBottomColor-HtmlLi, var(--xmlui-borderVerticalColor-HtmlLi, var(--xmlui-borderColor-HtmlLi)))", "borderStartStartRadius-HtmlLi": "var(--xmlui-borderStartStartRadius-HtmlLi, var(--xmlui-borderRadius-HtmlLi))", "borderStartEndRadius-HtmlLi": "var(--xmlui-borderStartEndRadius-HtmlLi, var(--xmlui-borderRadius-HtmlLi))", "borderEndStartRadius-HtmlLi": "var(--xmlui-borderEndStartRadius-HtmlLi, var(--xmlui-borderRadius-HtmlLi))", "borderEndEndRadius-HtmlLi": "var(--xmlui-borderEndEndRadius-HtmlLi, var(--xmlui-borderRadius-HtmlLi))", "padding-HtmlLi": "var(--xmlui-padding-HtmlLi)", "paddingHorizontal-HtmlLi": "var(--xmlui-paddingHorizontal-HtmlLi, var(--xmlui-padding-HtmlLi))", "paddingVertical-HtmlLi": "var(--xmlui-paddingVertical-HtmlLi, var(--xmlui-padding-HtmlLi))", "paddingLeft-HtmlLi": "var(--xmlui-paddingLeft-HtmlLi, var(--xmlui-paddingHorizontal-HtmlLi, var(--xmlui-padding-HtmlLi)))", "paddingRight-HtmlLi": "var(--xmlui-paddingRight-HtmlLi, var(--xmlui-paddingHorizontal-HtmlLi, var(--xmlui-padding-HtmlLi)))", "paddingTop-HtmlLi": "var(--xmlui-paddingTop-HtmlLi, var(--xmlui-paddingVertical-HtmlLi, var(--xmlui-padding-HtmlLi)))", "paddingBottom-HtmlLi": "var(--xmlui-paddingBottom-HtmlLi, var(--xmlui-paddingVertical-HtmlLi, var(--xmlui-padding-HtmlLi)))", "marginLeft-HtmlLi": "var(--xmlui-marginLeft-HtmlLi)", "marginTop-HtmlLi": "var(--xmlui-marginTop-HtmlLi)", "marginBottom-HtmlLi": "var(--xmlui-marginBottom-HtmlLi)", "listStyleType-HtmlLi": "var(--xmlui-listStyleType-HtmlLi)"}'`;
const themeVarsHeading = `'{"marginTop-HtmlHeading": "var(--xmlui-marginTop-HtmlHeading)", "marginBottom-HtmlHeading": "var(--xmlui-marginBottom-HtmlHeading)"}'`;
const themeVarsVideo = `'{"marginTop-HtmlVideo": "var(--xmlui-marginTop-HtmlVideo)", "marginBottom-HtmlVideo": "var(--xmlui-marginBottom-HtmlVideo)"}'`;
const themeVarsDetails = `'{"marginTop-HtmlDetails": "var(--xmlui-marginTop-HtmlDetails)", "marginBottom-HtmlDetails": "var(--xmlui-marginBottom-HtmlDetails)"}'`;
const htmlTagStyles = {
  themeVarsTable,
  themeVarsThead,
  themeVarsTbody,
  themeVarsTfoot,
  themeVarsTh,
  themeVarsTr,
  themeVarsTd,
  themeVarsList,
  themeVarsHeading,
  themeVarsVideo,
  themeVarsDetails
};
const COMP$D = "SpaceFiller";
const SpaceFillerMd = createMetadata({
  description: `The \`${COMP$D}\` is a component that works well in layout containers to fill the remaining (unused) space. Its behavior depends on the layout container in which it is used.`,
  themeVars: parseScssVar(styles$m.themeVars)
});
const COMP$C = "TextArea";
const resizeOptionsMd = [
  { value: "(undefined)", description: "No resizing" },
  { value: "horizontal", description: "Can only resize horizontally" },
  { value: "vertical", description: "Can only resize vertically" },
  { value: "both", description: "Can resize in both dimensions" }
];
const TextAreaMd = createMetadata({
  status: "experimental",
  description: `\`${COMP$C}\` is a component that provides a multiline text input area.`,
  props: {
    enterSubmits: {
      description: "This optional boolean property indicates whether pressing the `Enter` key on the keyboard prompts the parent `Form` component to submit.",
      valueType: "boolean",
      defaultValue: true
    },
    escResets: {
      description: `This boolean property indicates whether the ${COMP$C} contents should be reset when pressing the ESC key.`,
      valueType: "boolean",
      defaultValue: false
    },
    maxRows: d(
      `This optional property sets the maximum number of text rows the \`${COMP$C}\` can grow.`
    ),
    minRows: d(
      `This optional property sets the minimum number of text rows the \`${COMP$C}\` can shrink.`
    ),
    rows: {
      description: `Specifies the number of rows the component initially has.`,
      valueType: "number",
      defaultValue: 2
    },
    autoSize: {
      description: `If set to \`true\`, this boolean property enables the \`${COMP$C}\` to resize automatically based on the number of lines inside it.`,
      valueType: "boolean",
      defaultValue: false
    },
    placeholder: dPlaceholder(),
    initialValue: dInitialValue(),
    label: dLabel(),
    labelPosition: dLabelPosition("top"),
    labelWidth: dLabelWidth(COMP$C),
    labelBreak: dLabelBreak(COMP$C),
    maxLength: dMaxLength(),
    autoFocus: dAutoFocus(),
    required: dRequired(),
    readOnly: dReadonly(),
    enabled: dEnabled(),
    validationStatus: dValidationStatus(),
    resize: {
      description: `This optional property specifies in which dimensions can the \`TextArea\` be resized by the user.`,
      availableValues: resizeOptionsMd
    }
  },
  events: {
    gotFocus: dGotFocus(COMP$C),
    lostFocus: dLostFocus(COMP$C),
    didChange: dDidChange(COMP$C)
  },
  apis: {
    focus: dFocus(COMP$C),
    value: d(
      `You can query the component's value. If no value is set, it will retrieve \`undefined\`.`
    ),
    setValue: dSetValueApi()
  },
  themeVars: parseScssVar(styles$i.themeVars)
});
const COMP$B = "NavLink";
const NavLinkMd = createMetadata({
  description: `The \`${COMP$B}\` component defines a navigation target (app navigation menu item) within the app; it is associated with a particular in-app navigation target (or an external link).`,
  props: {
    to: d(`This property defines the URL of the link.`),
    enabled: dEnabled(),
    active: {
      description: `This property indicates if the particular navigation is an active link. An active link has a particular visual appearance, provided its [\`displayActive\`](#displayactive) property is set to \`true\`.`,
      valueType: "boolean",
      defaultValue: false
    },
    target: {
      description: `This property specifies how to open the clicked link.`,
      availableValues: LinkTargetMd,
      type: "string",
      defaultValue: "_self"
    },
    label: dLabel(),
    vertical: {
      description: `This property sets how the active status is displayed on the \`${COMP$B}\` component. If set to true, the indicator is displayed on the side which lends itself to a vertically aligned navigation menu.`,
      valueType: "boolean",
      defaultValue: false
    },
    displayActive: {
      description: `This Boolean property indicates if the active state of a link should have a visual indication. Setting it to \`false\` removes the visual indication of an active link.`,
      valueType: "boolean",
      defaultValue: true
    },
    icon: d(
      `This property allows you to add an icon (specify the icon's name) to the navigation link.`
    )
  },
  events: {
    click: dClick(COMP$B)
  },
  themeVars: parseScssVar(navLinkStyles.themeVars),
  themeVarDescriptions: {
    [`color-indicator-${COMP$B}`]: "Provides the following states: `--hover`, `--active`, `--pressed`"
  },
  defaultThemeVars: {
    [`border-${COMP$B}`]: "0px solid $borderColor",
    [`borderRadius-${COMP$B}`]: "$borderRadius",
    [`backgroundColor-${COMP$B}`]: "transparent",
    [`paddingHorizontal-${COMP$B}`]: "$space-4",
    [`paddingVertical-${COMP$B}`]: "$space-2",
    [`fontSize-${COMP$B}`]: "$fontSize-small",
    [`fontWeight-${COMP$B}`]: "$fontWeight-normal",
    [`fontFamily-${COMP$B}`]: "$fontFamily",
    [`textColor-${COMP$B}`]: "$textColor-primary",
    [`fontWeight-${COMP$B}--pressed`]: "$fontWeight-normal",
    [`thickness-indicator-${COMP$B}`]: "$space-0_5",
    [`outlineColor-${COMP$B}--focus`]: "$outlineColor--focus",
    [`outlineWidth-${COMP$B}--focus`]: "$outlineWidth--focus",
    [`outlineStyle-${COMP$B}--focus`]: "$outlineStyle--focus",
    [`outlineOffset-${COMP$B}--focus`]: "-1px",
    [`borderRadius-indicator-${COMP$B}`]: "$borderRadius",
    [`color-icon-${COMP$B}`]: "$color-surface-500",
    [`color-indicator-${COMP$B}--active`]: "$color-primary-500",
    [`color-indicator-${COMP$B}--pressed`]: "$color-primary-500",
    [`color-indicator-${COMP$B}--hover`]: "$color-primary-600"
  }
});
const COMP$A = "Tree";
const TreeMd = createMetadata({
  status: "in progress",
  description: `The \`${COMP$A}\` component is a virtualized tree component that displays hierarchical data.`,
  props: {
    data: {
      description: `The data source of the tree.`,
      required: true
    },
    selectedUid: {
      description: `The ID (optional) of the selected tree row.`
    },
    itemTemplate: dComponent("The template for each item in the tree.")
  }
});
const COMP$z = "Text";
const TextMd = createMetadata({
  description: `The \`${COMP$z}\` component displays textual information in a number of optional styles and variants.`,
  props: {
    value: d(
      `The text to be displayed. This value can also be set via nesting the text into the \`${COMP$z}\` component.`
    ),
    variant: {
      description: "An optional string value that provides named presets for text variants with a unique combination of font style, weight, size, color, and other parameters. If not defined, the text uses the current style of its context.",
      availableValues: variantOptionsMd
    },
    maxLines: d(
      "This property determines the maximum number of lines the component can wrap to. If there is no space to display all the contents, the component displays up to as many lines as specified in this property. When the value is not defined, there is no limit on the displayed lines."
    ),
    preserveLinebreaks: {
      description: `This property indicates if linebreaks should be preserved when displaying text.`,
      valueType: "boolean",
      defaultValue: "false"
    },
    ellipses: {
      description: "This property indicates whether ellipses should be displayed when the text is cropped (`true`) or not (`false`).",
      valueType: "boolean",
      defaultValue: false
    }
  },
  themeVars: parseScssVar(styles$J.themeVars),
  defaultThemeVars: {
    [`borderRadius-${COMP$z}`]: "$borderRadius",
    [`borderStyle-${COMP$z}`]: "solid",
    [`fontSize-${COMP$z}`]: "$fontSize-small",
    [`borderWidth-${COMP$z}`]: "$space-0",
    [`fontWeight-${COMP$z}-abbr`]: "$fontWeight-bold",
    [`textTransform-${COMP$z}-abbr`]: "uppercase",
    [`fontSize-${COMP$z}-secondary`]: "$fontSize-small",
    [`fontStyle-${COMP$z}-cite`]: "italic",
    [`textColor-${COMP$z}`]: "$textColor-primary",
    [`fontFamily-${COMP$z}`]: "$fontFamily",
    [`fontWeight-${COMP$z}`]: "$fontWeight-normal",
    [`fontFamily-${COMP$z}-code`]: "$fontFamily-monospace",
    [`fontSize-${COMP$z}-code`]: "$fontSize-small",
    [`borderWidth-${COMP$z}-code`]: "1px",
    [`borderStyle-${COMP$z}-code`]: "solid",
    [`borderRadius-${COMP$z}-code`]: "4px",
    [`paddingHorizontal-${COMP$z}-code`]: "$space-1",
    [`marginLeft-${COMP$z}-code`]: "$space-1",
    [`marginRight-${COMP$z}-code`]: "$space-1",
    [`paddingBottom-${COMP$z}-code`]: "2px",
    [`textDecorationLine-${COMP$z}-deleted`]: "line-through",
    [`textDecorationLine-${COMP$z}-inserted`]: "underline",
    [`fontFamily-${COMP$z}-keyboard`]: "$fontFamily-monospace",
    [`fontSize-${COMP$z}-keyboard`]: "$fontSize-small",
    [`fontWeight-${COMP$z}-keyboard`]: "$fontWeight-bold",
    [`borderWidth-${COMP$z}-keyboard`]: "1px",
    [`paddingHorizontal-${COMP$z}-keyboard`]: "$space-1",
    [`fontFamily-${COMP$z}-sample`]: "$fontFamily-monospace",
    [`fontSize-${COMP$z}-sample`]: "$fontSize-small",
    [`fontSize-${COMP$z}-sup`]: "$fontSize-smaller",
    [`verticalAlign-${COMP$z}-sup`]: "super",
    [`fontSize-${COMP$z}-sub`]: "$fontSize-smaller",
    [`verticalAlign-${COMP$z}-sub`]: "sub",
    [`fontStyle-${COMP$z}-var`]: "italic",
    [`fontFamily-${COMP$z}-mono`]: "$fontFamily-monospace",
    [`fontSize-${COMP$z}-title`]: "$fontSize-large",
    [`fontSize-${COMP$z}-subtitle`]: "$fontSize-medium",
    [`fontSize-${COMP$z}-small`]: "$fontSize-small",
    [`lineHeight-${COMP$z}-small`]: "$lineHeight-tight",
    [`letterSpacing-${COMP$z}-caption`]: "0.05rem",
    [`fontSize-${COMP$z}-placeholder`]: "$fontSize-small",
    [`fontFamily-${COMP$z}-codefence`]: "$fontFamily-monospace",
    [`paddingHorizontal-${COMP$z}-codefence`]: "$space-3",
    [`paddingVertical-${COMP$z}-codefence`]: "$space-2",
    [`paddingVertical-${COMP$z}-paragraph`]: "$space-1",
    [`fontSize-${COMP$z}-subheading`]: "$fontSize-H6",
    [`fontWeight-${COMP$z}-subheading`]: "$fontWeight-bold",
    [`letterSpacing-${COMP$z}-subheading`]: "0.04em",
    [`textTransform-${COMP$z}-subheading`]: "uppercase",
    [`marginTop-${COMP$z}-tableheading`]: "$space-1",
    [`marginBottom-${COMP$z}-tableheading`]: "$space-4",
    [`paddingHorizontal-${COMP$z}-tableheading`]: "$space-1",
    [`fontWeight-${COMP$z}-tableheading`]: "$fontWeight-bold",
    [`marginTop-${COMP$z}-markdown`]: "$space-3",
    [`marginBottom-${COMP$z}-markdown`]: "$space-6",
    [`fontSize-${COMP$z}-markdown`]: "$fontSize-normal",
    [`backgroundColor-${COMP$z}-code`]: "$color-surface-100",
    [`borderColor-${COMP$z}-code`]: "$color-surface-200",
    [`backgroundColor-${COMP$z}-keyboard`]: "$color-surface-200",
    [`borderColor-${COMP$z}-keyboard`]: "$color-surface-300",
    [`backgroundColor-${COMP$z}-marked`]: "yellow",
    [`color-${COMP$z}-placeholder`]: "$color-surface-500",
    [`color-${COMP$z}-codefence`]: "$color-surface-900",
    [`color-${COMP$z}-subheading`]: "$textColor-secondary",
    [`color-${COMP$z}-secondary`]: "$textColor-secondary"
  }
});
const COMP$y = "Fragment";
const FragmentMd = createMetadata({
  description: `The \`${COMP$y}\` component encloses multiple child components into a single root component, so it can be used where only a single component definition is allowed.`,
  opaque: true
});
const themeVars$b = `'{"textColor-pagination-Table": "var(--xmlui-textColor-pagination-Table)", "backgroundColor-Table": "var(--xmlui-backgroundColor-Table)", "textColor-Table": "var(--xmlui-textColor-Table)", "backgroundColor-row-Table": "var(--xmlui-backgroundColor-row-Table)", "backgroundColor-row-Table--hover": "var(--xmlui-backgroundColor-row-Table--hover)", "backgroundColor-selected-Table": "var(--xmlui-backgroundColor-selected-Table)", "backgroundColor-selected-Table--hover": "var(--xmlui-backgroundColor-selected-Table--hover)", "backgroundColor-heading-Table": "var(--xmlui-backgroundColor-heading-Table)", "backgroundColor-heading-Table--hover": "var(--xmlui-backgroundColor-heading-Table--hover)", "backgroundColor-heading-Table--active": "var(--xmlui-backgroundColor-heading-Table--active)", "padding-heading-Table": "var(--xmlui-padding-heading-Table)", "paddingHorizontal-heading-Table": "var(--xmlui-paddingHorizontal-heading-Table, var(--xmlui-padding-heading-Table))", "paddingVertical-heading-Table": "var(--xmlui-paddingVertical-heading-Table, var(--xmlui-padding-heading-Table))", "paddingLeft-heading-Table": "var(--xmlui-paddingLeft-heading-Table, var(--xmlui-paddingHorizontal-heading-Table, var(--xmlui-padding-heading-Table)))", "paddingRight-heading-Table": "var(--xmlui-paddingRight-heading-Table, var(--xmlui-paddingHorizontal-heading-Table, var(--xmlui-padding-heading-Table)))", "paddingTop-heading-Table": "var(--xmlui-paddingTop-heading-Table, var(--xmlui-paddingVertical-heading-Table, var(--xmlui-padding-heading-Table)))", "paddingBottom-heading-Table": "var(--xmlui-paddingBottom-heading-Table, var(--xmlui-paddingVertical-heading-Table, var(--xmlui-padding-heading-Table)))", "padding-cell-Table": "var(--xmlui-padding-cell-Table)", "paddingHorizontal-cell-Table": "var(--xmlui-paddingHorizontal-cell-Table, var(--xmlui-padding-cell-Table))", "paddingVertical-cell-Table": "var(--xmlui-paddingVertical-cell-Table, var(--xmlui-padding-cell-Table))", "paddingLeft-cell-Table": "var(--xmlui-paddingLeft-cell-Table, var(--xmlui-paddingHorizontal-cell-Table, var(--xmlui-padding-cell-Table)))", "paddingRight-cell-Table": "var(--xmlui-paddingRight-cell-Table, var(--xmlui-paddingHorizontal-cell-Table, var(--xmlui-padding-cell-Table)))", "paddingTop-cell-Table": "var(--xmlui-paddingTop-cell-Table, var(--xmlui-paddingVertical-cell-Table, var(--xmlui-padding-cell-Table)))", "paddingBottom-cell-Table": "var(--xmlui-paddingBottom-cell-Table, var(--xmlui-paddingVertical-cell-Table, var(--xmlui-padding-cell-Table)))", "paddingHorizontal-cell-first-Table": "var(--xmlui-paddingHorizontal-cell-first-Table)", "paddingHorizontal-cell-last-Table": "var(--xmlui-paddingHorizontal-cell-last-Table)", "border-cell-Table": "var(--xmlui-border-cell-Table)", "borderHorizontal-cell-Table": "var(--xmlui-borderHorizontal-cell-Table, var(--xmlui-border-cell-Table))", "borderVertical-cell-Table": "var(--xmlui-borderVertical-cell-Table, var(--xmlui-border-cell-Table))", "borderLeft-cell-Table": "var(--xmlui-borderLeft-cell-Table, var(--xmlui-borderHorizontal-cell-Table, var(--xmlui-border-cell-Table)))", "borderRight-cell-Table": "var(--xmlui-borderRight-cell-Table, var(--xmlui-borderHorizontal-cell-Table, var(--xmlui-border-cell-Table)))", "borderTop-cell-Table": "var(--xmlui-borderTop-cell-Table, var(--xmlui-borderVertical-cell-Table, var(--xmlui-border-cell-Table)))", "borderBottom-cell-Table": "var(--xmlui-borderBottom-cell-Table)", "borderWidth-cell-Table": "var(--xmlui-borderWidth-cell-Table)", "borderHorizontalWidth-cell-Table": "var(--xmlui-borderHorizontalWidth-cell-Table, var(--xmlui-borderWidth-cell-Table))", "borderLeftWidth-cell-Table": "var(--xmlui-borderLeftWidth-cell-Table, var(--xmlui-borderHorizontalWidth-cell-Table, var(--xmlui-borderWidth-cell-Table)))", "borderRightWidth-cell-Table": "var(--xmlui-borderRightWidth-cell-Table, var(--xmlui-borderHorizontalWidth-cell-Table, var(--xmlui-borderWidth-cell-Table)))", "borderVerticalWidth-cell-Table": "var(--xmlui-borderVerticalWidth-cell-Table, var(--xmlui-borderWidth-cell-Table))", "borderTopWidth-cell-Table": "var(--xmlui-borderTopWidth-cell-Table, var(--xmlui-borderVerticalWidth-cell-Table, var(--xmlui-borderWidth-cell-Table)))", "borderBottomWidth-cell-Table": "var(--xmlui-borderBottomWidth-cell-Table, var(--xmlui-borderVerticalWidth-cell-Table, var(--xmlui-borderWidth-cell-Table)))", "borderStyle-cell-Table": "var(--xmlui-borderStyle-cell-Table)", "borderHorizontalStyle-cell-Table": "var(--xmlui-borderHorizontalStyle-cell-Table, var(--xmlui-borderStyle-cell-Table))", "borderLeftStyle-cell-Table": "var(--xmlui-borderLeftStyle-cell-Table, var(--xmlui-borderHorizontalStyle-cell-Table, var(--xmlui-borderStyle-cell-Table)))", "borderRightStyle-cell-Table": "var(--xmlui-borderRightStyle-cell-Table, var(--xmlui-borderHorizontalStyle-cell-Table, var(--xmlui-borderStyle-cell-Table)))", "borderVerticalStyle-cell-Table": "var(--xmlui-borderVerticalStyle-cell-Table, var(--xmlui-borderStyle-cell-Table))", "borderTopStyle-cell-Table": "var(--xmlui-borderTopStyle-cell-Table, var(--xmlui-borderVerticalStyle-cell-Table, var(--xmlui-borderStyle-cell-Table)))", "borderBottomStyle-cell-Table": "var(--xmlui-borderBottomStyle-cell-Table, var(--xmlui-borderVerticalStyle-cell-Table, var(--xmlui-borderStyle-cell-Table)))", "borderColor-cell-Table": "var(--xmlui-borderColor-cell-Table)", "borderHorizontalColor-cell-Table": "var(--xmlui-borderHorizontalColor-cell-Table, var(--xmlui-borderColor-cell-Table))", "borderLeftColor-cell-Table": "var(--xmlui-borderLeftColor-cell-Table, var(--xmlui-borderHorizontalColor-cell-Table, var(--xmlui-borderColor-cell-Table)))", "borderRightColor-cell-Table": "var(--xmlui-borderRightColor-cell-Table, var(--xmlui-borderHorizontalColor-cell-Table, var(--xmlui-borderColor-cell-Table)))", "borderVerticalColor-cell-Table": "var(--xmlui-borderVerticalColor-cell-Table, var(--xmlui-borderColor-cell-Table))", "borderTopColor-cell-Table": "var(--xmlui-borderTopColor-cell-Table, var(--xmlui-borderVerticalColor-cell-Table, var(--xmlui-borderColor-cell-Table)))", "borderBottomColor-cell-Table": "var(--xmlui-borderBottomColor-cell-Table, var(--xmlui-borderVerticalColor-cell-Table, var(--xmlui-borderColor-cell-Table)))", "borderStartStartRadius-cell-Table": "var(--xmlui-borderStartStartRadius-cell-Table, var(--xmlui-borderRadius-cell-Table))", "borderStartEndRadius-cell-Table": "var(--xmlui-borderStartEndRadius-cell-Table, var(--xmlui-borderRadius-cell-Table))", "borderEndStartRadius-cell-Table": "var(--xmlui-borderEndStartRadius-cell-Table, var(--xmlui-borderRadius-cell-Table))", "borderEndEndRadius-cell-Table": "var(--xmlui-borderEndEndRadius-cell-Table, var(--xmlui-borderRadius-cell-Table))", "backgroundColor-pagination-Table": "var(--xmlui-backgroundColor-pagination-Table)", "textColor-heading-Table": "var(--xmlui-textColor-heading-Table)", "fontWeight-row-Table": "var(--xmlui-fontWeight-row-Table)", "fontSize-row-Table": "var(--xmlui-fontSize-row-Table)", "fontWeight-heading-Table": "var(--xmlui-fontWeight-heading-Table)", "fontSize-heading-Table": "var(--xmlui-fontSize-heading-Table)", "textTransform-heading-Table": "var(--xmlui-textTransform-heading-Table)", "outlineWidth-heading-Table--focus": "var(--xmlui-outlineWidth-heading-Table--focus)", "outlineColor-heading-Table--focus": "var(--xmlui-outlineColor-heading-Table--focus)", "outlineStyle-heading-Table--focus": "var(--xmlui-outlineStyle-heading-Table--focus)", "outlineOffset-heading-Table--focus": "var(--xmlui-outlineOffset-heading-Table--focus)"}'`;
const wrapper = "_wrapper_1wbg1_13";
const noScroll = "_noScroll_1wbg1_19";
const headerWrapper = "_headerWrapper_1wbg1_23";
const tableBody = "_tableBody_1wbg1_23";
const clickableHeader = "_clickableHeader_1wbg1_29";
const headerContent = "_headerContent_1wbg1_43";
const headerRow = "_headerRow_1wbg1_76";
const columnCell = "_columnCell_1wbg1_81";
const cell = "_cell_1wbg1_81";
const table = "_table_1wbg1_23";
const row = "_row_1wbg1_93";
const checkBoxWrapper = "_checkBoxWrapper_1wbg1_99";
const showInHeader = "_showInHeader_1wbg1_103";
const selected = "_selected_1wbg1_106";
const allSelected = "_allSelected_1wbg1_106";
const focused = "_focused_1wbg1_152";
const disabled = "_disabled_1wbg1_164";
const noBottomBorder = "_noBottomBorder_1wbg1_168";
const noRows = "_noRows_1wbg1_196";
const pagination = "_pagination_1wbg1_202";
const paginationLabel = "_paginationLabel_1wbg1_218";
const paginationSelect = "_paginationSelect_1wbg1_223";
const paginationButtons = "_paginationButtons_1wbg1_229";
const loadingWrapper = "_loadingWrapper_1wbg1_241";
const resizer = "_resizer_1wbg1_256";
const isResizing = "_isResizing_1wbg1_278";
const styles$b = {
  themeVars: themeVars$b,
  wrapper,
  noScroll,
  headerWrapper,
  tableBody,
  clickableHeader,
  headerContent,
  headerRow,
  columnCell,
  cell,
  table,
  row,
  checkBoxWrapper,
  showInHeader,
  selected,
  allSelected,
  focused,
  disabled,
  noBottomBorder,
  noRows,
  pagination,
  paginationLabel,
  paginationSelect,
  paginationButtons,
  loadingWrapper,
  resizer,
  isResizing
};
const TableContext = createContext({
  registerColumn: (col, id) => {
  },
  unRegisterColumn: (id) => {
  }
});
const EMPTY_SELECTION_STATE = {
  value: EMPTY_ARRAY
};
const StandaloneSelectionStore = ({ children }) => {
  const [selection, setSelection] = useState(EMPTY_SELECTION_STATE);
  return /* @__PURE__ */ jsx(SelectionStore, { updateState: setSelection, selectedItems: selection.value, children });
};
const SelectionStore = ({
  updateState = noop$2,
  idKey = "id",
  children,
  selectedItems = EMPTY_ARRAY,
  registerComponentApi = noop$2
}) => {
  const [items, setItems] = useState(selectedItems);
  const valueInitializedRef = useRef(false);
  const refreshSelection = useEvent((allItems = EMPTY_ARRAY) => {
    const safeAllItems = allItems || EMPTY_ARRAY;
    const safeSelectedItems = selectedItems || EMPTY_ARRAY;
    setItems(safeAllItems);
    let value = safeAllItems.filter(
      (item) => !!safeSelectedItems.find((si) => si && item && si[idKey] === item[idKey])
    );
    if (!isEqual(safeSelectedItems, value) || !valueInitializedRef.current) {
      valueInitializedRef.current = true;
      updateState({
        value
      });
    }
  });
  const setSelectedRowIds = useEvent((rowIds) => {
    const safeItems = items || EMPTY_ARRAY;
    updateState({ value: safeItems.filter((item) => rowIds.includes(item[idKey])) });
  });
  const clearSelection = useEvent(() => {
    setSelectedRowIds(EMPTY_ARRAY);
  });
  useLayoutEffect(() => {
    registerComponentApi({
      clearSelection,
      setSelectedRowIds,
      refreshSelection
    });
  }, [clearSelection, setSelectedRowIds, registerComponentApi, refreshSelection]);
  const contextValue2 = useMemo(() => {
    return {
      selectedItems,
      setSelectedRowIds,
      refreshSelection,
      idKey
    };
  }, [refreshSelection, selectedItems, setSelectedRowIds, idKey]);
  return /* @__PURE__ */ jsx(SelectionContext.Provider, { value: contextValue2, children });
};
const SelectionContext = React__default.createContext(null);
function useSelectionContext() {
  return useContext(SelectionContext);
}
function FiChevronLeft(props) {
  return GenIcon({ "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "polyline", "attr": { "points": "15 18 9 12 15 6" } }] })(props);
}
function FiChevronRight(props) {
  return GenIcon({ "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "polyline", "attr": { "points": "9 18 15 12 9 6" } }] })(props);
}
function FiChevronsLeft(props) {
  return GenIcon({ "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "polyline", "attr": { "points": "11 17 6 12 11 7" } }, { "tag": "polyline", "attr": { "points": "18 17 13 12 18 7" } }] })(props);
}
function FiChevronsRight(props) {
  return GenIcon({ "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "polyline", "attr": { "points": "13 17 18 12 13 7" } }, { "tag": "polyline", "attr": { "points": "6 17 11 12 6 7" } }] })(props);
}
function useRowSelection({
  items = EMPTY_ARRAY,
  visibleItems = items,
  rowsSelectable,
  enableMultiRowSelection,
  onSelectionDidChange
}) {
  const [focusedIndex, setFocusedIndex] = useState(-1);
  const [selectionInterval, setSelectionInterval] = useState(null);
  const { selectedItems, setSelectedRowIds, refreshSelection, idKey } = useSelectionContext();
  const walkableList = useMemo(() => {
    return visibleItems.map((item) => item[idKey]);
  }, [idKey, visibleItems]);
  useEffect(() => {
    refreshSelection(rowsSelectable ? items : EMPTY_ARRAY);
  }, [refreshSelection, items, rowsSelectable]);
  const prevEnableMultiRowSelection = usePrevious(enableMultiRowSelection);
  useEffect(() => {
    if (prevEnableMultiRowSelection && !enableMultiRowSelection) {
      if (selectedItems.length > 1) {
        setSelectedRowIds([selectedItems[0][idKey]]);
      }
    }
  }, [
    enableMultiRowSelection,
    idKey,
    prevEnableMultiRowSelection,
    selectedItems,
    setSelectedRowIds
  ]);
  useEffect(() => {
    if (!rowsSelectable) {
      return;
    }
    if (focusedIndex !== -1 && !walkableList[focusedIndex] && walkableList[0]) {
      setFocusedIndex(0);
    }
  }, [focusedIndex, rowsSelectable, setFocusedIndex, walkableList]);
  const toggleRowIndex = useEvent(
    // targetIndex: the item affected by an event
    // options: key event options
    (targetIndex, options2 = {}) => {
      if (!rowsSelectable) {
        return;
      }
      const targetId = walkableList[targetIndex];
      const { shiftKey, metaKey, ctrlKey } = options2;
      const singleItem = !enableMultiRowSelection || !shiftKey && !metaKey && !ctrlKey;
      let newSelectionInterval;
      let newSelectedRowsIdsInOrder = [...selectedItems.map((item) => item[idKey])];
      if (singleItem) {
        newSelectionInterval = {
          from: targetId,
          to: targetId
        };
        newSelectedRowsIdsInOrder = [targetId];
      } else {
        if (shiftKey) {
          let normalizedFromIdx;
          let normalizedToIdx;
          let from;
          let to;
          if (selectionInterval) {
            let oldFromIdx = walkableList.indexOf(selectionInterval.from);
            let oldToIdx = walkableList.indexOf(selectionInterval.to);
            let normalizedOldFromIdx = Math.min(oldFromIdx, oldToIdx);
            let normalizedOldToIdx = Math.max(oldFromIdx, oldToIdx);
            const slice = walkableList.slice(normalizedOldFromIdx, normalizedOldToIdx + 1);
            newSelectedRowsIdsInOrder = newSelectedRowsIdsInOrder.filter(
              (item) => !slice.includes(item)
            );
            from = selectionInterval.from;
            to = targetId;
            let fromIdx = walkableList.indexOf(from);
            let toIdx = walkableList.indexOf(to);
            normalizedFromIdx = Math.min(fromIdx, toIdx);
            normalizedToIdx = Math.max(fromIdx, toIdx);
          } else {
            from = targetId;
            to = targetId;
            normalizedFromIdx = targetIndex;
            normalizedToIdx = targetIndex;
          }
          const sl = walkableList.slice(normalizedFromIdx, normalizedToIdx + 1);
          newSelectedRowsIdsInOrder = union(newSelectedRowsIdsInOrder, sl);
          newSelectionInterval = {
            from,
            to
          };
        } else {
          newSelectionInterval = {
            from: targetId,
            to: targetId
          };
          if (metaKey || ctrlKey) {
            if (newSelectedRowsIdsInOrder.includes(targetId)) {
              newSelectedRowsIdsInOrder = newSelectedRowsIdsInOrder.filter(
                (item) => item !== targetId
              );
            } else {
              newSelectedRowsIdsInOrder.push(targetId);
            }
          } else {
            newSelectedRowsIdsInOrder = [targetId];
          }
        }
      }
      setFocusedIndex(targetIndex);
      setSelectedRowIds(uniq(newSelectedRowsIdsInOrder));
      setSelectionInterval(newSelectionInterval);
    }
  );
  const toggleRow = useEvent((item, options2) => {
    if (!rowsSelectable) {
      return;
    }
    const targetIndex = walkableList.indexOf(item[idKey]);
    toggleRowIndex(targetIndex, options2);
  });
  const onKeyDown = useEvent((event) => {
    if (!rowsSelectable) {
      return;
    }
    if (event.key === "ArrowDown") {
      event.preventDefault();
      let newFocusIndex = Math.min(visibleItems.length - 1, focusedIndex + 1);
      if (focusedIndex !== visibleItems.length - 1) {
        toggleRowIndex(newFocusIndex, event);
      }
    }
    if (event.key === "PageDown") {
      event.preventDefault();
      const newFocusIndex = Math.min(visibleItems.length - 1, focusedIndex + 8);
      toggleRowIndex(newFocusIndex, event);
    }
    if (event.key === "ArrowUp") {
      event.preventDefault();
      let newFocusIndex = Math.max(0, focusedIndex - 1);
      if (focusedIndex >= 0) {
        toggleRowIndex(newFocusIndex, event);
      }
    }
    if (event.key === "PageUp") {
      event.preventDefault();
      const newFocusIndex = Math.max(0, focusedIndex - 8);
      toggleRowIndex(newFocusIndex, event);
    }
  });
  useEffect(() => {
    onSelectionDidChange == null ? void 0 : onSelectionDidChange(selectedItems);
  }, [selectedItems, onSelectionDidChange]);
  const checkAllRows = useEvent((checked) => {
    if (!rowsSelectable) {
      return;
    }
    if (!enableMultiRowSelection && checked) {
      return;
    }
    setSelectedRowIds(checked ? items.map((item) => item[idKey]) : []);
  });
  const selectedRowIdMap = useMemo(() => {
    let rows = {};
    selectedItems.forEach((item) => {
      rows[item[idKey]] = true;
    });
    return rows;
  }, [idKey, selectedItems]);
  const getSelectedItems = useCallback(() => {
    return selectedItems;
  }, [selectedItems]);
  const getSelectedIds = useCallback(() => {
    return selectedItems.map((item) => item[idKey]);
  }, [idKey, selectedItems]);
  const clearSelection = useCallback(() => {
    checkAllRows(false);
  }, [checkAllRows]);
  const selectAll = useCallback(() => {
    checkAllRows(true);
  }, [checkAllRows]);
  const selectId = useCallback(
    (id) => {
      if (!rowsSelectable) {
        return;
      }
      let ids = Array.isArray(id) ? id : [id];
      if (ids.length > 1 && !enableMultiRowSelection) {
        ids = [ids[0]];
      }
      setSelectedRowIds(ids);
    },
    [enableMultiRowSelection, rowsSelectable, setSelectedRowIds]
  );
  const api = useMemo(() => {
    return {
      getSelectedItems,
      getSelectedIds,
      clearSelection,
      selectAll,
      selectId
    };
  }, [clearSelection, getSelectedIds, getSelectedItems, selectAll, selectId]);
  return {
    onKeyDown,
    focusedIndex,
    toggleRowIndex,
    toggleRow,
    checkAllRows,
    selectedRowIdMap,
    selectedItems,
    idKey,
    selectionApi: api
  };
}
function defaultIsRowDisabled(_) {
  return false;
}
const SELECT_COLUMN_WIDTH = 42;
const DEFAULT_PAGE_SIZES = [10];
const getCommonPinningStyles = (column) => {
  const isPinned = column.getIsPinned();
  return {
    // boxShadow: isLastLeftPinnedColumn
    //   ? "-4px 0 4px -4px gray inset"
    //   : isFirstRightPinnedColumn
    //   ? "4px 0 4px -4px gray inset"
    //   : undefined,
    left: isPinned === "left" ? `${column.getStart("left")}px` : void 0,
    right: isPinned === "right" ? `${column.getAfter("right")}px` : void 0,
    opacity: isPinned ? 0.95 : void 0,
    position: isPinned ? "sticky" : "relative",
    backgroundColor: isPinned ? "inherit" : void 0,
    zIndex: isPinned ? 1 : void 0
  };
};
const Table = forwardRef(
  ({
    data = EMPTY_ARRAY,
    columns = EMPTY_ARRAY,
    isPaginated = false,
    loading: loading2 = false,
    headerHeight,
    rowsSelectable = false,
    enableMultiRowSelection = true,
    pageSizes = DEFAULT_PAGE_SIZES,
    rowDisabledPredicate = defaultIsRowDisabled,
    sortBy,
    sortingDirection = "ascending",
    iconSortAsc,
    iconSortDesc,
    iconNoSort,
    sortingDidChange,
    willSort,
    style,
    noDataRenderer,
    autoFocus = false,
    hideHeader = false,
    hideNoDataView = false,
    alwaysShowSelectionHeader = false,
    registerComponentApi,
    onSelectionDidChange,
    noBottomBorder: noBottomBorder2 = false
    // cols
  }, forwardedRef) => {
    var _a, _b, _c, _d;
    const { getThemeVar } = useTheme();
    const safeData = Array.isArray(data) ? data : EMPTY_ARRAY;
    const wrapperRef = useRef(null);
    const ref = forwardedRef ? composeRefs(wrapperRef, forwardedRef) : wrapperRef;
    const tableRef = useRef(null);
    const estimatedHeightRef = useRef(null);
    const isSortControlled = sortBy !== void 0;
    const safeColumns = useMemo(() => {
      if (columns) {
        return columns;
      }
      if (!safeData.length) {
        return EMPTY_ARRAY;
      }
      return Object.keys(safeData[0]).map((key) => ({ header: key, accessorKey: key }));
    }, [columns, safeData]);
    useEffect(() => {
      if (autoFocus) {
        wrapperRef.current.focus();
      }
    }, [autoFocus]);
    const [visibleItems, setVisibleItems] = useState(EMPTY_ARRAY);
    const {
      toggleRow,
      checkAllRows,
      focusedIndex,
      onKeyDown,
      selectedRowIdMap,
      idKey,
      selectionApi
    } = useRowSelection({
      items: safeData,
      visibleItems,
      rowsSelectable,
      enableMultiRowSelection,
      onSelectionDidChange
    });
    const dataWithOrder = useMemo(() => {
      return safeData.map((item, index) => {
        return {
          ...item,
          order: index + 1
        };
      });
    }, [safeData]);
    const [_sortBy, _setSortBy] = useState(sortBy);
    const [_sortingDirection, _setSortingDirection] = useState(sortingDirection);
    useLayoutEffect(() => {
      _setSortBy(sortBy);
    }, [sortBy]);
    useLayoutEffect(() => {
      _setSortingDirection(sortingDirection);
    }, [sortingDirection]);
    const sortedData = useMemo(() => {
      if (!_sortBy || isSortControlled) {
        return dataWithOrder;
      }
      return orderBy(dataWithOrder, _sortBy, _sortingDirection === "ascending" ? "asc" : "desc");
    }, [_sortBy, _sortingDirection, dataWithOrder, isSortControlled]);
    const _updateSorting = useCallback(
      async (accessorKey) => {
        let newDirection = "ascending";
        let newSortBy = accessorKey;
        if (_sortBy === accessorKey) {
          if (_sortingDirection === "ascending") {
            newDirection = "descending";
          } else {
            newSortBy = void 0;
          }
        }
        const result = await (willSort == null ? void 0 : willSort(newSortBy, newDirection));
        if (result === false) {
          return;
        }
        _setSortingDirection(newDirection);
        _setSortBy(newSortBy);
        sortingDidChange == null ? void 0 : sortingDidChange(newSortBy, newDirection);
      },
      [_sortBy, willSort, sortingDidChange, _sortingDirection]
    );
    const columnsWithCustomCell = useMemo(() => {
      return safeColumns.map((col, idx) => {
        const { width, starSizedWidth } = getColumnWidth(col.width, true, "width");
        const { width: minWidth } = getColumnWidth(col.minWidth, false, "minWidth");
        const { width: maxWidth } = getColumnWidth(col.maxWidth, false, "maxWidth");
        const customColumn = {
          ...col,
          header: col.header ?? col.accessorKey ?? " ",
          id: "col_" + idx,
          size: width,
          minSize: minWidth,
          maxSize: maxWidth,
          enableResizing: col.canResize,
          enableSorting: col.canSort,
          enablePinning: col.pinTo !== void 0,
          meta: {
            starSizedWidth,
            pinTo: col.pinTo,
            style: col.style,
            accessorKey: col.accessorKey,
            cellRenderer: col.cellRenderer
          }
        };
        return customColumn;
        function getColumnWidth(colWidth, allowStarSize, propName) {
          let starSizedWidth2;
          let width2;
          const resolvedWidth = isThemeVarName(colWidth) ? getThemeVar(colWidth) : colWidth;
          if (typeof resolvedWidth === "number") {
            width2 = resolvedWidth;
          } else if (typeof resolvedWidth === "string") {
            const oneStarSizedWidthMatch = resolvedWidth.match(/^\s*\*\s*$/);
            if (allowStarSize && oneStarSizedWidthMatch) {
              starSizedWidth2 = "1*";
            } else {
              const starSizedWidthMatch = resolvedWidth.match(/^\s*(\d+)\s*\*\s*$/);
              if (allowStarSize && starSizedWidthMatch) {
                starSizedWidth2 = starSizedWidthMatch[1] + "*";
              } else {
                const pixelWidthMatch = resolvedWidth.match(/^\s*(\d+)\s*(px)?\s*$/);
                if (pixelWidthMatch) {
                  width2 = Number(pixelWidthMatch[1]);
                } else {
                  throw new Error(`Invalid TableColumnDef '${propName}' value: ${resolvedWidth}`);
                }
              }
            }
          }
          if (width2 === void 0 && starSizedWidth2 === void 0 && allowStarSize) {
            starSizedWidth2 = "1*";
          }
          return { width: width2, starSizedWidth: starSizedWidth2 };
        }
      });
    }, [getThemeVar, safeColumns]);
    const columnsWithSelectColumn = useMemo(() => {
      const selectColumn = {
        id: "select",
        size: SELECT_COLUMN_WIDTH,
        enableResizing: false,
        enablePinning: true,
        meta: {
          pinTo: "left"
        },
        header: ({ table: table22 }) => enableMultiRowSelection ? /* @__PURE__ */ jsx(
          Toggle,
          {
            ...{
              className: classnames(styles$b.checkBoxWrapper, {
                [styles$b.showInHeader]: alwaysShowSelectionHeader
              }),
              value: table22.getIsAllRowsSelected(),
              indeterminate: table22.getIsSomeRowsSelected(),
              onDidChange: (checked) => {
                checkAllRows(checked);
              }
            }
          }
        ) : null,
        cell: ({ row: row2 }) => /* @__PURE__ */ jsx(
          Toggle,
          {
            ...{
              className: styles$b.checkBoxWrapper,
              value: row2.getIsSelected(),
              indeterminate: row2.getIsSomeSelected(),
              onDidChange: () => {
                toggleRow(row2.original, { metaKey: true });
              }
            }
          }
        )
      };
      return rowsSelectable ? [selectColumn, ...columnsWithCustomCell] : columnsWithCustomCell;
    }, [
      rowsSelectable,
      columnsWithCustomCell,
      enableMultiRowSelection,
      alwaysShowSelectionHeader,
      checkAllRows,
      toggleRow
    ]);
    const [pagination2, setPagination] = useState({
      pageSize: isPaginated ? pageSizes[0] : Number.MAX_VALUE,
      pageIndex: 0
    });
    const prevIsPaginated = usePrevious(isPaginated);
    useEffect(() => {
      if (!prevIsPaginated && isPaginated) {
        setPagination((prev) => {
          return {
            ...prev,
            pageSize: pageSizes[0]
          };
        });
      }
      if (prevIsPaginated && !isPaginated) {
        setPagination((prev) => {
          return {
            pageIndex: 0,
            pageSize: Number.MAX_VALUE
          };
        });
      }
    }, [isPaginated, pageSizes, prevIsPaginated]);
    const [columnSizing, setColumnSizing] = useState({});
    const columnPinning = useMemo(() => {
      const left = [];
      const right = [];
      columnsWithSelectColumn.forEach((col) => {
        var _a2, _b2;
        if (((_a2 = col.meta) == null ? void 0 : _a2.pinTo) === "right") {
          right.push(col.id);
        }
        if (((_b2 = col.meta) == null ? void 0 : _b2.pinTo) === "left") {
          left.push(col.id);
        }
      });
      return {
        left,
        right
      };
    }, [columnsWithSelectColumn]);
    const table2 = useReactTable({
      columns: columnsWithSelectColumn,
      data: sortedData,
      getCoreRowModel: getCoreRowModel(),
      getPaginationRowModel: isPaginated ? getPaginationRowModel() : void 0,
      enableRowSelection: rowsSelectable,
      enableMultiRowSelection,
      columnResizeMode: "onChange",
      getRowId: useCallback(
        (originalRow) => {
          return originalRow[idKey] + "";
        },
        [idKey]
      ),
      state: useMemo(
        () => ({
          pagination: pagination2,
          rowSelection: selectedRowIdMap,
          columnSizing,
          columnPinning
        }),
        [columnPinning, columnSizing, pagination2, selectedRowIdMap]
      ),
      onColumnSizingChange: setColumnSizing,
      onPaginationChange: setPagination
    });
    const rows = table2.getRowModel().rows;
    useEffect(() => {
      setVisibleItems(rows.map((row2) => row2.original));
    }, [rows]);
    const scrollRef = useContext(ScrollContext);
    const hasOutsideScroll = scrollRef && (style == null ? void 0 : style.maxHeight) === void 0 && (style == null ? void 0 : style.height) === void 0 && (style == null ? void 0 : style.flex) === void 0;
    const myObserveElementOffset = useCallback(
      (instance, cb) => {
        return observeElementOffset(instance, (offset, isScrolling) => {
          var _a2;
          const parentContainerOffset = !hasOutsideScroll ? 0 : ((_a2 = wrapperRef.current) == null ? void 0 : _a2.offsetTop) || 0;
          cb(offset - parentContainerOffset, isScrolling);
        });
      },
      [hasOutsideScroll]
    );
    const rowVirtualizer = useVirtualizer({
      count: rows.length,
      getScrollElement: useCallback(() => {
        return hasOutsideScroll && (scrollRef == null ? void 0 : scrollRef.current) ? scrollRef == null ? void 0 : scrollRef.current : wrapperRef.current;
      }, [scrollRef, hasOutsideScroll]),
      observeElementOffset: myObserveElementOffset,
      estimateSize: useCallback(() => {
        return estimatedHeightRef.current || 30;
      }, []),
      overscan: 5
    });
    const paddingTop = rowVirtualizer.getVirtualItems().length > 0 ? ((_b = (_a = rowVirtualizer.getVirtualItems()) == null ? void 0 : _a[0]) == null ? void 0 : _b.start) || 0 : 0;
    const paddingBottom = rowVirtualizer.getVirtualItems().length > 0 ? rowVirtualizer.getTotalSize() - (((_d = (_c = rowVirtualizer.getVirtualItems()) == null ? void 0 : _c[rowVirtualizer.getVirtualItems().length - 1]) == null ? void 0 : _d.end) || 0) : 0;
    const hasData = safeData.length !== 0;
    const touchedSizesRef = useRef({});
    const columnSizeTouched = useCallback((id) => {
      touchedSizesRef.current[id] = true;
    }, []);
    const recalculateStarSizes = useEvent(() => {
      if (!tableRef.current) {
        return;
      }
      let availableWidth = tableRef.current.clientWidth - 1;
      const widths = {};
      const columnsWithoutSize = [];
      const numberOfUnitsById = {};
      table2.getAllColumns().forEach((column) => {
        var _a2, _b2;
        if (column.columnDef.size !== void 0 || touchedSizesRef.current[column.id]) {
          availableWidth -= columnSizing[column.id] || column.columnDef.size || 0;
        } else {
          columnsWithoutSize.push(column);
          let units;
          if ((_a2 = column.columnDef.meta) == null ? void 0 : _a2.starSizedWidth) {
            units = Number((_b2 = column.columnDef.meta) == null ? void 0 : _b2.starSizedWidth.replace("*", "").trim()) || 1;
          } else {
            units = 1;
          }
          numberOfUnitsById[column.id] = units;
        }
      });
      const numberOfAllUnits = Object.values(numberOfUnitsById).reduce((acc, val) => acc + val, 0);
      columnsWithoutSize.forEach((column) => {
        widths[column.id] = Math.floor(
          availableWidth * (numberOfUnitsById[column.id] / numberOfAllUnits)
        );
      });
      flushSync(() => {
        setColumnSizing((prev) => {
          return {
            ...prev,
            ...widths
          };
        });
      });
    });
    useResizeObserver(tableRef, recalculateStarSizes);
    useIsomorphicLayoutEffect(() => {
      queueMicrotask(() => {
        recalculateStarSizes();
      });
    }, [recalculateStarSizes, safeColumns]);
    useIsomorphicLayoutEffect(() => {
      registerComponentApi(selectionApi);
    }, [registerComponentApi, selectionApi]);
    return /* @__PURE__ */ jsxs(
      "div",
      {
        className: classnames(styles$b.wrapper, { [styles$b.noScroll]: hasOutsideScroll }),
        tabIndex: -1,
        onKeyDown,
        ref,
        style,
        children: [
          /* @__PURE__ */ jsxs(
            "table",
            {
              className: styles$b.table,
              ref: tableRef,
              style: { borderRight: "1px solid transparent" },
              children: [
                !hideHeader && /* @__PURE__ */ jsx("thead", { style: { height: headerHeight }, className: styles$b.headerWrapper, children: table2.getHeaderGroups().map((headerGroup, headerGroupIndex) => /* @__PURE__ */ jsx(
                  "tr",
                  {
                    className: classnames(styles$b.headerRow, {
                      [styles$b.allSelected]: table2.getIsAllRowsSelected()
                    }),
                    children: headerGroup.headers.map((header, headerIndex) => {
                      var _a2, _b2;
                      const { width, ...style2 } = ((_a2 = header.column.columnDef.meta) == null ? void 0 : _a2.style) || {};
                      const size = header.getSize();
                      return /* @__PURE__ */ jsxs(
                        "th",
                        {
                          className: styles$b.columnCell,
                          colSpan: header.colSpan,
                          style: {
                            position: "relative",
                            width: size,
                            ...getCommonPinningStyles(header.column)
                          },
                          children: [
                            /* @__PURE__ */ jsx(
                              ClickableHeader,
                              {
                                hasSorting: header.column.columnDef.enableSorting,
                                updateSorting: () => {
                                  var _a3;
                                  return _updateSorting((_a3 = header.column.columnDef.meta) == null ? void 0 : _a3.accessorKey);
                                },
                                children: /* @__PURE__ */ jsxs("div", { className: styles$b.headerContent, style: style2, children: [
                                  flexRender(
                                    header.column.columnDef.header,
                                    header.getContext()
                                  ),
                                  /* @__PURE__ */ jsx("span", { style: { display: "inline-flex", maxWidth: 16 }, children: header.column.columnDef.enableSorting && /* @__PURE__ */ jsx(
                                    ColumnOrderingIndicator,
                                    {
                                      iconSortAsc,
                                      iconSortDesc,
                                      iconNoSort,
                                      direction: ((_b2 = header.column.columnDef.meta) == null ? void 0 : _b2.accessorKey) === _sortBy ? _sortingDirection : void 0
                                    }
                                  ) })
                                ] })
                              }
                            ),
                            header.column.getCanResize() && /* @__PURE__ */ jsx(
                              "div",
                              {
                                ...{
                                  onDoubleClick: () => {
                                    touchedSizesRef.current[header.column.id] = false;
                                    if (header.column.columnDef.size !== void 0) {
                                      header.column.resetSize();
                                    } else {
                                      recalculateStarSizes();
                                    }
                                  },
                                  onMouseDown: (event) => {
                                    columnSizeTouched(header.column.id);
                                    header.getResizeHandler()(event);
                                  },
                                  onTouchStart: (event) => {
                                    columnSizeTouched(header.column.id);
                                    header.getResizeHandler()(event);
                                  },
                                  className: classnames(styles$b.resizer, {
                                    [styles$b.isResizing]: header.column.getIsResizing()
                                  })
                                }
                              }
                            )
                          ]
                        },
                        `${header.id}-${headerIndex}`
                      );
                    })
                  },
                  `${headerGroup.id}-${headerGroupIndex}`
                )) }),
                hasData && /* @__PURE__ */ jsxs("tbody", { className: styles$b.tableBody, children: [
                  paddingTop > 0 && /* @__PURE__ */ jsx("tr", { children: /* @__PURE__ */ jsx("td", { style: { height: `${paddingTop}px` } }) }),
                  rowVirtualizer.getVirtualItems().map((virtualRow) => {
                    const rowIndex = virtualRow.index;
                    const row2 = rows[rowIndex];
                    return /* @__PURE__ */ jsx(
                      "tr",
                      {
                        "data-index": rowIndex,
                        className: classnames(styles$b.row, {
                          [styles$b.selected]: row2.getIsSelected(),
                          [styles$b.focused]: focusedIndex === rowIndex,
                          [styles$b.disabled]: rowDisabledPredicate(row2.original),
                          [styles$b.noBottomBorder]: noBottomBorder2
                        }),
                        ref: (el) => {
                          if (el && estimatedHeightRef.current === null) {
                            estimatedHeightRef.current = Math.round(el.getBoundingClientRect().height);
                          }
                          rowVirtualizer.measureElement(el);
                        },
                        onClick: (event) => {
                          if (event.defaultPrevented) {
                            return;
                          }
                          const target2 = event.target;
                          if (target2.tagName.toLowerCase() === "input") {
                            return;
                          }
                          toggleRow(row2.original, event);
                        },
                        children: row2.getVisibleCells().map((cell2, i) => {
                          var _a2, _b2;
                          const cellRenderer = (_b2 = (_a2 = cell2.column.columnDef) == null ? void 0 : _a2.meta) == null ? void 0 : _b2.cellRenderer;
                          const size = cell2.column.getSize();
                          return /* @__PURE__ */ jsx(
                            "td",
                            {
                              className: styles$b.cell,
                              style: {
                                // width: size,
                                width: size,
                                ...getCommonPinningStyles(cell2.column)
                              },
                              children: cellRenderer ? cellRenderer(cell2.row.original, rowIndex, i, cell2 == null ? void 0 : cell2.getValue()) : flexRender(
                                cell2.column.columnDef.cell,
                                cell2.getContext()
                              )
                            },
                            `${cell2.id}-${i}`
                          );
                        })
                      },
                      `${row2.id}-${rowIndex}`
                    );
                  }),
                  paddingBottom > 0 && /* @__PURE__ */ jsx("tr", { children: /* @__PURE__ */ jsx("td", { style: { height: `${paddingBottom}px` } }) })
                ] })
              ]
            }
          ),
          loading2 && !hasData && /* @__PURE__ */ jsx("div", { className: styles$b.loadingWrapper, children: /* @__PURE__ */ jsx(Spinner, {}) }),
          !hideNoDataView && !loading2 && !hasData && (noDataRenderer ? noDataRenderer() : /* @__PURE__ */ jsx("div", { className: styles$b.noRows, children: "No data available" })),
          isPaginated && hasData && rows.length > 0 && pagination2 && // --- Render the pagination controls
          /* @__PURE__ */ jsxs("div", { className: styles$b.pagination, children: [
            /* @__PURE__ */ jsx("div", { style: { flex: 1 }, children: /* @__PURE__ */ jsxs("span", { className: styles$b.paginationLabel, children: [
              "Showing ",
              rows[0].original.order,
              " to ",
              rows[rows.length - 1].original.order,
              " of",
              " ",
              safeData.length,
              " entries"
            ] }) }),
            pageSizes.length > 1 && /* @__PURE__ */ jsxs("div", { children: [
              /* @__PURE__ */ jsx("span", { className: styles$b.paginationLabel, children: "Rows per page" }),
              /* @__PURE__ */ jsx(
                "select",
                {
                  className: styles$b.paginationSelect,
                  value: pagination2.pageSize,
                  onChange: (e) => {
                    table2.setPageSize(Number(e.target.value));
                  },
                  children: pageSizes.map((pageSize) => /* @__PURE__ */ jsx("option", { value: pageSize, children: pageSize }, pageSize))
                }
              )
            ] }),
            /* @__PURE__ */ jsxs("div", { className: styles$b.paginationButtons, children: [
              /* @__PURE__ */ jsx(
                Button,
                {
                  onClick: () => table2.setPageIndex(0),
                  disabled: !table2.getCanPreviousPage(),
                  type: "button",
                  variant: "ghost",
                  children: /* @__PURE__ */ jsx(FiChevronsLeft, {})
                }
              ),
              /* @__PURE__ */ jsx(
                Button,
                {
                  onClick: () => table2.previousPage(),
                  disabled: !table2.getCanPreviousPage(),
                  type: "button",
                  variant: "ghost",
                  children: /* @__PURE__ */ jsx(FiChevronLeft, {})
                }
              ),
              /* @__PURE__ */ jsx(
                Button,
                {
                  onClick: () => table2.nextPage(),
                  disabled: !table2.getCanNextPage(),
                  type: "button",
                  variant: "ghost",
                  children: /* @__PURE__ */ jsx(FiChevronRight, {})
                }
              ),
              /* @__PURE__ */ jsx(
                Button,
                {
                  onClick: () => table2.setPageIndex(table2.getPageCount() - 1),
                  disabled: !table2.getCanNextPage(),
                  type: "button",
                  variant: "ghost",
                  children: /* @__PURE__ */ jsx(FiChevronsRight, {})
                }
              )
            ] })
          ] })
        ]
      }
    );
  }
);
function ClickableHeader({ hasSorting, updateSorting, children }) {
  return hasSorting ? /* @__PURE__ */ jsx("button", { className: styles$b.clickableHeader, onClick: updateSorting, children }) : /* @__PURE__ */ jsx(Fragment, { children });
}
function ColumnOrderingIndicator({
  direction,
  iconSortAsc = "sortasc:Table",
  iconSortDesc = "sortdesc:Table",
  iconNoSort = "nosort:Table"
}) {
  if (direction === "ascending") {
    return /* @__PURE__ */ jsx(Icon, { name: iconSortAsc, fallback: "sortasc", size: "12" });
  } else if (direction === "descending") {
    return /* @__PURE__ */ jsx(Icon, { name: iconSortDesc, fallback: "sortdesc", size: "12" });
  }
  return iconNoSort !== "-" ? /* @__PURE__ */ jsx(Icon, { name: iconNoSort, fallback: "nosort", size: "12" }) : /* @__PURE__ */ jsx(Icon, { name: iconNoSort, size: "12" });
}
const COMP$x = "Table";
const TableMd = createMetadata({
  description: `\`${COMP$x}\` is a component that displays cells organized into rows and columns. The \`${COMP$x}\` component is virtualized so it only renders visible cells.`,
  props: {
    items: dInternal(
      `You can use \`items\` as an alias for the \`data\` property. When you bind the table to a data source (e.g. an API endpoint), the \`data\` acts as the property that accepts a URL to fetch information from an API. When both \`items\` and \`data\` are used, \`items\` has priority.`
    ),
    data: d(
      `The component receives data via this property. The \`data\` property is a list of items that the \`Table\` can display.`
    ),
    isPaginated: {
      description: `This property adds pagination controls to the \`${COMP$x}\`.`,
      valueType: "boolean",
      defaultValue: false
    },
    loading: d(
      `This boolean property indicates if the component is fetching (or processing) data. This property is useful when data is loaded conditionally or receiving it takes some time.`
    ),
    headerHeight: d(`This optional property is used to specify the height of the table header.`),
    rowsSelectable: d(`Indicates whether the rows are selectable (\`true\`) or not (\`false\`).`),
    pageSizes: {
      description: "This property holds an array of page sizes (numbers) the user can select for pagination. If this property is not defined, the component allows only a page size of 10 items."
    },
    rowDisabledPredicate: d(
      `This property defines a predicate function with a return value that determines if the row should be disabled. The function retrieves the item to display and should return a Boolean-like value.`
    ),
    noDataTemplate: dComponent(
      `A property to customize what to display if the table does not contain any data.`
    ),
    sortBy: d(`This property is used to determine which data attributes to sort by.`),
    sortDirection: d(
      `This property determines the sort order to be \`ascending\` or \`descending\`. This property only works if the [\`sortBy\`](#sortby) property is also set.`
    ),
    autoFocus: dAutoFocus(),
    hideHeader: {
      description: "Set the header visibility using this property. Set it to `true` to hide the header.",
      valueType: "boolean",
      defaultValue: false
    },
    iconNoSort: d(
      `Allows setting the icon displayed in the ${COMP$x} column header when sorting is enabled, but the column remains unsorted.`
    ),
    iconSortAsc: d(
      `Allows setting the icon displayed in the ${COMP$x} column header when sorting is enabled, and the column is sorted in ascending order.`
    ),
    iconSortDesc: d(
      `Allows setting the icon displayed in the ${COMP$x} column header when sorting is enabled, and the column is sorted in descending order.`
    ),
    enableMultiRowSelection: {
      description: `This boolean property indicates whether you can select multiple rows in the table. This property only has an effect when the rowsSelectable property is set. Setting it to \`false\` limits selection to a single row.`,
      valueType: "boolean",
      defaultValue: true
    },
    alwaysShowSelectionHeader: {
      description: "This property indicates when the row selection header is displayed. When the value is `true,` the selection header is always visible. Otherwise, it is displayed only when hovered.",
      valueType: "boolean",
      defaultValue: false
    },
    noBottomBorder: {
      description: `This property indicates whether the table should have a bottom border. When set to \`true\`, the table does not have a bottom border. Otherwise, it has a bottom border.`,
      valueType: "boolean",
      defaultValue: false
    }
  },
  events: {
    sortingDidChange: d(
      `This event is fired when the table data sorting has changed. It has two arguments: the column's name and the sort direction. When the column name is empty, the table displays the data list as it received it.`
    ),
    willSort: d(
      `This event is fired before the table data is sorted. It has two arguments: the column's name and the sort direction. When the method returns a literal \`false\` value (and not any other falsy one), the method indicates that the sorting should be aborted.`
    ),
    selectionDidChange: d(
      `This event is triggered when the table's current selection (the rows selected) changes. Its parameter is an array of the selected table row items. `
    )
  },
  apis: {
    clearSelection: d("This method clears the list of currently selected table rows."),
    getSelectedItems: d(`This method returns the list of currently selected table rows items.`),
    getSelectedIds: d(`This method returns the list of currently selected table rows IDs.`),
    selectAll: d(
      `This method selects all the rows in the table. This method has no effect if the rowsSelectable property is set to \`false\`.`
    ),
    selectId: d(
      `This method selects the row with the specified ID. This method has no effect if the \`rowsSelectable\` property is set to \`false\`. The method argument can be a single id or an array of them.`
    )
  },
  themeVars: parseScssVar(styles$b.themeVars),
  defaultThemeVars: {
    [`padding-heading-${COMP$x}`]: `$space-2`,
    [`paddingHorizontal-cell-${COMP$x}`]: "$space-2",
    [`paddingHorizontal-cell-first-${COMP$x}`]: "$space-5",
    [`paddingHorizontal-cell-last-${COMP$x}`]: "$space-5",
    [`paddingVertical-cell-${COMP$x}`]: "$space-2",
    [`border-cell-${COMP$x}`]: "1px solid $borderColor",
    [`outlineWidth-heading-${COMP$x}--focus`]: "$outlineWidth--focus",
    [`outlineStyle-heading-${COMP$x}--focus`]: "$outlineStyle--focus",
    [`outlineOffset-heading-${COMP$x}--focus`]: "$outlineOffset--focus",
    [`fontSize-heading-${COMP$x}`]: "$fontSize-tiny",
    [`fontWeight-heading-${COMP$x}`]: "$fontWeight-bold",
    [`textTransform-heading-${COMP$x}`]: "uppercase",
    [`fontSize-row-${COMP$x}`]: "$fontSize-small",
    // [`backgroundColor-${COMP}`]: "transparent",
    // [`backgroundColor-row-${COMP}`]: "inherit",
    [`backgroundColor-selected-${COMP$x}--hover`]: `$backgroundColor-row-${COMP$x}--hover`,
    [`backgroundColor-pagination-${COMP$x}`]: `$backgroundColor-${COMP$x}`,
    [`outlineColor-heading-${COMP$x}--focus`]: "$outlineColor--focus",
    [`textColor-pagination-${COMP$x}`]: "$color-secondary",
    [`backgroundColor-row-${COMP$x}--hover`]: "$color-primary-50",
    [`backgroundColor-selected-${COMP$x}`]: "$color-primary-100",
    [`backgroundColor-heading-${COMP$x}--hover`]: "$color-surface-200",
    [`backgroundColor-heading-${COMP$x}--active`]: "$color-surface-300",
    [`backgroundColor-heading-${COMP$x}`]: "$color-surface-100",
    [`textColor-heading-${COMP$x}`]: "$color-surface-500"
  }
});
forwardRef(
  ({
    extractValue,
    node,
    renderChild,
    lookupEventHandler,
    lookupSyncCallback,
    layoutCss,
    registerComponentApi
  }, ref) => {
    var _a, _b, _c, _d, _e, _f;
    const data = extractValue(node.props.items) || extractValue(node.props.data);
    const [columnIds, setColumnIds] = useState(EMPTY_ARRAY);
    const [columnsByIds, setColumnByIds] = useState(EMPTY_OBJECT);
    const columnIdsRef = useRef([]);
    const [tableKey, setTableKey] = useState(0);
    const tableContextValue = useMemo(() => {
      return {
        registerColumn: (column, id) => {
          setColumnIds(
            produce((draft) => {
              const existing = draft.findIndex((colId) => colId === id);
              if (existing < 0) {
                draft.push(id);
              }
            })
          );
          setColumnByIds(
            produce((draft) => {
              draft[id] = column;
            })
          );
        },
        unRegisterColumn: (id) => {
          setColumnIds(
            produce((draft) => {
              return draft.filter((colId) => colId !== id);
            })
          );
          setColumnByIds(
            produce((draft) => {
              delete draft[id];
            })
          );
        }
      };
    }, []);
    const columnRefresherContextValue = useMemo(() => {
      return {
        registerColumn: (column, id) => {
          if (!columnIdsRef.current.find((colId) => colId === id)) {
            setTableKey((prev) => prev + 1);
            columnIdsRef.current.push(id);
          }
        },
        unRegisterColumn: (id) => {
          if (columnIdsRef.current.find((colId) => colId === id)) {
            columnIdsRef.current = columnIdsRef.current.filter((colId) => colId !== id);
            setTableKey((prev) => prev + 1);
          }
        }
      };
    }, []);
    const columns = useMemo(
      () => columnIds.map((colId) => columnsByIds[colId]),
      [columnIds, columnsByIds]
    );
    const selectionContext = useSelectionContext();
    const tableContent = /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(TableContext.Provider, { value: tableContextValue, children: renderChild(node.children) }, tableKey),
      /* @__PURE__ */ jsx(TableContext.Provider, { value: columnRefresherContextValue, children: renderChild(node.children) }),
      /* @__PURE__ */ jsx(
        Table,
        {
          ref,
          data,
          columns,
          pageSizes: extractValue(node.props.pageSizes),
          rowsSelectable: extractValue.asOptionalBoolean(node.props.rowsSelectable),
          registerComponentApi,
          noDataRenderer: node.props.noDataTemplate && (() => {
            return renderChild(node.props.noDataTemplate);
          }),
          hideNoDataView: node.props.noDataTemplate === null || node.props.noDataTemplate === "",
          loading: extractValue.asOptionalBoolean(node.props.loading),
          isPaginated: extractValue.asOptionalBoolean((_a = node.props) == null ? void 0 : _a.isPaginated),
          headerHeight: extractValue.asSize(node.props.headerHeight),
          rowDisabledPredicate: lookupSyncCallback(node.props.rowDisabledPredicate),
          sortBy: extractValue((_b = node.props) == null ? void 0 : _b.sortBy),
          sortingDirection: extractValue((_c = node.props) == null ? void 0 : _c.sortDirection),
          iconSortAsc: extractValue.asOptionalString((_d = node.props) == null ? void 0 : _d.iconSortAsc),
          iconSortDesc: extractValue.asOptionalString((_e = node.props) == null ? void 0 : _e.iconSortDesc),
          iconNoSort: extractValue.asOptionalString((_f = node.props) == null ? void 0 : _f.iconNoSort),
          sortingDidChange: lookupEventHandler("sortingDidChange"),
          onSelectionDidChange: lookupEventHandler("selectionDidChange"),
          willSort: lookupEventHandler("willSort"),
          style: layoutCss,
          uid: node.uid,
          autoFocus: extractValue.asOptionalBoolean(node.props.autoFocus),
          hideHeader: extractValue.asOptionalBoolean(node.props.hideHeader),
          enableMultiRowSelection: extractValue.asOptionalBoolean(
            node.props.enableMultiRowSelection
          ),
          alwaysShowSelectionHeader: extractValue.asOptionalBoolean(
            node.props.alwaysShowSelectionHeader
          ),
          noBottomBorder: extractValue.asOptionalBoolean(node.props.noBottomBorder)
        }
      )
    ] });
    if (selectionContext === null) {
      return /* @__PURE__ */ jsx(StandaloneSelectionStore, { children: tableContent });
    }
    return tableContent;
  }
);
const themeVars$a = '"[]"';
const styles$a = {
  themeVars: themeVars$a
};
const COMP$w = "StickyBox";
const StickyBoxMd = createMetadata({
  status: "experimental",
  description: `The \`${COMP$w}\` is a component that "sticks" or remains fixed at the top or bottom position on the screen as the user scrolls.`,
  props: {
    to: {
      description: "This property determines whether the StickyBox should be anchored to the `top` or `bottom`.",
      availableValues: ["top", "bottom"],
      valueType: "string",
      defaultValue: "top"
    }
  },
  themeVars: parseScssVar(styles$a.themeVars),
  defaultThemeVars: {
    [`backgroundColor-${COMP$w}`]: "$backgroundColor"
  }
});
const COMP$v = "ModalDialog";
const ModalDialogMd = createMetadata({
  description: `The \`${COMP$v}\` component defines a modal dialog UI element that can be displayed over the existing UI - triggered by some action.`,
  props: {
    fullScreen: {
      description: `Toggles whether the dialog encompasses the whole UI (\`true\`) or not and has a minimum width and height (\`false\`).`,
      valueType: "boolean",
      defaultValue: false
    },
    title: d(`Provides a prestyled heading to display the intent of the dialog.`),
    closeButtonVisible: {
      description: `Shows (\`true\`) or hides (\`false\`) the visibility of the close button on the dialog.`,
      valueType: "boolean",
      defaultValue: true
    }
  },
  events: {
    open: d(
      `This event is fired when the \`${COMP$v}\` is opened either via a \`when\` or an imperative API call (\`open()\`).`
    ),
    close: d(
      `This event is fired when the close button is pressed or the user clicks outside the \`${COMP$v}\`.`
    )
  },
  apis: {
    close: d(
      `This method is used to close the \`${COMP$v}\`. Invoke it using \`modalId.close()\` where \`modalId\` refers to a \`ModalDialog\` component.`
    ),
    open: d(
      "This method imperatively opens the modal dialog. You can pass an arbitrary number of parameters to the method. In the `ModalDialog` instance, you can access those with the `$paramq` and `$params` context values."
    )
  },
  contextVars: {
    $param: d(
      "This value represents the first parameters passed to the `open()` method to display the modal dialog."
    ),
    $params: d(
      "This value represents the array of parameters passed to the `open()` method. You can use `$params[0]` to access the first and `$params[1]` to access the second (and so on) parameters. `$param` is the same as `$params[0]`."
    )
  },
  themeVars: parseScssVar(styles$o.themeVars),
  defaultThemeVars: {
    ...paddingSubject(COMP$v, { all: "$space-7" }),
    [`backgroundColor-${COMP$v}`]: "$backgroundColor-primary",
    [`backgroundColor-overlay-${COMP$v}`]: "$backgroundColor-overlay",
    [`textColor-${COMP$v}`]: "$textColor-primary",
    [`borderRadius-${COMP$v}`]: "$borderRadius",
    [`fontFamily-${COMP$v}`]: "$fontFamily",
    [`maxWidth-${COMP$v}`]: "450px",
    [`marginBottom-title-${COMP$v}`]: "0"
  }
});
const themeVars$9 = `'{"padding-NoResult": "var(--xmlui-padding-NoResult)", "paddingHorizontal-NoResult": "var(--xmlui-paddingHorizontal-NoResult, var(--xmlui-padding-NoResult))", "paddingVertical-NoResult": "var(--xmlui-paddingVertical-NoResult, var(--xmlui-padding-NoResult))", "paddingLeft-NoResult": "var(--xmlui-paddingLeft-NoResult, var(--xmlui-paddingHorizontal-NoResult, var(--xmlui-padding-NoResult)))", "paddingRight-NoResult": "var(--xmlui-paddingRight-NoResult, var(--xmlui-paddingHorizontal-NoResult, var(--xmlui-padding-NoResult)))", "paddingTop-NoResult": "var(--xmlui-paddingTop-NoResult, var(--xmlui-paddingVertical-NoResult, var(--xmlui-padding-NoResult)))", "paddingBottom-NoResult": "var(--xmlui-paddingBottom-NoResult, var(--xmlui-paddingVertical-NoResult, var(--xmlui-padding-NoResult)))", "border-NoResult": "var(--xmlui-border-NoResult)", "borderHorizontal-NoResult": "var(--xmlui-borderHorizontal-NoResult, var(--xmlui-border-NoResult))", "borderVertical-NoResult": "var(--xmlui-borderVertical-NoResult, var(--xmlui-border-NoResult))", "borderLeft-NoResult": "var(--xmlui-borderLeft-NoResult, var(--xmlui-borderHorizontal-NoResult, var(--xmlui-border-NoResult)))", "borderRight-NoResult": "var(--xmlui-borderRight-NoResult, var(--xmlui-borderHorizontal-NoResult, var(--xmlui-border-NoResult)))", "borderTop-NoResult": "var(--xmlui-borderTop-NoResult, var(--xmlui-borderVertical-NoResult, var(--xmlui-border-NoResult)))", "borderBottom-NoResult": "var(--xmlui-borderBottom-NoResult, var(--xmlui-borderVertical-NoResult, var(--xmlui-border-NoResult)))", "borderWidth-NoResult": "var(--xmlui-borderWidth-NoResult)", "borderHorizontalWidth-NoResult": "var(--xmlui-borderHorizontalWidth-NoResult, var(--xmlui-borderWidth-NoResult))", "borderLeftWidth-NoResult": "var(--xmlui-borderLeftWidth-NoResult, var(--xmlui-borderHorizontalWidth-NoResult, var(--xmlui-borderWidth-NoResult)))", "borderRightWidth-NoResult": "var(--xmlui-borderRightWidth-NoResult, var(--xmlui-borderHorizontalWidth-NoResult, var(--xmlui-borderWidth-NoResult)))", "borderVerticalWidth-NoResult": "var(--xmlui-borderVerticalWidth-NoResult, var(--xmlui-borderWidth-NoResult))", "borderTopWidth-NoResult": "var(--xmlui-borderTopWidth-NoResult, var(--xmlui-borderVerticalWidth-NoResult, var(--xmlui-borderWidth-NoResult)))", "borderBottomWidth-NoResult": "var(--xmlui-borderBottomWidth-NoResult, var(--xmlui-borderVerticalWidth-NoResult, var(--xmlui-borderWidth-NoResult)))", "borderStyle-NoResult": "var(--xmlui-borderStyle-NoResult)", "borderHorizontalStyle-NoResult": "var(--xmlui-borderHorizontalStyle-NoResult, var(--xmlui-borderStyle-NoResult))", "borderLeftStyle-NoResult": "var(--xmlui-borderLeftStyle-NoResult, var(--xmlui-borderHorizontalStyle-NoResult, var(--xmlui-borderStyle-NoResult)))", "borderRightStyle-NoResult": "var(--xmlui-borderRightStyle-NoResult, var(--xmlui-borderHorizontalStyle-NoResult, var(--xmlui-borderStyle-NoResult)))", "borderVerticalStyle-NoResult": "var(--xmlui-borderVerticalStyle-NoResult, var(--xmlui-borderStyle-NoResult))", "borderTopStyle-NoResult": "var(--xmlui-borderTopStyle-NoResult, var(--xmlui-borderVerticalStyle-NoResult, var(--xmlui-borderStyle-NoResult)))", "borderBottomStyle-NoResult": "var(--xmlui-borderBottomStyle-NoResult, var(--xmlui-borderVerticalStyle-NoResult, var(--xmlui-borderStyle-NoResult)))", "borderColor-NoResult": "var(--xmlui-borderColor-NoResult)", "borderHorizontalColor-NoResult": "var(--xmlui-borderHorizontalColor-NoResult, var(--xmlui-borderColor-NoResult))", "borderLeftColor-NoResult": "var(--xmlui-borderLeftColor-NoResult, var(--xmlui-borderHorizontalColor-NoResult, var(--xmlui-borderColor-NoResult)))", "borderRightColor-NoResult": "var(--xmlui-borderRightColor-NoResult, var(--xmlui-borderHorizontalColor-NoResult, var(--xmlui-borderColor-NoResult)))", "borderVerticalColor-NoResult": "var(--xmlui-borderVerticalColor-NoResult, var(--xmlui-borderColor-NoResult))", "borderTopColor-NoResult": "var(--xmlui-borderTopColor-NoResult, var(--xmlui-borderVerticalColor-NoResult, var(--xmlui-borderColor-NoResult)))", "borderBottomColor-NoResult": "var(--xmlui-borderBottomColor-NoResult, var(--xmlui-borderVerticalColor-NoResult, var(--xmlui-borderColor-NoResult)))", "borderStartStartRadius-NoResult": "var(--xmlui-borderStartStartRadius-NoResult, var(--xmlui-borderRadius-NoResult))", "borderStartEndRadius-NoResult": "var(--xmlui-borderStartEndRadius-NoResult, var(--xmlui-borderRadius-NoResult))", "borderEndStartRadius-NoResult": "var(--xmlui-borderEndStartRadius-NoResult, var(--xmlui-borderRadius-NoResult))", "borderEndEndRadius-NoResult": "var(--xmlui-borderEndEndRadius-NoResult, var(--xmlui-borderRadius-NoResult))", "gap-icon-NoResult": "var(--xmlui-gap-icon-NoResult)", "size-icon-NoResult": "var(--xmlui-size-icon-NoResult)"}'`;
const styles$9 = {
  themeVars: themeVars$9
};
const COMP$u = "NoResult";
const NoResultMd = createMetadata({
  description: `\`${COMP$u}\` is a component that displays a visual indication that some data query (search) resulted in no (zero) items.`,
  props: {
    label: dLabel(),
    icon: d(`This property defines the icon to display with the component.`),
    hideIcon: {
      description: `This boolean property indicates if the icon should be hidden.`,
      valueType: "boolean",
      defaultValue: "false"
    }
  },
  themeVars: parseScssVar(styles$9.themeVars),
  defaultThemeVars: {
    [`border-${COMP$u}`]: "0px solid $borderColor",
    [`paddingVertical-${COMP$u}`]: "$space-2",
    [`gap-icon-${COMP$u}`]: "$space-2",
    [`size-icon-${COMP$u}`]: "$space-8",
    light: {
      // --- No light-specific theme vars
    },
    dark: {
      // --- No dark-specific theme vars
    }
  }
});
const COMP$t = "SelectionStore";
const SelectionStoreMd = createMetadata({
  status: "deprecated",
  description: `The \`${COMP$t}\` is a non-visual component that may wrap components (items) and manage their selection state to accommodate the usage of other actions.`,
  props: {
    idKey: d(
      `The selected items in the selection store needs to have a unique ID to use as an unambiguous key for that particular item. This property uniquely identifies the selected object item via a given property. By default, the key attribute is \`"id"\`.`
    )
  }
});
const PageMetaTitleMd = createMetadata({
  description: `A PageMetaTitle component allows setting up (or changing) the app title to display with the current browser tab.`,
  props: {
    value: d(`This property sets the page's title to display in the browser tab.`)
  }
});
const themeVars$8 = `'{"backgroundColor-ProgressBar": "var(--xmlui-backgroundColor-ProgressBar)", "color-indicator-ProgressBar": "var(--xmlui-color-indicator-ProgressBar)", "borderRadius-ProgressBar": "var(--xmlui-borderRadius-ProgressBar)", "borderRadius-indicator-ProgressBar": "var(--xmlui-borderRadius-indicator-ProgressBar)", "thickness-ProgressBar": "var(--xmlui-thickness-ProgressBar)"}'`;
const styles$8 = {
  themeVars: themeVars$8
};
const COMP$s = "ProgressBar";
const ProgressBarMd = createMetadata({
  description: `A \`${COMP$s}\` component visually represents the progress of a task or process.`,
  props: {
    value: {
      description: `This property defines the progress value with a number between 0 and 1.`,
      valueType: "number",
      defaultValue: 0
    }
  },
  themeVars: parseScssVar(styles$8.themeVars),
  defaultThemeVars: {
    [`borderRadius-${COMP$s}`]: "$borderRadius",
    [`borderRadius-indicator-${COMP$s}`]: "0px",
    [`thickness-${COMP$s}`]: "$space-2",
    [`backgroundColor-${COMP$s}`]: "$color-surface-200",
    [`color-indicator-${COMP$s}`]: "$color-primary-500"
  }
});
const themeVars$7 = `'{"boxShadow-Splitter": "var(--xmlui-boxShadow-Splitter)", "backgroundColor-Splitter": "var(--xmlui-backgroundColor-Splitter)", "borderRadius-Splitter": "var(--xmlui-borderRadius-Splitter)", "borderColor-Splitter": "var(--xmlui-borderColor-Splitter)", "borderWidth-Splitter": "var(--xmlui-borderWidth-Splitter)", "borderStyle-Splitter": "var(--xmlui-borderStyle-Splitter)", "border-Splitter": "var(--xmlui-border-Splitter)", "backgroundColor-resizer-Splitter": "var(--xmlui-backgroundColor-resizer-Splitter)", "thickness-resizer-Splitter": "var(--xmlui-thickness-resizer-Splitter)", "cursor-resizer-horizontal-Splitter": "var(--xmlui-cursor-resizer-horizontal-Splitter)", "cursor-resizer-vertical-Splitter": "var(--xmlui-cursor-resizer-vertical-Splitter)"}'`;
const styles$7 = {
  themeVars: themeVars$7
};
const COMP$r = "Splitter";
const baseSplitterMd = createMetadata({
  description: `The \`${COMP$r}\` component divides a container (such as a window, panel, pane, etc.) into two resizable sections.`,
  props: {
    swapped: {
      description: `This optional booelan property indicates whether the \`${COMP$r}\` sections are layed out as primary and secondary (\`false\`) or secondary and primary (\`true\`) from left to right.`,
      valueType: "boolean",
      defaultValue: false
    },
    splitterTemplate: dComponent(
      `The divider can be customized using XMLUI components via this property.`
    ),
    initialPrimarySize: {
      description: `This optional number property sets the initial size of the primary section. The unit of the size value is in pixels or percentages.`,
      valueType: "string",
      defaultValue: "50%"
    },
    minPrimarySize: {
      description: `This property sets the minimum size the primary section can have. The unit of the size value is in pixels or percentages.`,
      valueType: "string",
      defaultValue: "0%"
    },
    maxPrimarySize: {
      description: `This property sets the maximum size the primary section can have. The unit of the size value is in pixels or percentages.`,
      valueType: "string",
      defaultValue: "100%"
    },
    floating: {
      description: `Toggles whether the resizer is visible (\`false\`) or not (\`true\`) when not hovered or dragged. The default value is \`false\`, meaning the resizer is visible all the time.`,
      valueType: "boolean",
      defaultValue: false
    },
    orientation: {
      description: `Sets whether the \`Splitter\` divides the container horizontally and lays out the section on top of each other (\`vertical\`), or vertically by placing the sections next to each other (\`horizontal\`).`,
      valueType: "string",
      availableValues: ["horizontal", "vertical"],
      defaultValue: "vertical"
    }
  },
  events: {
    resize: d(`This event fires when the component is resized.`)
  },
  themeVars: parseScssVar(styles$7.themeVars),
  defaultThemeVars: {
    [`backgroundColor-resizer-${COMP$r}`]: "$backgroundColor-Card",
    [`thickness-resizer-${COMP$r}`]: "5px",
    [`cursor-resizer-horizontal-${COMP$r}`]: "ew-resize",
    [`cursor-resizer-vertical-${COMP$r}`]: "ns-resize"
  }
});
const SplitterMd = {
  ...baseSplitterMd,
  props: {
    ...baseSplitterMd.props
  }
};
const HSplitterMd = { ...baseSplitterMd, specializedFrom: COMP$r };
const VSplitterMd = { ...baseSplitterMd, specializedFrom: COMP$r };
const QueueMd = createMetadata({
  description: `The \`Queue\` component provides an API to enqueue elements and defines events to process queued elements in a FIFO order.`,
  props: {
    progressFeedback: d(
      `This property defines the component template of the UI that displays progress information whenever, the queue's \`progressReport\` function in invoked.`
    ),
    resultFeedback: d(
      `This property defines the component template of the UI that displays result information when the queue becomes empty after processing all queued items.`
    ),
    clearAfterFinish: d(
      `This property indicates the completed items (successful or error) should be removed from the queue after completion.`
    )
  },
  nonVisual: true,
  events: {
    willProcess: d(`This event is triggered to process a particular item.`),
    process: d(
      `This event is fired to process the next item in the queue. If the processing cannot proceed because of some error, raise an exception, and the queue will handle that.`
    ),
    didProcess: d(
      `This event is fired when the processing of a queued item has been successfully processed.`
    ),
    processError: d(
      `This event is fired when processing an item raises an error. The event handler method receives two parameters. The first is the error raised during the processing of the item; the second is an object with these properties:`
    ),
    complete: d(
      `The queue fires this event when the queue gets empty after processing all items. The event handler has no arguments.`
    )
  },
  apis: {
    enqueueItem: d(
      `This method enqueues the item passed in the method parameter. The new item will be processed after the current queue items have been handled. The method retrieves the unique ID of the newly added item; this ID can be used later in other methods, such as \`remove\`.`
    ),
    enqueueItems: d(
      `This method enqueues the array of items passed in the method parameter. The new items will be processed after the current queue items have been handled. The method retrieves an array of unique IDs, one for each new item. An item ID can be used later in other methods, such as \`remove\`.`
    ),
    getQueuedItems: d(
      `You can use this method to return the items in the queue. These items contain all entries not removed from the queue yet, including pending, in-progress, and completed items.`
    ),
    getQueueLength: d(
      `This method retrieves the current queue length. The queue contains only those items that are not fully processed yet.`
    ),
    remove: d(
      `This method retrieves the current queue length. The queue contains only those items that are not fully processed yet.`
    )
  },
  contextVars: {
    $completedItems: d(
      `A list containing the queue items that have been completed (fully processed).`
    ),
    $queuedItems: d(
      `A list containing the items waiting in the queue, icluding the completed items.`
    )
  }
});
const themeVars$6 = '"[]"';
const styles$6 = {
  themeVars: themeVars$6
};
const PositionedContainerMd = createMetadata({
  status: "deprecated",
  description: "(**OBSOLETE**) This component was created for the ChatEngine app.",
  props: {
    visibleOnHover: d("No description")
  },
  themeVars: parseScssVar(styles$6.themeVars)
});
const COMP$q = "RealTimeAdapter";
const RealTimeAdapterMd = createMetadata({
  status: "experimental",
  description: `\`${COMP$q}\` is a non-visual component that listens to real-time events through long-polling.`,
  props: {
    url: d(`This property specifies the URL to use for long-polling.`)
  },
  events: {
    eventArrived: d(`This event is raised when data arrives from the backend using long-polling.`)
  }
});
const COMP$p = "NumberBox";
const NumberBoxMd = createMetadata({
  status: "experimental",
  description: `A \`${COMP$p}\` component allows users to input numeric values: either integer or floating point numbers. It also accepts empty values, where the stored value will be of type \`null\`.`,
  props: {
    placeholder: dPlaceholder(),
    initialValue: dInitialValue(),
    label: dLabel(),
    labelPosition: dLabelPosition("top"),
    labelWidth: dLabelWidth(COMP$p),
    labelBreak: dLabelBreak(COMP$p),
    maxLength: dMaxLength(),
    autoFocus: dAutoFocus(),
    required: dRequired(),
    readOnly: dReadonly(),
    enabled: dEnabled(),
    validationStatus: dValidationStatus(),
    startText: dStartText(),
    startIcon: dStartIcon(),
    endText: dEndText(),
    endIcon: dEndIcon(),
    gap: {
      description: "This property defines the gap between the adornments and the input area."
    },
    hasSpinBox: {
      description: `This boolean prop shows (\`true\`) or hides (\`false\`) the spinner buttons for the input field.`,
      valueType: "boolean",
      defaultValue: true
    },
    step: {
      description: `This prop governs how big the step when clicking on the spinner of the field.`,
      valueType: "number",
      defaultValue: 1
    },
    integersOnly: {
      description: `This boolean property signs whether the input field accepts integers only (\`true\`) or not (\`false\`).`,
      valueType: "boolean",
      defaultValue: false
    },
    zeroOrPositive: {
      description: `This boolean property determines whether the input value can only be 0 or positive numbers (\`true\`) or also negative (\`false\`).`,
      valueType: "boolean",
      defaultValue: false
    },
    minValue: d(
      `The minimum value the input field allows. Can be a float or an integer if [\`integersOnly\`](#integersonly) is set to \`false\`, otherwise it can only be an integer.`
    ),
    maxValue: d(
      `The maximum value the input field allows. Can be a float or an integer if [\`integersOnly\`](#integersonly) is set to \`false\`, otherwise it can only be an integer.`
    )
  },
  events: {
    gotFocus: dGotFocus(COMP$p),
    lostFocus: dLostFocus(COMP$p),
    didChange: dDidChange(COMP$p)
  },
  apis: {
    focus: dFocus(COMP$p),
    value: dValue(),
    setValue: dSetValueApi()
  },
  themeVars: parseScssVar(styles$l.themeVars)
});
const COMP$o = "NavPanel";
const NavPanelMd = createMetadata({
  description: `\`${COMP$o}\` is a placeholder within \`App\` to define the app's navigation (menu) structure.`,
  props: {
    logoTemplate: dComponent(
      `This property defines the logo template to display in the navigation panel with the \`vertical\` and \`vertical-sticky\` layout.`
    )
  },
  themeVars: parseScssVar(styles$D.themeVars),
  defaultThemeVars: {
    [`backgroundColor-${COMP$o}`]: "$backgroundColor",
    [`border-${COMP$o}`]: "0px solid $borderColor",
    [`paddingHorizontal-${COMP$o}`]: "0",
    [`paddingVertical-logo-${COMP$o}`]: "$space-4",
    [`paddingHorizontal-logo-${COMP$o}`]: "$space-4",
    [`marginBottom-logo-${COMP$o}`]: "$space-4",
    [`boxShadow-${COMP$o}-vertical`]: "4px 0 4px 0 rgb(0 0 0 / 10%)"
  }
});
const PAGE = "Page";
const PageMd = createMetadata({
  status: "stable",
  docFolder: PAGE,
  description: `The \`${PAGE}\` component defines what content is displayed when the user navigates to a particular URL that is associated with the page.`,
  props: {
    //TODO illesg rename to path
    url: d(`The URL of the route associated with the content.`)
  }
});
const COMP$n = "Pages";
const PagesMd = createMetadata({
  description: `The \`${COMP$n}\` component is used as a container for [\`Page\`](./Page.mdx) components within an [\`App\`](./App.mdx).`,
  props: {
    defaultRoute: d(`The default route when displaying the app`)
  }
});
const themeVars$5 = `'{"backgroundColor-dropdown-NavGroup": "var(--xmlui-backgroundColor-dropdown-NavGroup)", "boxShadow-dropdown-NavGroup": "var(--xmlui-boxShadow-dropdown-NavGroup)", "borderRadius-dropdown-NavGroup": "var(--xmlui-borderRadius-dropdown-NavGroup)"}'`;
const dropdownList = "_dropdownList_qxju2_13";
const styles$5 = {
  themeVars: themeVars$5,
  dropdownList
};
function mergeProps(childProps, restProps) {
  const overrideProps = { ...restProps };
  for (const propName in restProps) {
    const childPropValue = childProps[propName];
    const restPropValue = restProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler) {
      if (childPropValue && restPropValue) {
        overrideProps[propName] = (...args) => {
          restPropValue(...args);
          childPropValue(...args);
        };
      } else if (childPropValue) {
        overrideProps[propName] = childPropValue;
      }
    } else if (propName === "style") {
      overrideProps[propName] = restPropValue ? { ...restPropValue, ...childPropValue } : childPropValue;
    } else if (propName === "className") {
      overrideProps[propName] = restPropValue ? [restPropValue, childPropValue].filter(Boolean).join(" ") : childPropValue;
    }
  }
  return { ...childProps, ...overrideProps };
}
const defaultProps$3 = {
  iconHorizontalExpanded: "chevronleft",
  iconHorizontalCollapsed: "chevronright",
  iconVerticalExpanded: "chevrondown",
  iconVerticalCollapsed: "chevronright"
};
const NavGroupContext = createContext({
  level: -1,
  iconHorizontalCollapsed: defaultProps$3.iconHorizontalCollapsed,
  iconHorizontalExpanded: defaultProps$3.iconHorizontalExpanded,
  iconVerticalCollapsed: defaultProps$3.iconVerticalCollapsed,
  iconVerticalExpanded: defaultProps$3.iconVerticalExpanded
});
forwardRef(function NavGroup2({
  node,
  style,
  label: label2,
  icon,
  renderChild,
  to,
  initiallyExpanded,
  iconHorizontalCollapsed,
  iconHorizontalExpanded,
  iconVerticalCollapsed,
  iconVerticalExpanded
}, ref) {
  const { level } = useContext(NavGroupContext);
  const appLayoutContext = useAppLayoutContext();
  const navPanelContext = useContext(NavPanelContext);
  let inline = (appLayoutContext == null ? void 0 : appLayoutContext.layout) === "vertical" || (appLayoutContext == null ? void 0 : appLayoutContext.layout) === "vertical-sticky" || (appLayoutContext == null ? void 0 : appLayoutContext.layout) === "vertical-full-header";
  if (navPanelContext !== null) {
    inline = navPanelContext.inDrawer;
  }
  const navGroupContextValue = useMemo(() => {
    return {
      level: level + 1,
      iconHorizontalCollapsed: iconHorizontalCollapsed ?? defaultProps$3.iconHorizontalCollapsed,
      iconHorizontalExpanded: iconHorizontalExpanded ?? defaultProps$3.iconHorizontalExpanded,
      iconVerticalCollapsed: iconVerticalCollapsed ?? defaultProps$3.iconVerticalCollapsed,
      iconVerticalExpanded: iconVerticalExpanded ?? defaultProps$3.iconVerticalExpanded
    };
  }, [iconHorizontalCollapsed, iconHorizontalExpanded, iconVerticalCollapsed, iconVerticalExpanded, level]);
  return /* @__PURE__ */ jsx(NavGroupContext.Provider, { value: navGroupContextValue, children: inline ? /* @__PURE__ */ jsx(
    ExpandableNavGroup,
    {
      to,
      style,
      label: label2,
      icon,
      node,
      renderChild,
      ref,
      initiallyExpanded
    }
  ) : /* @__PURE__ */ jsx(
    DropDownNavGroup,
    {
      label: label2,
      icon,
      node,
      renderChild,
      ref,
      to
    }
  ) });
});
const ExpandableNavGroup = forwardRef(function ExpandableNavGroup2({
  style = EMPTY_OBJECT,
  label: label2,
  icon,
  renderChild,
  node,
  to,
  initiallyExpanded = false
}, ref) {
  const { level, iconVerticalCollapsed, iconVerticalExpanded } = useContext(NavGroupContext);
  const [expanded, setExpanded] = useState(initiallyExpanded);
  const toggleStyle = {
    ...style,
    paddingLeft: level >= 1 ? level * 2 + "em" : void 0
  };
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsxs(NavLink, { style: toggleStyle, onClick: () => setExpanded((prev) => !prev), icon, to, children: [
      label2,
      /* @__PURE__ */ jsx("div", { style: { flex: 1 } }),
      /* @__PURE__ */ jsx(Icon, { name: expanded ? iconVerticalExpanded : iconVerticalCollapsed })
    ] }),
    expanded && renderChild(node.children, {
      wrapChild: ({ node: node2 }, renderedChild) => {
        if (node2.type === "NavLink") {
          const element = renderedChild;
          return cloneElement(element, {
            ...mergeProps(renderedChild.props, {
              style: {
                paddingLeft: (level + 1) * 2 + "em"
              }
            })
          });
        }
        return renderedChild;
      }
    })
  ] });
});
const DropDownNavGroup = forwardRef(function DropDownNavGroup2({
  style,
  label: label2,
  icon,
  renderChild,
  node,
  to
}, ref) {
  const {
    level,
    iconHorizontalCollapsed,
    iconHorizontalExpanded,
    iconVerticalCollapsed,
    iconVerticalExpanded
  } = useContext(NavGroupContext);
  const { root: root2 } = useTheme();
  let Wrapper = DropdownMenu;
  let Trigger2 = DropdownMenuTrigger;
  let Content2 = DropdownMenuContent$1;
  if (level >= 1) {
    Wrapper = DropdownMenuSub;
    Trigger2 = DropdownMenuSubTrigger;
    Content2 = DropdownMenuSubContent;
  }
  const [expanded, setExpanded] = useState(false);
  return /* @__PURE__ */ jsxs(Wrapper, { onOpenChange: (open) => setExpanded(open), children: [
    /* @__PURE__ */ jsx(Trigger2, { asChild: true, children: /* @__PURE__ */ jsxs(NavLink, { icon, style: { flexShrink: 0 }, vertical: level >= 1, to, children: [
      label2,
      /* @__PURE__ */ jsx("div", { style: { flex: 1 } }),
      level === 0 && /* @__PURE__ */ jsx(Icon, { name: expanded ? iconVerticalExpanded : iconVerticalCollapsed }),
      level >= 1 && /* @__PURE__ */ jsx(Icon, { name: expanded ? iconHorizontalExpanded : iconHorizontalCollapsed })
    ] }) }),
    /* @__PURE__ */ jsx(DropdownMenuPortal, { container: root2, children: /* @__PURE__ */ jsx(
      Content2,
      {
        className: styles$5.dropdownList,
        style: { display: "flex", flexDirection: "column" },
        side: "bottom",
        align: "start",
        children: renderChild(node.children, {
          wrapChild: ({ node: node2 }, renderedChild, hints) => {
            if (hints == null ? void 0 : hints.opaque) {
              return renderedChild;
            }
            if (node2.type === "List") {
              return renderedChild;
            }
            if (node2.type === "NavGroup") {
              return renderedChild;
            }
            let child = renderedChild;
            if (node2.type === "NavLink") {
              child = cloneElement(renderedChild, {
                ...mergeProps(renderedChild.props, {
                  vertical: true
                })
              });
            }
            return /* @__PURE__ */ jsx(DropdownMenuItem$1, { asChild: true, children: child });
          }
        })
      }
    ) })
  ] });
});
const COMP$m = "NavGroup";
const NavGroupMd = createMetadata({
  description: `The \`NavGroup\` component is a container for grouping related navigation targets (\`NavLink\` components). It can be displayed as a submenu in the App's UI.`,
  props: {
    label: dLabel(),
    initiallyExpanded: d("This property defines whether the group is initially expanded or collapsed."),
    to: {
      description: `This property defines an optional navigation link.`,
      valueType: "string"
    },
    icon: {
      description: `This property defines an optional icon to display along with the \`${COMP$m}\` label.`,
      valueType: "string"
    },
    iconHorizontalExpanded: {
      description: "Set a custom icon to display when the navigation menu is expanded, is in a **horizontal** app layout, and is in a navigation submenu.",
      valueType: "string",
      defaultValue: defaultProps$3.iconHorizontalExpanded
    },
    iconVerticalExpanded: {
      description: "Set a custom icon to display when the navigation menu is expanded, is in a **vertical** app layout, or is in a **horizontal** layout and is the top-level navigation item in the menu.",
      valueType: "string",
      defaultValue: defaultProps$3.iconVerticalExpanded
    },
    iconHorizontalCollapsed: {
      description: "Set a custom icon to display when the navigation menu is collapsed, is in a **horizontal** app layout, and is in a navigation submenu.",
      valueType: "string",
      defaultValue: defaultProps$3.iconHorizontalCollapsed
    },
    iconVerticalCollapsed: {
      description: "Set a custom icon to display when the navigation menu is collapsed, is in a **vertical** app layout, or is in a **horizontal** layout and is the top-level navigation item in the menu.",
      valueType: "string",
      defaultValue: defaultProps$3.iconVerticalCollapsed
    }
  },
  themeVars: parseScssVar(styles$5.themeVars),
  defaultThemeVars: {
    [`backgroundColor-dropdown-${COMP$m}`]: "$backgroundColor-primary",
    [`borderRadius-dropdown-${COMP$m}`]: "$borderRadius",
    [`boxShadow-dropdown-${COMP$m}`]: "$boxShadow-spread"
  }
});
const COMP$l = "RadioGroup";
const RGOption = `RadioGroupOption`;
const RadioGroupMd = createMetadata({
  description: `The \`${COMP$l}\` input component is a group of radio buttons ([\`RadioGroupOption\`](./RadioGroupOption.mdx) components) that allow users to select only one option from the group at a time.`,
  props: {
    initialValue: dInitialValue(),
    autoFocus: dAutoFocus(),
    required: dRequired(),
    readOnly: dReadonly(),
    enabled: dEnabled(),
    validationStatus: dValidationStatus(),
    orientation: d(
      `(*** NOT IMPLEMENTED YET ***) This property sets the orientation of the options within the radio group.`
    ),
    label: dLabel(),
    labelPosition: dLabelPosition("top"),
    labelWidth: dLabelWidth(COMP$l),
    labelBreak: dLabelBreak(COMP$l)
  },
  events: {
    gotFocus: dGotFocus(COMP$l),
    lostFocus: dLostFocus(COMP$l),
    didChange: dDidChange(COMP$l)
  },
  themeVars: parseScssVar(styles$j.themeVars),
  defaultThemeVars: {
    [`gap-${RGOption}`]: "$space-1_5",
    [`borderWidth-${RGOption}`]: "2px",
    [`backgroundColor-checked-${RGOption}--disabled]`]: `$borderColor-${RGOption}--disabled`,
    [`backgroundColor-checked-${RGOption}-error`]: `$borderColor-${RGOption}-error`,
    [`backgroundColor-checked-${RGOption}-warning`]: `$borderColor-${RGOption}-warning`,
    [`backgroundColor-checked-${RGOption}-success`]: `$borderColor-${RGOption}-success`,
    [`fontSize-${RGOption}`]: "$fontSize-small",
    [`fontWeight-${RGOption}`]: "$fontWeight-bold",
    [`textColor-${RGOption}-error`]: `$borderColor-${RGOption}-error`,
    [`textColor-${RGOption}-warning`]: `$borderColor-${RGOption}-warning`,
    [`textColor-${RGOption}-success`]: `$borderColor-${RGOption}-success`,
    [`backgroundColor-checked-${RGOption}-default`]: "$color-primary-500",
    [`borderColor-${RGOption}-default`]: "$color-surface-500",
    [`borderColor-${RGOption}-default--hover`]: "$color-surface-700",
    [`borderColor-${RGOption}-default--active`]: "$color-primary-500"
  }
});
const COMP$k = "Spinner";
const SpinnerMd = createMetadata({
  description: `The \`${COMP$k}\` component is an animated indicator that represents a particular action in progress without a deterministic progress value.`,
  props: {
    delay: {
      description: `The delay in milliseconds before the spinner is displayed.`,
      valueType: "number",
      defaultValue: 400
    },
    fullScreen: {
      description: `If set to \`true\`, the component will be rendered in a full screen container.`,
      valueType: "boolean",
      defaultValue: false
    }
  },
  themeVars: parseScssVar(styles$H.themeVars),
  defaultThemeVars: {
    [`size-${COMP$k}`]: "$space-10",
    [`thickness-${COMP$k}`]: "$space-0_5",
    [`borderColor-${COMP$k}`]: "$color-surface-400"
  }
});
const COMP$j = "Select";
const SelectMd = createMetadata({
  description: "Provides a dropdown with a list of options to choose from.",
  status: "experimental",
  props: {
    placeholder: dPlaceholder(),
    initialValue: dInitialValue(),
    maxLength: dMaxLength(),
    autoFocus: dAutoFocus(),
    required: dRequired(),
    readOnly: dReadonly(),
    enabled: dEnabled(),
    validationStatus: dValidationStatus(),
    label: dLabel(),
    labelPosition: dLabelPosition("top"),
    labelWidth: dLabelWidth(COMP$j),
    labelBreak: dLabelBreak(COMP$j),
    optionLabelTemplate: dComponent(
      `This property allows replacing the default template to display an option in the dropdown list.`
    ),
    optionTemplate: dComponent(
      `This property allows replacing the default template to display an option in the dropdown list.`
    ),
    valueTemplate: dComponent(
      `This property allows replacing the default template to display a selected value when multiple selections (\`multiSelect\` is \`true\`) are enabled.`
    ),
    dropdownHeight: d("This property sets the height of the dropdown list."),
    emptyListTemplate: d(
      `This optional property provides the ability to customize what is displayed when the list of options is empty.`
    ),
    multiSelect: dMulti(),
    searchable: d(`This property enables the search functionality in the dropdown list.`),
    inProgress: d(
      `This property indicates whether the component is in progress. It can be used to show a loading message.`
    ),
    inProgressNotificationMessage: d(
      `This property indicates the message to display when the component is in progress.`
    )
  },
  events: {
    gotFocus: dGotFocus(COMP$j),
    lostFocus: dLostFocus(COMP$j),
    didChange: dDidChange(COMP$j)
  },
  apis: {
    focus: dFocus(COMP$j),
    setValue: dSetValueApi(),
    value: dValue(),
    reset: d(
      `This method resets the component to its initial value, or clears the selection if no initial value was provided.`
    )
  },
  contextVars: {
    $item: d(`This property represents the value of an item in the dropdown list.`),
    $itemContext: d(
      `This property provides a \`removeItem\` method to delete the particular value from the selection.`
    )
  },
  themeVars: parseScssVar(styles$k.themeVars),
  defaultThemeVars: {
    [`backgroundColor-menu-${COMP$j}`]: "$color-surface-raised",
    [`boxShadow-menu-${COMP$j}`]: "$boxShadow-md",
    [`borderRadius-menu-${COMP$j}`]: "$borderRadius",
    [`borderWidth-menu-${COMP$j}`]: "1px",
    [`borderColor-menu-${COMP$j}`]: "$borderColor",
    [`backgroundColor-item-${COMP$j}`]: "$backgroundColor-dropdown-item",
    [`backgroundColor-item-${COMP$j}--hover`]: "$backgroundColor-dropdown-item--active",
    [`backgroundColor-item-${COMP$j}--active`]: "$backgroundColor-dropdown-item--active",
    [`minHeight-Input`]: "39px",
    [`backgroundColor-${COMP$j}-badge`]: "$color-primary-500",
    [`fontSize-${COMP$j}-badge`]: "$fontSize-small",
    [`paddingHorizontal-${COMP$j}-badge`]: "$space-1",
    [`paddingVertical-${COMP$j}-badge`]: "$space-1",
    [`paddingHorizontal-item-${COMP$j}`]: "$space-2",
    [`paddingVertical-item-${COMP$j}`]: "$space-2",
    [`opacity-text-item-${COMP$j}--disabled`]: "0.5",
    [`opacity-${COMP$j}--disabled`]: "0.5",
    [`backgroundColor-${COMP$j}-badge--hover`]: "$color-primary-400",
    [`backgroundColor-${COMP$j}-badge--active`]: "$color-primary-500",
    [`textColor-item-${COMP$j}--disabled`]: "$color-surface-200",
    [`textColor-${COMP$j}-badge`]: "$color-surface-50"
  }
});
var CharacterCodes = /* @__PURE__ */ ((CharacterCodes2) => {
  CharacterCodes2[CharacterCodes2["EOF"] = -1] = "EOF";
  CharacterCodes2[CharacterCodes2["nullCharacter"] = 0] = "nullCharacter";
  CharacterCodes2[CharacterCodes2["maxAsciiCharacter"] = 127] = "maxAsciiCharacter";
  CharacterCodes2[CharacterCodes2["lineFeed"] = 10] = "lineFeed";
  CharacterCodes2[CharacterCodes2["carriageReturn"] = 13] = "carriageReturn";
  CharacterCodes2[CharacterCodes2["lineSeparator"] = 8232] = "lineSeparator";
  CharacterCodes2[CharacterCodes2["paragraphSeparator"] = 8233] = "paragraphSeparator";
  CharacterCodes2[CharacterCodes2["nextLine"] = 133] = "nextLine";
  CharacterCodes2[CharacterCodes2["space"] = 32] = "space";
  CharacterCodes2[CharacterCodes2["nonBreakingSpace"] = 160] = "nonBreakingSpace";
  CharacterCodes2[CharacterCodes2["enQuad"] = 8192] = "enQuad";
  CharacterCodes2[CharacterCodes2["emQuad"] = 8193] = "emQuad";
  CharacterCodes2[CharacterCodes2["enSpace"] = 8194] = "enSpace";
  CharacterCodes2[CharacterCodes2["emSpace"] = 8195] = "emSpace";
  CharacterCodes2[CharacterCodes2["threePerEmSpace"] = 8196] = "threePerEmSpace";
  CharacterCodes2[CharacterCodes2["fourPerEmSpace"] = 8197] = "fourPerEmSpace";
  CharacterCodes2[CharacterCodes2["sixPerEmSpace"] = 8198] = "sixPerEmSpace";
  CharacterCodes2[CharacterCodes2["figureSpace"] = 8199] = "figureSpace";
  CharacterCodes2[CharacterCodes2["punctuationSpace"] = 8200] = "punctuationSpace";
  CharacterCodes2[CharacterCodes2["thinSpace"] = 8201] = "thinSpace";
  CharacterCodes2[CharacterCodes2["hairSpace"] = 8202] = "hairSpace";
  CharacterCodes2[CharacterCodes2["zeroWidthSpace"] = 8203] = "zeroWidthSpace";
  CharacterCodes2[CharacterCodes2["narrowNoBreakSpace"] = 8239] = "narrowNoBreakSpace";
  CharacterCodes2[CharacterCodes2["ideographicSpace"] = 12288] = "ideographicSpace";
  CharacterCodes2[CharacterCodes2["mathematicalSpace"] = 8287] = "mathematicalSpace";
  CharacterCodes2[CharacterCodes2["ogham"] = 5760] = "ogham";
  CharacterCodes2[CharacterCodes2["replacementCharacter"] = 65533] = "replacementCharacter";
  CharacterCodes2[CharacterCodes2["_"] = 95] = "_";
  CharacterCodes2[CharacterCodes2["$"] = 36] = "$";
  CharacterCodes2[CharacterCodes2["_0"] = 48] = "_0";
  CharacterCodes2[CharacterCodes2["_1"] = 49] = "_1";
  CharacterCodes2[CharacterCodes2["_2"] = 50] = "_2";
  CharacterCodes2[CharacterCodes2["_3"] = 51] = "_3";
  CharacterCodes2[CharacterCodes2["_4"] = 52] = "_4";
  CharacterCodes2[CharacterCodes2["_5"] = 53] = "_5";
  CharacterCodes2[CharacterCodes2["_6"] = 54] = "_6";
  CharacterCodes2[CharacterCodes2["_7"] = 55] = "_7";
  CharacterCodes2[CharacterCodes2["_8"] = 56] = "_8";
  CharacterCodes2[CharacterCodes2["_9"] = 57] = "_9";
  CharacterCodes2[CharacterCodes2["a"] = 97] = "a";
  CharacterCodes2[CharacterCodes2["b"] = 98] = "b";
  CharacterCodes2[CharacterCodes2["c"] = 99] = "c";
  CharacterCodes2[CharacterCodes2["d"] = 100] = "d";
  CharacterCodes2[CharacterCodes2["e"] = 101] = "e";
  CharacterCodes2[CharacterCodes2["f"] = 102] = "f";
  CharacterCodes2[CharacterCodes2["g"] = 103] = "g";
  CharacterCodes2[CharacterCodes2["h"] = 104] = "h";
  CharacterCodes2[CharacterCodes2["i"] = 105] = "i";
  CharacterCodes2[CharacterCodes2["j"] = 106] = "j";
  CharacterCodes2[CharacterCodes2["k"] = 107] = "k";
  CharacterCodes2[CharacterCodes2["l"] = 108] = "l";
  CharacterCodes2[CharacterCodes2["m"] = 109] = "m";
  CharacterCodes2[CharacterCodes2["n"] = 110] = "n";
  CharacterCodes2[CharacterCodes2["o"] = 111] = "o";
  CharacterCodes2[CharacterCodes2["p"] = 112] = "p";
  CharacterCodes2[CharacterCodes2["q"] = 113] = "q";
  CharacterCodes2[CharacterCodes2["r"] = 114] = "r";
  CharacterCodes2[CharacterCodes2["s"] = 115] = "s";
  CharacterCodes2[CharacterCodes2["t"] = 116] = "t";
  CharacterCodes2[CharacterCodes2["u"] = 117] = "u";
  CharacterCodes2[CharacterCodes2["v"] = 118] = "v";
  CharacterCodes2[CharacterCodes2["w"] = 119] = "w";
  CharacterCodes2[CharacterCodes2["x"] = 120] = "x";
  CharacterCodes2[CharacterCodes2["y"] = 121] = "y";
  CharacterCodes2[CharacterCodes2["z"] = 122] = "z";
  CharacterCodes2[CharacterCodes2["A"] = 65] = "A";
  CharacterCodes2[CharacterCodes2["B"] = 66] = "B";
  CharacterCodes2[CharacterCodes2["C"] = 67] = "C";
  CharacterCodes2[CharacterCodes2["D"] = 68] = "D";
  CharacterCodes2[CharacterCodes2["E"] = 69] = "E";
  CharacterCodes2[CharacterCodes2["F"] = 70] = "F";
  CharacterCodes2[CharacterCodes2["G"] = 71] = "G";
  CharacterCodes2[CharacterCodes2["H"] = 72] = "H";
  CharacterCodes2[CharacterCodes2["I"] = 73] = "I";
  CharacterCodes2[CharacterCodes2["J"] = 74] = "J";
  CharacterCodes2[CharacterCodes2["K"] = 75] = "K";
  CharacterCodes2[CharacterCodes2["L"] = 76] = "L";
  CharacterCodes2[CharacterCodes2["M"] = 77] = "M";
  CharacterCodes2[CharacterCodes2["N"] = 78] = "N";
  CharacterCodes2[CharacterCodes2["O"] = 79] = "O";
  CharacterCodes2[CharacterCodes2["P"] = 80] = "P";
  CharacterCodes2[CharacterCodes2["Q"] = 81] = "Q";
  CharacterCodes2[CharacterCodes2["R"] = 82] = "R";
  CharacterCodes2[CharacterCodes2["S"] = 83] = "S";
  CharacterCodes2[CharacterCodes2["T"] = 84] = "T";
  CharacterCodes2[CharacterCodes2["U"] = 85] = "U";
  CharacterCodes2[CharacterCodes2["V"] = 86] = "V";
  CharacterCodes2[CharacterCodes2["W"] = 87] = "W";
  CharacterCodes2[CharacterCodes2["X"] = 88] = "X";
  CharacterCodes2[CharacterCodes2["Y"] = 89] = "Y";
  CharacterCodes2[CharacterCodes2["Z"] = 90] = "Z";
  CharacterCodes2[CharacterCodes2["ampersand"] = 38] = "ampersand";
  CharacterCodes2[CharacterCodes2["asterisk"] = 42] = "asterisk";
  CharacterCodes2[CharacterCodes2["at"] = 64] = "at";
  CharacterCodes2[CharacterCodes2["backslash"] = 92] = "backslash";
  CharacterCodes2[CharacterCodes2["backtick"] = 96] = "backtick";
  CharacterCodes2[CharacterCodes2["bar"] = 124] = "bar";
  CharacterCodes2[CharacterCodes2["caret"] = 94] = "caret";
  CharacterCodes2[CharacterCodes2["closeBrace"] = 125] = "closeBrace";
  CharacterCodes2[CharacterCodes2["closeBracket"] = 93] = "closeBracket";
  CharacterCodes2[CharacterCodes2["closeParen"] = 41] = "closeParen";
  CharacterCodes2[CharacterCodes2["colon"] = 58] = "colon";
  CharacterCodes2[CharacterCodes2["comma"] = 44] = "comma";
  CharacterCodes2[CharacterCodes2["dot"] = 46] = "dot";
  CharacterCodes2[CharacterCodes2["doubleQuote"] = 34] = "doubleQuote";
  CharacterCodes2[CharacterCodes2["equals"] = 61] = "equals";
  CharacterCodes2[CharacterCodes2["exclamation"] = 33] = "exclamation";
  CharacterCodes2[CharacterCodes2["greaterThan"] = 62] = "greaterThan";
  CharacterCodes2[CharacterCodes2["hash"] = 35] = "hash";
  CharacterCodes2[CharacterCodes2["lessThan"] = 60] = "lessThan";
  CharacterCodes2[CharacterCodes2["minus"] = 45] = "minus";
  CharacterCodes2[CharacterCodes2["openBrace"] = 123] = "openBrace";
  CharacterCodes2[CharacterCodes2["openBracket"] = 91] = "openBracket";
  CharacterCodes2[CharacterCodes2["openParen"] = 40] = "openParen";
  CharacterCodes2[CharacterCodes2["percent"] = 37] = "percent";
  CharacterCodes2[CharacterCodes2["plus"] = 43] = "plus";
  CharacterCodes2[CharacterCodes2["question"] = 63] = "question";
  CharacterCodes2[CharacterCodes2["semicolon"] = 59] = "semicolon";
  CharacterCodes2[CharacterCodes2["singleQuote"] = 39] = "singleQuote";
  CharacterCodes2[CharacterCodes2["slash"] = 47] = "slash";
  CharacterCodes2[CharacterCodes2["tilde"] = 126] = "tilde";
  CharacterCodes2[CharacterCodes2["backspace"] = 8] = "backspace";
  CharacterCodes2[CharacterCodes2["formFeed"] = 12] = "formFeed";
  CharacterCodes2[CharacterCodes2["byteOrderMark"] = 65279] = "byteOrderMark";
  CharacterCodes2[CharacterCodes2["tab"] = 9] = "tab";
  CharacterCodes2[CharacterCodes2["verticalTab"] = 11] = "verticalTab";
  return CharacterCodes2;
})(CharacterCodes || {});
var DiagnosticCategory = /* @__PURE__ */ ((DiagnosticCategory2) => {
  DiagnosticCategory2[DiagnosticCategory2["Warning"] = 0] = "Warning";
  DiagnosticCategory2[DiagnosticCategory2["Error"] = 1] = "Error";
  DiagnosticCategory2[DiagnosticCategory2["Suggestion"] = 2] = "Suggestion";
  DiagnosticCategory2[DiagnosticCategory2["Message"] = 3] = "Message";
  return DiagnosticCategory2;
})(DiagnosticCategory || {});
var ErrCodes = /* @__PURE__ */ ((ErrCodes2) => {
  ErrCodes2["onlyOneElem"] = "U002";
  ErrCodes2["expTagOpen"] = "U003";
  ErrCodes2["expTagIdent"] = "U004";
  ErrCodes2["expCloseStart"] = "U005";
  ErrCodes2["expEndOrClose"] = "U006";
  ErrCodes2["tagNameMismatch"] = "U007";
  ErrCodes2["expEnd"] = "U008";
  ErrCodes2["expAttrIdent"] = "U009";
  ErrCodes2["expEq"] = "U010";
  ErrCodes2["expAttrValue"] = "U011";
  ErrCodes2["duplAttr"] = "U012";
  ErrCodes2["uppercaseAttr"] = "U013";
  ErrCodes2["invalidChar"] = "W001";
  ErrCodes2["untermStr"] = "W002";
  ErrCodes2["untermComment"] = "W007";
  ErrCodes2["untermCData"] = "W008";
  ErrCodes2["untermScript"] = "W009";
  return ErrCodes2;
})(ErrCodes || {});
const Diag_Invalid_Character = {
  code: "W001",
  category: 1,
  message: "Invalid character."
};
const Diag_Unterminated_String_Literal = {
  code: "W002",
  category: 1,
  message: "Unterminated string literal."
};
const Diag_Unterminated_Comment = {
  code: "W007",
  category: 1,
  message: "Unterminated comment"
};
const Diag_Unterminated_CData = {
  code: "W008",
  category: 1,
  message: "Unterminated CDATA section"
};
const Diag_Unterminated_Script = {
  code: "W009",
  category: 1,
  message: "Unterminated script section"
};
const Diag_End_Token_Expected = {
  category: 1,
  code: "U008",
  message: "A '>' token expected."
};
const Diag_CloseNodeStart_Token_Expected = {
  category: 1,
  code: "U005",
  message: "A '</' token expected."
};
const Diag_Tag_Identifier_Expected = {
  category: 1,
  code: "U004",
  message: "A tag identifier expected."
};
const Diag_Attr_Value_Expected = {
  category: 1,
  code: "U011",
  message: "An attribute value expected."
};
const Diag_OpenNodeStart_Token_Expected = {
  category: 1,
  code: "U003",
  message: "A '<' token expected."
};
const Diag_End_Or_Close_Token_Expected = {
  category: 1,
  code: "U006",
  message: `A '>' or '/>' token expected.`
};
const Diag_Attr_Identifier_Expected = {
  category: 1,
  code: "U009",
  message: `An attribute identifier expected.`
};
var SyntaxKind = /* @__PURE__ */ ((SyntaxKind2) => {
  SyntaxKind2[SyntaxKind2["Unknown"] = 0] = "Unknown";
  SyntaxKind2[SyntaxKind2["EndOfFileToken"] = 1] = "EndOfFileToken";
  SyntaxKind2[SyntaxKind2["CommentTrivia"] = 2] = "CommentTrivia";
  SyntaxKind2[SyntaxKind2["NewLineTrivia"] = 3] = "NewLineTrivia";
  SyntaxKind2[SyntaxKind2["WhitespaceTrivia"] = 4] = "WhitespaceTrivia";
  SyntaxKind2[SyntaxKind2["Identifier"] = 5] = "Identifier";
  SyntaxKind2[SyntaxKind2["OpenNodeStart"] = 6] = "OpenNodeStart";
  SyntaxKind2[SyntaxKind2["CloseNodeStart"] = 7] = "CloseNodeStart";
  SyntaxKind2[SyntaxKind2["NodeEnd"] = 8] = "NodeEnd";
  SyntaxKind2[SyntaxKind2["NodeClose"] = 9] = "NodeClose";
  SyntaxKind2[SyntaxKind2["Colon"] = 10] = "Colon";
  SyntaxKind2[SyntaxKind2["Equal"] = 11] = "Equal";
  SyntaxKind2[SyntaxKind2["StringLiteral"] = 12] = "StringLiteral";
  SyntaxKind2[SyntaxKind2["CData"] = 13] = "CData";
  SyntaxKind2[SyntaxKind2["Script"] = 14] = "Script";
  SyntaxKind2[SyntaxKind2["TextNode"] = 15] = "TextNode";
  SyntaxKind2[SyntaxKind2["AmpersandEntity"] = 16] = "AmpersandEntity";
  SyntaxKind2[SyntaxKind2["LessThanEntity"] = 17] = "LessThanEntity";
  SyntaxKind2[SyntaxKind2["GreaterThanEntity"] = 18] = "GreaterThanEntity";
  SyntaxKind2[SyntaxKind2["SingleQuoteEntity"] = 19] = "SingleQuoteEntity";
  SyntaxKind2[SyntaxKind2["DoubleQuoteEntity"] = 20] = "DoubleQuoteEntity";
  SyntaxKind2[SyntaxKind2["ElementNode"] = 21] = "ElementNode";
  SyntaxKind2[SyntaxKind2["AttributeNode"] = 22] = "AttributeNode";
  SyntaxKind2[SyntaxKind2["AttributeKeyNode"] = 23] = "AttributeKeyNode";
  SyntaxKind2[SyntaxKind2["ContentListNode"] = 24] = "ContentListNode";
  SyntaxKind2[SyntaxKind2["AttributeListNode"] = 25] = "AttributeListNode";
  SyntaxKind2[SyntaxKind2["TagNameNode"] = 26] = "TagNameNode";
  SyntaxKind2[SyntaxKind2["ErrorNode"] = 27] = "ErrorNode";
  return SyntaxKind2;
})(SyntaxKind || {});
function isTrivia(token) {
  return token >= 2 && token <= 4;
}
function getSyntaxKindStrRepr(kind) {
  switch (kind) {
    case 0:
      return "Unknown";
    case 1:
      return "EndOfFileToken";
    case 2:
      return "CommentTrivia";
    case 3:
      return "NewLineTrivia";
    case 4:
      return "WhitespaceTrivia";
    case 5:
      return "Identifier";
    case 6:
      return "OpenNodeStart";
    case 7:
      return "CloseNodeStart";
    case 8:
      return "NodeEnd";
    case 9:
      return "NodeClose";
    case 10:
      return "Colon";
    case 11:
      return "Equal";
    case 12:
      return "StringLiteral";
    case 13:
      return "CData";
    case 14:
      return "Script";
    case 16:
      return "AmpersandEntity";
    case 17:
      return "LessThanEntity";
    case 18:
      return "GreaterThanEntity";
    case 19:
      return "SingleQuoteEntity";
    case 20:
      return "DoubleQuoteEntity";
    case 21:
      return "ElementNode";
    case 22:
      return "AttributeNode";
    case 15:
      return "TextNode";
    case 24:
      return "ContentListNode";
    case 25:
      return "AttributeListNode";
    case 26:
      return "TagNameNode";
    case 27:
      return "ErrorNode";
    case 23:
      return "AttributeKeyNode";
  }
  return assertUnreachable();
}
function assertUnreachable(x) {
  throw new Error("Didn't expect to get here");
}
function createScanner(skipTrivia, textInitial, onError, start2, length) {
  let text2 = textInitial;
  let pos;
  let end2;
  let fullStartPos;
  let tokenStart;
  let token;
  let tokenValue;
  setText(text2, start2, length);
  return {
    getStartPos: () => fullStartPos,
    getTokenEnd: () => pos,
    getToken: () => token,
    getTokenStart: () => tokenStart,
    getTokenText: () => text2.substring(tokenStart, pos),
    getTokenValue: () => tokenValue,
    isIdentifier: () => token === SyntaxKind.Identifier,
    peekChar,
    scanChar,
    scan,
    scanTrivia,
    scanText,
    getText,
    setText,
    setOnError,
    resetTokenState,
    back
  };
  function peekChar(ahead) {
    if (pos + (ahead ?? 0) >= end2) {
      return null;
    }
    const ch = codePointUnchecked(pos + (ahead ?? 0));
    return isNaN(ch) ? null : ch;
  }
  function scanChar() {
    if (pos >= end2) {
      return null;
    }
    const ch = codePointUnchecked(pos);
    pos += charSize(ch);
    return ch;
  }
  function scan() {
    fullStartPos = pos;
    while (true) {
      tokenStart = pos;
      if (pos >= end2) {
        return token = SyntaxKind.EndOfFileToken;
      }
      const ch = codePointUnchecked(pos);
      switch (ch) {
        case CharacterCodes.lineFeed:
        case CharacterCodes.carriageReturn: {
          if (ch === CharacterCodes.carriageReturn && pos + 1 < end2 && charCodeUnchecked(pos + 1) === CharacterCodes.lineFeed) {
            pos += 2;
          } else {
            pos++;
          }
          return token = SyntaxKind.NewLineTrivia;
        }
        case CharacterCodes.tab:
        case CharacterCodes.verticalTab:
        case CharacterCodes.formFeed:
        case CharacterCodes.space:
        case CharacterCodes.nonBreakingSpace:
        case CharacterCodes.ogham:
        case CharacterCodes.enQuad:
        case CharacterCodes.emQuad:
        case CharacterCodes.enSpace:
        case CharacterCodes.emSpace:
        case CharacterCodes.threePerEmSpace:
        case CharacterCodes.fourPerEmSpace:
        case CharacterCodes.sixPerEmSpace:
        case CharacterCodes.figureSpace:
        case CharacterCodes.punctuationSpace:
        case CharacterCodes.thinSpace:
        case CharacterCodes.hairSpace:
        case CharacterCodes.zeroWidthSpace:
        case CharacterCodes.narrowNoBreakSpace:
        case CharacterCodes.mathematicalSpace:
        case CharacterCodes.ideographicSpace:
        case CharacterCodes.byteOrderMark: {
          while (pos < end2 && isWhiteSpaceSingleLine(charCodeUnchecked(pos))) {
            pos++;
          }
          return token = SyntaxKind.WhitespaceTrivia;
        }
        case CharacterCodes.doubleQuote:
        case CharacterCodes.singleQuote:
        case CharacterCodes.backtick:
          tokenValue = scanString();
          return token = SyntaxKind.StringLiteral;
        case CharacterCodes.ampersand:
          if (charCodeUnchecked(pos + 1) === CharacterCodes.a && charCodeUnchecked(pos + 2) === CharacterCodes.m && charCodeUnchecked(pos + 3) === CharacterCodes.p && charCodeUnchecked(pos + 4) === CharacterCodes.semicolon) {
            pos += 5;
            return token = SyntaxKind.AmpersandEntity;
          } else if (charCodeUnchecked(pos + 1) === CharacterCodes.l && charCodeUnchecked(pos + 2) === CharacterCodes.t && charCodeUnchecked(pos + 3) === CharacterCodes.semicolon) {
            pos += 4;
            return token = SyntaxKind.LessThanEntity;
          } else if (charCodeUnchecked(pos + 1) === CharacterCodes.g && charCodeUnchecked(pos + 2) === CharacterCodes.t && charCodeUnchecked(pos + 3) === CharacterCodes.semicolon) {
            pos += 4;
            return token = SyntaxKind.GreaterThanEntity;
          } else if (charCodeUnchecked(pos + 1) === CharacterCodes.q && charCodeUnchecked(pos + 2) === CharacterCodes.u && charCodeUnchecked(pos + 3) === CharacterCodes.o && charCodeUnchecked(pos + 4) === CharacterCodes.t && charCodeUnchecked(pos + 5) === CharacterCodes.semicolon) {
            pos += 6;
            return token = SyntaxKind.DoubleQuoteEntity;
          } else if (charCodeUnchecked(pos + 1) === CharacterCodes.a && charCodeUnchecked(pos + 2) === CharacterCodes.p && charCodeUnchecked(pos + 3) === CharacterCodes.o && charCodeUnchecked(pos + 4) === CharacterCodes.s && charCodeUnchecked(pos + 5) === CharacterCodes.semicolon) {
            pos += 6;
            return token = SyntaxKind.SingleQuoteEntity;
          }
          pos++;
          error2(Diag_Invalid_Character, 1);
          return token = SyntaxKind.Unknown;
        case CharacterCodes.equals:
          pos++;
          return token = SyntaxKind.Equal;
        case CharacterCodes.colon:
          pos++;
          return token = SyntaxKind.Colon;
        case CharacterCodes.lessThan:
          if (charCodeUnchecked(pos + 1) === CharacterCodes.slash) {
            pos += 2;
            return token = SyntaxKind.CloseNodeStart;
          } else if (
            // --- "<!-- -->", XMLUI comment
            charCodeUnchecked(pos + 1) === CharacterCodes.exclamation && charCodeUnchecked(pos + 2) === CharacterCodes.minus && charCodeUnchecked(pos + 3) === CharacterCodes.minus
          ) {
            pos += 4;
            while (pos < end2) {
              if (charCodeUnchecked(pos) === CharacterCodes.minus && charCodeUnchecked(pos + 1) === CharacterCodes.minus && charCodeUnchecked(pos + 2) === CharacterCodes.greaterThan) {
                pos += 3;
                return token = SyntaxKind.CommentTrivia;
              }
              pos += charSize(charCodeUnchecked(pos));
            }
            error2(Diag_Unterminated_Comment, 4);
            return token = SyntaxKind.Unknown;
          } else if (
            // --- <![CDATA[ section
            charCodeUnchecked(pos + 1) === CharacterCodes.exclamation && charCodeUnchecked(pos + 2) === CharacterCodes.openBracket && charCodeUnchecked(pos + 3) === CharacterCodes.C && charCodeUnchecked(pos + 4) === CharacterCodes.D && charCodeUnchecked(pos + 5) === CharacterCodes.A && charCodeUnchecked(pos + 6) === CharacterCodes.T && charCodeUnchecked(pos + 7) === CharacterCodes.A && charCodeUnchecked(pos + 8) === CharacterCodes.openBracket
          ) {
            pos += 9;
            while (pos < end2) {
              if (charCodeUnchecked(pos) === CharacterCodes.closeBracket && charCodeUnchecked(pos + 1) === CharacterCodes.closeBracket && charCodeUnchecked(pos + 2) === CharacterCodes.greaterThan) {
                pos += 3;
                return token = SyntaxKind.CData;
              }
              pos += charSize(charCodeUnchecked(pos));
            }
            error2(Diag_Unterminated_CData, 9);
            return token = SyntaxKind.CData;
          } else if (
            // --- <script>
            charCodeUnchecked(pos + 1) === CharacterCodes.s && charCodeUnchecked(pos + 2) === CharacterCodes.c && charCodeUnchecked(pos + 3) === CharacterCodes.r && charCodeUnchecked(pos + 4) === CharacterCodes.i && charCodeUnchecked(pos + 5) === CharacterCodes.p && charCodeUnchecked(pos + 6) === CharacterCodes.t && charCodeUnchecked(pos + 7) === CharacterCodes.greaterThan
          ) {
            pos += 8;
            while (pos < end2) {
              if (charCodeUnchecked(pos) === CharacterCodes.lessThan && charCodeUnchecked(pos + 1) === CharacterCodes.slash && charCodeUnchecked(pos + 2) === CharacterCodes.s && charCodeUnchecked(pos + 3) === CharacterCodes.c && charCodeUnchecked(pos + 4) === CharacterCodes.r && charCodeUnchecked(pos + 5) === CharacterCodes.i && charCodeUnchecked(pos + 6) === CharacterCodes.p && charCodeUnchecked(pos + 7) === CharacterCodes.t && charCodeUnchecked(pos + 8) === CharacterCodes.greaterThan) {
                pos += 9;
                return token = SyntaxKind.Script;
              }
              pos += charSize(charCodeUnchecked(pos));
            }
            error2(Diag_Unterminated_Script, 9);
            return token = SyntaxKind.Script;
          }
          pos++;
          return token = SyntaxKind.OpenNodeStart;
        case CharacterCodes.slash:
          if (charCodeUnchecked(pos + 1) === CharacterCodes.greaterThan) {
            pos += 2;
            return token = SyntaxKind.NodeClose;
          }
          pos++;
          error2(Diag_Invalid_Character, 1);
          return token = SyntaxKind.Unknown;
        case CharacterCodes.greaterThan:
          pos++;
          return token = SyntaxKind.NodeEnd;
        default:
          const identifierKind = scanIdentifier(ch);
          if (identifierKind) {
            return token = identifierKind;
          } else if (isWhiteSpaceSingleLine(ch)) {
            pos += charSize(ch);
            continue;
          } else if (isLineBreak(ch)) {
            pos += charSize(ch);
            continue;
          }
          const size = charSize(ch);
          pos += size;
          error2(Diag_Invalid_Character, size);
          return token = SyntaxKind.Unknown;
      }
    }
  }
  function scanTrivia() {
    const currentPos = pos;
    const token2 = scan();
    if (isTrivia(token2)) {
      return token2;
    }
    resetTokenState(currentPos);
    return null;
  }
  function scanText() {
    return SyntaxKind.Unknown;
  }
  function getText() {
    return text2;
  }
  function charCodeUnchecked(pos2) {
    return text2.charCodeAt(pos2);
  }
  function codePointUnchecked(pos2) {
    return codePointAt(text2, pos2);
  }
  function codePointAt(s, i) {
    return s.codePointAt(i) ?? 0;
  }
  function setText(newText, start22, length2) {
    text2 = newText || "";
    end2 = length2 === void 0 ? text2.length : start22 + length2;
    resetTokenState(start22 || 0);
  }
  function setOnError(errorCallback) {
    onError = errorCallback;
  }
  function resetTokenState(position) {
    pos = position;
    fullStartPos = position;
    tokenStart = position;
    token = SyntaxKind.Unknown;
    tokenValue = void 0;
  }
  function back() {
    resetTokenState(fullStartPos);
  }
  function scanIdentifier(startCharacter) {
    let ch = startCharacter;
    if (isIdentifierStart(ch)) {
      pos += charSize(ch);
      while (pos < end2 && isIdentifierPart(ch = codePointUnchecked(pos))) {
        pos += charSize(ch);
      }
      tokenValue = text2.substring(tokenStart, pos);
      return getIdentifierToken();
    }
  }
  function getIdentifierToken() {
    return token = SyntaxKind.Identifier;
  }
  function scanString() {
    const quote = charCodeUnchecked(pos);
    pos++;
    let result = "";
    let start22 = pos;
    while (true) {
      if (pos >= end2) {
        result += text2.substring(start22, pos);
        error2(Diag_Unterminated_String_Literal, 1);
        break;
      }
      const ch = charCodeUnchecked(pos);
      if (ch === quote) {
        result += text2.substring(start22, pos);
        pos++;
        break;
      }
      pos++;
    }
    return result;
  }
  function error2(message, troublesomePrefixLength = 0) {
    if (onError) {
      onError(message, troublesomePrefixLength);
    }
  }
}
function charSize(ch) {
  if (ch >= 65536) {
    return 2;
  }
  if (ch === CharacterCodes.EOF) {
    return 0;
  }
  return 1;
}
function isASCIILetter(ch) {
  return ch >= CharacterCodes.A && ch <= CharacterCodes.Z || ch >= CharacterCodes.a && ch <= CharacterCodes.z;
}
function isWordCharacter(ch) {
  return isASCIILetter(ch) || isDigit(ch) || ch === CharacterCodes._;
}
function isDigit(ch) {
  return ch >= CharacterCodes._0 && ch <= CharacterCodes._9;
}
function isIdentifierStart(ch) {
  return isASCIILetter(ch) || ch === CharacterCodes.$ || ch === CharacterCodes._;
}
function isIdentifierPart(ch) {
  return isWordCharacter(ch) || ch === CharacterCodes.$ || ch === CharacterCodes.minus || ch === CharacterCodes.dot;
}
function isWhiteSpaceSingleLine(ch) {
  return ch === CharacterCodes.space || ch === CharacterCodes.tab || ch === CharacterCodes.verticalTab || ch === CharacterCodes.formFeed || ch === CharacterCodes.nonBreakingSpace || ch === CharacterCodes.nextLine || ch === CharacterCodes.ogham || ch >= CharacterCodes.enQuad && ch <= CharacterCodes.zeroWidthSpace || ch === CharacterCodes.narrowNoBreakSpace || ch === CharacterCodes.mathematicalSpace || ch === CharacterCodes.ideographicSpace || ch === CharacterCodes.byteOrderMark;
}
function isLineBreak(ch) {
  return ch === CharacterCodes.lineFeed || ch === CharacterCodes.carriageReturn || ch === CharacterCodes.lineSeparator || ch === CharacterCodes.paragraphSeparator;
}
function tagNameNodesWithoutErrorsMatch(name1, name2, getText) {
  var _a, _b;
  const children1 = ((_a = name1.children) == null ? void 0 : _a.filter((c) => c.kind !== SyntaxKind.ErrorNode)) ?? [];
  const children2 = ((_b = name2.children) == null ? void 0 : _b.filter((c) => c.kind !== SyntaxKind.ErrorNode)) ?? [];
  if (children1.length !== children2.length) {
    return false;
  }
  for (let i = 0; i < children1.length; ++i) {
    if (getText(children1[i]) !== getText(children2[i])) {
      return false;
    }
  }
  return true;
}
const MakeErr = {
  uppercaseAttr: function(attrName) {
    return {
      category: DiagnosticCategory.Error,
      code: ErrCodes.uppercaseAttr,
      message: `Attribute name '${attrName}' cannot start with an uppercase letter.`
    };
  },
  duplAttr: function(attrName) {
    return {
      category: DiagnosticCategory.Error,
      code: ErrCodes.duplAttr,
      message: `Duplicated attribute: '${attrName}'.`
    };
  },
  tagNameMismatch: function(openTagName, closeTagName) {
    return {
      category: DiagnosticCategory.Error,
      code: ErrCodes.tagNameMismatch,
      message: `Opening and closing tag names should match. Opening tag has a name '${openTagName}', but the closing tag name is '${closeTagName}'.`
    };
  },
  invalidChar: function(char) {
    return {
      category: DiagnosticCategory.Error,
      code: ErrCodes.invalidChar,
      message: `Invalid character '${char}'.`
    };
  }
};
function createXmlUiParser(source) {
  return {
    parse: () => parseXmlUiMarkup(source),
    getText: (n, ignoreTrivia = true) => source.substring(ignoreTrivia ? n.pos ?? n.start ?? 0 : n.start ?? n.pos ?? 0, n.end)
  };
}
function parseXmlUiMarkup(text2) {
  const errors = [];
  const parents2 = [];
  let peekedToken;
  let node = { children: [] };
  let errFromScanner = void 0;
  const onScannerErr = function(message, length) {
    errFromScanner = {
      message,
      prefixLength: length
    };
  };
  const scanner = createScanner(false, text2, onScannerErr);
  function getText(n, ignoreTrivia = true) {
    return text2.substring(ignoreTrivia ? n.pos : n.start, n.end);
  }
  function parseContent() {
    startNode();
    loop: while (true) {
      const token = peekInContent();
      switch (token.kind) {
        case SyntaxKind.TextNode:
        case SyntaxKind.StringLiteral:
          bump(token.kind);
          break;
        case SyntaxKind.CloseNodeStart:
          break loop;
        case SyntaxKind.EndOfFileToken:
          break loop;
        default:
          parseTagLike();
          break;
      }
    }
    if (node.children && node.children.length > 0) {
      completeNode(SyntaxKind.ContentListNode);
    } else {
      abandonNode();
    }
  }
  function parseSourceContent() {
    while (true) {
      const token = peekInContent();
      switch (token.kind) {
        case SyntaxKind.EndOfFileToken:
          bumpAny();
          return;
        default:
          parseTagLike();
          break;
      }
    }
  }
  function parseTagLike() {
    if (!eat(SyntaxKind.CData) && !eat(SyntaxKind.Script)) {
      if (at(SyntaxKind.OpenNodeStart)) {
        parseTag();
      } else {
        errorAndBump(Diag_OpenNodeStart_Token_Expected);
      }
    }
  }
  function parseTag() {
    startNode();
    bump(SyntaxKind.OpenNodeStart);
    let openTagName = void 0;
    if (at(SyntaxKind.Identifier)) {
      openTagName = parseTagName();
    } else {
      error2(Diag_Tag_Identifier_Expected);
    }
    parseAttrList();
    if (eat(SyntaxKind.NodeClose)) {
      completeNode(SyntaxKind.ElementNode);
      return;
    } else if (eat(SyntaxKind.NodeEnd)) {
      parseContent();
      if (eat(SyntaxKind.CloseNodeStart)) {
        if (at(SyntaxKind.Identifier)) {
          const closeTagName = parseTagName();
          const namesMismatch = openTagName !== void 0 && !tagNameNodesWithoutErrorsMatch(openTagName, closeTagName, getText);
          if (namesMismatch) {
            error2(MakeErr.tagNameMismatch(getText(openTagName), getText(closeTagName)));
          }
        } else {
          errRecover(Diag_Tag_Identifier_Expected, [SyntaxKind.NodeEnd]);
        }
        if (!eat(SyntaxKind.NodeEnd)) {
          error2(Diag_End_Token_Expected);
        }
      } else {
        error2(Diag_CloseNodeStart_Token_Expected);
      }
      completeNode(SyntaxKind.ElementNode);
      return;
    } else {
      error2(Diag_End_Or_Close_Token_Expected);
    }
  }
  function parseTagName() {
    startNode();
    bump(SyntaxKind.Identifier);
    if (eat(SyntaxKind.Colon)) {
      if (!eat(SyntaxKind.Identifier)) ;
    }
    return completeNode(SyntaxKind.TagNameNode);
  }
  function parseAttrList() {
    startNode();
    const attrNames = [];
    while (!atAnyOf([SyntaxKind.EndOfFileToken, SyntaxKind.NodeEnd, SyntaxKind.NodeClose])) {
      parseAttr(attrNames);
    }
    if (node.children.length === 0) {
      abandonNode();
    } else {
      completeNode(SyntaxKind.AttributeListNode);
    }
  }
  function parseAttr(attrNames) {
    startNode();
    if (at(SyntaxKind.Identifier)) {
      parseAttrName(attrNames);
    } else {
      const attrNameFollow = [SyntaxKind.Equal];
      const eqFollows = errRecover(Diag_Attr_Identifier_Expected, attrNameFollow);
      if (!eqFollows) {
        return;
      }
    }
    if (eat(SyntaxKind.Equal)) {
      if (!eat(SyntaxKind.StringLiteral)) {
        const attrFollowWithoutIdent = [SyntaxKind.NodeEnd, SyntaxKind.NodeClose];
        errRecover(Diag_Attr_Value_Expected, attrFollowWithoutIdent);
      }
    }
    completeNode(SyntaxKind.AttributeNode);
  }
  function parseAttrName(attrNames) {
    const nameIdent = peek();
    let nsIdent = void 0;
    startNode();
    bump(SyntaxKind.Identifier);
    if (eat(SyntaxKind.Colon)) {
      if (at(SyntaxKind.Identifier)) {
        nsIdent = bump(SyntaxKind.Identifier);
      } else {
        errRecover(Diag_Attr_Identifier_Expected, [
          SyntaxKind.NodeClose,
          SyntaxKind.NodeEnd,
          SyntaxKind.Equal
        ]);
      }
    }
    checkAttrName(attrNames, { nsIdent, nameIdent });
    completeNode(SyntaxKind.AttributeKeyNode);
  }
  function checkAttrName(attrNames, { nameIdent, nsIdent }) {
    const attrName = getText(nameIdent);
    const attrNs = nsIdent === void 0 ? void 0 : getText(nsIdent);
    const attrKeyMatches = ({ ns, name }) => name === attrName && ns === attrNs;
    const isDuplicate = attrNames.findIndex(attrKeyMatches) !== -1;
    const nameStartsWithUppercase = "A" <= attrName[0] && attrName[0] <= "Z";
    const faultyName = isDuplicate || nameStartsWithUppercase;
    if (isDuplicate) {
      errorAt(MakeErr.duplAttr(attrName), nameIdent.pos, nameIdent.end);
    }
    if (nameStartsWithUppercase) {
      errorAt(MakeErr.uppercaseAttr(attrName), nameIdent.pos, nameIdent.end);
    }
    if (!faultyName) {
      attrNames.push({ name: attrName });
    }
  }
  function at(kindToCheck) {
    return peek().kind === kindToCheck;
  }
  function eat(kind) {
    const kindMatched = at(kind);
    if (kindMatched) {
      bumpAny();
    }
    return kindMatched;
  }
  function atAnyOf(kinds) {
    return kinds.includes(peek().kind);
  }
  function errRecover(errCodeAndMsg, recoveryTokens) {
    if (atAnyOf(recoveryTokens) || at(SyntaxKind.EndOfFileToken)) {
      error2(errCodeAndMsg);
      return true;
    }
    startNode();
    error2(errCodeAndMsg);
    bumpAny();
    completeNode(SyntaxKind.ErrorNode);
    return false;
  }
  function error2({ code: code2, message, category }) {
    const { pos, end: end2 } = peek();
    errors.push({
      category,
      code: code2,
      message,
      pos,
      end: end2
    });
  }
  function errorAt({ code: code2, message, category }, pos, end2) {
    errors.push({
      category,
      code: code2,
      message,
      pos,
      end: end2
    });
  }
  function peek(inContent = false) {
    if (peekedToken !== void 0) {
      return peekedToken;
    }
    peekedToken = collectToken(inContent);
    return peekedToken;
  }
  function peekInContent() {
    const token = peek(true);
    if (token.kind === SyntaxKind.EndOfFileToken || token.kind === SyntaxKind.OpenNodeStart || token.kind === SyntaxKind.Script || token.kind === SyntaxKind.CData || token.kind === SyntaxKind.CloseNodeStart) {
      return token;
    }
    const trivia = token.triviaBefore;
    const triviaLength = (trivia == null ? void 0 : trivia.length) ?? 0;
    let i = 0;
    let leadingComments = [];
    let firstNonCommentTriviaIdx = -1;
    for (; i < triviaLength; ++i) {
      if (trivia[i].kind === SyntaxKind.CommentTrivia) {
        leadingComments.push(trivia[i]);
      } else {
        firstNonCommentTriviaIdx = i;
        break;
      }
    }
    let secondCommentGroupStartIdx = -1;
    for (; i < triviaLength; ++i) {
      if (trivia[i].kind === SyntaxKind.CommentTrivia) {
        secondCommentGroupStartIdx = i;
        break;
      }
    }
    let parseAsStringLiteral = false;
    if (token.kind === SyntaxKind.StringLiteral) {
      const beforeLookahead = token.end;
      const nextToken = collectToken(true);
      parseAsStringLiteral = nextToken.kind === SyntaxKind.CData || nextToken.kind === SyntaxKind.CloseNodeStart || nextToken.kind === SyntaxKind.Script || nextToken.kind === SyntaxKind.OpenNodeStart;
      scanner.resetTokenState(beforeLookahead);
    }
    let pos;
    if (parseAsStringLiteral) {
      pos = token.pos;
    } else if (leadingComments.length > 0) {
      pos = leadingComments[leadingComments.length - 1].end;
    } else if (firstNonCommentTriviaIdx !== -1) {
      pos = trivia[firstNonCommentTriviaIdx].pos;
    } else {
      pos = token.start;
    }
    let start2 = pos;
    let triviaBefore = void 0;
    if (leadingComments.length > 0) {
      triviaBefore = leadingComments;
      start2 = leadingComments[0].pos;
    }
    let kind = SyntaxKind.TextNode;
    let end2 = -1;
    if (secondCommentGroupStartIdx !== -1) {
      end2 = trivia[secondCommentGroupStartIdx].pos;
      scanner.resetTokenState(end2);
    } else if (parseAsStringLiteral) {
      kind = SyntaxKind.StringLiteral;
      end2 = token.end;
    } else {
      while (true) {
        const nextChar = scanner.peekChar();
        if (nextChar === null || nextChar === CharacterCodes.lessThan) {
          break;
        }
        scanner.scanChar();
      }
      end2 = scanner.getTokenEnd();
    }
    peekedToken = { kind, start: start2, pos, end: end2, triviaBefore };
    return peekedToken;
  }
  function bump(kind) {
    const token = bumpAny();
    if (token.kind !== kind) {
      throw new Error(
        `expected ${getSyntaxKindStrRepr(kind)}, bumped a ${getSyntaxKindStrRepr(token.kind)}`
      );
    }
    return token;
  }
  function bumpAny() {
    if (peekedToken) {
      node.children.push(peekedToken);
      const bumpedToken = peekedToken;
      peekedToken = void 0;
      return bumpedToken;
    }
    const token = collectToken(false);
    node.children.push(token);
    return token;
  }
  function startNode() {
    parents2.push(node);
    node = {
      children: []
    };
  }
  function completeNode(type) {
    const completedNode2 = createNode(type, node.children);
    const parentNode = parents2[parents2.length - 1];
    parentNode.children.push(completedNode2);
    node = parentNode;
    parents2.pop();
    return completedNode2;
  }
  function collectToken(inContent) {
    let kind;
    let triviaCollected = [];
    let start2 = null;
    while (true) {
      kind = scanner.scan();
      if (start2 === null) {
        start2 = scanner.getTokenStart();
      }
      if (errFromScanner !== void 0) {
        let err;
        if (errFromScanner.message.code === ErrCodes.invalidChar) {
          err = MakeErr.invalidChar(scanner.getTokenText());
        } else {
          err = errFromScanner.message;
        }
        const pos = scanner.getTokenStart();
        const token = {
          kind,
          start: start2,
          pos,
          end: scanner.getTokenEnd(),
          triviaBefore: triviaCollected.length > 0 ? triviaCollected : void 0
        };
        triviaCollected = [];
        if (inContent && err.code === ErrCodes.invalidChar) {
          errFromScanner = void 0;
          return token;
        }
        const badPrefixEnd = pos + errFromScanner.prefixLength;
        token.end = badPrefixEnd;
        scanner.resetTokenState(badPrefixEnd);
        startNode();
        node.children.push(token);
        errorAt(err, pos, badPrefixEnd);
        completeNode(SyntaxKind.ErrorNode);
        errFromScanner = void 0;
        return collectToken(inContent);
      }
      switch (kind) {
        case SyntaxKind.CommentTrivia:
        case SyntaxKind.NewLineTrivia:
        case SyntaxKind.WhitespaceTrivia:
          triviaCollected.push({
            kind,
            start: start2,
            pos: scanner.getTokenStart(),
            end: scanner.getTokenEnd()
          });
          break;
        default:
          return {
            kind,
            start: start2,
            pos: scanner.getTokenStart(),
            end: scanner.getTokenEnd(),
            triviaBefore: triviaCollected.length > 0 ? triviaCollected : void 0
          };
      }
    }
  }
  function errorAndBump(errCodeAndMsg) {
    errRecover(errCodeAndMsg, []);
  }
  function abandonNode() {
    const parentNode = parents2[parents2.length - 1];
    parentNode.children.push(...node.children);
    node = parentNode;
    parents2.pop();
  }
  parseSourceContent();
  const completedNode = createNode(SyntaxKind.ContentListNode, node.children);
  return { node: completedNode, errors };
}
function createNode(kind, children) {
  const firstChild = children[0];
  const lastChild = children[children.length - 1];
  return {
    kind,
    start: firstChild.start,
    pos: firstChild.pos,
    end: lastChild.end,
    children
  };
}
function isModuleErrors(result) {
  return result.type !== "ScriptModule";
}
function parseScriptModule(moduleName, source) {
  const parsedModules = /* @__PURE__ */ new Map();
  const moduleErrors = {};
  const parsedModule = doParseModule(moduleName, source);
  return !parsedModule || Object.keys(moduleErrors).length > 0 ? moduleErrors : parsedModule;
  function doParseModule(moduleName2, source2) {
    if (parsedModules.has(moduleName2)) {
      return parsedModules.get(moduleName2);
    }
    const parser = new Parser(source2);
    let statements = [];
    try {
      statements = parser.parseStatements();
    } catch (error2) {
      moduleErrors[moduleName2] = parser.errors;
      return null;
    }
    const lastToken = parser.current;
    if (lastToken.type !== TokenType.Eof) {
      moduleErrors[moduleName2] ?? (moduleErrors[moduleName2] = []);
      moduleErrors[moduleName2].push({
        code: "W002",
        text: errorMessages$1["W002"].replace(/\{(\d+)}/g, () => lastToken.text),
        position: lastToken.startLine,
        line: lastToken.startLine,
        column: lastToken.startColumn
      });
      return null;
    }
    const errors = [];
    const functions = {};
    statements.filter((stmt) => stmt.type === T_FUNCTION_DECLARATION).forEach((stmt) => {
      const func = stmt;
      if (functions[func.id.name]) {
        addErrorMessage("W020", stmt, func.id.name);
        return;
      }
      functions[func.id.name] = func;
    });
    const parsedModule2 = {
      type: "ScriptModule",
      name: moduleName2,
      functions,
      statements,
      sources: /* @__PURE__ */ new Map()
    };
    parsedModules.set(moduleName2, parsedModule2);
    if (errors.length > 0) {
      moduleErrors[moduleName2] = errors;
      return null;
    }
    return parsedModule2;
    function addErrorMessage(code2, stmt, ...args) {
      var _a, _b, _c;
      let errorText = errorMessages$1[code2];
      if (args) {
        args.forEach(
          (o, idx) => errorText = errorText.replaceAll(`{${idx}}`, args[idx].toString())
        );
      }
      errors.push({
        code: code2,
        text: errorMessages$1[code2].replace(/\{(\d+)}/g, (_, index) => args[index]),
        position: (_a = stmt.startToken) == null ? void 0 : _a.startPosition,
        line: (_b = stmt.startToken) == null ? void 0 : _b.startLine,
        column: (_c = stmt.startToken) == null ? void 0 : _c.startColumn
      });
    }
  }
}
const PARSED_MARK_PROP = "__PARSED__";
function collectCodeBehindFromSource(moduleName, source) {
  const result = {
    vars: {},
    moduleErrors: {},
    functions: {}
  };
  const collectedFunctions = {};
  const parsedModule = parseScriptModule(moduleName, source);
  if (isModuleErrors(parsedModule)) {
    return { ...result, moduleErrors: parsedModule };
  }
  parsedModule.statements.forEach((stmt) => {
    switch (stmt.type) {
      case T_VAR_STATEMENT:
        stmt.decls.forEach((decl) => {
          if (decl.id.name in result.vars) {
            throw new Error(`Duplicated var declaration: '${decl.id.name}'`);
          }
          result.vars[decl.id.name] = {
            [PARSED_MARK_PROP]: true,
            tree: decl.expr
          };
        });
        break;
      case T_FUNCTION_DECLARATION:
        addFunctionDeclaration(stmt);
        break;
      default:
        throw new Error(`Only reactive variable and function definitions are allowed in a code-behind module.`);
    }
  });
  return result;
  function addFunctionDeclaration(stmt) {
    if ((collectedFunctions == null ? void 0 : collectedFunctions[stmt.id.name]) !== void 0) {
      return;
    }
    if (stmt.id.name in result.functions) {
      throw new Error(`Duplicated function declaration: '${stmt.id.name}'`);
    }
    const arrow = {
      type: T_ARROW_EXPRESSION,
      args: stmt.args.slice(),
      statement: stmt.stmt
      // closureContext: obtainClosures({
      //   childThreads: [],
      //   blocks: [{ vars: {} }],
      //   loops: [],
      //   breakLabelValue: -1,
      // }),
    };
    collectedFunctions[stmt.id.name] = {
      [PARSED_MARK_PROP]: true,
      tree: arrow
    };
    result.functions[stmt.id.name] = {
      [PARSED_MARK_PROP]: true,
      tree: arrow
    };
  }
}
class ParserError2 extends Error {
  constructor(message, code2) {
    super(`${code2 ? `${code2}: ` : ""}${message}`);
    this.code = code2;
    Object.setPrototypeOf(this, ParserError2.prototype);
  }
}
const errorMessages = {
  U001: "Unexpected token: {0}.",
  U002: "A component definition can have exactly one XMLUI element.",
  U003: "A '<' token expected.",
  U004: "A node identifier expected.",
  U005: "A '</' token expected.",
  U006: "A '>' or '/>' token expected.",
  U007: "An '{0}' ID expected in the closing tag but '{1}' received.",
  U008: "A '>' token expected.",
  U009: "An attribute identifier expected.",
  U010: "An '=' token expected.",
  U011: "An attribute value expected.",
  U012: "Duplicated attribute: '{0}'.",
  U013: "Attribute name cannot start with an uppercase letter.",
  U014: "An '{0}' ID expected in the closing tag's namespace but '{1}' received.",
  U015: "Unexpected token in text element: {0}.",
  T001: "A component definition must have exactly one XMLUI element.",
  T002: "A component definition's name must start with an uppercase letter.",
  T003: "A reusable component must have a non-empty name.",
  T004: "A reusable component's name must start with an uppercase letter.",
  T005: "A reusable component must have at least one nested component definition.",
  T006: "A reusable component definition cannot nest another one.",
  T007: `Invalid attribute name: '{0}'`,
  T008: `Event attribute names should not start with 'on' prefix: '{0}'`,
  T009: `Invalid node name '{0}' in a component definition`,
  T010: `The '{0}' element does not accept a text child`,
  T011: "Only 'name', 'value', and type hint attributes are accepted in '{0}'.",
  T012: "The 'name' attribute in '{0}' is required.",
  T013: "A loader element must have an id.",
  T014: "A loader element must not have '{0}'.",
  T015: "The uses element must define only a non-empty 'value' attribute.",
  T016: "Only 'field' or 'item' are accepted as a child element.",
  T017: "Cannot mix 'field' and 'item' nodes within an element.",
  T018: "The '{0}' node cannot have a 'name' attribute.",
  T019: "The 'value' attribute in '{0}' is required.",
  T020: "Cannot mix nested components and non-component children.",
  T021: "Invalid reusable component attribute '{0}'.",
  T022: "The 'script' tag must not have any attribute.",
  T023: "A 'script' tag cannot nest other child nodes, only text.",
  T024: "Cannot put a reusable component definitions into a slot.",
  T025: "Duplicate xmlns found: '{0}'.",
  T026: "The top level component's name cannot have a namespace.",
  T027: "Cannot resolve namespace '{0}'. It was not defined in any of the ancestor components.",
  T028: "Incorrect namespace value '{0}'. {1}",
  T029: "Incorrect scheme specified before ':' (colon) in namespace {0}. Delete it to get the default '{1}'."
};
const COMPOUND_COMP_ID = "Component";
const UCRegex = /^[A-Z]/;
const onPrefixRegex = /^on[A-Z]/;
const propAttrs = ["name", "value"];
const CDATA_PREFIX_LEN = 9;
const COMPONENT_NAMESPACE_SCHEME = "component-ns";
const APP_NS_KEY = "app-ns";
const APP_NS_VALUE = "#app-ns";
const CORE_NS_KEY = "core-ns";
const CORE_NAMESPACE_VALUE = "#xmlui-core-ns";
const HelperNode = {
  property: "property",
  event: "event",
  variable: "variable",
  loaders: "loaders",
  uses: "uses",
  method: "method",
  item: "item",
  field: "field"
};
let lastParseId = 0;
function nodeToComponentDef(node, originalGetText, fileId) {
  const getText = (node2) => {
    return node2.text ?? originalGetText(node2);
  };
  const element = getTopLvlElement(node);
  const preppedElement = prepNode(element);
  const usesStack = [];
  const namespaceStack = [];
  return transformTopLvlElement(usesStack, preppedElement);
  function transformTopLvlElement(usesStack2, node2) {
    const name = getNamespaceResolvedComponentName(node2, getText, namespaceStack);
    if (name === COMPOUND_COMP_ID) {
      return collectCompoundComponent(node2);
    }
    let component = {
      type: name,
      debug: {
        source: {
          start: node2.start,
          end: node2.end,
          fileId
        }
      }
    };
    collectTraits(usesStack2, component, node2);
    return component;
  }
  function transformInnerElement(usesStack2, node2) {
    const name = getNamespaceResolvedComponentName(node2, getText, namespaceStack);
    if (name === COMPOUND_COMP_ID) {
      reportError$1("T006");
    }
    let component = {
      type: name,
      debug: {
        source: {
          start: node2.start,
          end: node2.end,
          fileId
        }
      }
    };
    collectTraits(usesStack2, component, node2);
    return component;
  }
  function collectCompoundComponent(node2) {
    const attrs = getAttributes(node2).map(segmentAttr);
    const compoundName = attrs.find((attr) => attr.name === "name");
    if (!compoundName) {
      reportError$1("T003");
    }
    if (!UCRegex.test(compoundName.value)) {
      reportError$1("T004");
    }
    let api;
    const apiAttrs = attrs.filter((attr) => attr.startSegment === "method");
    if (apiAttrs.length > 0) {
      api = {};
      apiAttrs.forEach((attr) => {
        api[attr.name] = attr.value;
      });
    }
    let vars;
    const varsAttrs = attrs.filter((attr) => attr.startSegment === "var");
    if (varsAttrs.length > 0) {
      vars = {};
      varsAttrs.forEach((attr) => {
        vars[attr.name] = attr.value;
      });
    }
    const children = getChildNodes(node2);
    const nestedComponents = children.filter(
      (child) => child.kind === SyntaxKind.ElementNode && !(getComponentName(child, getText) in HelperNode)
    );
    if (nestedComponents.length === 0) {
      nestedComponents.push(createTextNodeElement(""));
    }
    const nonVarHelperNodes = [];
    const nestedVars = [];
    for (let child of children) {
      if (child.kind === SyntaxKind.ElementNode) {
        const childName = getComponentName(child, getText);
        if (childName === HelperNode.variable) {
          nestedVars.push(child);
        } else if (childName in HelperNode) {
          nonVarHelperNodes.push(child);
        }
      }
    }
    let element2;
    if (nestedComponents.length > 1 || nestedVars.length > 0) {
      element2 = wrapWithFragment([...nestedVars, ...nestedComponents]);
    } else {
      element2 = nestedComponents[0];
    }
    namespaceStack.push(/* @__PURE__ */ new Map());
    attrs.filter((attr) => attr.namespace === "xmlns").forEach((attr) => {
      addToNamespaces(namespaceStack, element2, attr.unsegmentedName, attr.value);
    });
    let nestedComponent = transformInnerElement(usesStack, element2);
    namespaceStack.pop();
    const component = {
      name: compoundName.value,
      component: nestedComponent,
      debug: {
        source: {
          start: node2.start,
          end: node2.end,
          fileId
        }
      }
    };
    if (api) {
      component.api = api;
    }
    if (vars) {
      nestedComponent.vars = { ...nestedComponent.vars, ...vars };
    }
    nestedComponent.debug = {
      source: {
        start: element2.start,
        end: element2.end,
        fileId
      }
    };
    const nodeClone = withNewChildNodes(node2, nonVarHelperNodes);
    collectTraits(usesStack, component, nodeClone);
    return component;
  }
  function collectTraits(usesStack2, comp, element2) {
    var _a;
    const isCompound = !isComponent(comp);
    const attributes = getAttributes(element2);
    namespaceStack.push(/* @__PURE__ */ new Map());
    attributes.forEach((attr) => {
      collectAttribute(comp, attr);
    });
    const childNodes = getChildNodes(element2);
    childNodes.forEach((child) => {
      if (child.kind === SyntaxKind.Script) {
        if (getAttributes(child).length > 0) {
          reportError$1("T022");
        }
        const scriptText = getText(child);
        const scriptContent = scriptText.slice(
          scriptText.indexOf(">") + 1,
          scriptText.lastIndexOf("</")
        );
        comp.script ?? (comp.script = "");
        if (comp.script.length > 0) {
          comp.script += "\n";
        }
        comp.script += scriptContent;
        return;
      }
      if (child.kind === SyntaxKind.TextNode && !isCompound) {
        comp.children = mergeValue(comp.children, getText(child));
        return;
      }
      const childName = getComponentName(child, getText);
      if (isCompound && child.kind === SyntaxKind.ElementNode && !(childName in HelperNode)) {
        return;
      }
      if (!(childName in HelperNode) && !isCompound) {
        const childComponent = transformInnerElement(usesStack2, child);
        if (childComponent) {
          if (!comp.children) {
            comp.children = [childComponent];
          } else {
            if (typeof comp.children === "string") {
              comp.children = [comp.children, childComponent];
            } else if (Array.isArray(comp.children)) {
              comp.children.push(childComponent);
            }
          }
        }
        return;
      }
      switch (childName) {
        case "property":
          collectElementHelper(
            usesStack2,
            comp,
            child,
            (name) => {
              var _a2;
              return isComponent(comp) ? (_a2 = comp.props) == null ? void 0 : _a2[name] : void 0;
            },
            (name, value) => {
              if (!isComponent(comp)) return;
              comp.props ?? (comp.props = {});
              comp.props[name] = value;
            }
          );
          return;
        case "event":
          collectElementHelper(
            usesStack2,
            comp,
            child,
            (name) => {
              var _a2;
              return isComponent(comp) ? (_a2 = comp.events) == null ? void 0 : _a2[name] : void 0;
            },
            (name, value) => {
              if (!isComponent(comp)) return;
              comp.events ?? (comp.events = {});
              comp.events[name] = parseEvent(value);
            },
            (name) => {
              if (onPrefixRegex.test(name)) {
                reportError$1("T008", name);
              }
            }
          );
          return;
        case HelperNode.variable:
          collectElementHelper(
            usesStack2,
            comp,
            child,
            (name) => {
              var _a2;
              return isComponent(comp) ? (_a2 = comp.vars) == null ? void 0 : _a2[name] : void 0;
            },
            (name, value) => {
              if (!isComponent(comp)) return;
              comp.vars ?? (comp.vars = {});
              comp.vars[name] = value;
            }
          );
          return;
        case "loaders":
          collectLoadersElements(usesStack2, comp, child);
          return;
        case "uses":
          collectUsesElements(comp, child);
          return;
        case "method":
          collectElementHelper(
            usesStack2,
            comp,
            child,
            (name) => {
              var _a2;
              return isComponent(comp) ? (_a2 = comp.api) == null ? void 0 : _a2[name] : void 0;
            },
            (name, value) => {
              comp.api ?? (comp.api = {});
              comp.api[name] = value;
            }
          );
          return;
        default:
          reportError$1("T009", childName);
          return;
      }
    });
    namespaceStack.pop();
    if (!comp.script || comp.script.trim().length === 0) {
      return;
    }
    const parser = new Parser(comp.script);
    try {
      parser.parseStatements();
      comp.scriptCollected = collectCodeBehindFromSource("Main", comp.script);
    } catch (err) {
      if (parser.errors && parser.errors.length > 0) {
        comp.scriptError = parser.errors;
      } else {
        comp.scriptError = err;
      }
    }
    const moduleErrors = ((_a = comp.scriptCollected) == null ? void 0 : _a.moduleErrors) ?? {};
    if (Object.keys(moduleErrors).length > 0) {
      comp.scriptError = moduleErrors;
    }
  }
  function collectAttribute(comp, attr) {
    const { namespace, startSegment, name, value, unsegmentedName: nsKey } = segmentAttr(attr);
    if (namespace === "xmlns") {
      return addToNamespaces(namespaceStack, comp, nsKey, value);
    }
    const isCompound = !isComponent(comp);
    if (isCompound) {
      if (startSegment && startSegment !== "method" && startSegment !== "var") {
        reportError$1("T021");
        return;
      }
      if (name === "name" && !startSegment) {
        return;
      }
      if (!startSegment && name) {
        reportError$1("T021", name);
      }
      return;
    }
    switch (name) {
      case "id":
        comp.uid = value;
        return;
      case "testId":
        comp.testId = value;
        return;
      case "when":
        comp.when = value;
        return;
      default:
        if (startSegment === "var") {
          comp.vars ?? (comp.vars = {});
          comp.vars[name] = value;
        } else if (startSegment === "method") {
          comp.api ?? (comp.api = {});
          comp.api[name] = value;
        } else if (startSegment === "event") {
          comp.events ?? (comp.events = {});
          comp.events[name] = parseEvent(value);
        } else if (onPrefixRegex.test(name)) {
          comp.events ?? (comp.events = {});
          const eventName = name[2].toLowerCase() + name.substring(3);
          comp.events[eventName] = parseEvent(value);
        } else {
          comp.props ?? (comp.props = {});
          comp.props[name] = value;
        }
        return;
    }
  }
  function collectObjectOrArray(usesStack2, children) {
    let result = null;
    if (!children) return result;
    let nestedElementType = null;
    children.forEach((child) => {
      if (child.kind === SyntaxKind.TextNode) {
        result = mergeValue(result, getText(child));
        return;
      }
      if (child.kind !== SyntaxKind.ElementNode) return;
      const childName = getComponentName(child, getText);
      if (childName !== "field" && childName !== "item") {
        reportError$1("T016");
        return;
      }
      if (childName === "field") {
        if (!nestedElementType) {
          nestedElementType = childName;
          result = {};
        } else if (nestedElementType !== childName) {
          reportError$1("T017");
          return;
        }
      } else if (childName === "item") {
        if (!nestedElementType) {
          nestedElementType = childName;
          result = [];
        } else if (nestedElementType !== childName) {
          reportError$1("T017");
          return;
        }
      }
      let valueInfo = collectValue(usesStack2, child, childName === "field");
      if (!valueInfo) {
        return null;
      }
      if (nestedElementType === "field") {
        result[valueInfo.name] = valueInfo.value;
      } else {
        result.push(valueInfo.value);
      }
    });
    return result;
  }
  function collectValue(usesStack2, element2, allowName = true) {
    const elementName = getComponentName(element2, getText);
    const childNodes = getChildNodes(element2);
    const nestedComponents = childNodes.filter(
      (c) => c.kind === SyntaxKind.ElementNode && UCRegex.test(getComponentName(c, getText))
    );
    const nestedElements = childNodes.filter(
      (c) => c.kind === SyntaxKind.ElementNode && !UCRegex.test(getComponentName(c, getText))
    );
    const attributes = getAttributes(element2).map(segmentAttr);
    const attrProps = attributes.filter((attr) => propAttrs.indexOf(attr.name) >= 0);
    if (attributes.length > attrProps.length) {
      reportError$1("T011", elementName);
      return null;
    }
    const nameAttr = attrProps.find((attr) => attr.name === "name");
    if (allowName) {
      if (!(nameAttr == null ? void 0 : nameAttr.value)) {
        reportError$1("T012", elementName);
        return null;
      }
    } else {
      if (nameAttr) {
        reportError$1("T018", elementName);
        return null;
      }
    }
    const name = nameAttr == null ? void 0 : nameAttr.value;
    const valueAttr = attrProps.find((attr) => attr.name === "value");
    if (valueAttr && valueAttr.value === void 0) {
      reportError$1("T019", elementName);
      return null;
    }
    if (name && nestedComponents.length >= 1) {
      if (nestedElements.length > 0) {
        reportError$1("T020");
        return null;
      }
      const nestedComps = nestedComponents.map((nc) => transformInnerElement(usesStack2, nc));
      return {
        name,
        value: nestedComps.length === 1 ? nestedComps[0] : nestedComps
      };
    }
    let value = valueAttr == null ? void 0 : valueAttr.value;
    if (value === null) {
      return null;
    }
    if (typeof value === "string") {
      return { name, value };
    }
    return { name, value: collectObjectOrArray(usesStack2, childNodes) };
  }
  function collectLoadersElements(usesStack2, comp, loaders) {
    var _a;
    if (!isComponent(comp)) {
      reportError$1("T009", "loaders");
      return;
    }
    const children = getChildNodes(loaders);
    if (children.length === 0) {
      comp.loaders ?? (comp.loaders = []);
    }
    const hasAttribute = (_a = loaders.children) == null ? void 0 : _a.some((c) => c.kind === SyntaxKind.AttributeListNode);
    if (hasAttribute) {
      reportError$1("T014", "attributes");
      return;
    }
    children.forEach((loader) => {
      if (loader.kind === SyntaxKind.TextNode) {
        reportError$1("T010", "loader");
        return;
      }
      const loaderDef = transformInnerElement(usesStack2, loader);
      if (!loaderDef.uid) {
        reportError$1("T013");
        return;
      }
      if (loaderDef.vars) {
        reportError$1("T014", "vars");
        return;
      }
      if (loaderDef.loaders) {
        reportError$1("T014", "loaders");
        return;
      }
      if (loaderDef.uses) {
        reportError$1("T014", "uses");
        return;
      }
      comp.loaders ?? (comp.loaders = []);
      comp.loaders.push(loaderDef);
    });
  }
  function collectElementHelper(usesStack2, comp, child, getter, setter, nameValidator) {
    const valueInfo = collectValue(usesStack2, child);
    if (!valueInfo) {
      return;
    }
    nameValidator == null ? void 0 : nameValidator((valueInfo == null ? void 0 : valueInfo.name) ?? "");
    const name = valueInfo.name;
    const value = valueInfo.value;
    if ((valueInfo == null ? void 0 : valueInfo.value) !== void 0) {
      setter(name, mergeValue(getter(name), value));
    } else {
      const children = getChildNodes(child);
      const itemValue = collectObjectOrArray(usesStack2, children);
      let updatedValue = getter(name);
      updatedValue = mergeValue(updatedValue, itemValue);
      setter(name, updatedValue);
    }
  }
  function collectUsesElements(comp, uses) {
    if (!isComponent(comp)) {
      reportError$1("T009", "uses");
      return;
    }
    const attributes = getAttributes(uses).map(segmentAttr);
    const valueAttr = attributes.find((attr) => attr.name === "value");
    if (!(valueAttr == null ? void 0 : valueAttr.value) || attributes.length !== 1) {
      reportError$1("T015", "uses");
      return;
    }
    comp.uses ?? (comp.uses = valueAttr.value.split(",").map((v) => v.trim()));
  }
  function segmentAttr(attr) {
    let key = attr.children[0];
    const hasNamespace = key.children.length === 3;
    let namespace;
    if (hasNamespace) {
      namespace = getText(key.children[0]);
    }
    let unsegmentedName = getText(key.children[key.children.length - 1]);
    const segments = unsegmentedName.split(".");
    if (segments.length > 2) {
      reportError$1("T007", attr, key);
    }
    let name;
    let startSegment;
    if (segments.length === 2) {
      startSegment = segments[0];
      name = segments[1];
      if (name.trim() === "") {
        reportError$1("T007", attr, name);
      }
    } else {
      name = unsegmentedName;
    }
    const valueText = getText(attr.children[2]);
    const value = valueText.substring(1, valueText.length - 1);
    return { namespace, startSegment, name, value, unsegmentedName };
  }
  function parseEscapeCharactersInAttrValues(attrs) {
    for (let attr of attrs) {
      const attrValue = attr.children[attr.children.length - 1];
      const escapedText = tryEscapeEntities(getText(attrValue));
      if (escapedText !== null) {
        attrValue.text = escapedText;
      }
    }
  }
  function prepNode(node2) {
    const childNodes = getChildNodes(node2);
    const tagName = getComponentName(node2, getText);
    const hasComponentName = !(tagName in HelperNode);
    const shouldUseTextNodeElement = hasComponentName || tagName === "property";
    const shouldCollapseWhitespace = tagName !== "event" && tagName !== "method";
    const attrs = getAttributes(node2);
    desugarKeyOnlyAttrs(attrs);
    parseEscapeCharactersInAttrValues(attrs);
    parseEscapeCharactersInContent(childNodes);
    mergeConsecutiveTexts(childNodes, shouldCollapseWhitespace);
    let shouldUseCData = false;
    let hasScriptChild = false;
    for (let i = 0; i < childNodes.length; ++i) {
      const child = childNodes[i];
      let newChild;
      if (child.kind == SyntaxKind.Script) {
        hasScriptChild = true;
        continue;
      }
      if (child.kind === SyntaxKind.ElementNode) {
        newChild = prepNode(child);
        childNodes[i] = newChild;
        continue;
      }
      let textValue = getText(child);
      if (child.kind === SyntaxKind.StringLiteral) {
        textValue = textValue.slice(1, -1);
      } else if (child.kind === SyntaxKind.CData) {
        shouldUseCData = true;
      } else ;
      if (shouldUseTextNodeElement) {
        if (shouldUseCData) {
          newChild = createTextNodeCDataElement(textValue);
        } else {
          newChild = createTextNodeElement(textValue);
        }
      } else {
        newChild = {
          kind: SyntaxKind.TextNode,
          text: textValue
        };
      }
      childNodes[i] = newChild;
    }
    const helperNodes = [];
    const otherNodes = [];
    let hasComponentChild = false;
    for (const child of childNodes) {
      if (child.kind === SyntaxKind.ElementNode) {
        let compName = getComponentName(child, getText) ?? void 0;
        if (compName in HelperNode) {
          helperNodes.push(child);
          continue;
        }
        hasComponentChild = true;
      }
      otherNodes.push(child);
    }
    if (hasScriptChild && hasComponentChild) {
      const fragment = wrapWithFragment(otherNodes);
      helperNodes.push(fragment);
      return withNewChildNodes(node2, helperNodes);
    }
    return node2;
  }
  function collapseWhitespace(childNodes) {
    for (let i = 0; i < childNodes.length; ++i) {
      if (childNodes[i].kind === SyntaxKind.StringLiteral || childNodes[i].kind === SyntaxKind.TextNode) {
        const allSubsequentWsExceptNonBreakingSpace = /[\f\n\r\t\v\u0020\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/g;
        childNodes[i].text = getText(childNodes[i]).replace(
          allSubsequentWsExceptNonBreakingSpace,
          " "
        );
      }
    }
  }
  function stripCDataWrapper(childNodes) {
    for (let i = 0; i < childNodes.length; ++i) {
      if (childNodes[i].kind === SyntaxKind.CData) {
        childNodes[i].text = getText(childNodes[i]).slice(CDATA_PREFIX_LEN, -3);
      }
    }
  }
  function parseEscapeCharactersInContent(childNodes) {
    for (let node2 of childNodes) {
      if (node2.kind === SyntaxKind.StringLiteral || node2.kind === SyntaxKind.TextNode) {
        const escapedText = tryEscapeEntities(getText(node2));
        if (escapedText !== null) {
          node2.text = escapedText;
        }
      }
    }
  }
  function tryEscapeEntities(text2) {
    let newText = "";
    let startOfSubstr = 0;
    for (let i = 0; i < text2.length; ++i) {
      if (text2.charCodeAt(i) === CharacterCodes.ampersand) {
        switch (text2.charCodeAt(i + 1)) {
          case CharacterCodes.a:
            switch (text2.charCodeAt(i + 2)) {
              case CharacterCodes.m:
                if (text2.charCodeAt(i + 3) === CharacterCodes.p && text2.charCodeAt(i + 4) === CharacterCodes.semicolon) {
                  newText = newText + text2.substring(startOfSubstr, i) + "&";
                  i += 4;
                  startOfSubstr = i + 1;
                }
                break;
              case CharacterCodes.p:
                if (text2.charCodeAt(i + 3) === CharacterCodes.o && text2.charCodeAt(i + 4) === CharacterCodes.s && text2.charCodeAt(i + 5) === CharacterCodes.semicolon) {
                  newText = newText + text2.substring(startOfSubstr, i) + "'";
                  i += 5;
                  startOfSubstr = i + 1;
                }
                break;
            }
            break;
          case CharacterCodes.g:
            if (text2.charCodeAt(i + 2) === CharacterCodes.t && text2.charCodeAt(i + 3) === CharacterCodes.semicolon) {
              newText = newText + text2.substring(startOfSubstr, i) + ">";
              i += 3;
              startOfSubstr = i + 1;
            }
            break;
          case CharacterCodes.l:
            if (text2.charCodeAt(i + 2) === CharacterCodes.t && text2.charCodeAt(i + 3) === CharacterCodes.semicolon) {
              newText = newText + text2.substring(startOfSubstr, i) + "<";
              i += 3;
              startOfSubstr = i + 1;
            }
            break;
          case CharacterCodes.q:
            if (text2.charCodeAt(i + 2) === CharacterCodes.u && text2.charCodeAt(i + 3) === CharacterCodes.o && text2.charCodeAt(i + 4) === CharacterCodes.t && text2.charCodeAt(i + 5) === CharacterCodes.semicolon) {
              newText = newText + text2.substring(startOfSubstr, i) + '"';
              i += 5;
              startOfSubstr = i + 1;
            }
            break;
          case CharacterCodes.n:
            if (text2.charCodeAt(i + 2) === CharacterCodes.b && text2.charCodeAt(i + 3) === CharacterCodes.s && text2.charCodeAt(i + 4) === CharacterCodes.p && text2.charCodeAt(i + 5) === CharacterCodes.semicolon) {
              newText = newText + text2.substring(startOfSubstr, i) + " ";
              i += 5;
              startOfSubstr = i + 1;
            }
            break;
        }
      }
    }
    if (startOfSubstr === 0) {
      return null;
    }
    newText += text2.substring(startOfSubstr);
    return newText;
  }
  function mergeConsecutiveTexts(childNodes, shouldCollapseWs) {
    if (shouldCollapseWs) {
      collapseWhitespace(childNodes);
    }
    stripCDataWrapper(childNodes);
    for (let i = childNodes.length - 1; i > 0; --i) {
      const node2 = childNodes[i - 1];
      const nextNode = childNodes[i];
      if (node2.kind === SyntaxKind.StringLiteral && nextNode.kind === SyntaxKind.CData) {
        childNodes[i - 1] = {
          kind: SyntaxKind.CData,
          text: getText(node2).slice(1, -1) + getText(nextNode)
        };
        childNodes.pop();
      } else if (node2.kind === SyntaxKind.CData && nextNode.kind === SyntaxKind.StringLiteral) {
        childNodes[i - 1] = {
          kind: SyntaxKind.CData,
          text: getText(node2) + getText(nextNode).slice(1, -1)
        };
        childNodes.pop();
      } else if (node2.kind === SyntaxKind.CData && nextNode.kind === SyntaxKind.TextNode) {
        childNodes[i - 1] = {
          kind: SyntaxKind.CData,
          text: getText(node2) + getText(nextNode)
        };
        childNodes.pop();
      } else if (node2.kind === SyntaxKind.CData && nextNode.kind === SyntaxKind.CData) {
        childNodes[i - 1] = {
          kind: SyntaxKind.CData,
          text: getText(node2) + getText(nextNode)
        };
        childNodes.pop();
      } else if (node2.kind === SyntaxKind.TextNode && nextNode.kind === SyntaxKind.TextNode) {
        if (getText(node2).endsWith(" ") && getText(nextNode).startsWith(" ")) {
          node2.text = getText(node2).trimEnd();
        }
        childNodes[i - 1] = {
          kind: SyntaxKind.TextNode,
          text: getText(node2) + getText(nextNode)
        };
        childNodes.pop();
      } else if (node2.kind === SyntaxKind.TextNode && nextNode.kind === SyntaxKind.CData) {
        childNodes[i - 1] = {
          kind: SyntaxKind.CData,
          text: getText(node2) + getText(nextNode)
        };
        childNodes.pop();
      }
    }
  }
  function parseEvent(value) {
    if (typeof value !== "string") {
      return value;
    }
    const parser = new Parser(value);
    try {
      const statements = parser.parseStatements();
      return {
        __PARSED: true,
        statements,
        parseId: ++lastParseId,
        // TODO: retrieve the event source code only in dev mode
        source: value
      };
    } catch {
      if (parser.errors.length > 0) {
        const errMsg = parser.errors[0];
        throw new ParserError2(`${errMsg.text} [${errMsg.line}: ${errMsg.column}]`, errMsg.code);
      }
    }
  }
}
function createTextNodeCDataElement(textValue) {
  return {
    kind: SyntaxKind.ElementNode,
    children: [
      { kind: SyntaxKind.OpenNodeStart },
      {
        kind: SyntaxKind.TagNameNode,
        children: [{ kind: SyntaxKind.Identifier, text: "TextNodeCData" }]
      },
      {
        kind: SyntaxKind.AttributeListNode,
        children: [
          {
            kind: SyntaxKind.AttributeNode,
            children: [
              {
                kind: SyntaxKind.AttributeKeyNode,
                children: [{ kind: SyntaxKind.Identifier, text: "value" }]
              },
              { kind: SyntaxKind.Equal },
              { kind: SyntaxKind.Identifier, text: `"${textValue}"` }
            ]
          }
        ]
      },
      { kind: SyntaxKind.NodeClose }
    ]
  };
}
function createTextNodeElement(textValue) {
  return {
    kind: SyntaxKind.ElementNode,
    children: [
      { kind: SyntaxKind.OpenNodeStart },
      {
        kind: SyntaxKind.TagNameNode,
        children: [{ kind: SyntaxKind.Identifier, text: "TextNode" }]
      },
      {
        kind: SyntaxKind.AttributeListNode,
        children: [
          {
            kind: SyntaxKind.AttributeNode,
            children: [
              {
                kind: SyntaxKind.AttributeKeyNode,
                children: [{ kind: SyntaxKind.Identifier, text: "value" }]
              },
              { kind: SyntaxKind.Equal },
              { kind: SyntaxKind.Identifier, text: `"${textValue}"` }
            ]
          }
        ]
      },
      { kind: SyntaxKind.NodeClose }
    ]
  };
}
function reportError$1(errorCode, ...options2) {
  let errorText = errorMessages[errorCode] ?? "Unknown error";
  if (options2) {
    options2.forEach((o, idx) => errorText = replace(errorText, `{${idx}}`, o.toString()));
  }
  throw new ParserError2(errorText, errorCode);
  function replace(input2, placeholder2, replacement) {
    do {
      input2 = input2.replace(placeholder2, replacement);
    } while (input2.includes(placeholder2));
    return input2;
  }
}
function isComponent(obj) {
  return obj.type;
}
function mergeValue(oldValue, itemValue) {
  if (oldValue) {
    if (Array.isArray(oldValue)) {
      if (typeof oldValue === "string") {
        return [oldValue, itemValue];
      } else {
        oldValue.push(itemValue);
        return oldValue;
      }
    } else {
      return [oldValue, itemValue];
    }
  } else {
    return itemValue;
  }
}
function wrapWithFragment(wrappedChildren) {
  const nameNode = {
    kind: SyntaxKind.TagNameNode,
    children: [{ kind: SyntaxKind.Identifier, text: "Fragment" }]
  };
  return {
    kind: SyntaxKind.ElementNode,
    start: wrappedChildren[0].start,
    pos: wrappedChildren[0].pos,
    end: wrappedChildren[wrappedChildren.length - 1].end,
    children: [
      { kind: SyntaxKind.OpenNodeStart },
      nameNode,
      { kind: SyntaxKind.NodeEnd },
      { kind: SyntaxKind.ContentListNode, children: wrappedChildren },
      { kind: SyntaxKind.CloseNodeStart },
      nameNode,
      { kind: SyntaxKind.NodeEnd }
    ]
  };
}
function getAttributes(node) {
  var _a, _b;
  return ((_b = (_a = node.children) == null ? void 0 : _a.find((c) => c.kind === SyntaxKind.AttributeListNode)) == null ? void 0 : _b.children) ?? [];
}
function getChildNodes(node) {
  var _a, _b;
  return ((_b = (_a = node.children) == null ? void 0 : _a.find((c) => c.kind === SyntaxKind.ContentListNode)) == null ? void 0 : _b.children) ?? [];
}
function withNewChildNodes(node, newChildren) {
  var _a;
  const childrenListIdx = (_a = node.children) == null ? void 0 : _a.findIndex((c) => c.kind === SyntaxKind.ContentListNode);
  if (childrenListIdx === void 0 || childrenListIdx === -1) {
    return node;
  }
  return {
    ...node,
    children: [
      ...node.children.slice(0, childrenListIdx),
      { ...node.children[childrenListIdx], children: newChildren },
      ...node.children.slice(childrenListIdx)
    ]
  };
}
function desugarKeyOnlyAttrs(attrs) {
  var _a;
  for (let attr of attrs) {
    if (((_a = attr.children) == null ? void 0 : _a.length) === 1) {
      const eq = {
        kind: SyntaxKind.Equal
      };
      const value = {
        kind: SyntaxKind.StringLiteral,
        text: '"true"'
      };
      attr.children.push(eq, value);
    }
  }
}
function addToNamespaces(namespaceStack, comp, nsKey, value) {
  let nsCommaSeparated = value.split(":");
  if (nsCommaSeparated.length > 2) {
    return reportError$1("T028", value, "Namespace cannot contain multiple ':' (colon).");
  }
  let nsValue = value;
  if (nsCommaSeparated.length === 2) {
    if (nsCommaSeparated[0] != COMPONENT_NAMESPACE_SCHEME) {
      return reportError$1("T029", value, COMPONENT_NAMESPACE_SCHEME);
    }
    nsValue = nsCommaSeparated[1];
  }
  if (nsValue.includes("#")) {
    return reportError$1("T028", nsValue, "Namespace cannot contain character '#'.");
  }
  switch (nsValue) {
    case COMPONENT_NAMESPACE_SCHEME:
      nsValue = nsKey;
      break;
    case APP_NS_KEY:
      nsValue = APP_NS_VALUE;
      break;
    case CORE_NS_KEY:
      nsValue = CORE_NAMESPACE_VALUE;
      break;
  }
  const compNamespaces = namespaceStack[namespaceStack.length - 1];
  if (compNamespaces.has(nsKey)) {
    return reportError$1("T025", nsKey);
  }
  compNamespaces.set(nsKey, nsValue);
  comp.namespaces ?? (comp.namespaces = {});
  comp.namespaces[nsKey] = nsValue;
}
function getTopLvlElement(node, getText) {
  if (node.children.length !== 2) {
    reportError$1("T001");
  }
  const element = node.children[0];
  if (element.kind !== SyntaxKind.ElementNode) {
    reportError$1("T001");
  }
  return element;
}
function getComponentName(node, getText) {
  const nameTokens = node.children.find((c) => c.kind === SyntaxKind.TagNameNode).children;
  const name = getText(nameTokens.at(-1));
  return name;
}
function getNamespaceResolvedComponentName(node, getText, namespaceStack) {
  const nameTokens = node.children.find((c) => c.kind === SyntaxKind.TagNameNode).children;
  const name = getText(nameTokens.at(-1));
  if (nameTokens.length === 1) {
    return name;
  }
  const namespace = getText(nameTokens[0]);
  if (namespaceStack.length === 0) {
    reportError$1("T026");
  }
  let resolvedNamespace = void 0;
  for (let i = namespaceStack.length - 1; i >= 0; --i) {
    resolvedNamespace = namespaceStack[i].get(namespace);
    if (resolvedNamespace !== void 0) {
      break;
    }
  }
  if (resolvedNamespace === void 0) {
    reportError$1("T027", namespace);
  }
  return resolvedNamespace + "." + name;
}
function xmlUiMarkupToComponent(source, fileId = 0) {
  const { parse: parse2, getText } = createXmlUiParser(source);
  const { node, errors } = parse2();
  if (errors.length > 0) {
    const newlinePositions = [];
    for (let i = 0; i < source.length; ++i) {
      if (source[i] === "\n") {
        newlinePositions.push(i);
      }
    }
    const errorsWithLines = addPositions(errors, newlinePositions);
    const erroneousCompoundComponentName = getCompoundCompName(node, getText);
    return { component: null, errors: errorsWithLines, erroneousCompoundComponentName };
  }
  try {
    const component = nodeToComponentDef(node, getText, fileId);
    const transformResult = { component, errors: [] };
    return transformResult;
  } catch (e) {
    const erroneousCompoundComponentName = getCompoundCompName(node, getText);
    const singleErr = {
      message: e.message,
      col: 0,
      line: 0,
      code: ErrCodes.expEq,
      category: DiagnosticCategory.Error,
      pos: 0,
      end: 0
    };
    return {
      component: null,
      erroneousCompoundComponentName,
      errors: [singleErr]
    };
  }
}
function addPositions(errors, newlinePositions) {
  if (newlinePositions.length === 0) {
    for (let err of errors) {
      err.line = 1;
      err.col = err.pos + 1;
    }
    return errors;
  }
  for (let err of errors) {
    let i = 0;
    for (; i < newlinePositions.length; ++i) {
      const newlinePos = newlinePositions[i];
      if (err.pos < newlinePos) {
        err.line = i + 1;
        err.col = err.pos - (newlinePositions[i - 1] ?? 0) + 1;
        break;
      }
    }
    const lastNewlinePos = newlinePositions[newlinePositions.length - 1];
    if (err.pos >= lastNewlinePos) {
      err.line = newlinePositions.length + 1;
      err.col = err.pos - lastNewlinePos + 0;
    }
  }
  return errors;
}
function getCompoundCompName(node, getText) {
  var _a, _b, _c, _d, _e, _f;
  const rootTag = (_a = node == null ? void 0 : node.children) == null ? void 0 : _a[0];
  const rootTagNameTokens = (_c = (_b = rootTag == null ? void 0 : rootTag.children) == null ? void 0 : _b.find(
    (c) => c.kind === SyntaxKind.TagNameNode
  )) == null ? void 0 : _c.children;
  const rootTagName = rootTagNameTokens == null ? void 0 : rootTagNameTokens[rootTagNameTokens.length - 1];
  if (rootTagName === void 0 || getText(rootTagName) !== "Component") {
    return void 0;
  }
  const attrs = (_e = (_d = rootTag.children) == null ? void 0 : _d.find((c) => c.kind === SyntaxKind.AttributeListNode)) == null ? void 0 : _e.children;
  const nameAttrTokens = (_f = attrs == null ? void 0 : attrs.find(
    (c) => c.kind === SyntaxKind.AttributeNode && getText(c == null ? void 0 : c.children[0]) === "name"
  )) == null ? void 0 : _f.children;
  const nameValueToken = nameAttrTokens == null ? void 0 : nameAttrTokens[nameAttrTokens.length - 1];
  if (nameValueToken !== void 0 && nameValueToken.kind === SyntaxKind.StringLiteral) {
    const strLit = getText(nameValueToken);
    return strLit.substring(1, strLit.length - 1);
  }
  return void 0;
}
function compoundComponentDefFromSource(name, componentSource2) {
  const compoundComponentDef = xmlUiMarkupToComponent(componentSource2).component;
  if (!compoundComponentDef) {
    throw new Error(`Failed to parse ${name} component definition during build.`);
  }
  return compoundComponentDef;
}
const COMP$i = "FormSection";
const FormSectionMd = createMetadata({
  status: "experimental",
  description: `The \`${COMP$i}\` is a component that groups cohesive elements together within a \`Form\`. This grouping is indicated visually: the child components of the \`${COMP$i}\` are placed in a [\`FlowLayout\`](./FlowLayout.mdx) component.`
});
const componentSource = `
<Component name="FormSection">
  <VStack paddingBottom="{$props.paddingBottom ?? '1rem'}" gap="0" width="100%">
    <Heading 
      when="{!!$props.heading}"
      marginBottom="$space-tight"
      level="{$props.headingLevel ?? 'h3'}"
      fontWeight="{$props.headingWeight ?? 'bold'}"
      value="{$props.heading}" />
    <Text
      when="{!!$props.info}"
      fontSize="{$props.infoFontSize ?? '0.8rem'}"
      paddingBottom="$space-normal"
      value="{$props.info}" />
    <FlowLayout 
      width="100%"
      paddingTop="{$props.paddingTop ?? '$space-normal'}"
      columnGap="{$props.columnGap ?? '3rem'}"
      rowGap="{$props.rowGap ?? '$space-normal'}" >
      <Slot />
    </FlowLayout>
  </VStack>
</Component>
`;
({
  compoundComponentDef: compoundComponentDefFromSource(COMP$i, componentSource)
});
const COMP$h = "Switch";
const SwitchMd = createMetadata({
  description: `The \`${COMP$h}\` component is a user interface element that allows users to toggle between two states: on and off. It consists of a small rectangular or circular button that can be moved left or right to change its state.`,
  props: {
    indeterminate: dIndeterminate(defaultProps$a.indeterminate),
    label: dLabel(),
    labelPosition: dLabelPosition("end"),
    labelWidth: dLabelWidth(COMP$h),
    labelBreak: dLabelBreak(COMP$h),
    required: dRequired(),
    initialValue: dInitialValue(defaultProps$a.initialValue),
    autoFocus: dAutoFocus(),
    readOnly: dReadonly(),
    enabled: dEnabled(),
    validationStatus: dValidationStatus(defaultProps$a.validationStatus),
    description: dInternal(
      `(*** NOT IMPLEMENTED YET ***) This optional property displays an alternate description of the ${COMP$h} besides its label.`
    )
  },
  events: {
    gotFocus: dGotFocus(COMP$h),
    lostFocus: dLostFocus(COMP$h),
    didChange: dDidChange(COMP$h)
  },
  apis: {
    value: dValueApi(),
    setValue: dSetValueApi()
  },
  themeVars: parseScssVar(styles$x.themeVars),
  defaultThemeVars: {
    [`borderColor-checked-${COMP$h}-error`]: `$borderColor-${COMP$h}-error`,
    [`backgroundColor-checked-${COMP$h}-error`]: `$borderColor-${COMP$h}-error`,
    [`borderColor-checked-${COMP$h}-warning`]: `$borderColor-${COMP$h}-warning`,
    [`backgroundColor-checked-${COMP$h}-warning`]: `$borderColor-${COMP$h}-warning`,
    [`borderColor-checked-${COMP$h}-success`]: `$borderColor-${COMP$h}-success`,
    [`backgroundColor-checked-${COMP$h}-success`]: `$borderColor-${COMP$h}-success`,
    [`backgroundColor-${COMP$h}`]: "$color-surface-400",
    [`borderColor-${COMP$h}`]: "$color-surface-400",
    [`backgroundColor-indicator-${COMP$h}`]: "$backgroundColor-primary",
    [`borderColor-checked-${COMP$h}`]: "$color-primary-500",
    [`backgroundColor-checked-${COMP$h}`]: "$color-primary-500",
    [`backgroundColor-${COMP$h}--disabled`]: "$color-surface-200"
  }
});
const COMP$g = "Column";
const ColumnMd = createMetadata({
  description: `The \`${COMP$g}\` component can be used within a \`Table\` to define a particular table column's visual properties and data bindings.`,
  props: {
    bindTo: {
      description: `Indicates what part of the data to lay out in the column.`,
      valueType: "string"
    },
    header: {
      description: `Adds a label for a particular column.`,
      valueType: "string"
    },
    width: {
      description: `This property defines the width of the column. You can use a numeric value, a pixel value (such as \`100px\`), or a star size value (such as \`*\`, \`2*\`, etc.). You will get an error if you use any other unit (or value).`,
      valueType: "any"
    },
    minWidth: {
      description: `Indicates the minimum width a particular column can have. Same rules apply as with [width](#width).`,
      valueType: "any"
    },
    maxWidth: {
      description: `Indicates the maximum width a particular column can have. Same rules apply as with [width](#width).`,
      valueType: "any"
    },
    canSort: {
      description: `This property sets whether the user can sort by a column by clicking on its header (\`true\`) or not (\`false\`).`,
      valueType: "boolean"
    },
    pinTo: {
      description: `This property allows the column to be pinned to the \`left\` (left-to-right writing style) or \`right\` (left-to-right writing style) edge of the table. If the writing style is right-to-left, the locations are switched.`,
      availableValues: ["left", "right"],
      valueType: "string"
    },
    canResize: {
      description: `This property indicates whether the user can resize the column. If set to \`true\`, the column can be resized by dragging the column border. If set to \`false\`, the column cannot be resized. Double-clicking the column border resets to the original size.`,
      valueType: "boolean"
    }
  },
  contextVars: {
    $item: {
      description: "The data item being rendered."
    },
    $row: {
      description: "The data item being rendered (the same as `$item`)."
    },
    $itemIndex: {
      description: "The index of the data item being rendered."
    },
    $rowIndex: {
      description: "The index of the data item being rendered (the same as `$itemIndex`)."
    },
    $colIndex: {
      description: "The index of the column being rendered."
    },
    $cell: {
      description: "The value of the cell being rendered."
    }
  }
});
const COMP$f = "Redirect";
const RedirectMd = createMetadata({
  description: `\`${COMP$f}\` is a component that immediately redirects the browser to the URL in its \`to\` property when it gets visible (its \`when\` property gets \`true\`). The redirection works only within the app.`,
  props: {
    to: d(`This property defines the URL to which this component is about to redirect requests.`)
  }
});
const themeVars$4 = `'{"padding-trigger-Tabs": "var(--xmlui-padding-trigger-Tabs)", "paddingHorizontal-trigger-Tabs": "var(--xmlui-paddingHorizontal-trigger-Tabs, var(--xmlui-padding-trigger-Tabs))", "paddingVertical-trigger-Tabs": "var(--xmlui-paddingVertical-trigger-Tabs, var(--xmlui-padding-trigger-Tabs))", "paddingLeft-trigger-Tabs": "var(--xmlui-paddingLeft-trigger-Tabs, var(--xmlui-paddingHorizontal-trigger-Tabs, var(--xmlui-padding-trigger-Tabs)))", "paddingRight-trigger-Tabs": "var(--xmlui-paddingRight-trigger-Tabs, var(--xmlui-paddingHorizontal-trigger-Tabs, var(--xmlui-padding-trigger-Tabs)))", "paddingTop-trigger-Tabs": "var(--xmlui-paddingTop-trigger-Tabs, var(--xmlui-paddingVertical-trigger-Tabs, var(--xmlui-padding-trigger-Tabs)))", "paddingBottom-trigger-Tabs": "var(--xmlui-paddingBottom-trigger-Tabs, var(--xmlui-paddingVertical-trigger-Tabs, var(--xmlui-padding-trigger-Tabs)))", "backgroundColor-Tabs": "var(--xmlui-backgroundColor-Tabs)", "borderColor-Tabs": "var(--xmlui-borderColor-Tabs)", "borderWidth-Tabs": "var(--xmlui-borderWidth-Tabs)", "borderColor-active-Tabs": "var(--xmlui-borderColor-active-Tabs)", "backgroundColor-trigger-Tabs": "var(--xmlui-backgroundColor-trigger-Tabs)", "borderRadius-trigger-Tabs": "var(--xmlui-borderRadius-trigger-Tabs)", "border-trigger-Tabs": "var(--xmlui-border-trigger-Tabs)", "textColor-trigger-Tabs": "var(--xmlui-textColor-trigger-Tabs)", "backgroundColor-trigger-Tabs--hover": "var(--xmlui-backgroundColor-trigger-Tabs--hover)", "backgroundColor-trigger-Tabs--active": "var(--xmlui-backgroundColor-trigger-Tabs--active)", "backgroundColor-list-Tabs": "var(--xmlui-backgroundColor-list-Tabs)", "borderRadius-list-Tabs": "var(--xmlui-borderRadius-list-Tabs)", "border-list-Tabs": "var(--xmlui-border-list-Tabs)"}'`;
const styles$4 = {
  themeVars: themeVars$4
};
const COMP$e = "Tabs";
const TabsMd = createMetadata({
  status: "experimental",
  description: `The \`${COMP$e}\` component provides a tabbed layout where each tab has a clickable label and content.`,
  props: {
    activeTab: d(
      `This property indicates the index of the active tab. The indexing starts from 0, representing the starting (leftmost) tab.`
    ),
    orientation: {
      description: `This property indicates the orientation of the component. In horizontal orientation, the tab sections are laid out on the left side of the content panel, while in vertical orientation, the buttons are at the top.`,
      availableValues: ["horizontal", "vertical"],
      defaultValue: "vertical",
      valueType: "string"
    },
    tabTemplate: dComponent(`This property declares the template for the clickable tab area.`)
  },
  apis: {
    next: d(`This method selects the next tab.`)
  },
  themeVars: parseScssVar(styles$4.themeVars),
  defaultThemeVars: {
    // [`backgroundColor-${COMP}`]: "transparent",
    [`borderStyle-${COMP$e}`]: "solid",
    [`borderColor-${COMP$e}`]: "$borderColor",
    [`borderColor-active-${COMP$e}`]: "$color-primary",
    [`borderWidth-${COMP$e}`]: "2px",
    // [`backgroundColor-trigger-${COMP}`]: "transparent",
    [`backgroundColor-trigger-${COMP$e}--hover`]: "$color-surface-100",
    [`padding-trigger-${COMP$e}`]: "$space-4"
    // [`backgroundColor-list-${COMP}`]: "$color-primary-50",
    // [`textColor-trigger-${COMP}`]: "$color-primary-100",
  }
});
const themeVars$3 = `'{"padding-TableOfContentsItem": "var(--xmlui-padding-TableOfContentsItem)", "paddingHorizontal-TableOfContentsItem": "var(--xmlui-paddingHorizontal-TableOfContentsItem, var(--xmlui-padding-TableOfContentsItem))", "paddingVertical-TableOfContentsItem": "var(--xmlui-paddingVertical-TableOfContentsItem, var(--xmlui-padding-TableOfContentsItem))", "paddingLeft-TableOfContentsItem": "var(--xmlui-paddingLeft-TableOfContentsItem, var(--xmlui-paddingHorizontal-TableOfContentsItem, var(--xmlui-padding-TableOfContentsItem)))", "paddingRight-TableOfContentsItem": "var(--xmlui-paddingRight-TableOfContentsItem, var(--xmlui-paddingHorizontal-TableOfContentsItem, var(--xmlui-padding-TableOfContentsItem)))", "paddingTop-TableOfContentsItem": "var(--xmlui-paddingTop-TableOfContentsItem, var(--xmlui-paddingVertical-TableOfContentsItem, var(--xmlui-padding-TableOfContentsItem)))", "paddingBottom-TableOfContentsItem": "var(--xmlui-paddingBottom-TableOfContentsItem, var(--xmlui-paddingVertical-TableOfContentsItem, var(--xmlui-padding-TableOfContentsItem)))", "textColor-TableOfContentsItem": "var(--xmlui-textColor-TableOfContentsItem)", "fontFamily-TableOfContentsItem": "var(--xmlui-fontFamily-TableOfContentsItem)", "fontSize-TableOfContentsItem": "var(--xmlui-fontSize-TableOfContentsItem)", "fontStyle-TableOfContentsItem": "var(--xmlui-fontStyle-TableOfContentsItem)", "fontVariant-TableOfContentsItem": "var(--xmlui-fontVariant-TableOfContentsItem)", "fontWeight-TableOfContentsItem": "var(--xmlui-fontWeight-TableOfContentsItem)", "fontStretch-TableOfContentsItem": "var(--xmlui-fontStretch-TableOfContentsItem)", "textDecorationLine-TableOfContentsItem": "var(--xmlui-textDecorationLine-TableOfContentsItem)", "textDecorationColor-TableOfContentsItem": "var(--xmlui-textDecorationColor-TableOfContentsItem)", "textDecorationStyle-TableOfContentsItem": "var(--xmlui-textDecorationStyle-TableOfContentsItem)", "textDecorationThickness-TableOfContentsItem": "var(--xmlui-textDecorationThickness-TableOfContentsItem)", "textUnderlineOffset-TableOfContentsItem": "var(--xmlui-textUnderlineOffset-TableOfContentsItem)", "lineHeight-TableOfContentsItem": "var(--xmlui-lineHeight-TableOfContentsItem)", "backgroundColor-TableOfContentsItem": "var(--xmlui-backgroundColor-TableOfContentsItem)", "textTransform-TableOfContentsItem": "var(--xmlui-textTransform-TableOfContentsItem)", "letterSpacing-TableOfContentsItem": "var(--xmlui-letterSpacing-TableOfContentsItem)", "wordSpacing-TableOfContentsItem": "var(--xmlui-wordSpacing-TableOfContentsItem)", "textShadow-TableOfContentsItem": "var(--xmlui-textShadow-TableOfContentsItem)", "textIndent-TableOfContentsItem": "var(--xmlui-textIndent-TableOfContentsItem)", "textAlign-TableOfContentsItem": "var(--xmlui-textAlign-TableOfContentsItem)", "textAlignLast-TableOfContentsItem": "var(--xmlui-textAlignLast-TableOfContentsItem)", "wordBreak-TableOfContentsItem": "var(--xmlui-wordBreak-TableOfContentsItem)", "wordWrap-TableOfContentsItem": "var(--xmlui-wordWrap-TableOfContentsItem)", "direction-TableOfContentsItem": "var(--xmlui-direction-TableOfContentsItem)", "writingMode-TableOfContentsItem": "var(--xmlui-writingMode-TableOfContentsItem)", "lineBreak-TableOfContentsItem": "var(--xmlui-lineBreak-TableOfContentsItem)", "padding-TableOfContentsItem-level-1": "var(--xmlui-padding-TableOfContentsItem-level-1)", "paddingHorizontal-TableOfContentsItem-level-1": "var(--xmlui-paddingHorizontal-TableOfContentsItem-level-1, var(--xmlui-padding-TableOfContentsItem-level-1))", "paddingVertical-TableOfContentsItem-level-1": "var(--xmlui-paddingVertical-TableOfContentsItem-level-1, var(--xmlui-padding-TableOfContentsItem-level-1))", "paddingLeft-TableOfContentsItem-level-1": "var(--xmlui-paddingLeft-TableOfContentsItem-level-1, var(--xmlui-paddingHorizontal-TableOfContentsItem-level-1, var(--xmlui-padding-TableOfContentsItem-level-1)))", "paddingRight-TableOfContentsItem-level-1": "var(--xmlui-paddingRight-TableOfContentsItem-level-1, var(--xmlui-paddingHorizontal-TableOfContentsItem-level-1, var(--xmlui-padding-TableOfContentsItem-level-1)))", "paddingTop-TableOfContentsItem-level-1": "var(--xmlui-paddingTop-TableOfContentsItem-level-1, var(--xmlui-paddingVertical-TableOfContentsItem-level-1, var(--xmlui-padding-TableOfContentsItem-level-1)))", "paddingBottom-TableOfContentsItem-level-1": "var(--xmlui-paddingBottom-TableOfContentsItem-level-1, var(--xmlui-paddingVertical-TableOfContentsItem-level-1, var(--xmlui-padding-TableOfContentsItem-level-1)))", "textColor-TableOfContentsItem-level-1": "var(--xmlui-textColor-TableOfContentsItem-level-1)", "fontFamily-TableOfContentsItem-level-1": "var(--xmlui-fontFamily-TableOfContentsItem-level-1)", "fontSize-TableOfContentsItem-level-1": "var(--xmlui-fontSize-TableOfContentsItem-level-1)", "fontStyle-TableOfContentsItem-level-1": "var(--xmlui-fontStyle-TableOfContentsItem-level-1)", "fontVariant-TableOfContentsItem-level-1": "var(--xmlui-fontVariant-TableOfContentsItem-level-1)", "fontWeight-TableOfContentsItem-level-1": "var(--xmlui-fontWeight-TableOfContentsItem-level-1)", "fontStretch-TableOfContentsItem-level-1": "var(--xmlui-fontStretch-TableOfContentsItem-level-1)", "textDecorationLine-TableOfContentsItem-level-1": "var(--xmlui-textDecorationLine-TableOfContentsItem-level-1)", "textDecorationColor-TableOfContentsItem-level-1": "var(--xmlui-textDecorationColor-TableOfContentsItem-level-1)", "textDecorationStyle-TableOfContentsItem-level-1": "var(--xmlui-textDecorationStyle-TableOfContentsItem-level-1)", "textDecorationThickness-TableOfContentsItem-level-1": "var(--xmlui-textDecorationThickness-TableOfContentsItem-level-1)", "textUnderlineOffset-TableOfContentsItem-level-1": "var(--xmlui-textUnderlineOffset-TableOfContentsItem-level-1)", "lineHeight-TableOfContentsItem-level-1": "var(--xmlui-lineHeight-TableOfContentsItem-level-1)", "backgroundColor-TableOfContentsItem-level-1": "var(--xmlui-backgroundColor-TableOfContentsItem-level-1)", "textTransform-TableOfContentsItem-level-1": "var(--xmlui-textTransform-TableOfContentsItem-level-1)", "letterSpacing-TableOfContentsItem-level-1": "var(--xmlui-letterSpacing-TableOfContentsItem-level-1)", "wordSpacing-TableOfContentsItem-level-1": "var(--xmlui-wordSpacing-TableOfContentsItem-level-1)", "textShadow-TableOfContentsItem-level-1": "var(--xmlui-textShadow-TableOfContentsItem-level-1)", "textIndent-TableOfContentsItem-level-1": "var(--xmlui-textIndent-TableOfContentsItem-level-1)", "textAlign-TableOfContentsItem-level-1": "var(--xmlui-textAlign-TableOfContentsItem-level-1)", "textAlignLast-TableOfContentsItem-level-1": "var(--xmlui-textAlignLast-TableOfContentsItem-level-1)", "wordBreak-TableOfContentsItem-level-1": "var(--xmlui-wordBreak-TableOfContentsItem-level-1)", "wordWrap-TableOfContentsItem-level-1": "var(--xmlui-wordWrap-TableOfContentsItem-level-1)", "direction-TableOfContentsItem-level-1": "var(--xmlui-direction-TableOfContentsItem-level-1)", "writingMode-TableOfContentsItem-level-1": "var(--xmlui-writingMode-TableOfContentsItem-level-1)", "lineBreak-TableOfContentsItem-level-1": "var(--xmlui-lineBreak-TableOfContentsItem-level-1)", "padding-TableOfContentsItem-level-2": "var(--xmlui-padding-TableOfContentsItem-level-2)", "paddingHorizontal-TableOfContentsItem-level-2": "var(--xmlui-paddingHorizontal-TableOfContentsItem-level-2, var(--xmlui-padding-TableOfContentsItem-level-2))", "paddingVertical-TableOfContentsItem-level-2": "var(--xmlui-paddingVertical-TableOfContentsItem-level-2, var(--xmlui-padding-TableOfContentsItem-level-2))", "paddingLeft-TableOfContentsItem-level-2": "var(--xmlui-paddingLeft-TableOfContentsItem-level-2, var(--xmlui-paddingHorizontal-TableOfContentsItem-level-2, var(--xmlui-padding-TableOfContentsItem-level-2)))", "paddingRight-TableOfContentsItem-level-2": "var(--xmlui-paddingRight-TableOfContentsItem-level-2, var(--xmlui-paddingHorizontal-TableOfContentsItem-level-2, var(--xmlui-padding-TableOfContentsItem-level-2)))", "paddingTop-TableOfContentsItem-level-2": "var(--xmlui-paddingTop-TableOfContentsItem-level-2, var(--xmlui-paddingVertical-TableOfContentsItem-level-2, var(--xmlui-padding-TableOfContentsItem-level-2)))", "paddingBottom-TableOfContentsItem-level-2": "var(--xmlui-paddingBottom-TableOfContentsItem-level-2, var(--xmlui-paddingVertical-TableOfContentsItem-level-2, var(--xmlui-padding-TableOfContentsItem-level-2)))", "textColor-TableOfContentsItem-level-2": "var(--xmlui-textColor-TableOfContentsItem-level-2)", "fontFamily-TableOfContentsItem-level-2": "var(--xmlui-fontFamily-TableOfContentsItem-level-2)", "fontSize-TableOfContentsItem-level-2": "var(--xmlui-fontSize-TableOfContentsItem-level-2)", "fontStyle-TableOfContentsItem-level-2": "var(--xmlui-fontStyle-TableOfContentsItem-level-2)", "fontVariant-TableOfContentsItem-level-2": "var(--xmlui-fontVariant-TableOfContentsItem-level-2)", "fontWeight-TableOfContentsItem-level-2": "var(--xmlui-fontWeight-TableOfContentsItem-level-2)", "fontStretch-TableOfContentsItem-level-2": "var(--xmlui-fontStretch-TableOfContentsItem-level-2)", "textDecorationLine-TableOfContentsItem-level-2": "var(--xmlui-textDecorationLine-TableOfContentsItem-level-2)", "textDecorationColor-TableOfContentsItem-level-2": "var(--xmlui-textDecorationColor-TableOfContentsItem-level-2)", "textDecorationStyle-TableOfContentsItem-level-2": "var(--xmlui-textDecorationStyle-TableOfContentsItem-level-2)", "textDecorationThickness-TableOfContentsItem-level-2": "var(--xmlui-textDecorationThickness-TableOfContentsItem-level-2)", "textUnderlineOffset-TableOfContentsItem-level-2": "var(--xmlui-textUnderlineOffset-TableOfContentsItem-level-2)", "lineHeight-TableOfContentsItem-level-2": "var(--xmlui-lineHeight-TableOfContentsItem-level-2)", "backgroundColor-TableOfContentsItem-level-2": "var(--xmlui-backgroundColor-TableOfContentsItem-level-2)", "textTransform-TableOfContentsItem-level-2": "var(--xmlui-textTransform-TableOfContentsItem-level-2)", "letterSpacing-TableOfContentsItem-level-2": "var(--xmlui-letterSpacing-TableOfContentsItem-level-2)", "wordSpacing-TableOfContentsItem-level-2": "var(--xmlui-wordSpacing-TableOfContentsItem-level-2)", "textShadow-TableOfContentsItem-level-2": "var(--xmlui-textShadow-TableOfContentsItem-level-2)", "textIndent-TableOfContentsItem-level-2": "var(--xmlui-textIndent-TableOfContentsItem-level-2)", "textAlign-TableOfContentsItem-level-2": "var(--xmlui-textAlign-TableOfContentsItem-level-2)", "textAlignLast-TableOfContentsItem-level-2": "var(--xmlui-textAlignLast-TableOfContentsItem-level-2)", "wordBreak-TableOfContentsItem-level-2": "var(--xmlui-wordBreak-TableOfContentsItem-level-2)", "wordWrap-TableOfContentsItem-level-2": "var(--xmlui-wordWrap-TableOfContentsItem-level-2)", "direction-TableOfContentsItem-level-2": "var(--xmlui-direction-TableOfContentsItem-level-2)", "writingMode-TableOfContentsItem-level-2": "var(--xmlui-writingMode-TableOfContentsItem-level-2)", "lineBreak-TableOfContentsItem-level-2": "var(--xmlui-lineBreak-TableOfContentsItem-level-2)", "padding-TableOfContentsItem-level-3": "var(--xmlui-padding-TableOfContentsItem-level-3)", "paddingHorizontal-TableOfContentsItem-level-3": "var(--xmlui-paddingHorizontal-TableOfContentsItem-level-3, var(--xmlui-padding-TableOfContentsItem-level-3))", "paddingVertical-TableOfContentsItem-level-3": "var(--xmlui-paddingVertical-TableOfContentsItem-level-3, var(--xmlui-padding-TableOfContentsItem-level-3))", "paddingLeft-TableOfContentsItem-level-3": "var(--xmlui-paddingLeft-TableOfContentsItem-level-3, var(--xmlui-paddingHorizontal-TableOfContentsItem-level-3, var(--xmlui-padding-TableOfContentsItem-level-3)))", "paddingRight-TableOfContentsItem-level-3": "var(--xmlui-paddingRight-TableOfContentsItem-level-3, var(--xmlui-paddingHorizontal-TableOfContentsItem-level-3, var(--xmlui-padding-TableOfContentsItem-level-3)))", "paddingTop-TableOfContentsItem-level-3": "var(--xmlui-paddingTop-TableOfContentsItem-level-3, var(--xmlui-paddingVertical-TableOfContentsItem-level-3, var(--xmlui-padding-TableOfContentsItem-level-3)))", "paddingBottom-TableOfContentsItem-level-3": "var(--xmlui-paddingBottom-TableOfContentsItem-level-3, var(--xmlui-paddingVertical-TableOfContentsItem-level-3, var(--xmlui-padding-TableOfContentsItem-level-3)))", "textColor-TableOfContentsItem-level-3": "var(--xmlui-textColor-TableOfContentsItem-level-3)", "fontFamily-TableOfContentsItem-level-3": "var(--xmlui-fontFamily-TableOfContentsItem-level-3)", "fontSize-TableOfContentsItem-level-3": "var(--xmlui-fontSize-TableOfContentsItem-level-3)", "fontStyle-TableOfContentsItem-level-3": "var(--xmlui-fontStyle-TableOfContentsItem-level-3)", "fontVariant-TableOfContentsItem-level-3": "var(--xmlui-fontVariant-TableOfContentsItem-level-3)", "fontWeight-TableOfContentsItem-level-3": "var(--xmlui-fontWeight-TableOfContentsItem-level-3)", "fontStretch-TableOfContentsItem-level-3": "var(--xmlui-fontStretch-TableOfContentsItem-level-3)", "textDecorationLine-TableOfContentsItem-level-3": "var(--xmlui-textDecorationLine-TableOfContentsItem-level-3)", "textDecorationColor-TableOfContentsItem-level-3": "var(--xmlui-textDecorationColor-TableOfContentsItem-level-3)", "textDecorationStyle-TableOfContentsItem-level-3": "var(--xmlui-textDecorationStyle-TableOfContentsItem-level-3)", "textDecorationThickness-TableOfContentsItem-level-3": "var(--xmlui-textDecorationThickness-TableOfContentsItem-level-3)", "textUnderlineOffset-TableOfContentsItem-level-3": "var(--xmlui-textUnderlineOffset-TableOfContentsItem-level-3)", "lineHeight-TableOfContentsItem-level-3": "var(--xmlui-lineHeight-TableOfContentsItem-level-3)", "backgroundColor-TableOfContentsItem-level-3": "var(--xmlui-backgroundColor-TableOfContentsItem-level-3)", "textTransform-TableOfContentsItem-level-3": "var(--xmlui-textTransform-TableOfContentsItem-level-3)", "letterSpacing-TableOfContentsItem-level-3": "var(--xmlui-letterSpacing-TableOfContentsItem-level-3)", "wordSpacing-TableOfContentsItem-level-3": "var(--xmlui-wordSpacing-TableOfContentsItem-level-3)", "textShadow-TableOfContentsItem-level-3": "var(--xmlui-textShadow-TableOfContentsItem-level-3)", "textIndent-TableOfContentsItem-level-3": "var(--xmlui-textIndent-TableOfContentsItem-level-3)", "textAlign-TableOfContentsItem-level-3": "var(--xmlui-textAlign-TableOfContentsItem-level-3)", "textAlignLast-TableOfContentsItem-level-3": "var(--xmlui-textAlignLast-TableOfContentsItem-level-3)", "wordBreak-TableOfContentsItem-level-3": "var(--xmlui-wordBreak-TableOfContentsItem-level-3)", "wordWrap-TableOfContentsItem-level-3": "var(--xmlui-wordWrap-TableOfContentsItem-level-3)", "direction-TableOfContentsItem-level-3": "var(--xmlui-direction-TableOfContentsItem-level-3)", "writingMode-TableOfContentsItem-level-3": "var(--xmlui-writingMode-TableOfContentsItem-level-3)", "lineBreak-TableOfContentsItem-level-3": "var(--xmlui-lineBreak-TableOfContentsItem-level-3)", "padding-TableOfContentsItem-level-4": "var(--xmlui-padding-TableOfContentsItem-level-4)", "paddingHorizontal-TableOfContentsItem-level-4": "var(--xmlui-paddingHorizontal-TableOfContentsItem-level-4, var(--xmlui-padding-TableOfContentsItem-level-4))", "paddingVertical-TableOfContentsItem-level-4": "var(--xmlui-paddingVertical-TableOfContentsItem-level-4, var(--xmlui-padding-TableOfContentsItem-level-4))", "paddingLeft-TableOfContentsItem-level-4": "var(--xmlui-paddingLeft-TableOfContentsItem-level-4, var(--xmlui-paddingHorizontal-TableOfContentsItem-level-4, var(--xmlui-padding-TableOfContentsItem-level-4)))", "paddingRight-TableOfContentsItem-level-4": "var(--xmlui-paddingRight-TableOfContentsItem-level-4, var(--xmlui-paddingHorizontal-TableOfContentsItem-level-4, var(--xmlui-padding-TableOfContentsItem-level-4)))", "paddingTop-TableOfContentsItem-level-4": "var(--xmlui-paddingTop-TableOfContentsItem-level-4, var(--xmlui-paddingVertical-TableOfContentsItem-level-4, var(--xmlui-padding-TableOfContentsItem-level-4)))", "paddingBottom-TableOfContentsItem-level-4": "var(--xmlui-paddingBottom-TableOfContentsItem-level-4, var(--xmlui-paddingVertical-TableOfContentsItem-level-4, var(--xmlui-padding-TableOfContentsItem-level-4)))", "textColor-TableOfContentsItem-level-4": "var(--xmlui-textColor-TableOfContentsItem-level-4)", "fontFamily-TableOfContentsItem-level-4": "var(--xmlui-fontFamily-TableOfContentsItem-level-4)", "fontSize-TableOfContentsItem-level-4": "var(--xmlui-fontSize-TableOfContentsItem-level-4)", "fontStyle-TableOfContentsItem-level-4": "var(--xmlui-fontStyle-TableOfContentsItem-level-4)", "fontVariant-TableOfContentsItem-level-4": "var(--xmlui-fontVariant-TableOfContentsItem-level-4)", "fontWeight-TableOfContentsItem-level-4": "var(--xmlui-fontWeight-TableOfContentsItem-level-4)", "fontStretch-TableOfContentsItem-level-4": "var(--xmlui-fontStretch-TableOfContentsItem-level-4)", "textDecorationLine-TableOfContentsItem-level-4": "var(--xmlui-textDecorationLine-TableOfContentsItem-level-4)", "textDecorationColor-TableOfContentsItem-level-4": "var(--xmlui-textDecorationColor-TableOfContentsItem-level-4)", "textDecorationStyle-TableOfContentsItem-level-4": "var(--xmlui-textDecorationStyle-TableOfContentsItem-level-4)", "textDecorationThickness-TableOfContentsItem-level-4": "var(--xmlui-textDecorationThickness-TableOfContentsItem-level-4)", "textUnderlineOffset-TableOfContentsItem-level-4": "var(--xmlui-textUnderlineOffset-TableOfContentsItem-level-4)", "lineHeight-TableOfContentsItem-level-4": "var(--xmlui-lineHeight-TableOfContentsItem-level-4)", "backgroundColor-TableOfContentsItem-level-4": "var(--xmlui-backgroundColor-TableOfContentsItem-level-4)", "textTransform-TableOfContentsItem-level-4": "var(--xmlui-textTransform-TableOfContentsItem-level-4)", "letterSpacing-TableOfContentsItem-level-4": "var(--xmlui-letterSpacing-TableOfContentsItem-level-4)", "wordSpacing-TableOfContentsItem-level-4": "var(--xmlui-wordSpacing-TableOfContentsItem-level-4)", "textShadow-TableOfContentsItem-level-4": "var(--xmlui-textShadow-TableOfContentsItem-level-4)", "textIndent-TableOfContentsItem-level-4": "var(--xmlui-textIndent-TableOfContentsItem-level-4)", "textAlign-TableOfContentsItem-level-4": "var(--xmlui-textAlign-TableOfContentsItem-level-4)", "textAlignLast-TableOfContentsItem-level-4": "var(--xmlui-textAlignLast-TableOfContentsItem-level-4)", "wordBreak-TableOfContentsItem-level-4": "var(--xmlui-wordBreak-TableOfContentsItem-level-4)", "wordWrap-TableOfContentsItem-level-4": "var(--xmlui-wordWrap-TableOfContentsItem-level-4)", "direction-TableOfContentsItem-level-4": "var(--xmlui-direction-TableOfContentsItem-level-4)", "writingMode-TableOfContentsItem-level-4": "var(--xmlui-writingMode-TableOfContentsItem-level-4)", "lineBreak-TableOfContentsItem-level-4": "var(--xmlui-lineBreak-TableOfContentsItem-level-4)", "padding-TableOfContentsItem-level-5": "var(--xmlui-padding-TableOfContentsItem-level-5)", "paddingHorizontal-TableOfContentsItem-level-5": "var(--xmlui-paddingHorizontal-TableOfContentsItem-level-5, var(--xmlui-padding-TableOfContentsItem-level-5))", "paddingVertical-TableOfContentsItem-level-5": "var(--xmlui-paddingVertical-TableOfContentsItem-level-5, var(--xmlui-padding-TableOfContentsItem-level-5))", "paddingLeft-TableOfContentsItem-level-5": "var(--xmlui-paddingLeft-TableOfContentsItem-level-5, var(--xmlui-paddingHorizontal-TableOfContentsItem-level-5, var(--xmlui-padding-TableOfContentsItem-level-5)))", "paddingRight-TableOfContentsItem-level-5": "var(--xmlui-paddingRight-TableOfContentsItem-level-5, var(--xmlui-paddingHorizontal-TableOfContentsItem-level-5, var(--xmlui-padding-TableOfContentsItem-level-5)))", "paddingTop-TableOfContentsItem-level-5": "var(--xmlui-paddingTop-TableOfContentsItem-level-5, var(--xmlui-paddingVertical-TableOfContentsItem-level-5, var(--xmlui-padding-TableOfContentsItem-level-5)))", "paddingBottom-TableOfContentsItem-level-5": "var(--xmlui-paddingBottom-TableOfContentsItem-level-5, var(--xmlui-paddingVertical-TableOfContentsItem-level-5, var(--xmlui-padding-TableOfContentsItem-level-5)))", "textColor-TableOfContentsItem-level-5": "var(--xmlui-textColor-TableOfContentsItem-level-5)", "fontFamily-TableOfContentsItem-level-5": "var(--xmlui-fontFamily-TableOfContentsItem-level-5)", "fontSize-TableOfContentsItem-level-5": "var(--xmlui-fontSize-TableOfContentsItem-level-5)", "fontStyle-TableOfContentsItem-level-5": "var(--xmlui-fontStyle-TableOfContentsItem-level-5)", "fontVariant-TableOfContentsItem-level-5": "var(--xmlui-fontVariant-TableOfContentsItem-level-5)", "fontWeight-TableOfContentsItem-level-5": "var(--xmlui-fontWeight-TableOfContentsItem-level-5)", "fontStretch-TableOfContentsItem-level-5": "var(--xmlui-fontStretch-TableOfContentsItem-level-5)", "textDecorationLine-TableOfContentsItem-level-5": "var(--xmlui-textDecorationLine-TableOfContentsItem-level-5)", "textDecorationColor-TableOfContentsItem-level-5": "var(--xmlui-textDecorationColor-TableOfContentsItem-level-5)", "textDecorationStyle-TableOfContentsItem-level-5": "var(--xmlui-textDecorationStyle-TableOfContentsItem-level-5)", "textDecorationThickness-TableOfContentsItem-level-5": "var(--xmlui-textDecorationThickness-TableOfContentsItem-level-5)", "textUnderlineOffset-TableOfContentsItem-level-5": "var(--xmlui-textUnderlineOffset-TableOfContentsItem-level-5)", "lineHeight-TableOfContentsItem-level-5": "var(--xmlui-lineHeight-TableOfContentsItem-level-5)", "backgroundColor-TableOfContentsItem-level-5": "var(--xmlui-backgroundColor-TableOfContentsItem-level-5)", "textTransform-TableOfContentsItem-level-5": "var(--xmlui-textTransform-TableOfContentsItem-level-5)", "letterSpacing-TableOfContentsItem-level-5": "var(--xmlui-letterSpacing-TableOfContentsItem-level-5)", "wordSpacing-TableOfContentsItem-level-5": "var(--xmlui-wordSpacing-TableOfContentsItem-level-5)", "textShadow-TableOfContentsItem-level-5": "var(--xmlui-textShadow-TableOfContentsItem-level-5)", "textIndent-TableOfContentsItem-level-5": "var(--xmlui-textIndent-TableOfContentsItem-level-5)", "textAlign-TableOfContentsItem-level-5": "var(--xmlui-textAlign-TableOfContentsItem-level-5)", "textAlignLast-TableOfContentsItem-level-5": "var(--xmlui-textAlignLast-TableOfContentsItem-level-5)", "wordBreak-TableOfContentsItem-level-5": "var(--xmlui-wordBreak-TableOfContentsItem-level-5)", "wordWrap-TableOfContentsItem-level-5": "var(--xmlui-wordWrap-TableOfContentsItem-level-5)", "direction-TableOfContentsItem-level-5": "var(--xmlui-direction-TableOfContentsItem-level-5)", "writingMode-TableOfContentsItem-level-5": "var(--xmlui-writingMode-TableOfContentsItem-level-5)", "lineBreak-TableOfContentsItem-level-5": "var(--xmlui-lineBreak-TableOfContentsItem-level-5)", "padding-TableOfContentsItem-level-6": "var(--xmlui-padding-TableOfContentsItem-level-6)", "paddingHorizontal-TableOfContentsItem-level-6": "var(--xmlui-paddingHorizontal-TableOfContentsItem-level-6, var(--xmlui-padding-TableOfContentsItem-level-6))", "paddingVertical-TableOfContentsItem-level-6": "var(--xmlui-paddingVertical-TableOfContentsItem-level-6, var(--xmlui-padding-TableOfContentsItem-level-6))", "paddingLeft-TableOfContentsItem-level-6": "var(--xmlui-paddingLeft-TableOfContentsItem-level-6, var(--xmlui-paddingHorizontal-TableOfContentsItem-level-6, var(--xmlui-padding-TableOfContentsItem-level-6)))", "paddingRight-TableOfContentsItem-level-6": "var(--xmlui-paddingRight-TableOfContentsItem-level-6, var(--xmlui-paddingHorizontal-TableOfContentsItem-level-6, var(--xmlui-padding-TableOfContentsItem-level-6)))", "paddingTop-TableOfContentsItem-level-6": "var(--xmlui-paddingTop-TableOfContentsItem-level-6, var(--xmlui-paddingVertical-TableOfContentsItem-level-6, var(--xmlui-padding-TableOfContentsItem-level-6)))", "paddingBottom-TableOfContentsItem-level-6": "var(--xmlui-paddingBottom-TableOfContentsItem-level-6, var(--xmlui-paddingVertical-TableOfContentsItem-level-6, var(--xmlui-padding-TableOfContentsItem-level-6)))", "textColor-TableOfContentsItem-level-6": "var(--xmlui-textColor-TableOfContentsItem-level-6)", "fontFamily-TableOfContentsItem-level-6": "var(--xmlui-fontFamily-TableOfContentsItem-level-6)", "fontSize-TableOfContentsItem-level-6": "var(--xmlui-fontSize-TableOfContentsItem-level-6)", "fontStyle-TableOfContentsItem-level-6": "var(--xmlui-fontStyle-TableOfContentsItem-level-6)", "fontVariant-TableOfContentsItem-level-6": "var(--xmlui-fontVariant-TableOfContentsItem-level-6)", "fontWeight-TableOfContentsItem-level-6": "var(--xmlui-fontWeight-TableOfContentsItem-level-6)", "fontStretch-TableOfContentsItem-level-6": "var(--xmlui-fontStretch-TableOfContentsItem-level-6)", "textDecorationLine-TableOfContentsItem-level-6": "var(--xmlui-textDecorationLine-TableOfContentsItem-level-6)", "textDecorationColor-TableOfContentsItem-level-6": "var(--xmlui-textDecorationColor-TableOfContentsItem-level-6)", "textDecorationStyle-TableOfContentsItem-level-6": "var(--xmlui-textDecorationStyle-TableOfContentsItem-level-6)", "textDecorationThickness-TableOfContentsItem-level-6": "var(--xmlui-textDecorationThickness-TableOfContentsItem-level-6)", "textUnderlineOffset-TableOfContentsItem-level-6": "var(--xmlui-textUnderlineOffset-TableOfContentsItem-level-6)", "lineHeight-TableOfContentsItem-level-6": "var(--xmlui-lineHeight-TableOfContentsItem-level-6)", "backgroundColor-TableOfContentsItem-level-6": "var(--xmlui-backgroundColor-TableOfContentsItem-level-6)", "textTransform-TableOfContentsItem-level-6": "var(--xmlui-textTransform-TableOfContentsItem-level-6)", "letterSpacing-TableOfContentsItem-level-6": "var(--xmlui-letterSpacing-TableOfContentsItem-level-6)", "wordSpacing-TableOfContentsItem-level-6": "var(--xmlui-wordSpacing-TableOfContentsItem-level-6)", "textShadow-TableOfContentsItem-level-6": "var(--xmlui-textShadow-TableOfContentsItem-level-6)", "textIndent-TableOfContentsItem-level-6": "var(--xmlui-textIndent-TableOfContentsItem-level-6)", "textAlign-TableOfContentsItem-level-6": "var(--xmlui-textAlign-TableOfContentsItem-level-6)", "textAlignLast-TableOfContentsItem-level-6": "var(--xmlui-textAlignLast-TableOfContentsItem-level-6)", "wordBreak-TableOfContentsItem-level-6": "var(--xmlui-wordBreak-TableOfContentsItem-level-6)", "wordWrap-TableOfContentsItem-level-6": "var(--xmlui-wordWrap-TableOfContentsItem-level-6)", "direction-TableOfContentsItem-level-6": "var(--xmlui-direction-TableOfContentsItem-level-6)", "writingMode-TableOfContentsItem-level-6": "var(--xmlui-writingMode-TableOfContentsItem-level-6)", "lineBreak-TableOfContentsItem-level-6": "var(--xmlui-lineBreak-TableOfContentsItem-level-6)", "backgroundColor-TableOfContents": "var(--xmlui-backgroundColor-TableOfContents)", "width-TableOfContents": "var(--xmlui-width-TableOfContents)", "height-TableOfContents": "var(--xmlui-height-TableOfContents)", "borderRadius-TableOfContents": "var(--xmlui-borderRadius-TableOfContents)", "borderColor-TableOfContents": "var(--xmlui-borderColor-TableOfContents)", "borderWidth-TableOfContents": "var(--xmlui-borderWidth-TableOfContents)", "borderStyle-TableOfContents": "var(--xmlui-borderStyle-TableOfContents)", "marginTop-TableOfContents": "var(--xmlui-marginTop-TableOfContents)", "marginBottom-TableOfContents": "var(--xmlui-marginBottom-TableOfContents)", "paddingVertical-TableOfContents": "var(--xmlui-paddingVertical-TableOfContents)", "paddingHorizontal-TableOfContents": "var(--xmlui-paddingHorizontal-TableOfContents)", "borderWidth-TableOfContentsItem": "var(--xmlui-borderWidth-TableOfContentsItem)", "borderStyle-TableOfContentsItem": "var(--xmlui-borderStyle-TableOfContentsItem)", "borderColor-TableOfContentsItem": "var(--xmlui-borderColor-TableOfContentsItem)", "textColor-TableOfContentsItem--hover": "var(--xmlui-textColor-TableOfContentsItem--hover)", "borderWidth-TableOfContentsItem--active": "var(--xmlui-borderWidth-TableOfContentsItem--active)", "borderColor-TableOfContentsItem--active": "var(--xmlui-borderColor-TableOfContentsItem--active)", "color-TableOfContentsItem--active": "var(--xmlui-color-TableOfContentsItem--active)", "fontWeight-TableOfContentsItem--active": "var(--xmlui-fontWeight-TableOfContentsItem--active)"}'`;
const styles$3 = {
  themeVars: themeVars$3
};
const COMP$d = "TableOfContents";
const TableOfContentsMd = createMetadata({
  status: "experimental",
  description: `The \`${COMP$d}\` component collects headings and bookmarks within the current page and displays them in a tree representing their hierarchy. When you select an item in this tree, the component navigates the page to the selected position.`,
  props: {
    smoothScrolling: {
      description: `This property indicates that smooth scrolling is used while scrolling the selected table of contents items into view.`,
      valueType: "boolean",
      defaultValue: "false"
    },
    maxHeadingLevel: {
      description: "Defines the maximum heading level (1 to 6) to include in the table of contents. For example, if it is 2, then `H1` and `H2` are displayed, but lower levels (`H3` to `H6`) are not.",
      valueType: "number",
      defaultValue: "6"
    }
  },
  themeVars: parseScssVar(styles$3.themeVars),
  defaultThemeVars: {
    [`width-${COMP$d}`]: "auto",
    [`height-${COMP$d}`]: "auto",
    [`fontSize-${COMP$d}Item`]: "$fontSize-smaller",
    [`fontWeight-${COMP$d}Item`]: "$fontWeight-normal",
    [`fontFamily-${COMP$d}Item`]: "$fontFamily",
    [`borderRadius-${COMP$d}Item`]: "0",
    [`border-width-${COMP$d}Item`]: "$space-0_5",
    [`border-style-${COMP$d}Item`]: "solid",
    [`borderRadius-${COMP$d}Item--active`]: "0",
    [`border-width-${COMP$d}Item--active`]: "$space-0_5",
    [`border-style-${COMP$d}Item--active`]: "solid",
    [`fontWeight-${COMP$d}Item--active`]: "$fontWeight-bold",
    [`backgroundColor-${COMP$d}`]: "transparent",
    [`paddingHorizontal-${COMP$d}`]: "$space-8",
    [`paddingVertical-${COMP$d}`]: "$space-4",
    [`paddingHorizontal-${COMP$d}Item`]: "$space-2",
    [`paddingVertical-${COMP$d}Item`]: "$space-2",
    [`paddingHorizontal-${COMP$d}Item-level-1`]: "unset",
    [`paddingHorizontal-${COMP$d}Item-level-2`]: "unset",
    [`paddingHorizontal-${COMP$d}Item-level-3`]: "unset",
    [`paddingHorizontal-${COMP$d}Item-level-4`]: "unset",
    [`paddingHorizontal-${COMP$d}Item-level-5`]: "unset",
    [`paddingHorizontal-${COMP$d}Item-level-6`]: "unset",
    [`marginTop-${COMP$d}`]: "0",
    [`marginBottom-${COMP$d}`]: "0",
    [`borderRadius-${COMP$d}`]: "0",
    [`border-width-${COMP$d}`]: "0",
    [`borderColor-${COMP$d}`]: "transparent",
    [`border-style-${COMP$d}`]: "solid",
    [`paddingLeft-${COMP$d}Item`]: "$space-1",
    [`textTransform-${COMP$d}Item`]: "none",
    [`verticalAlign-${COMP$d}Item`]: "baseline",
    [`letterSpacing-${COMP$d}Item`]: "0",
    [`color-${COMP$d}Item`]: "$textColor-primary",
    [`borderColor-${COMP$d}Item`]: "$borderColor",
    [`borderColor-${COMP$d}Item--active`]: "$color-primary-500",
    [`color-${COMP$d}Item--active`]: "$color-primary-500"
  }
});
const themeVars$2 = `'{"border-Accordion": "var(--xmlui-border-Accordion)", "borderHorizontal-Accordion": "var(--xmlui-borderHorizontal-Accordion, var(--xmlui-border-Accordion))", "borderVertical-Accordion": "var(--xmlui-borderVertical-Accordion, var(--xmlui-border-Accordion))", "borderLeft-Accordion": "var(--xmlui-borderLeft-Accordion, var(--xmlui-borderHorizontal-Accordion, var(--xmlui-border-Accordion)))", "borderRight-Accordion": "var(--xmlui-borderRight-Accordion, var(--xmlui-borderHorizontal-Accordion, var(--xmlui-border-Accordion)))", "borderTop-Accordion": "var(--xmlui-borderTop-Accordion, var(--xmlui-borderVertical-Accordion, var(--xmlui-border-Accordion)))", "borderBottom-Accordion": "var(--xmlui-borderBottom-Accordion, var(--xmlui-borderVertical-Accordion, var(--xmlui-border-Accordion)))", "borderWidth-Accordion": "var(--xmlui-borderWidth-Accordion)", "borderHorizontalWidth-Accordion": "var(--xmlui-borderHorizontalWidth-Accordion, var(--xmlui-borderWidth-Accordion))", "borderLeftWidth-Accordion": "var(--xmlui-borderLeftWidth-Accordion, var(--xmlui-borderHorizontalWidth-Accordion, var(--xmlui-borderWidth-Accordion)))", "borderRightWidth-Accordion": "var(--xmlui-borderRightWidth-Accordion, var(--xmlui-borderHorizontalWidth-Accordion, var(--xmlui-borderWidth-Accordion)))", "borderVerticalWidth-Accordion": "var(--xmlui-borderVerticalWidth-Accordion, var(--xmlui-borderWidth-Accordion))", "borderTopWidth-Accordion": "var(--xmlui-borderTopWidth-Accordion, var(--xmlui-borderVerticalWidth-Accordion, var(--xmlui-borderWidth-Accordion)))", "borderBottomWidth-Accordion": "var(--xmlui-borderBottomWidth-Accordion, var(--xmlui-borderVerticalWidth-Accordion, var(--xmlui-borderWidth-Accordion)))", "borderStyle-Accordion": "var(--xmlui-borderStyle-Accordion)", "borderHorizontalStyle-Accordion": "var(--xmlui-borderHorizontalStyle-Accordion, var(--xmlui-borderStyle-Accordion))", "borderLeftStyle-Accordion": "var(--xmlui-borderLeftStyle-Accordion, var(--xmlui-borderHorizontalStyle-Accordion, var(--xmlui-borderStyle-Accordion)))", "borderRightStyle-Accordion": "var(--xmlui-borderRightStyle-Accordion, var(--xmlui-borderHorizontalStyle-Accordion, var(--xmlui-borderStyle-Accordion)))", "borderVerticalStyle-Accordion": "var(--xmlui-borderVerticalStyle-Accordion, var(--xmlui-borderStyle-Accordion))", "borderTopStyle-Accordion": "var(--xmlui-borderTopStyle-Accordion, var(--xmlui-borderVerticalStyle-Accordion, var(--xmlui-borderStyle-Accordion)))", "borderBottomStyle-Accordion": "var(--xmlui-borderBottomStyle-Accordion, var(--xmlui-borderVerticalStyle-Accordion, var(--xmlui-borderStyle-Accordion)))", "borderColor-Accordion": "var(--xmlui-borderColor-Accordion)", "borderHorizontalColor-Accordion": "var(--xmlui-borderHorizontalColor-Accordion, var(--xmlui-borderColor-Accordion))", "borderLeftColor-Accordion": "var(--xmlui-borderLeftColor-Accordion, var(--xmlui-borderHorizontalColor-Accordion, var(--xmlui-borderColor-Accordion)))", "borderRightColor-Accordion": "var(--xmlui-borderRightColor-Accordion, var(--xmlui-borderHorizontalColor-Accordion, var(--xmlui-borderColor-Accordion)))", "borderVerticalColor-Accordion": "var(--xmlui-borderVerticalColor-Accordion, var(--xmlui-borderColor-Accordion))", "borderTopColor-Accordion": "var(--xmlui-borderTopColor-Accordion, var(--xmlui-borderVerticalColor-Accordion, var(--xmlui-borderColor-Accordion)))", "borderBottomColor-Accordion": "var(--xmlui-borderBottomColor-Accordion, var(--xmlui-borderVerticalColor-Accordion, var(--xmlui-borderColor-Accordion)))", "borderStartStartRadius-Accordion": "var(--xmlui-borderStartStartRadius-Accordion, var(--xmlui-borderRadius-Accordion))", "borderStartEndRadius-Accordion": "var(--xmlui-borderStartEndRadius-Accordion, var(--xmlui-borderRadius-Accordion))", "borderEndStartRadius-Accordion": "var(--xmlui-borderEndStartRadius-Accordion, var(--xmlui-borderRadius-Accordion))", "borderEndEndRadius-Accordion": "var(--xmlui-borderEndEndRadius-Accordion, var(--xmlui-borderRadius-Accordion))", "padding-Accordion": "var(--xmlui-padding-Accordion)", "paddingHorizontal-Accordion": "var(--xmlui-paddingHorizontal-Accordion, var(--xmlui-padding-Accordion))", "paddingVertical-Accordion": "var(--xmlui-paddingVertical-Accordion, var(--xmlui-padding-Accordion))", "paddingLeft-Accordion": "var(--xmlui-paddingLeft-Accordion, var(--xmlui-paddingHorizontal-Accordion, var(--xmlui-padding-Accordion)))", "paddingRight-Accordion": "var(--xmlui-paddingRight-Accordion, var(--xmlui-paddingHorizontal-Accordion, var(--xmlui-padding-Accordion)))", "paddingTop-Accordion": "var(--xmlui-paddingTop-Accordion, var(--xmlui-paddingVertical-Accordion, var(--xmlui-padding-Accordion)))", "paddingBottom-Accordion": "var(--xmlui-paddingBottom-Accordion, var(--xmlui-paddingVertical-Accordion, var(--xmlui-padding-Accordion)))", "borderRadius-Accordion": "var(--xmlui-borderRadius-Accordion)", "verticalAlign-header-Accordion": "var(--xmlui-verticalAlign-header-Accordion)", "fontSize-header-Accordion": "var(--xmlui-fontSize-header-Accordion)", "fontWeight-header-Accordion": "var(--xmlui-fontWeight-header-Accordion)", "fontStyle-header-Accordion": "var(--xmlui-fontStyle-header-Accordion)", "paddingVertical-header-Accordion": "var(--xmlui-paddingVertical-header-Accordion)", "paddingHorizontal-header-Accordion": "var(--xmlui-paddingHorizontal-header-Accordion)", "backgroundColor-header-Accordion": "var(--xmlui-backgroundColor-header-Accordion)", "color-header-Accordion": "var(--xmlui-color-header-Accordion)", "backgroundColor-header-Accordion-hover": "var(--xmlui-backgroundColor-header-Accordion-hover)", "color-content-Accordion": "var(--xmlui-color-content-Accordion)", "backgroundColor-content-Accordion": "var(--xmlui-backgroundColor-content-Accordion)", "width-icon-Accordion": "var(--xmlui-width-icon-Accordion)", "height-icon-Accordion": "var(--xmlui-height-icon-Accordion)", "color-icon-Accordion": "var(--xmlui-color-icon-Accordion)"}'`;
const root = "_root_1usiy_13";
const styles$2 = {
  themeVars: themeVars$2,
  root
};
const AccordionContext = createContext({
  expandedItems: null,
  rotateExpanded: null,
  expandItem: noop$1,
  register: noop$1,
  unRegister: noop$1,
  hideIcon: null,
  expandedIcon: null,
  collapsedIcon: null,
  triggerPosition: null
});
const defaultProps$2 = {
  hideIcon: false,
  collapsedIcon: "chevrondown",
  triggerPosition: "end",
  rotateExpanded: "180deg"
};
forwardRef(function AccordionComponent2({
  style,
  children,
  hideIcon = defaultProps$2.hideIcon,
  expandedIcon,
  collapsedIcon = defaultProps$2.collapsedIcon,
  triggerPosition = defaultProps$2.triggerPosition,
  onDisplayDidChange = noop$1,
  registerComponentApi,
  rotateExpanded = defaultProps$2.rotateExpanded
}, forwardedRef) {
  const [expandedItems, setExpandedItems] = useState([]);
  const [itemElements, setItemElements] = useState(/* @__PURE__ */ new Set());
  const collapseItem = useCallback(
    (id) => {
      setExpandedItems((prev) => prev.filter((item) => item !== `${id}`));
    },
    [setExpandedItems]
  );
  const expandItem = useCallback(
    (id) => {
      if (!expandedItems.includes(`${id}`)) {
        setExpandedItems((prev) => [...prev, `${id}`]);
      }
    },
    [setExpandedItems, expandedItems]
  );
  const toggleItem = useCallback(
    (id) => {
      if (expandedItems.includes(`${id}`)) {
        collapseItem(id);
      } else {
        expandItem(id);
      }
    },
    [collapseItem, expandItem, expandedItems]
  );
  const register = useCallback(
    (id) => {
      setItemElements((prev) => {
        prev.add(id);
        return prev;
      });
    },
    [setItemElements]
  );
  const unRegister = useCallback(
    (id) => {
      setItemElements((prev) => {
        prev.delete(id);
        return prev;
      });
    },
    [setItemElements]
  );
  const focusItem = useCallback(
    (id) => {
      if (itemElements.has(`trigger_${id}`)) {
        const trigger = document.getElementById(`trigger_${id}`);
        if (trigger) {
          trigger.focus();
        }
      }
    },
    [itemElements]
  );
  const isExpanded = useCallback(
    (id) => {
      return expandedItems.includes(`${id}`);
    },
    [expandedItems]
  );
  useEffect(() => {
    registerComponentApi == null ? void 0 : registerComponentApi({
      expanded: isExpanded,
      expand: expandItem,
      collapse: collapseItem,
      toggle: toggleItem,
      focus: focusItem
    });
  }, [registerComponentApi, expandItem, collapseItem, toggleItem, focusItem, isExpanded]);
  const contextValue2 = useMemo(
    () => ({
      register,
      unRegister,
      expandItem,
      expandedItems,
      hideIcon,
      expandedIcon,
      collapsedIcon,
      triggerPosition,
      rotateExpanded
    }),
    [
      register,
      unRegister,
      expandedItems,
      hideIcon,
      expandedIcon,
      collapsedIcon,
      triggerPosition,
      expandItem,
      rotateExpanded
    ]
  );
  useEffect(() => {
    onDisplayDidChange == null ? void 0 : onDisplayDidChange(expandedItems);
  }, [expandedItems, onDisplayDidChange]);
  return /* @__PURE__ */ jsx(AccordionContext.Provider, { value: contextValue2, children: /* @__PURE__ */ jsx(
    RAccordion.Root,
    {
      style,
      ref: forwardedRef,
      value: expandedItems,
      type: "multiple",
      className: styles$2.root,
      onValueChange: (value) => setExpandedItems(value),
      children
    }
  ) });
});
const COMP$c = "Accordion";
const AccordionMd = createMetadata({
  status: "in progress",
  description: `(**NOT IMPLEMENTED YET**) The \`${COMP$c}\` component is a collapsible container that toggles the display of content sections. It helps organize information by expanding or collapsing it based on user interaction.`,
  props: {
    triggerPosition: {
      description: `This property indicates the position where the trigger icon should be displayed. The \`start\` value signs the trigger is before the header text (template), and \`end\` indicates that it follows the header.`,
      defaultValue: defaultProps$2.triggerPosition,
      valueType: "string",
      availableValues: triggerPositionNames
    },
    collapsedIcon: {
      description: `This property is the name of the icon that is displayed when the accordion is collapsed.`,
      valueType: "string",
      defaultValue: defaultProps$2.collapsedIcon
    },
    expandedIcon: {
      description: `This property is the name of the icon that is displayed when the accordion is expanded.`,
      valueType: "string"
    },
    hideIcon: {
      description: `This property indicates that the trigger icon is not displayed (\`true\`).`,
      defaultValue: defaultProps$2.hideIcon,
      valueType: "boolean"
    },
    rotateExpanded: {
      description: `This optional property defines the rotation angle of the expanded icon (relative to the collapsed icon).`,
      valueType: "string",
      defaultValue: defaultProps$2.rotateExpanded
    }
  },
  events: {
    displayDidChange: dDidChange(COMP$c)
  },
  apis: {
    expanded: dExpanded(COMP$c),
    expand: dExpand(COMP$c),
    collapse: dCollapse(COMP$c),
    toggle: d(`This method toggles the state of the ${COMP$c} between expanded and collapsed.`),
    focus: dFocus(COMP$c)
  },
  themeVars: parseScssVar(styles$2.themeVars),
  defaultThemeVars: {
    [`paddingHorizontal-header-${COMP$c}`]: "$space-3",
    [`paddingVertical-header-${COMP$c}`]: "$space-3",
    [`verticalAlign-header-${COMP$c}`]: "center",
    [`fontSize-header-${COMP$c}`]: "$fontSize-normal",
    [`fontWeight-header-${COMP$c}`]: "$fontWeight-normal",
    [`fontFamily-header-${COMP$c}`]: "$fontFamily",
    [`border-${COMP$c}`]: "0px solid $borderColor",
    [`width-icon-${COMP$c}`]: "",
    [`height-icon-${COMP$c}`]: "",
    [`backgroundColor-header-${COMP$c}`]: "$color-primary-500",
    [`backgroundColor-header-${COMP$c}-hover`]: "$color-primary-400",
    [`color-header-${COMP$c}`]: "$color-surface-50",
    [`color-content-${COMP$c}`]: "$textColor-primary",
    [`backgroundColor-content-${COMP$c}`]: "transparent",
    [`color-icon-${COMP$c}`]: "$color-surface-50"
  }
});
const COMP$b = "TabItem";
const TabItemMd = createMetadata({
  description: `\`${COMP$b}\` is a non-visual component describing a tab. Tabs component may use nested ${COMP$b} instances from which the user can select.`,
  props: {
    label: dLabel()
  }
});
const COMP$a = "Slider";
const SliderMd = createMetadata({
  status: "experimental",
  description: `The \`${COMP$a}\` component allows you to select a numeric value between a range specified by minimum and maximum values.`,
  props: {
    initialValue: dInitialValue(),
    label: dLabel(),
    labelPosition: dLabelPosition("top"),
    labelWidth: dLabelWidth(COMP$a),
    labelBreak: dLabelBreak(COMP$a),
    minValue: d(
      `This property specifies the minimum value of the allowed input range.`,
      null,
      "number",
      0
    ),
    maxValue: d(
      `This property specifies the maximum value of the allowed input range.`,
      null,
      "number",
      10
    ),
    step: d(
      `This property defines the increment value for the slider, determining the allowed intervals between selectable values.`
    ),
    minStepsBetweenThumbs: d(
      `This property sets the minimum number of steps required between multiple thumbs on the slider, ensuring they maintain a specified distance.`
    ),
    enabled: dEnabled(),
    autoFocus: dAutoFocus(),
    required: dRequired(),
    readOnly: dReadonly(),
    validationStatus: dValidationStatus(),
    rangeStyle: d(`This property allows you to apply custom styles to the range element of the slider.`),
    thumbStyle: d(`This property allows you to apply custom styles to the thumb elements of the slider.`),
    showValues: d(
      `This property controls whether the slider shows the current values of the thumbs.`,
      null,
      "boolean",
      true
    ),
    valueFormat: d(
      `This property allows you to customize how the values are displayed.`,
      null,
      "any"
    )
  },
  events: {
    didChange: dDidChange(COMP$a),
    gotFocus: dGotFocus(COMP$a),
    lostFocus: dLostFocus(COMP$a)
  },
  apis: {
    focus: dFocus(COMP$a),
    value: dValue(),
    setValue: dSetValueApi()
  },
  themeVars: parseScssVar(styles$g.themeVars),
  defaultThemeVars: {
    [`backgroundColor-track-${COMP$a}`]: "$color-surface-200",
    [`backgroundColor-range-${COMP$a}`]: "$color-primary",
    [`borderWidth-thumb-${COMP$a}`]: "2px",
    [`borderStyle-thumb-${COMP$a}`]: "solid",
    [`borderColor-thumb-${COMP$a}`]: "$color-surface-50",
    [`backgroundColor-thumb-${COMP$a}`]: "$color-primary",
    [`boxShadow-thumb-${COMP$a}`]: "$boxShadow-md",
    [`boxShadow-thumb-${COMP$a}--hover`]: "$boxShadow-lg",
    [`boxShadow-thumb-${COMP$a}--focus`]: "$boxShadow-xl",
    [`borderRadius-${COMP$a}-default`]: "$borderRadius",
    [`borderColor-${COMP$a}-default`]: "transparent",
    [`borderWidth-${COMP$a}-default`]: "0",
    [`borderStyle-${COMP$a}-default`]: "solid",
    [`boxShadow-${COMP$a}-default`]: "none",
    light: {
      [`backgroundColor-track-${COMP$a}--disabled`]: "$color-surface-300",
      [`backgroundColor-range-${COMP$a}--disabled`]: "$color-surface-400",
      [`backgroundColor-thumb-${COMP$a}`]: "$color-primary-500",
      [`borderColor-thumb-${COMP$a}`]: "$color-surface-50"
    },
    dark: {
      [`backgroundColor-track-${COMP$a}--disabled`]: "$color-surface-600",
      [`backgroundColor-range-${COMP$a}--disabled`]: "$color-surface-800",
      [`backgroundColor-thumb-${COMP$a}`]: "$color-primary-400",
      [`borderColor-thumb-${COMP$a}`]: "$color-surface-950"
    }
  }
});
const themeVars$1 = `'{"width-Carousel": "var(--xmlui-width-Carousel)", "height-Carousel": "var(--xmlui-height-Carousel)", "height-control-Carousel": "var(--xmlui-height-control-Carousel)", "width-control-Carousel": "var(--xmlui-width-control-Carousel)", "textColor-control-Carousel": "var(--xmlui-textColor-control-Carousel)", "backgroundColor-control-Carousel": "var(--xmlui-backgroundColor-control-Carousel)", "borderRadius-control-Carousel": "var(--xmlui-borderRadius-control-Carousel)", "backgroundColor-control-hover-Carousel": "var(--xmlui-backgroundColor-control-hover-Carousel)", "textColor-control-hover-Carousel": "var(--xmlui-textColor-control-hover-Carousel)", "backgroundColor-control-active-Carousel": "var(--xmlui-backgroundColor-control-active-Carousel)", "textColor-control-active-Carousel": "var(--xmlui-textColor-control-active-Carousel)", "textColor-control-disabled-Carousel": "var(--xmlui-textColor-control-disabled-Carousel)", "backgroundColor-control-disabled-Carousel": "var(--xmlui-backgroundColor-control-disabled-Carousel)", "width-indicator-Carousel": "var(--xmlui-width-indicator-Carousel)", "height-indicator-Carousel": "var(--xmlui-height-indicator-Carousel)", "textColor-indicator-Carousel": "var(--xmlui-textColor-indicator-Carousel)", "backgroundColor-indicator-Carousel": "var(--xmlui-backgroundColor-indicator-Carousel)", "backgroundColor-indicator-hover-Carousel": "var(--xmlui-backgroundColor-indicator-hover-Carousel)", "textColor-indicator-hover-Carousel": "var(--xmlui-textColor-indicator-hover-Carousel)", "backgroundColor-indicator-active-Carousel": "var(--xmlui-backgroundColor-indicator-active-Carousel)", "textColor-indicator-active-Carousel": "var(--xmlui-textColor-indicator-active-Carousel)"}'`;
const carousel = "_carousel_1jsvj_13";
const carouselContentWrapper = "_carouselContentWrapper_1jsvj_30";
const carouselContent = "_carouselContent_1jsvj_30";
const vertical = "_vertical_1jsvj_40";
const controls = "_controls_1jsvj_51";
const controlButton = "_controlButton_1jsvj_60";
const indicators = "_indicators_1jsvj_87";
const indicator = "_indicator_1jsvj_87";
const active = "_active_1jsvj_107";
const styles$1 = {
  themeVars: themeVars$1,
  carousel,
  carouselContentWrapper,
  carouselContent,
  vertical,
  controls,
  controlButton,
  indicators,
  indicator,
  active
};
const CarouselContext = createContext({
  register: (column) => {
  },
  unRegister: (id) => {
  }
});
function useCarouselContextValue() {
  const [carouselItems, setCarouselItems] = useState([]);
  const carouselContextValue = useMemo(() => {
    return {
      register: (column) => {
        setCarouselItems(
          produce((draft) => {
            const existing = draft.findIndex((col) => col.id === column.id);
            if (existing < 0) {
              draft.push(column);
            } else {
              draft[existing] = column;
            }
          })
        );
      },
      unRegister: (id) => {
        setCarouselItems(
          produce((draft) => {
            return draft.filter((col) => col.id !== id);
          })
        );
      }
    };
  }, [setCarouselItems]);
  return {
    carouselItems,
    carouselContextValue
  };
}
const defaultProps$1 = {
  orientation: "horizontal",
  indicators: true,
  autoplay: false,
  controls: true,
  loop: false,
  startIndex: 0,
  transitionDuration: 25,
  autoplayInterval: 5e3,
  stopAutoplayOnInteraction: true
};
forwardRef(function CarouselComponent2({
  orientation = defaultProps$1.orientation,
  children,
  style,
  indicators: indicators2 = defaultProps$1.indicators,
  onDisplayDidChange = noop$1,
  autoplay = defaultProps$1.autoplay,
  controls: controls2 = defaultProps$1.controls,
  loop = defaultProps$1.loop,
  startIndex = defaultProps$1.startIndex,
  prevIcon,
  nextIcon,
  transitionDuration = defaultProps$1.transitionDuration,
  autoplayInterval = defaultProps$1.autoplayInterval,
  stopAutoplayOnInteraction = defaultProps$1.stopAutoplayOnInteraction,
  registerComponentApi
}, forwardedRef) {
  const referenceElement = useRef(null);
  const [activeSlide, setActiveSlide] = useState(0);
  const [plugins, setPlugins] = useState([]);
  const [isPlaying, setIsPlaying] = useState(false);
  const { carouselContextValue, carouselItems } = useCarouselContextValue();
  const ref = forwardedRef ? composeRefs(referenceElement, forwardedRef) : referenceElement;
  const [carouselRef, api] = useEmblaCarousel(
    {
      axis: orientation === "horizontal" ? "x" : "y",
      loop,
      startIndex,
      duration: transitionDuration
    },
    plugins
  );
  const prevIconName = prevIcon || orientation === "horizontal" ? "arrowleft" : "arrowup";
  const nextIconName = nextIcon || orientation === "horizontal" ? "arrowright" : "arrowdown";
  useEffect(() => {
    if (autoplay) {
      setPlugins([
        Autoplay({
          delay: autoplayInterval,
          stopOnInteraction: stopAutoplayOnInteraction
        })
      ]);
    }
  }, [autoplayInterval, autoplay, stopAutoplayOnInteraction]);
  const toggleAutoplay = useCallback(() => {
    var _a;
    const autoplay2 = (_a = api == null ? void 0 : api.plugins()) == null ? void 0 : _a.autoplay;
    if (!autoplay2) return;
    const playOrStop = autoplay2.isPlaying() ? autoplay2.stop : autoplay2.play;
    playOrStop();
  }, [api]);
  useEffect(() => {
    var _a;
    const autoplay2 = (_a = api == null ? void 0 : api.plugins()) == null ? void 0 : _a.autoplay;
    if (!autoplay2) return;
    setIsPlaying(autoplay2.isPlaying());
    api.on("autoplay:play", () => setIsPlaying(true)).on("autoplay:stop", () => setIsPlaying(false)).on("reInit", () => setIsPlaying(autoplay2.isPlaying()));
  }, [api]);
  const scrollTo = useCallback(
    (index) => {
      api == null ? void 0 : api.scrollTo(index);
    },
    [api]
  );
  const [canScrollPrev, setCanScrollPrev] = React.useState(false);
  const [canScrollNext, setCanScrollNext] = React.useState(false);
  const onSelect = React.useCallback(
    (api2) => {
      if (!api2) {
        return;
      }
      const activeIndex = api2.selectedScrollSnap();
      onDisplayDidChange(activeIndex);
      setActiveSlide(activeIndex);
      setCanScrollPrev(api2.canScrollPrev());
      setCanScrollNext(api2.canScrollNext());
    },
    [onDisplayDidChange]
  );
  const scrollPrev = useCallback(() => {
    if (api) {
      api == null ? void 0 : api.scrollPrev();
    }
  }, [api]);
  const scrollNext = useCallback(() => {
    api == null ? void 0 : api.scrollNext();
  }, [api]);
  const handleKeyDown = useCallback(
    (event) => {
      if (orientation === "horizontal") {
        if (event.key === "ArrowLeft") {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === "ArrowRight") {
          event.preventDefault();
          scrollNext();
        }
      } else {
        if (event.key === "ArrowUp") {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === "ArrowDown") {
          event.preventDefault();
          scrollNext();
        }
      }
    },
    [orientation, scrollPrev, scrollNext]
  );
  useEffect(() => {
    registerComponentApi == null ? void 0 : registerComponentApi({
      scrollTo,
      scrollPrev,
      scrollNext,
      canScrollPrev: () => canScrollPrev,
      canScrollNext: () => canScrollNext
    });
  }, [registerComponentApi, scrollTo, scrollPrev, scrollNext, canScrollPrev, canScrollNext]);
  React.useEffect(() => {
    if (!api) {
      return;
    }
    onSelect(api);
    api.on("init", onSelect);
    api.on("reInit", onSelect);
    api.on("select", onSelect);
    return () => {
      api == null ? void 0 : api.off("select", onSelect);
    };
  }, [api, onSelect]);
  useEffect(() => {
    if (referenceElement == null ? void 0 : referenceElement.current) {
      referenceElement.current.addEventListener("keydown", handleKeyDown);
    }
  }, [ref, handleKeyDown]);
  return /* @__PURE__ */ jsx(CarouselContext.Provider, { value: carouselContextValue, children: /* @__PURE__ */ jsxs(
    "div",
    {
      style,
      ref,
      className: classnames(styles$1.carousel),
      role: "region",
      tabIndex: -1,
      "aria-roledescription": "carousel",
      children: [
        /* @__PURE__ */ jsx("div", { ref: carouselRef, className: styles$1.carouselContentWrapper, children: /* @__PURE__ */ jsx(
          "div",
          {
            className: classnames(styles$1.carouselContent, {
              [styles$1.horizontal]: orientation === "horizontal",
              [styles$1.vertical]: orientation === "vertical"
            }),
            children
          }
        ) }),
        controls2 && /* @__PURE__ */ jsxs("div", { className: styles$1.controls, children: [
          autoplay && /* @__PURE__ */ jsx("button", { className: styles$1.controlButton, onClick: toggleAutoplay, children: isPlaying ? /* @__PURE__ */ jsx(Icon, { name: "pause" }) : /* @__PURE__ */ jsx(Icon, { name: "play" }) }),
          /* @__PURE__ */ jsx("button", { className: styles$1.controlButton, disabled: !canScrollPrev, onClick: scrollPrev, children: /* @__PURE__ */ jsx(Icon, { name: prevIconName }) }),
          /* @__PURE__ */ jsx("button", { className: styles$1.controlButton, onClick: scrollNext, disabled: !canScrollNext, children: /* @__PURE__ */ jsx(Icon, { name: nextIconName }) })
        ] }),
        indicators2 && /* @__PURE__ */ jsx("div", { className: styles$1.indicators, children: carouselItems.map((_, index) => /* @__PURE__ */ jsx(
          "button",
          {
            type: "button",
            onClick: () => scrollTo(index),
            className: classnames(styles$1.indicator, {
              [styles$1.active]: index === activeSlide
            }),
            "aria-current": index === activeSlide
          },
          index
        )) })
      ]
    }
  ) });
});
const COMP$9 = "Carousel";
const CarouselMd = createMetadata({
  status: "in progress",
  description: `This component displays a slideshow by cycling through elements (images, text, or custom slides) like a carousel.`,
  props: {
    orientation: {
      description: "This property indicates the orientation of the carousel. The `horizontal` value indicates that the carousel moves horizontally, and the `vertical` value indicates that the carousel moves vertically.",
      availableValues: orientationOptionMd,
      valueType: "string",
      defaultValue: defaultProps$1.orientation
    },
    indicators: {
      description: "This property indicates whether the carousel displays the indicators.",
      valueType: "boolean",
      defaultValue: defaultProps$1.indicators
    },
    controls: {
      description: "This property indicates whether the carousel displays the controls.",
      valueType: "boolean",
      defaultValue: defaultProps$1.controls
    },
    autoplay: {
      description: "This property indicates whether the carousel automatically scrolls.",
      valueType: "boolean",
      defaultValue: defaultProps$1.autoplay
    },
    loop: {
      description: "This property indicates whether the carousel loops.",
      valueType: "boolean",
      defaultValue: defaultProps$1.loop
    },
    startIndex: {
      description: "This property indicates the index of the first slide to display.",
      valueType: "number",
      defaultValue: defaultProps$1.startIndex
    },
    transitionDuration: {
      description: "This property indicates the duration of the transition between slides.",
      valueType: "number",
      defaultValue: defaultProps$1.transitionDuration
    },
    autoplayInterval: {
      description: "This property specifies the interval between autoplay transitions.",
      valueType: "number",
      defaultValue: defaultProps$1.autoplayInterval
    },
    stopAutoplayOnInteraction: {
      description: "This property indicates whether autoplay stops on interaction.",
      valueType: "boolean",
      defaultValue: defaultProps$1.stopAutoplayOnInteraction
    },
    prevIcon: {
      description: "This property specifies the icon to display for the previous control.",
      valueType: "string"
    },
    nextIcon: {
      description: "This property specifies the icon to display for the next control.",
      valueType: "string"
    },
    keyboard: {
      description: "This property indicates whether the carousel responds to keyboard events.",
      valueType: "boolean"
    }
  },
  events: {
    displayDidChange: dDidChange(COMP$9)
  },
  apis: {
    canScrollPrev: d(
      "This method returns `true` if the carousel can scroll to the previous slide."
    ),
    canScrollNext: d("This method returns `true` if the carousel can scroll to the next slide."),
    scrollTo: d("This method scrolls the carousel to the specified slide index."),
    scrollPrev: d("This method scrolls the carousel to the previous slide."),
    scrollNext: d("This method scrolls the carousel to the next slide.")
  },
  themeVars: parseScssVar(styles$1.themeVars),
  themeVarDescriptions: {
    [`width-indicator-${COMP$9}`]: "Sets the width of the indicator."
  },
  defaultThemeVars: {
    [`backgroundColor-control-${COMP$9}`]: "$color-primary",
    [`textColor-control-${COMP$9}`]: "$textColor",
    [`backgroundColor-control-hover-${COMP$9}`]: "$color-primary",
    [`textColor-control-hover-${COMP$9}`]: "$textColor",
    [`backgroundColor-control-active-${COMP$9}`]: "$color-primary",
    [`backgroundColor-control-disabled-${COMP$9}`]: "$color-surface-200",
    [`textColor-control-disabled-${COMP$9}`]: "$textColor-disabled",
    [`textColor-control-active-${COMP$9}`]: "$color-primary",
    [`backgroundColor-indicator-${COMP$9}`]: "$color-surface-200",
    [`backgroundColor-indicator-active-${COMP$9}`]: "$color-primary",
    [`textColor-indicator-${COMP$9}`]: "$color-primary",
    [`textColor-indicator-active-${COMP$9}`]: "$color-primary",
    [`backgroundColor-indicator-hover-${COMP$9}`]: "$color-surface-200",
    [`textColor-indicator-hover-${COMP$9}`]: "$color-primary",
    [`width-indicator-${COMP$9}`]: "25px",
    [`height-indicator-${COMP$9}`]: "6px",
    [`height-control-${COMP$9}`]: "36px",
    [`width-control-${COMP$9}`]: "36px",
    [`borderRadius-control-${COMP$9}`]: "50%",
    [`height-${COMP$9}`]: "100%",
    [`width-${COMP$9}`]: "100%"
  }
});
const COMP$8 = "Breakout";
const BreakoutMd = createMetadata({
  description: `The \`${COMP$8}\` component creates a breakout section. It allows its child to occupy the entire width of the UI even if the app or the parent container constrains the maximum content width.`
});
const COMP$7 = "ToneChangerButton";
const ToneChangerButtonMd = createMetadata({
  status: "experimental",
  description: `The \`${COMP$7}\` component is a component that allows the user to change the tone of the app.`,
  props: {}
});
const COMP$6 = "APICall";
const APICallMd = createMetadata({
  description: `\`${COMP$6}\` is used to mutate (create, update or delete) some data on the backend. It is similar in nature to the \`DataSource\` component which retrieves data from the backend.`,
  props: {
    method: {
      description: "The method of data manipulation can be done via setting this property.",
      valueType: "string",
      availableValues: httpMethodNames,
      defaultValue: "get"
    },
    url: {
      description: "Use this property to set the URL to send data to.",
      isRequired: true,
      valueType: "string"
    },
    rawBody: {
      description: "This property sets the request body to the value provided here without any conversion. Use the * `body` property if you want the object sent in JSON. When you define `body` and `rawBody`, the latest one prevails.",
      valueType: "string"
    },
    body: {
      description: "This property sets the request body. The object you pass here will be serialized to JSON when sending the request. Use the `rawBody` property to send another request body using its native format. When you define `body` and `rawBody`, the latest one prevails.",
      valueType: "string"
    },
    queryParams: {
      description: "This property sets the query parameters for the request. The object you pass here will be serialized to a query string and appended to the request URL. You can specify key and value pairs where the key is the name of a particular query parameter and the value is that parameter's value."
    },
    headers: {
      description: "You can define request header values as key and value pairs, where the key is the ID of the particular header and the value is that header's value."
    },
    confirmTitle: {
      description: `This optional string sets the title in the confirmation dialog that is displayed before the \`${COMP$6}\` is executed.`,
      valueType: "string"
    },
    confirmMessage: {
      description: `This optional string sets the message in the confirmation dialog that is displayed before the \`${COMP$6}\` is executed.`,
      valueType: "string"
    },
    confirmButtonLabel: {
      description: `This optional string property enables the customization of the submit button in the confirmation dialog that is displayed before the \`${COMP$6}\` is executed.`,
      valueType: "string"
    },
    inProgressNotificationMessage: {
      description: "This property customizes the message that is displayed in a toast while the API operation is in progress.",
      valueType: "string"
    },
    errorNotificationMessage: {
      description: "This property defines the message to display automatically when the operation results in an error.",
      valueType: "string"
    },
    completedNotificationMessage: {
      description: "This property defines the message to display automatically when the operation has been completed.",
      valueType: "string"
    },
    payloadType: dInternal(),
    invalidates: dInternal(),
    updates: dInternal(),
    optimisticValue: dInternal(),
    getOptimisticValue: dInternal()
  },
  events: {
    beforeRequest: d(
      "This event fires before the request is sent. Returning an explicit boolean`false` value will prevent the request from being sent."
    ),
    success: d("This event fires when a request results in a success."),
    /**
     * This event fires when a request results in an error.
     * @descriptionRef
     */
    error: d("This event fires when a request results in an error."),
    progress: dInternal()
  },
  contextVars: {
    $param: d(
      "This value represents the first parameters passed to the `execute()` method to display the modal dialog."
    ),
    $params: d(
      "This value represents the array of parameters passed to the `execute()` method. You can use `$params[0]` to access the first and `$params[1]` to access the second (and so on) parameters. `$param` is the same as `$params[0]`."
    )
  },
  apis: {
    execute: d(
      "This method triggers the invocation of the API. You can pass an arbitrary number of parameters to the method. In the `APICall` instance, you can access those with the `$param` and `$params` context values."
    )
  }
});
const COMP$5 = "Option";
const OptionMd = createMetadata({
  description: `\`${COMP$5}\` is a non-visual component describing a selection option. Other components (such as \`Select\`, \`AutoComplete\`, and others) may use nested \`Option\` instances from which the user can select.`,
  props: {
    label: d(
      `This property defines the text to display for the option. If \`label\` is not defined, \`Option\` will use the \`value\` as the label.`
    ),
    value: d(
      `This property defines the value of the option. If \`value\` is not defined, \`Option\` will use the \`label\` as the value.`
    ),
    enabled: dEnabled(),
    optionTemplate: d("This property is used to define a custom option template")
  },
  childrenAsTemplate: "optionTemplate"
});
const OptionNative = memo((props) => {
  const OptionType = useOptionType();
  if (!OptionType) {
    return null;
  }
  return /* @__PURE__ */ jsx(OptionType, { ...props });
});
OptionNative.displayName = "OptionNative";
const COMP$4 = "AutoComplete";
const AutoCompleteMd = createMetadata({
  description: "This component is a dropdown with a list of options. According to the `multi` property, the user can select one or more items.",
  status: "experimental",
  props: {
    placeholder: dPlaceholder(),
    initialValue: dInitialValue(),
    maxLength: dMaxLength(),
    autoFocus: dAutoFocus(),
    required: dRequired(),
    readOnly: dReadonly(),
    enabled: dEnabled(),
    validationStatus: dValidationStatus(),
    label: dLabel(),
    labelPosition: dLabelPosition("top"),
    labelWidth: dLabelWidth(COMP$4),
    labelBreak: dLabelBreak(COMP$4),
    dropdownHeight: d("This property sets the height of the dropdown list."),
    multi: dMulti(),
    optionTemplate: dComponent(
      `This property enables the customization of list items. To access the attributes of a list item use the \`$item\` context variable.`
    ),
    emptyListTemplate: d(
      "This property defines the template to display when the list of options is empty."
    )
  },
  events: {
    gotFocus: dGotFocus(COMP$4),
    lostFocus: dLostFocus(COMP$4),
    didChange: dDidChange(COMP$4)
  },
  apis: {
    focus: dFocus(COMP$4),
    value: d(
      `You can query the component's value. If no value is set, it will retrieve \`undefined\`.`
    ),
    setValue: dSetValueApi()
  },
  contextVars: {
    $item: d(
      "This context value represents an item when you define an option item template. Use `$item.value` and `$item.label` to refer to the value and label of the particular option."
    )
  },
  themeVars: parseScssVar(styles$h.themeVars),
  defaultThemeVars: {
    [`backgroundColor-menu-${COMP$4}`]: "$backgroundColor-primary",
    [`boxShadow-menu-${COMP$4}`]: "$boxShadow-md",
    [`borderRadius-menu-${COMP$4}`]: "$borderRadius",
    [`borderWidth-menu-${COMP$4}`]: "1px",
    [`borderColor-menu-${COMP$4}`]: "$borderColor",
    [`backgroundColor-item-${COMP$4}`]: "$backgroundColor-dropdown-item",
    [`backgroundColor-item-${COMP$4}--hover`]: "$backgroundColor-dropdown-item--active",
    [`backgroundColor-item-${COMP$4}--active`]: "$backgroundColor-dropdown-item--active",
    [`minHeight-Input`]: "39px",
    [`backgroundColor-${COMP$4}-badge`]: "$color-primary-500",
    [`fontSize-${COMP$4}-badge`]: "$fontSize-small",
    [`paddingHorizontal-${COMP$4}-badge`]: "$space-1",
    [`paddingVertical-${COMP$4}-badge`]: "$space-1",
    [`backgroundColor-${COMP$4}-badge--hover`]: "$color-primary-400",
    [`backgroundColor-${COMP$4}-badge--active`]: "$color-primary-500",
    [`textColor-item-${COMP$4}--disabled`]: "$color-surface-200",
    [`textColor-${COMP$4}-badge`]: "$const-color-surface-50"
  }
});
const themeVars = '"[]"';
const backdropContainer = "_backdropContainer_18iuc_13";
const backdrop = "_backdrop_18iuc_13";
const overlay = "_overlay_18iuc_26";
const styles = {
  themeVars,
  backdropContainer,
  backdrop,
  overlay
};
const defaultProps = {
  backgroundColor: "black",
  opacity: "0.1"
};
forwardRef(function Backdrop2({
  style,
  children,
  overlayTemplate,
  backgroundColor = defaultProps.backgroundColor,
  opacity = defaultProps.opacity
}, forwardedRef) {
  const styleWithoutDims = { ...style, width: void 0 };
  return /* @__PURE__ */ jsxs(
    "div",
    {
      className: styles.backdropContainer,
      style: { width: style.width ?? "fit-content" },
      ref: forwardedRef,
      children: [
        children,
        /* @__PURE__ */ jsx("div", { className: styles.backdrop, style: { ...styleWithoutDims, backgroundColor, opacity } }),
        overlayTemplate && /* @__PURE__ */ jsx("div", { className: styles.overlay, children: overlayTemplate })
      ]
    }
  );
});
const COMP$3 = "Backdrop";
const BackdropMd = createMetadata({
  status: "stable",
  description: `The \`${COMP$3}\` component is a semi-transparent overlay that appears on top of its child component to obscure or highlight the content behind it.`,
  props: {
    overlayTemplate: dComponent(
      "This property defines the component template for an optional overlay to display over the component."
    ),
    backgroundColor: {
      description: "The background color of the backdrop.",
      valueType: "string",
      defaultValue: defaultProps.backgroundColor
    },
    opacity: {
      description: "The opacity of the backdrop.",
      valueType: "number",
      defaultValue: 0.1
    }
  },
  themeVars: parseScssVar(styles.themeVars)
});
const HtmlAMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `a` tag.",
  isHtmlTag: true,
  props: {
    href: d("Specifies the URL of the page the link goes to"),
    target: d("Specifies where to open the linked document"),
    rel: d("Specifies the relationship between the current document and the linked document"),
    download: d("Indicates that the target will be downloaded when a user clicks on the hyperlink"),
    hreflang: d("Specifies the language of the linked document"),
    type: d("Specifies the MIME type of the linked document"),
    ping: d(
      "Specifies a space-separated list of URLs to be notified if the user follows the hyperlink"
    ),
    referrerPolicy: d("Specifies the referrer policy for the element"),
    disabled: d("Specifies that the link should be disabled")
  }
});
const HtmlAddressMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `address` tag.",
  isHtmlTag: true
});
const HtmlAreaMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `area` tag.",
  isHtmlTag: true,
  props: {
    alt: d("Specifies an alternate text for the area"),
    coords: d("Specifies the coordinates of the area"),
    download: d("Indicates that the target will be downloaded when a user clicks on the area"),
    href: d("Specifies the URL of the linked document"),
    hrefLang: d("Specifies the language of the linked document"),
    referrerPolicy: d("Specifies the referrer policy for the area"),
    rel: d("Specifies the relationship between the current document and the linked document"),
    shape: d("Specifies the shape of the area"),
    target: d("Specifies where to open the linked document"),
    media: d("Specifies a media query for the linked resource")
  }
});
const HtmlArticleMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `article` tag.",
  isHtmlTag: true
});
const HtmlAsideMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `aside` tag.",
  isHtmlTag: true
});
const HtmlAudioMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `audio` tag.",
  isHtmlTag: true,
  props: {
    autoPlay: d("Specifies that the audio will start playing as soon as it is ready"),
    controls: d("Specifies that audio controls should be displayed"),
    crossOrigin: d("Specifies how the element handles cross-origin requests"),
    loop: d("Specifies that the audio will start over again every time it is finished"),
    muted: d("Specifies that the audio output should be muted"),
    preload: d(
      "Specifies if and how the author thinks the audio should be loaded when the page loads"
    ),
    src: d("Specifies the URL of the audio file")
  }
});
const HtmlBMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `b` tag.",
  isHtmlTag: true
});
const HtmlBdiMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `bdi` tag.",
  isHtmlTag: true
});
const HtmlBdoMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `bdo` tag.",
  isHtmlTag: true,
  props: {
    dir: d("Specifies the text direction override")
  }
});
const HtmlBlockquoteMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `blockquote` tag.",
  isHtmlTag: true,
  props: {
    cite: d("Specifies the source of the quotation")
  }
});
const HtmlBrMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `br` tag.",
  isHtmlTag: true
});
const HtmlButtonMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `button` tag.",
  isHtmlTag: true,
  props: {
    autoFocus: d("Specifies that the button should automatically get focus when the page loads"),
    disabled: d("Specifies that the button should be disabled"),
    form: d("Specifies the form the button belongs to"),
    formAction: d(
      "Specifies the URL of a file that processes the information submitted by the button"
    ),
    formEncType: d(
      "Specifies how the form-data should be encoded when submitting it to the server"
    ),
    formMethod: d("Specifies the HTTP method to use when sending form-data"),
    formNoValidate: d("Specifies that the form should not be validated when submitted"),
    formTarget: d("Specifies where to display the response after submitting the form"),
    name: d("Specifies a name for the button"),
    type: d("Specifies the type of the button"),
    value: d("Specifies the value associated with the button")
  }
});
const HtmlCanvasMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `canvas` tag.",
  isHtmlTag: true,
  props: {
    width: d("Specifies the width of the canvas"),
    height: d("Specifies the height of the canvas")
  }
});
const HtmlCaptionMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `caption` tag.",
  isHtmlTag: true
});
const HtmlCiteMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `cite` tag.",
  isHtmlTag: true
});
const HtmlCodeMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `code` tag.",
  isHtmlTag: true
});
const HtmlColMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `col` tag.",
  isHtmlTag: true,
  props: {
    span: d("Specifies the number of columns a `col` element should span")
  }
});
const HtmlColgroupMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `colgroup` tag.",
  isHtmlTag: true,
  props: {
    span: d("Specifies the number of columns in a `colgroup`")
  }
});
const HtmlDataMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `data` tag.",
  isHtmlTag: true,
  props: {
    value: d("Specifies the machine-readable value of the element")
  }
});
const HtmlDatalistMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `datalist` tag.",
  isHtmlTag: true
});
const HtmlDdMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `dd` tag.",
  isHtmlTag: true
});
const HtmlDelMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `del` tag.",
  isHtmlTag: true,
  props: {
    cite: d("Specifies the source of the quotation"),
    dateTime: d("Specifies the date and time of the edit")
  }
});
const HtmlDetailsMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `details` tag.",
  isHtmlTag: true,
  props: {
    open: d("Specifies that the details are visible (open)")
  },
  themeVars: parseScssVar(htmlTagStyles.themeVarsDetails),
  defaultThemeVars: {
    "marginTop-HtmlDetails": "1rem",
    "marginBottom-HtmlDetails": "1rem"
  }
});
const HtmlDfnMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `dfn` tag.",
  isHtmlTag: true
});
const HtmlDialogMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `dialog` tag.",
  isHtmlTag: true,
  props: {
    open: d("Specifies that the dialog is open")
  }
});
const HtmlDivMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `div` tag.",
  isHtmlTag: true
});
const HtmlDlMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `dl` tag.",
  isHtmlTag: true
});
const HtmlDtMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `dt` tag.",
  isHtmlTag: true
});
const HtmlEMMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `em` tag.",
  isHtmlTag: true
});
const HtmlEmbedMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `embed` tag.",
  isHtmlTag: true,
  props: {
    src: d("Specifies the URL of the resource"),
    type: d("Specifies the type of the resource"),
    width: d("Specifies the width of the embed"),
    height: d("Specifies the height of the embed")
  }
});
const HtmlFieldsetMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `fieldset` tag.",
  isHtmlTag: true,
  props: {
    disabled: d("Specifies that the fieldset should be disabled"),
    form: d("Specifies the form the fieldset belongs to"),
    name: d("Specifies a name for the fieldset")
  }
});
const HtmlFigcaptionMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `figcaption` tag.",
  isHtmlTag: true
});
const HtmlFigureMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `figure` tag.",
  isHtmlTag: true
});
const HtmlFooterMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `footer` tag.",
  isHtmlTag: true
});
const HtmlFormMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `form` tag.",
  isHtmlTag: true,
  props: {
    acceptCharset: d(
      "Specifies the character encodings that are to be used for the form submission"
    ),
    action: d("Specifies where to send the form-data when a form is submitted"),
    autoComplete: d("Specifies whether a form should have auto-completion"),
    encType: d("Specifies how the form-data should be encoded when submitting it to the server"),
    method: d("Specifies the HTTP method to use when sending form-data"),
    name: d("Specifies the name of the form"),
    noValidate: d("Specifies that the form should not be validated when submitted"),
    target: d("Specifies where to display the response after submitting the form")
  }
});
const HtmlH1Md = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `h1` tag.",
  isHtmlTag: true,
  themeVars: parseScssVar(htmlTagStyles.themeVarsHeading),
  defaultThemeVars: {
    "marginTop-HtmlHeading": "1rem",
    "marginBottom-HtmlHeading": ".5rem"
  }
});
const HtmlH2Md = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `h2` tag.",
  isHtmlTag: true,
  themeVars: parseScssVar(htmlTagStyles.themeVarsHeading),
  defaultThemeVars: {
    "marginTop-HtmlHeading": "1rem",
    "marginBottom-HtmlHeading": ".5rem"
  }
});
const HtmlH3Md = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `h3` tag.",
  isHtmlTag: true,
  themeVars: parseScssVar(htmlTagStyles.themeVarsHeading),
  defaultThemeVars: {
    "marginTop-HtmlHeading": "1rem",
    "marginBottom-HtmlHeading": ".5rem"
  }
});
const HtmlH4Md = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `h4` tag.",
  isHtmlTag: true,
  themeVars: parseScssVar(htmlTagStyles.themeVarsHeading),
  defaultThemeVars: {
    "marginTop-HtmlHeading": "1rem",
    "marginBottom-HtmlHeading": ".5rem"
  }
});
const HtmlH5Md = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `h5` tag.",
  isHtmlTag: true,
  themeVars: parseScssVar(htmlTagStyles.themeVarsHeading),
  defaultThemeVars: {
    "marginTop-HtmlHeading": "1rem",
    "marginBottom-HtmlHeading": ".5rem"
  }
});
const HtmlH6Md = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `h6` tag.",
  isHtmlTag: true,
  themeVars: parseScssVar(htmlTagStyles.themeVarsHeading),
  defaultThemeVars: {
    "marginTop-HtmlHeading": "1rem",
    "marginBottom-HtmlHeading": ".5rem"
  }
});
const HtmlHeaderMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `header` tag.",
  isHtmlTag: true
});
const HtmlHrMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `hr` tag.",
  isHtmlTag: true
});
const HtmlIMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `i` tag.",
  isHtmlTag: true
});
const HtmlIframeMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `iframe` tag.",
  isHtmlTag: true,
  props: {
    src: d("Specifies the URL of the page to embed"),
    srcDoc: d("Specifies the HTML content of the page to embed"),
    name: d("Specifies the name of the iframe"),
    sandbox: d("Specifies a set of extra restrictions for the content in the iframe"),
    allow: d("Specifies a feature policy for the iframe"),
    allowFullScreen: d("Specifies that the iframe can be displayed in full-screen mode"),
    width: d("Specifies the width of the iframe"),
    height: d("Specifies the height of the iframe"),
    loading: d("Specifies the loading behavior of the iframe"),
    referrerPolicy: d("Specifies the referrer policy for the iframe")
  }
});
const HtmlImgMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `img` tag.",
  isHtmlTag: true,
  props: {
    alt: d("Specifies an alternate text for an image"),
    height: d("Specifies the height of an image"),
    src: d("Specifies the path to the image"),
    width: d("Specifies the width of an image"),
    useMap: d("Specifies an image as a client-side image map"),
    loading: d("Specifies the loading behavior of the image"),
    referrerPolicy: d("Specifies the referrer policy for the image"),
    sizes: d("Specifies image sizes for different page layouts")
  }
});
const HtmlInputMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `input` tag.",
  isHtmlTag: true,
  props: {
    type: d("Specifies the type of input"),
    value: d("Specifies the value of the input"),
    placeholder: d("Specifies a short hint that describes the expected value of the input"),
    autoFocus: d("Specifies that the input should automatically get focus when the page loads"),
    checked: d("Specifies that the input should be pre-selected"),
    disabled: d("Specifies that the input should be disabled"),
    form: d("Specifies the form the input belongs to"),
    name: d("Specifies the name of the input"),
    list: d(
      "Specifies the id of a datalist element that contains pre-defined options for the input"
    ),
    max: d("Specifies the maximum value for an input"),
    maxLength: d("Specifies the maximum number of characters allowed in an input"),
    min: d("Specifies the minimum value for an input"),
    minLength: d("Specifies the minimum number of characters allowed in an input"),
    multiple: d("Specifies that a user can enter more than one value"),
    pattern: d("Specifies a regular expression that an input's value is checked against"),
    readOnly: d("Specifies that the input is read-only"),
    required: d("Specifies that the input is required"),
    size: d("Specifies the width, in characters, of an input"),
    step: d("Specifies the legal number intervals for an input")
  }
});
const HtmlInsMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `ins` tag.",
  isHtmlTag: true,
  props: {
    cite: d("Specifies the source URL for the inserted text"),
    dateTime: d("Specifies the date and time when the text was inserted")
  }
});
const HtmlKbdMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `kbd` tag.",
  isHtmlTag: true
});
const HtmlLabelMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `label` tag.",
  isHtmlTag: true,
  props: {
    htmlFor: d("Specifies which form element a label is bound to")
  }
});
const HtmlLegendMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `legend` tag.",
  isHtmlTag: true
});
const HtmlLiMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `li` tag.",
  isHtmlTag: true,
  props: {
    value: d("Specifies the value of the list item (if the parent is an ordered list)")
  },
  defaultThemeVars: {
    "marginLeft-HtmlLi": "$space-6",
    "paddingLeft-HtmlLi": "$space-1"
  }
});
const HtmlMainMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `main` tag.",
  isHtmlTag: true
});
const HtmlMapMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `map` tag.",
  isHtmlTag: true,
  props: {
    name: d("Specifies the name of the map")
  }
});
const HtmlMarkMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `mark` tag.",
  isHtmlTag: true
});
const HtmlMenuMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `menu` tag.",
  isHtmlTag: true,
  props: {
    type: d("Specifies the type of the menu")
  }
});
const HtmlMeterMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `meter` tag.",
  isHtmlTag: true,
  props: {
    min: d("Specifies the minimum value"),
    max: d("Specifies the maximum value"),
    low: d("Specifies the lower bound of the high value"),
    high: d("Specifies the upper bound of the low value"),
    optimum: d("Specifies the optimal value"),
    value: d("Specifies the current value")
  }
});
const HtmlNavMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `nav` tag.",
  isHtmlTag: true
});
const HtmlObjectMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `object` tag.",
  isHtmlTag: true,
  props: {
    data: d("Specifies the URL of the resource"),
    type: d("Specifies the MIME type of the resource"),
    name: d("Specifies the name of the object"),
    form: d("Specifies the form the object belongs to"),
    width: d("Specifies the width of the object"),
    height: d("Specifies the height of the object")
  }
});
const HtmlOlMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `ol` tag.",
  isHtmlTag: true,
  themeVars: parseScssVar(htmlTagStyles.themeVarsList),
  // Use only themeVarsList
  defaultThemeVars: {
    "marginTop-HtmlOl": "$space-4",
    "marginBottom-HtmlOl": "$space-4"
  }
});
const HtmlOptgroupMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `optgroup` tag.",
  isHtmlTag: true,
  props: {
    label: d("Specifies the label for the option group"),
    disabled: d("Specifies that the option group is disabled")
  }
});
const HtmlOptionMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `option` tag.",
  isHtmlTag: true,
  props: {
    disabled: d("Specifies that the option should be disabled"),
    label: d("Specifies the label of the option"),
    selected: d("Specifies that the option should be pre-selected"),
    value: d("Specifies the value of the option")
  }
});
const HtmlOutputMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `output` tag.",
  isHtmlTag: true,
  props: {
    form: d("Specifies the form element that the output is associated with"),
    htmlFor: d("Specifies the IDs of the elements that this output is related to"),
    name: d("Specifies the name of the output")
  }
});
const HtmlPMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `p` tag.",
  isHtmlTag: true
});
const HtmlParamMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `param` tag.",
  isHtmlTag: true,
  props: {
    name: d("Specifies the name of the parameter"),
    value: d("Specifies the value of the parameter")
  }
});
const HtmlPictureMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `picture` tag.",
  isHtmlTag: true
});
const HtmlPreMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `pre` tag.",
  isHtmlTag: true
});
const HtmlProgressMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `progress` tag.",
  isHtmlTag: true,
  props: {
    max: d("Specifies the maximum value of the progress element"),
    value: d("Specifies the current value of the progress element")
  }
});
const HtmlQMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `q` tag.",
  isHtmlTag: true,
  props: {
    cite: d("Specifies the source URL of the quotation")
  }
});
const HtmlRpMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `rp` tag.",
  isHtmlTag: true
});
const HtmlRtMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `rt` tag.",
  isHtmlTag: true
});
const HtmlRubyMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `ruby` tag.",
  isHtmlTag: true
});
const HtmlSMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `s` tag.",
  isHtmlTag: true
});
const HtmlSampMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `samp` tag.",
  isHtmlTag: true
});
const HtmlSectionMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `section` tag.",
  isHtmlTag: true
});
const HtmlSelectMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `select` tag.",
  isHtmlTag: true,
  props: {
    autoFocus: d("Specifies that the select should automatically get focus when the page loads"),
    disabled: d("Specifies that the select should be disabled"),
    form: d("Specifies the form the select belongs to"),
    multiple: d("Specifies that multiple options can be selected at once"),
    name: d("Specifies the name of the select"),
    required: d("Specifies that the select is required"),
    size: d("Specifies the number of visible options in the select")
  }
});
const HtmlSmallMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `small` tag.",
  isHtmlTag: true
});
const HtmlSourceMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `source` tag.",
  isHtmlTag: true,
  props: {
    src: d("Specifies the URL of the media file"),
    type: d("Specifies the type of the media file"),
    media: d("Specifies a media query for the media file"),
    srcSet: d("Specifies the source set for responsive images"),
    sizes: d("Specifies the sizes attribute for responsive images")
  }
});
const HtmlSpanMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `span` tag.",
  isHtmlTag: true
});
const HtmlStrongMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `strong` tag.",
  isHtmlTag: true
});
const HtmlSubMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `sub` tag.",
  isHtmlTag: true
});
const HtmlSummaryMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `summary` tag.",
  isHtmlTag: true
});
const HtmlSupMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `sup` tag.",
  isHtmlTag: true
});
const HtmlTableMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `table` tag.",
  isHtmlTag: true,
  props: {
    border: d("Specifies the width of the border around the table"),
    cellPadding: d("Specifies the space between the cell content and its borders"),
    cellSpacing: d("Specifies the space between cells"),
    summary: d("Provides a summary of the table's purpose and structure"),
    width: d("Specifies the width of the table"),
    align: d("Specifies the alignment of the table"),
    frame: d("Specifies which parts of the table frame to render"),
    rules: d("Specifies which rules to draw between cells")
  },
  themeVars: parseScssVar(htmlTagStyles.themeVarsTable),
  defaultThemeVars: {
    "backgroundColor-HtmlTable": "$backgroundColor",
    "border-HtmlTable": "1px solid $borderColor",
    "marginBottom-HtmlTable": "$space-4",
    "marginTop-HtmlTable": "$space-4"
  }
});
const HtmlTbodyMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `tbody` tag.",
  isHtmlTag: true,
  themeVars: parseScssVar(htmlTagStyles.themeVarsTbody)
});
const HtmlTdMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `td` tag.",
  isHtmlTag: true,
  props: {
    align: d("Specifies the horizontal alignment of the content in the cell"),
    colSpan: d("Specifies the number of columns a cell should span"),
    headers: d("Specifies a list of header cells the current cell is related to"),
    rowSpan: d("Specifies the number of rows a cell should span"),
    valign: d("Specifies the vertical alignment of the content in the cell"),
    scope: d("Specifies whether a cell is a header for a column, row, or group of columns or rows"),
    abbr: d("Specifies an abbreviated version of the content in the cell"),
    height: d("Specifies the height of the cell"),
    width: d("Specifies the width of the cell")
  },
  themeVars: parseScssVar(htmlTagStyles.themeVarsTd),
  defaultThemeVars: {
    "padding-HtmlTd": "$space-2",
    "borderBottom-HtmlTd": "1px solid $borderColor"
  }
});
const HtmlTemplateMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `template` tag.",
  isHtmlTag: true
});
const HtmlTextareaMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `textarea` tag.",
  isHtmlTag: true,
  props: {
    autoFocus: d("Specifies that the textarea should automatically get focus when the page loads"),
    cols: d("Specifies the visible width of the text area in average character widths"),
    dirName: d("Specifies the text directionality"),
    disabled: d("Specifies that the textarea should be disabled"),
    form: d("Specifies the form the textarea belongs to"),
    maxLength: d("Specifies the maximum number of characters allowed in the textarea"),
    minLength: d("Specifies the minimum number of characters allowed in the textarea"),
    name: d("Specifies the name of the textarea"),
    placeholder: d("Specifies a short hint that describes the expected value"),
    readOnly: d("Specifies that the textarea is read-only"),
    required: d("Specifies that the textarea is required"),
    rows: d("Specifies the visible number of lines in the textarea"),
    value: d("Specifies the current value of the textarea"),
    wrap: d("Specifies how the text in a textarea is to be wrapped when submitted")
  }
});
const HtmlTfootMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `tfoot` tag.",
  isHtmlTag: true,
  themeVars: parseScssVar(htmlTagStyles.themeVarsTfoot)
});
const HtmlThMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `th` tag.",
  isHtmlTag: true,
  props: {
    abbr: d("Specifies an abbreviated version of the content in the header cell"),
    align: d("Specifies the horizontal alignment of the content in the header cell"),
    colSpan: d("Specifies the number of columns a header cell should span"),
    headers: d("Specifies a list of header cells the current header cell is related to"),
    rowSpan: d("Specifies the number of rows a header cell should span"),
    scope: d(
      "Specifies whether a header cell is a header for a column, row, or group of columns or rows"
    )
  },
  themeVars: parseScssVar(htmlTagStyles.themeVarsTh),
  defaultThemeVars: {
    "padding-HtmlTh": "$space-2",
    "fontSize-HtmlTh": "$fontSize-tiny",
    "fontWeight-HtmlTh": "$fontWeight-bold",
    "backgroundColor-HtmlTh--hover": "$color-surface-200"
  }
});
const HtmlTheadMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `thead` tag.",
  isHtmlTag: true,
  themeVars: parseScssVar(htmlTagStyles.themeVarsThead),
  defaultThemeVars: {
    "textTransform-HtmlThead": "uppercase",
    "backgroundColor-HtmlThead": "$color-surface-100",
    "textColor-HtmlThead": "$color-surface-500"
  }
});
const HtmlTimeMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `time` tag.",
  isHtmlTag: true,
  props: {
    dateTime: d("Specifies the date and time in a machine-readable format")
  }
});
const HtmlTrMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `tr` tag.",
  isHtmlTag: true,
  themeVars: parseScssVar(htmlTagStyles.themeVarsTr),
  defaultThemeVars: {
    "fontSize-HtmlTr": "$fontSize-small",
    "backgroundColor-row-HtmlTr": "inherit",
    "backgroundColor-HtmlTr--hover": "$color-primary-50"
  }
});
const HtmlTrackMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `track` tag.",
  isHtmlTag: true,
  props: {
    default: d("Specifies that the track is to be enabled if no other track is more suitable"),
    kind: d("Specifies the kind of text track"),
    label: d("Specifies the title of the text track"),
    src: d("Specifies the URL of the track file"),
    srcLang: d("Specifies the language of the track text data")
  }
});
const HtmlUMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `u` tag.",
  isHtmlTag: true
});
const HtmlUlMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `ul` tag.",
  isHtmlTag: true,
  themeVars: parseScssVar(htmlTagStyles.themeVarsList),
  // Use only themeVarsList
  defaultThemeVars: {
    "marginTop-HtmlUl": "$space-2",
    "marginBottom-HtmlUl": "$space-2"
  }
});
const HtmlVarMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `var` tag.",
  isHtmlTag: true
});
const HtmlVideoMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `video` tag.",
  isHtmlTag: true,
  props: {
    autoPlay: d("Specifies that the video will start playing as soon as it is ready"),
    controls: d("Specifies that video controls should be displayed"),
    height: d("Specifies the height of the video player"),
    loop: d("Specifies that the video will start over again when finished"),
    muted: d("Specifies that the video output should be muted"),
    poster: d("Specifies an image to be shown while the video is downloading"),
    preload: d(
      "Specifies if and how the author thinks the video should be loaded when the page loads"
    ),
    src: d("Specifies the URL of the video file"),
    width: d("Specifies the width of the video player")
  },
  themeVars: parseScssVar(htmlTagStyles.themeVarsVideo),
  defaultThemeVars: {
    "marginTop-HtmlVideo": "1rem",
    "marginBottom-HtmlVideo": "1rem"
  }
});
const HtmlWbrMd = createMetadata({
  status: "experimental",
  description: "This component renders an HTML `wbr` tag.",
  isHtmlTag: true
});
const COMP$2 = "ColorPicker";
const ColorPickerMd = createMetadata({
  description: "This component allows the user to select a color with the browser's default color picker control.",
  props: {
    initialValue: dInitialValue(),
    label: dLabel(),
    labelPosition: dLabelPosition(),
    labelWidth: dLabelWidth(COMP$2),
    labelBreak: dLabelBreak(COMP$2),
    enabled: dEnabled(),
    autoFocus: dAutoFocus(),
    required: dRequired(),
    readOnly: dReadonly(),
    validationStatus: dValidationStatus(defaultProps$5.validationStatus)
  },
  events: {
    didChange: dDidChange(COMP$2),
    gotFocus: dGotFocus(COMP$2),
    lostFocus: dLostFocus(COMP$2)
  },
  apis: {
    focus: dFocus(COMP$2),
    value: dValue(),
    setValue: dSetValueApi()
  },
  themeVars: parseScssVar(styles$f.themeVars)
});
const COMP$1 = "Markdown";
const MarkdownMd = createMetadata({
  description: `\`${COMP$1}\` displays plain text styled using markdown syntax.`,
  themeVars: parseScssVar(styles$c.themeVars),
  props: {
    content: d("This property sets the markdown content to display."),
    codeHighlighter: {
      description: "This property sets the code highlighter to use.",
      isInternal: true
    },
    removeIndents: {
      description: "This boolean property specifies whether leading indents should be removed from the markdown content. If set to `true`, the shortest indent found at the start of the content lines is removed from the beginning of every line.",
      valueType: "boolean",
      defaultValue: true
    }
  },
  defaultThemeVars: {
    "backgroundColor-Admonition": "$color-primary-100",
    "borderRadius-Admonition": "$space-2",
    "border-Admonition": "1px solid $color-primary-300",
    "iconSize-Admonition": "$space-5",
    "paddingLeft-Admonition": "$space-2",
    "paddingRight-Admonition": "$space-6",
    "paddingTop-Admonition": "$space-3",
    "paddingBottom-Admonition": "$space-2",
    "marginLeft-Admonition-content": "$space-1_5",
    "marginTop-Admonition": "$space-7",
    "marginBottom-Admonition": "$space-7",
    "marginTop-Blockquote": "$space-7",
    "marginBottom-Blockquote": "$space-7",
    "paddingHorizontal-Blockquote": "$space-6",
    "paddingTop-Blockquote": "$space-3",
    "paddingBottom-Blockquote": "$space-2_5",
    "backgroundColor-Blockquote": "$color-surface-100",
    "accentWidth-Blockquote": "3px",
    "accentColor-Blockquote": "$color-surface-500",
    "marginTop-HtmlLi": "$space-2_5",
    "marginBottom-HtmlLi": "$space-2_5",
    light: {
      // --- No light-specific theme vars
    },
    dark: {
      "backgroundColor-Blockquote": "$color-surface-50",
      "backgroundColor-Admonition": "$color-primary-200"
    }
  }
});
const COMP = "DataSource";
const DataSourceMd = createMetadata({
  status: "stable",
  description: `The \`${COMP}\` component manages fetching data from an API endpoint. This component automatically manages the complexity of the fetch operation and caching. To manipulate data on the backend, use the [\`APICall\`](./APICall.mdx) component.`,
  props: {
    method: {
      description: `Set the HTTP method.`,
      defaultValue: "get",
      availableValues: httpMethodNames
    },
    id: {
      description: `Set the ID used by other components to access the retrieved data in the \`value\`property of a \`DataSource\`, or status info in the \`loaded\` and \`error\` properties.`,
      isRequired: true,
      valueType: "string"
    },
    url: {
      description: `Set the URL.`,
      isRequired: true,
      valueType: "string"
    },
    body: {
      description: `Set the request body. The object you pass is serialized as a JSON string.`,
      valueType: "any"
    },
    rawBody: {
      description: `Set the request body with no serialization. Use it to send a payload  that has already been serialized to a JSON string.`,
      valueType: "string"
    },
    queryParams: {
      description: `Append key/value pairs to the URL.`,
      valueType: "any"
    },
    headers: {
      description: `Set request headers. Pass an object whose keys are header names and values are header values.`,
      valueType: "any"
    },
    pollIntervalInSeconds: {
      description: `Set the interval for periodic data fetching. If the data changes on refresh, XMLUI will re-render components that refer directly or indirectly to the \`DataSource\`. `,
      valueType: "number"
    },
    inProgressNotificationMessage: {
      description: `Set the message to display when the data fetch is in progress.`,
      valueType: "string"
    },
    completedNotificationMessage: {
      description: `Set the message to display when the data fetch completes.`,
      valueType: "string"
    },
    errorNotificationMessage: {
      description: `Set the message to display when the there is an error.`,
      valueType: "string"
    },
    resultSelector: {
      description: `Set an object key to extract a subset of the response data.`,
      valueType: "string"
    },
    transformResult: {
      description: `Set a function to perform a final transformation of the response data.`
    },
    prevPageSelector: {
      description: `When using \`${COMP}\` with paging, the response may contain information about the previous and next page. This property defines the selector that extracts the previous page information from the response deserialized to an object.`
    },
    nextPageSelector: {
      description: `When using \`${COMP}\` with paging, the response may contain information about the previous and next page. This property defines the selector that extracts the next page information from the response deserialized to an object.`
    },
    structuralSharing: {
      description: "This property allows structural sharing. When turned on, `DataSource` will keep the original reference if nothing has changed in the data. If a subset has changed, `DataSource` will keep the unchanged parts and only replace the changed parts. If you do not need this behavior, set this property to `false`.",
      defaultValue: "true"
    }
  },
  events: {
    loaded: d(
      "The component triggers this event when the fetch operation has been completed and the data is loaded. The event has two arguments. The first is the data loaded; the second indicates if the event is a result of a refetch."
    ),
    error: d(`This event fires when a request results in an error.`)
  },
  apis: {
    value: d(
      "This property retrieves the data queried from the source after optional transformations."
    ),
    inProgress: d("This property indicates if the data is being fetched."),
    isRefetching: d("This property indicates if the data is being re-fetched."),
    loaded: d("This property indicates if the data has been loaded."),
    refetch: d("This method requests the re-fetch of the data.")
  }
});
const collectedComponentMetadata = {
  // --- HTML tags
  a: HtmlAMd,
  address: HtmlAddressMd,
  area: HtmlAreaMd,
  article: HtmlArticleMd,
  aside: HtmlAsideMd,
  audio: HtmlAudioMd,
  b: HtmlBMd,
  bdi: HtmlBdiMd,
  bdo: HtmlBdoMd,
  blockquote: HtmlBlockquoteMd,
  br: HtmlBrMd,
  button: HtmlButtonMd,
  canvas: HtmlCanvasMd,
  caption: HtmlCaptionMd,
  cite: HtmlCiteMd,
  code: HtmlCodeMd,
  col: HtmlColMd,
  colgroup: HtmlColgroupMd,
  data: HtmlDataMd,
  datalist: HtmlDatalistMd,
  dd: HtmlDdMd,
  del: HtmlDelMd,
  details: HtmlDetailsMd,
  dfn: HtmlDfnMd,
  dialog: HtmlDialogMd,
  div: HtmlDivMd,
  dl: HtmlDlMd,
  dt: HtmlDtMd,
  em: HtmlEMMd,
  embed: HtmlEmbedMd,
  fieldset: HtmlFieldsetMd,
  figcaption: HtmlFigcaptionMd,
  figure: HtmlFigureMd,
  footer: HtmlFooterMd,
  form: HtmlFormMd,
  h1: HtmlH1Md,
  h2: HtmlH2Md,
  h3: HtmlH3Md,
  h4: HtmlH4Md,
  h5: HtmlH5Md,
  h6: HtmlH6Md,
  header: HtmlHeaderMd,
  hr: HtmlHrMd,
  i: HtmlIMd,
  iframe: HtmlIframeMd,
  img: HtmlImgMd,
  input: HtmlInputMd,
  ins: HtmlInsMd,
  kbd: HtmlKbdMd,
  label: HtmlLabelMd,
  legend: HtmlLegendMd,
  li: HtmlLiMd,
  main: HtmlMainMd,
  map: HtmlMapMd,
  mark: HtmlMarkMd,
  menu: HtmlMenuMd,
  meter: HtmlMeterMd,
  nav: HtmlNavMd,
  object: HtmlObjectMd,
  ol: HtmlOlMd,
  optgroup: HtmlOptgroupMd,
  option: HtmlOptionMd,
  output: HtmlOutputMd,
  p: HtmlPMd,
  param: HtmlParamMd,
  picture: HtmlPictureMd,
  pre: HtmlPreMd,
  progress: HtmlProgressMd,
  q: HtmlQMd,
  rp: HtmlRpMd,
  rt: HtmlRtMd,
  ruby: HtmlRubyMd,
  s: HtmlSMd,
  samp: HtmlSampMd,
  section: HtmlSectionMd,
  select: HtmlSelectMd,
  small: HtmlSmallMd,
  source: HtmlSourceMd,
  span: HtmlSpanMd,
  strong: HtmlStrongMd,
  sub: HtmlSubMd,
  summary: HtmlSummaryMd,
  sup: HtmlSupMd,
  table: HtmlTableMd,
  tbody: HtmlTbodyMd,
  td: HtmlTdMd,
  template: HtmlTemplateMd,
  textarea: HtmlTextareaMd,
  tfoot: HtmlTfootMd,
  th: HtmlThMd,
  thead: HtmlTheadMd,
  time: HtmlTimeMd,
  tr: HtmlTrMd,
  track: HtmlTrackMd,
  u: HtmlUMd,
  ul: HtmlUlMd,
  var: HtmlVarMd,
  video: HtmlVideoMd,
  wbr: HtmlWbrMd,
  // --- Heavy xmlui components
  Accordion: AccordionMd,
  APICall: APICallMd,
  App: AppMd,
  AppHeader: AppHeaderMd,
  AppState: AppStateMd,
  AutoComplete: AutoCompleteMd,
  Avatar: AvatarMd,
  Backdrop: BackdropMd,
  Badge: BadgeMd,
  Bookmark: BookmarkMd,
  Breakout: BreakoutMd,
  Button: ButtonMd,
  Card: CardMd,
  Carousel: CarouselMd,
  ChangeListener: ChangeListenerMd,
  Checkbox: CheckboxMd,
  CODE: HtmlCodeMd,
  ColorPicker: ColorPickerMd,
  Column: ColumnMd,
  ContentSeparator: ContentSeparatorMd,
  DataSource: DataSourceMd,
  DatePicker: DatePickerMd,
  DropdownMenu: DropdownMenuMd,
  EM: HtmlEMMd,
  Fragment: FragmentMd,
  MenuItem: MenuItemMd,
  SubMenuItem: SubMenuItemMd,
  EmojiSelector: EmojiSelectorMd,
  FileInput: FileInputMd,
  FileUploadDropZone: FileUploadDropZoneMd,
  FlowLayout: FlowLayoutMd,
  Footer: FooterMd,
  Form: FormMd,
  FormItem: FormItemMd,
  FormSection: FormSectionMd,
  Heading: HeadingMd,
  H1: H1Md,
  H2: H2Md,
  H3: H3Md,
  H4: H4Md,
  H5: H5Md,
  H6: H6Md,
  HoverCard: HoverCardMd,
  Icon: IconMd,
  Image: ImageMd,
  Items: ItemsMd,
  Link: LinkMd,
  List: ListMd,
  Logo: LogoMd,
  Markdown: MarkdownMd,
  MenuSeparator: MenuSeparatorMd,
  ModalDialog: ModalDialogMd,
  NavGroup: NavGroupMd,
  NavLink: NavLinkMd,
  NavPanel: NavPanelMd,
  NoResult: NoResultMd,
  NumberBox: NumberBoxMd,
  Option: OptionMd,
  PageMetaTitle: PageMetaTitleMd,
  Page: PageMd,
  Pages: PagesMd,
  PositionedContainer: PositionedContainerMd,
  ProgressBar: ProgressBarMd,
  Queue: QueueMd,
  RadioGroup: RadioGroupMd,
  RealTimeAdapter: RealTimeAdapterMd,
  Redirect: RedirectMd,
  Select: SelectMd,
  SelectionStore: SelectionStoreMd,
  Slider: SliderMd,
  SpaceFiller: SpaceFillerMd,
  Spinner: SpinnerMd,
  Splitter: SplitterMd,
  HSplitter: HSplitterMd,
  VSplitter: VSplitterMd,
  Stack: StackMd,
  CHStack: CHStackMd,
  CVStack: CVStackMd,
  HStack: HStackMd,
  VStack: VStackMd,
  StickyBox: StickyBoxMd,
  Switch: SwitchMd,
  Table: TableMd,
  TableOfContents: TableOfContentsMd,
  TabItem: TabItemMd,
  Tabs: TabsMd,
  Text: TextMd,
  TextArea: TextAreaMd,
  TextBox: TextBoxMd,
  PasswordInput: PasswordMd,
  Theme: ThemeMd,
  ToneChangerButton: ToneChangerButtonMd,
  Tree: TreeMd
};
const collectedThemes = {
  root: RootThemeDefinition,
  xmlui: XmlUiThemeDefinition,
  xmluiGreen: XmlUiGreenThemeDefinition,
  xmluiGray: XmlUiGrayThemeDefinition,
  xmluiOrange: XmlUiOrangeThemeDefinition,
  xmluiPurple: XmlUiPurpleThemeDefinition,
  xmluiCyan: XmlUiCyanThemeDefinition,
  xmluiRed: XmlUiRedThemeDefinition
};
export {
  collectedComponentMetadata,
  collectedThemes
};
