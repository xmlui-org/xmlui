@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$component: "NestedApp";
$themeVars: t.composePaddingVars($themeVars, $component);
$themeVars: t.composeBorderVars($themeVars, $component);
$themeVars: t.composeTextVars($themeVars, "header-#{$component}");
$backgroundColor-frame-NestedApp: createThemeVar("backgroundColor-frame-#{$component}");
$gap-frame-NestedApp: createThemeVar("gap-frame-#{$component}");
$marginTop-NestedApp: createThemeVar("marginTop-#{$component}");
$marginBottom-NestedApp: createThemeVar("marginBottom-#{$component}");
$boxShadow-NestedApp: createThemeVar("boxShadow-#{$component}");
$backgroundColor-viewControls-NestedApp: createThemeVar(
  "backgroundColor-viewControls-#{$component}"
);
$bordRadius-viewControls-NestedApp: createThemeVar("borderRadius-viewControls-#{$component}");
$padding-viewControls-NestedApp: createThemeVar("padding-viewControls-#{$component}");
$paddingVertical-viewControls-button-NestedApp: createThemeVar(
  "paddingVertical-viewControls-button-#{$component}"
);
$paddingHorizontal-viewControls-button-NestedApp: createThemeVar(
  "paddingHorizontal-viewControls-button-#{$component}"
);
$bordRadius-NestedApp: createThemeVar("borderRadius-#{$component}");
$borderBottom-header-NestedApp: createThemeVar("borderBottom-header-#{$component}");
$height-logo-splitView-NestedApp: createThemeVar("height-logo-splitView-#{$component}");
$width-logo-splitView-NestedApp: createThemeVar("width-logo-splitView-#{$component}");
$width-controls-NestedApp: createThemeVar("width-controls-#{$component}");

// --- Split view styles
$padding-button-splitView-NestedApp: createThemeVar("padding-button-splitView-#{$component}");
$width-button-splitView-NestedApp: createThemeVar("width-button-splitView-#{$component}");
$backgroundColor-code-splitView-NestedApp: createThemeVar(
  "backgroundColor-code-splitView-#{$component}"
);
$backgroundColor-button-splitView-NestedApp--active: createThemeVar(
  "backgroundColor-button-splitView-#{$component}--active"
);
$color-button-splitView-NestedApp: createThemeVar(
  "color-button-splitView-#{$component}"
);
$color-button-splitView-NestedApp--active: createThemeVar(
  "color-button-splitView-#{$component}--active"
);
$borderRadius-button-splitView-NestedApp: createThemeVar(
  "borderRadius-button-splitView-#{$component}"
);
$borderColor-button-splitView-NestedApp: createThemeVar(
  "borderColor-button-splitView-#{$component}"
);

// --- End of theme variables collection

.nestedAppContainer {
  @include t.borderVars($themeVars, $component);
  @include t.paddingVars($themeVars, $component);

  //https://stackoverflow.com/a/70422489
  //https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_display/Containing_block#identifying_the_containing_block
  //" ...If the position property is absolute or fixed, the containing block may also be formed by the edge of the padding box of the nearest ancestor element that has any of the following:
  // A filter, backdrop-filter, transform, or perspective value other than none. ..."

  // so we do this to make the position 'fixed' elements to be positioned relative to the nestedAppContainer
  //transform: scale(1);
  margin-top: $marginTop-NestedApp;
  margin-bottom: $marginBottom-NestedApp;
  width: 100%;
  height: fit-content;
  display: flex;
  border-radius: $bordRadius-NestedApp;
  flex-direction: column;
  gap: $gap-frame-NestedApp;
  background-color: $backgroundColor-frame-NestedApp;
  align-content: center;
  box-shadow: $boxShadow-NestedApp;
  overflow: hidden;

  .contentContainer {
    width: 100%;
    height: 100%;
    overflow: auto;
    display: flex;
    align-items: center;

    .splitViewMarkdown{
      :global(.global-codeBlock){
        background-color: $backgroundColor-code-splitView-NestedApp;
        height: 100%;
        border: none;
        border-radius: 0;
      }
    }
  }
}

:is(html[class~="dark"]) {
  .preview {
    border: 1px solid #33404f;
  }
}

.preview {
  overflow: hidden;
}

.viewControls {
  display: flex;
  flex-direction: row;
  align-items: center;
  padding: $padding-viewControls-NestedApp;
  background-color: $backgroundColor-viewControls-NestedApp;
  border-radius: $bordRadius-viewControls-NestedApp;
}

.logo {
  width: $width-logo-splitView-NestedApp;
  height: $height-logo-splitView-NestedApp;
}

.splitViewButton {
  padding: $padding-button-splitView-NestedApp !important;
  width: $width-button-splitView-NestedApp !important;
  color: $color-button-splitView-NestedApp !important;
  border-radius: $borderRadius-button-splitView-NestedApp !important;
  border-color: $borderColor-button-splitView-NestedApp !important;

  &.show {
    background-color: $backgroundColor-button-splitView-NestedApp--active;
    color: $color-button-splitView-NestedApp--active !important;
    &:hover {
      background-color: $backgroundColor-button-splitView-NestedApp--active !important;
    }
  }
  &.hide {
    background-color: transparent;
    &:hover {
      background-color: transparent !important;
    }
  }
}

.header {
  width: 100%;
  display: flex;
  align-items: center;
  padding: t.$space-2;
  border-bottom: $borderBottom-header-NestedApp;
  justify-content: space-between;

  .headerText {
    @include t.textVars($themeVars, "header-#{$component}");
    padding-left: t.$space-2;
    margin-right: auto;
  }

  .headerButton {
    padding: t.$space-2 t.$space-3;
  }

  .spacer {
    flex: 1 1 0 !important;
    place-self: stretch;
  }
}

.wrapper {
  width: $width-controls-NestedApp;
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}
