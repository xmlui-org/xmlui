@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$componentName: "TimeInput";

// --- TimeInput specific theme variables
$color-divider-TimeInput: createThemeVar("color-divider-#{$componentName}");
$spacing-divider-TimeInput: createThemeVar("spacing-divider-#{$componentName}");
$width-input-TimeInput: createThemeVar("width-input-#{$componentName}");
$minWidth-input-TimeInput: createThemeVar("minWidth-input-#{$componentName}");
$padding-input-TimeInput: createThemeVar("padding-input-#{$componentName}");
$textAlign-input-TimeInput: createThemeVar("textAlign-input-#{$componentName}");
$fontSize-input-TimeInput: createThemeVar("fontSize-input-#{$componentName}");
$borderRadius-input-TimeInput: createThemeVar("borderRadius-input-#{$componentName}");
$backgroundColor-input-TimeInput-invalid: createThemeVar(
  "backgroundColor-input-#{$componentName}-invalid"
);
$padding-button-TimeInput: createThemeVar("padding-button-#{$componentName}");
$borderRadius-button-TimeInput: createThemeVar("borderRadius-button-#{$componentName}");
$hoverColor-button-TimeInput: createThemeVar("hoverColor-button-#{$componentName}");
$disabledColor-button-TimeInput: createThemeVar("disabledColor-button-#{$componentName}");
$outlineColor-button-TimeInput--focused: createThemeVar(
  "outlineColor-button-#{$componentName}--focused"
);
$outlineWidth-button-TimeInput--focused: createThemeVar(
  "outlineWidth-button-#{$componentName}--focused"
);
$outlineOffset-button-TimeInput--focused: createThemeVar(
  "outlineOffset-button-#{$componentName}--focused"
);
$minWidth-ampm-TimeInput: createThemeVar("minWidth-ampm-#{$componentName}");
$fontSize-ampm-TimeInput: createThemeVar("fontSize-ampm-#{$componentName}");

// New theme variables for better theming
$opacity-TimeInput--disabled: createThemeVar("opacity-#{$componentName}--disabled");
$backgroundColor-TimeInput--hover: createThemeVar("backgroundColor-#{$componentName}--hover");
$margin-input-TimeInput: createThemeVar("margin-input-#{$componentName}");
$transition-background-TimeInput: createThemeVar("transition-background-#{$componentName}");
$backgroundColor-menu-TimeInput: createThemeVar("backgroundColor-menu-#{$componentName}");
$borderRadius-menu-TimeInput: createThemeVar("borderRadius-menu-#{$componentName}");
$boxShadow-menu-TimeInput: createThemeVar("boxShadow-menu-#{$componentName}");
$borderColor-menu-TimeInput: createThemeVar("borderColor-menu-#{$componentName}");
$backgroundColor-item-TimeInput--hover: createThemeVar(
  "backgroundColor-item-#{$componentName}--hover"
);
$backgroundColor-item-TimeInput--active: createThemeVar(
  "backgroundColor-item-#{$componentName}--active"
);
$maxHeight-menu-TimeInput: createThemeVar("maxHeight-menu-#{$componentName}");
$padding-item-TimeInput: createThemeVar("padding-item-#{$componentName}");
$opacity-item-TimeInput--disabled: createThemeVar("opacity-item-#{$componentName}--disabled");
$margin-icon-TimeInput: createThemeVar("margin-icon-#{$componentName}");
$outlineColor-ampm-TimeInput--focused: createThemeVar(
  "outlineColor-ampm-#{$componentName}--focused"
);
$outlineWidth-ampm-TimeInput--focused: createThemeVar(
  "outlineWidth-ampm-#{$componentName}--focused"
);
$outlineOffset-ampm-TimeInput--focused: createThemeVar(
  "outlineOffset-ampm-#{$componentName}--focused"
);

// --- CSS properties of a particular TimeInput variant
@mixin variant($variantName) {
  border-radius: createThemeVar("Input:borderRadius-#{$componentName}-#{$variantName}");
  border-color: createThemeVar("Input:borderColor-#{$componentName}-#{$variantName}");
  border-width: createThemeVar("Input:borderWidth-#{$componentName}-#{$variantName}");
  border-style: createThemeVar("Input:borderStyle-#{$componentName}-#{$variantName}");
  background-color: createThemeVar("Input:backgroundColor-#{$componentName}-#{$variantName}");
  box-shadow: createThemeVar("Input:boxShadow-#{$componentName}-#{$variantName}");
  color: createThemeVar("Input:textColor-#{$componentName}-#{$variantName}");
  padding: createThemeVar("Input:padding-#{$componentName}-#{$variantName}");

  &:hover {
    border-color: createThemeVar("Input:borderColor-#{$componentName}-#{$variantName}--hover");
    background-color: createThemeVar(
      "Input:backgroundColor-#{$componentName}-#{$variantName}--hover"
    );
    box-shadow: createThemeVar("Input:boxShadow-#{$componentName}-#{$variantName}--hover");
    color: createThemeVar("Input:textColor-#{$componentName}-#{$variantName}--hover");
  }

  &:focus-within {
    border-color: createThemeVar("Input:borderColor-#{$componentName}-#{$variantName}--focus");
    background-color: createThemeVar(
      "Input:backgroundColor-#{$componentName}-#{$variantName}--focus"
    );
    box-shadow: createThemeVar("Input:boxShadow-#{$componentName}-#{$variantName}--focus");
    color: createThemeVar("Input:textColor-#{$componentName}-#{$variantName}--focus");
  }

  &:has(.reactTimeInputWrapper input:focus-visible) {
    outline-width: createThemeVar("Input:outlineWidth-#{$componentName}-#{$variantName}--focus");
    outline-color: createThemeVar("Input:outlineColor-#{$componentName}-#{$variantName}--focus");
    outline-style: createThemeVar("Input:outlineStyle-#{$componentName}-#{$variantName}--focus");
    outline-offset: createThemeVar("Input:outlineOffset-#{$componentName}-#{$variantName}--focus");
  }

  .adornment {
    color: createThemeVar("Input:color-adornment-#{$componentName}-#{$variantName}");
  }
}

@layer components {
  .timeInputWrapper {
    display: flex;
    align-items: center;
    width: fit-content;
    border-style: solid;
    border-width: 1px;
    transition: $transition-background-TimeInput;
    overflow: hidden;
    gap: createThemeVar("Input:gap-adornment-#{$componentName}");

    &.disabled {
      opacity: $opacity-TimeInput--disabled;
      pointer-events: none;
    }

    &.readOnly {
      .timeInputWrapper input {
        cursor: default;
      }
    }

    @include variant("default");

    &.error {
      @include variant("error");
    }
    &.warning {
      @include variant("warning");
    }
    &.valid {
      @include variant("success");
    }

    &:has(input:is(:disabled)) {
      cursor: not-allowed;
      background-color: createThemeVar("Input:backgroundColor-#{$componentName}--disabled");
      color: createThemeVar("Input:textColor-#{$componentName}--disabled");
      border-color: createThemeVar("Input:borderColor-#{$componentName}--disabled");
    }

    button {
      background: transparent;
      border: none;
      cursor: pointer;
      color: inherit;
      padding: $padding-button-TimeInput;
      border-radius: createThemeVar("Input:borderRadius-#{$componentName}-default");

      &:hover {
        background-color: $backgroundColor-TimeInput--hover;
      }

      &:focus {
        outline: 2px solid createThemeVar("Input:outlineColor-#{$componentName}-default--focus");
        outline-offset: 2px;
      }

      &:disabled {
        cursor: not-allowed;
        opacity: $opacity-TimeInput--disabled;
      }
    }
  }

  // TimeInput internal components styling (moved from TimeInput.css)
  .wrapper {
    display: flex;
    flex-grow: 1;
    flex-shrink: 0;
  }

  .inputGroup {
    display: flex;
    align-items: center;
    flex-grow: 1;
    min-width: 0; // Allow shrinking
    gap: 0; // Remove gap since dividers handle spacing
    padding: 0 0.125rem; // Use rem for consistent padding
    box-sizing: border-box;
  }

  .divider {
    padding: $spacing-divider-TimeInput;
    white-space: pre;
    display: inline-block;
    font: inherit;
    color: $color-divider-TimeInput;
  }

  .leadingZero {
    display: inline-block;
    font: inherit;
  }

  .input {
    min-width: $minWidth-input-TimeInput;
    height: 100%;
    position: relative;
    padding: $padding-input-TimeInput;
    border: 0;
    background: none;
    color: currentColor;
    font: inherit;
    font-size: $fontSize-input-TimeInput;
    box-sizing: content-box;
    border-radius: $borderRadius-input-TimeInput;
    -webkit-appearance: textfield;
    -moz-appearance: textfield;
    appearance: textfield;

    // Specific widths for different input types
    &.hour,
    &.hour12,
    &.hour24,
    &.minute,
    &.second {
      // Use character-based width for better font-size independence
      width: 2.5ch;
      min-width: 2.5ch;
      max-width: 2.5ch;
      text-align: center;
      padding: $padding-input-TimeInput !important;
      box-sizing: border-box !important;
    }

    // Hide spin buttons for number inputs
    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      margin: 0 !important;
      display: none !important;
    }

    // Hide spin buttons for Firefox
    &[type="number"] {
      -moz-appearance: textfield !important;
      appearance: textfield !important;
    }

    &:invalid {
      background: $backgroundColor-input-TimeInput-invalid;
    }

    &.invalid {
      background-color: $backgroundColor-input-TimeInput-invalid;
    }

    &.hasLeadingZero {
      // Use character-based width for more predictable sizing with digits
      min-width: 2.5ch; // Enough space for 2 digits + padding
      text-align: center;
    }
  }

  .amPm {
    min-width: $minWidth-ampm-TimeInput !important;
    width: 4ch !important; // Fixed width to accommodate both AM and PM
    height: 100% !important;
    font: inherit;
    font-size: $fontSize-ampm-TimeInput;
    display: inline-flex !important;
    align-items: center;
    justify-content: space-between;
    border: 0 !important;
    border-radius: $borderRadius-input-TimeInput;
    background: none !important;
    padding: $padding-input-TimeInput !important;
    cursor: pointer;
    box-sizing: border-box;
    color: currentColor;
    position: relative;

    &:hover {
      background-color: $backgroundColor-TimeInput--hover !important;
    }

    &:focus {
      outline: $outlineWidth-ampm-TimeInput--focused solid $outlineColor-ampm-TimeInput--focused;
      outline-offset: $outlineOffset-ampm-TimeInput--focused;
    }

    &:disabled,
    &[data-disabled] {
      cursor: not-allowed;
      opacity: $opacity-TimeInput--disabled;
      pointer-events: none;
    }
  }

  // New button-based AM/PM selector
  .amPmButton {
    min-width: $minWidth-ampm-TimeInput !important;
    height: 100% !important;
    font: inherit;
    font-size: $fontSize-ampm-TimeInput;
    display: inline-flex !important;
    align-items: center;
    justify-content: center;
    border: 0 !important;
    border-radius: $borderRadius-input-TimeInput;
    background: none !important;
    padding: $padding-input-TimeInput !important;
    cursor: pointer;
    box-sizing: border-box;
    color: currentColor;
    position: relative;

    &:hover {
      background-color: $backgroundColor-TimeInput--hover !important;
    }

    &:focus {
      outline: $outlineWidth-ampm-TimeInput--focused solid $outlineColor-ampm-TimeInput--focused;
      outline-offset: $outlineOffset-ampm-TimeInput--focused;
    }

    &:disabled {
      cursor: not-allowed;
      opacity: $opacity-TimeInput--disabled;
      pointer-events: none;
    }
  }

  .amPmValue {
    display: flex;
    min-width: 0;
  }

  .amPmIcon {
    margin-left: $margin-icon-TimeInput;
    flex-shrink: 0;
    width: 1em; // Scale with font size
    height: 1em; // Scale with font size
  }

  .amPmContent {
    position: relative;
    width: 100%;
    max-height: $maxHeight-menu-TimeInput;
    z-index: 1000;
    overflow: auto;
    background-color: $backgroundColor-menu-TimeInput;
    border-radius: $borderRadius-menu-TimeInput;
    box-shadow: $boxShadow-menu-TimeInput;
    border: 1px solid $borderColor-menu-TimeInput;
    min-width: var(--radix-select-trigger-width);
    max-width: var(--radix-select-content-available-width);
  }

  .amPmItem {
    position: relative;
    display: flex;
    cursor: pointer;
    user-select: none;
    align-items: center;
    outline: none;
    padding: $padding-item-TimeInput;

    &[data-highlighted] {
      background-color: $backgroundColor-item-TimeInput--hover;
    }

    &[data-state="checked"] {
      background-color: $backgroundColor-item-TimeInput--active;
    }

    &[data-disabled] {
      pointer-events: none;
      opacity: $opacity-item-TimeInput--disabled;
      cursor: not-allowed;
      font-style: italic;
    }
  }

  .button {
    border: 0;
    background: transparent;
    padding: $padding-button-TimeInput;
    border-radius: $borderRadius-button-TimeInput;

    &:enabled {
      cursor: pointer;

      &:hover .buttonIcon,
      &:focus .buttonIcon {
        stroke: $hoverColor-button-TimeInput;
      }
    }

    &:disabled .buttonIcon {
      stroke: $disabledColor-button-TimeInput;
    }

    &:focus {
      outline: $outlineWidth-button-TimeInput--focused solid $outlineColor-button-TimeInput--focused;
      outline-offset: $outlineOffset-button-TimeInput--focused;
    }

    svg {
      display: inherit;
    }
  }

  .clearButton {
    @extend .button;
  }

  .buttonIcon {
    // Base styling for button icons
    display: inherit;
    width: 1em; // Scale with font size
    height: 1em; // Scale with font size
  }

  .clearButtonIcon {
    @extend .buttonIcon;
  }
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}
