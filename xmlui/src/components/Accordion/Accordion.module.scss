@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$component: "Accordion";
$themeVars: t.composeBorderVars($themeVars, $component);
$themeVars: t.composePaddingVars($themeVars, $component);

// Generic Accordion variables
$borderRadius-Accordion: createThemeVar("borderRadius-Accordion");

// Header variables
$verticalAlignment-header-Accordion: createThemeVar("verticalAlignment-header-Accordion");
$fontSize-header-Accordion: createThemeVar("fontSize-header-Accordion");
$fontWeight-header-Accordion: createThemeVar("fontWeight-header-Accordion");
$fontStyle-header-Accordion: createThemeVar("fontStyle-header-Accordion");
$paddingVertical-header-Accordion: createThemeVar("paddingVertical-header-Accordion");
$paddingHorizontal-header-Accordion: createThemeVar("paddingHorizontal-header-Accordion");
$backgroundColor-header-Accordion: createThemeVar("backgroundColor-header-Accordion");
$color-header-Accordion: createThemeVar("color-header-Accordion");
$backgroundColor-header-Accordion-hover: createThemeVar("backgroundColor-header-Accordion--hover");

// Content variables
$color-content-Accordion: createThemeVar("color-content-Accordion");
$backgroundColor-content-Accordion: createThemeVar("backgroundColor-content-Accordion");

// Icon variables
$width-icon-Accordion: createThemeVar("width-icon-Accordion");
$height-icon-Accordion: createThemeVar("height-icon-Accordion");
$color-icon-Accordion: createThemeVar("color-icon-Accordion");

@layer components {
  .root {
    overflow: hidden;
    width: 100%;
    //box-shadow: 0 2px 10px var(--black-a4);
    @include t.borderVars($themeVars, $component);
    @include t.paddingVars($themeVars, $component);
  }

  .item {
    overflow: hidden;
    margin-top: 1px;
    box-sizing: border-box;

    &:first-child {
      margin-top: 0;
      border-top-left-radius: $borderRadius-Accordion;
      border-top-right-radius: $borderRadius-Accordion;
    }

    &:last-child {
      border-bottom-left-radius: $borderRadius-Accordion;
      border-bottom-right-radius: $borderRadius-Accordion;
    }

    &:focus-within {
      position: relative;
      z-index: 1;
    }
  }

  .header {
    display: flex;
    margin: 0;
  }

  .trigger {
    font-family: inherit;
    flex: 1;
    display: inline-flex;
    align-items: $verticalAlignment-header-Accordion;
    justify-content: space-between;
    line-height: 1;
    box-sizing: border-box;
    font-size: $fontSize-header-Accordion;
    font-weight: $fontWeight-header-Accordion;
    font-style: $fontStyle-header-Accordion;
    padding: $paddingVertical-header-Accordion $paddingHorizontal-header-Accordion;
    background-color: $backgroundColor-header-Accordion;
    color: $color-header-Accordion;

    &:hover {
      background-color: $backgroundColor-header-Accordion-hover;
    }

    &.triggerStart {
      flex-direction: row-reverse;
    }
  }

  .contentWrapper {
    overflow: hidden;
    color: $color-content-Accordion;
    background-color: $backgroundColor-content-Accordion;

    &[data-state='open'] {
      animation: slideDown 300ms cubic-bezier(0.87, 0, 0.13, 1);
    }

    &[data-state='closed'] {
      animation: slideUp 300ms cubic-bezier(0.87, 0, 0.13, 1);
    }
  }

  .content {
    padding: t.$space-2;
  }

  .chevron {
    width: $width-icon-Accordion;
    height: $height-icon-Accordion;
    color: $color-icon-Accordion;
  }

  @keyframes slideDown {
    from {
      height: 0;
    }
    to {
      height: var(--radix-accordion-content-height);
    }
  }

  @keyframes slideUp {
    from {
      height: var(--radix-accordion-content-height);
    }
    to {
      height: 0;
    }
  }
}



// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}
