@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$themeVars: t.composeBorderVars($themeVars, "H1");
$themeVars: t.composePaddingVars($themeVars, "H1");
$themeVars: t.composeTextVars($themeVars, "H1");
$themeVars: t.composeBorderVars($themeVars, "H2");
$themeVars: t.composePaddingVars($themeVars, "H2");
$themeVars: t.composeTextVars($themeVars, "H2");
$themeVars: t.composeBorderVars($themeVars, "H3");
$themeVars: t.composePaddingVars($themeVars, "H3");
$themeVars: t.composeTextVars($themeVars, "H3");
$themeVars: t.composeBorderVars($themeVars, "H4");
$themeVars: t.composePaddingVars($themeVars, "H4");
$themeVars: t.composeTextVars($themeVars, "H4");
$themeVars: t.composeBorderVars($themeVars, "H5");
$themeVars: t.composePaddingVars($themeVars, "H5");
$themeVars: t.composeTextVars($themeVars, "H5");
$themeVars: t.composeBorderVars($themeVars, "H6");
$themeVars: t.composePaddingVars($themeVars, "H6");
$themeVars: t.composeTextVars($themeVars, "H6");
$color-anchor-Heading: createThemeVar("color-anchor-Heading");
$gap-anchor-Heading: createThemeVar("gap-anchor-Heading");
$textDecorationLine-anchor-Heading: createThemeVar("textDecorationLine-anchor-Heading");

$textColor-Heading: createThemeVar("textColor-Heading");
$textColor-H1: createThemeVar("textColor-H1");
$textColor-H2: createThemeVar("textColor-H2");
$textColor-H3: createThemeVar("textColor-H3");
$textColor-H4: createThemeVar("textColor-H4");
$textColor-H5: createThemeVar("textColor-H5");
$textColor-H6: createThemeVar("textColor-H6");
// ... TODO for all other theme variables used in this module

@mixin heading($level) {
  @include t.paddingVars($themeVars, $level);
  @include t.borderVars($themeVars, $level);
  @include t.textVars($themeVars, $level);
  color: createThemeVar("Heading:textColor-#{$level}");
  letter-spacing: createThemeVar("Heading:letterSpacing-#{$level}");
  font-family: createThemeVar("Heading:fontFamily-#{$level}");
  font-size: createThemeVar("Heading:fontSize-#{$level}");
  font-weight: createThemeVar("Heading:fontWeight-#{$level}");
  margin-top: createThemeVar("marginTop-#{$level}"); // Intentionally omitting "Heading" inheritance
  margin-bottom: createThemeVar(
    "marginBottom-#{$level}"
  ); // Intentionally omitting "Heading" inheritance
  text-decoration-line: createThemeVar("Heading:textDecorationLine-#{$level}");
  text-decoration-color: createThemeVar("Heading:textDecorationColor-#{$level}");
  text-decoration-style: createThemeVar("Heading:textDecorationStyle-#{$level}");
  text-decoration-thickness: createThemeVar("Heading:textDecorationThickness-#{$level}");
  text-underline-offset: createThemeVar("Heading:textUnderlineOffset-#{$level}");
}

@layer components{
  .heading {
    &.h1 {
      @include heading("H1");
    }
    &.h2 {
      @include heading("H2");
    }
    &.h3 {
      @include heading("H3");
    }
    &.h4 {
      @include heading("H4");
    }
    &.h5 {
      @include heading("H5");
    }
    &.h6 {
      @include heading("H6");
    }

    --my-scroll-margin-top: var(--header-height);
    scroll-margin-top: var(--my-scroll-margin-top);

    a {
      opacity: 0; // Hide the <a> element by default
      margin-left: $gap-anchor-Heading;
      color: $color-anchor-Heading;
      transition: opacity 0.2s ease-in-out; // Smooth transition for visibility
    }

    &:hover {
      a {
        opacity: 1;
        text-decoration: $textDecorationLine-anchor-Heading;
      }
    }
  }

  .anchorRef {
    width: 0;
    height: 0;
    --my-scroll-margin-top: var(--header-height);
    scroll-margin-top: var(--my-scroll-margin-top);
  }

  /*
  This is a Chromium based solution that is supported by most modern browsers.
  See this source for details: https://css-tricks.com/line-clampin/
  */
  .truncateOverflow {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .preserveLinebreaks {
    white-space: pre-wrap;
  }

  .noEllipsis {
    text-overflow: clip;
  }
}


// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}
