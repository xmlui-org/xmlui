@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

// --- CSS properties of a particular Checkbox variant
@mixin checkboxVariant($variantName) {
  border-radius: createThemeVar("Input:borderRadius-Checkbox-#{$variantName}");
  border-color: createThemeVar("Input:borderColor-Checkbox-#{$variantName}");
  background-color: createThemeVar("Input:backgroundColor-Checkbox-#{$variantName}");

  &:focus-visible {
    outline-width: createThemeVar("Input:outlineWidth-Checkbox-#{$variantName}--focus");
    outline-color: createThemeVar("Input:outlineColor-Checkbox-#{$variantName}--focus");
    outline-style: createThemeVar("Input:outlineStyle-Checkbox-#{$variantName}--focus");
    outline-offset: createThemeVar("Input:outlineOffset-Checkbox-#{$variantName}--focus");
  }
}

@mixin hoverAndDisabledState($componentName) {
  &:hover {
    border-color: createThemeVar("Input:borderColor-#{$componentName}-default--hover");
  }

  &:disabled {
    cursor: not-allowed;
    background-color: createThemeVar("Input:backgroundColor-#{$componentName}--disabled");
    border-color: createThemeVar("Input:borderColor-#{$componentName}--disabled");
  }
}

@mixin checkedState($componentName) {
  &:checked {
    border-color: createThemeVar("Input:borderColor-checked-#{$componentName}");
    background-color: createThemeVar("Input:backgroundColor-checked-#{$componentName}");
  }

  &:checked:disabled {
    background-color: createThemeVar("Input:backgroundColor-#{$componentName}--disabled");
    border-color: createThemeVar("Input:borderColor-#{$componentName}--disabled");
  }

  &:checked.error {
    border-color: createThemeVar("Input:borderColor-checked-#{$componentName}-error");
    background-color: createThemeVar("Input:backgroundColor-checked-#{$componentName}-error");
  }

  &:checked.warning {
    border-color: createThemeVar("Input:borderColor-checked-#{$componentName}-warning");
    background-color: createThemeVar("Input:backgroundColor-checked-#{$componentName}-warning");
  }

  &:checked.valid {
    border-color: createThemeVar("Input:borderColor-checked-#{$componentName}-success");
    background-color: createThemeVar("Input:backgroundColor-checked-#{$componentName}-success");
  }
}

@layer components {
  .resetAppearance {
    /* Add if not using autoprefixer */
    -webkit-appearance: none;
    appearance: none;
    /* Not removed via appearance */
    margin: 0;
  }

  .label {
    width: 100%;
  }

  .inputContainer {
    z-index: -1;
    position: relative;
    opacity: 0;
    width: 0;
    height: 0;
  }

  // --------------- Checkbox ---------------

  .checkbox {
    display: grid;
    place-content: center;
    min-width: 1em;
    min-height: 1em;
    width: 1em;
    height: 1em;
    border: 2px solid transparent;

    &:not([readonly]) {
      cursor: pointer;
    }

    @include checkboxVariant("default");
    @include hoverAndDisabledState("Checkbox");

    .forceHover {
      border-color: createThemeVar("Input:borderColor-Checkbox-default--hover");
      // Don't override background-color - let the existing background rules apply
    }

    &.error {
      @include checkboxVariant("error");
    }

    &.warning {
      @include checkboxVariant("warning");
    }

    &.valid {
      @include checkboxVariant("success");
    }

    &::before {
      content: "";
      width: 0.5em;
      height: 0.5em;
      transform: scale(0);
      transition: 0.1s transform ease-out;
      box-shadow: inset 1em 1em createThemeVar("backgroundColor-indicator-Checkbox");
      transform-origin: center;
      clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
    }

    &:checked::before {
      transform: scale(1);
    }

    @include checkedState("Checkbox");

    &:indeterminate {
      background-color: createThemeVar("Input:backgroundColor-checked-Checkbox");
      border-color: createThemeVar("Input:borderColor-checked-Checkbox");

      &[readonly] {
        pointer-events: none;
      }
    }
    &:indeterminate:disabled {
      background-color: createThemeVar("Input:backgroundColor-Checkbox--disabled");
      border-color: createThemeVar("Input:borderColor-Checkbox--disabled");
    }
    &:indeterminate::before {
      clip-path: circle(30% at 50% 50%);
      transform: scale(1);
    }
  }

  // --------------- Switch ---------------

  .switch {
    --thumb-size: 1rem;
    --thumb-position: 0%;
    --track-size: calc(var(--thumb-size) * 3);
    --padding-size: 4px;

    cursor: pointer;
    flex-shrink: 0;
    display: grid;
    align-items: center;
    grid: [track] 1fr / [track] 1fr;
    background-color: createThemeVar("Input:backgroundColor-Switch");

    width: var(--track-size);
    min-height: var(--thumb-size);

    padding: var(--padding-size);
    border: 1px solid createThemeVar("Input:borderColor-Switch");
    border-radius: 1rem;

    &::before {
      content: "";
      grid-area: track;
      height: var(--thumb-size);
      width: var(--thumb-size);
      background: createThemeVar("backgroundColor-indicator-Switch");
      border-radius: 50%;

      transform: translateX(var(--thumb-position));
      transition: 0.3s transform;
    }

    &:checked {
      background: createThemeVar("backgroundColor-checked-Switch");

      &::before {
        background: createThemeVar("backgroundColor-indicator-checked-Switch");
        --thumb-position: calc(
          var(--track-size) - var(--thumb-size) - 2 * var(--padding-size) - 2px
        );
      }
    }

    @include hoverAndDisabledState("Switch");
    @include checkedState("Switch");

    .forceHover {
      border-color: createThemeVar("Input:borderColor-Switch-default--hover");
      // Don't override background-color - let the existing background rules apply
    }

    &:focus-visible {
      outline-width: createThemeVar("Input:outlineWidth-Switch--focus");
      outline-color: createThemeVar("Input:outlineColor-Switch--focus");
      outline-style: createThemeVar("Input:outlineStyle-Switch--focus");
      outline-offset: createThemeVar("Input:outlineOffset-Switch--focus");
    }

    &:disabled {
      &::before {
        background-color: createThemeVar("backgroundColor-Switch-indicator--disabled");
      }
    }

    &.error {
      border-color: createThemeVar("Input:borderColor-Switch-error");
    }

    &.warning {
      border-color: createThemeVar("Input:borderColor-Switch-warning");
    }

    &.valid {
      border-color: createThemeVar("Input:borderColor-Switch-success");
    }
  }
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}
