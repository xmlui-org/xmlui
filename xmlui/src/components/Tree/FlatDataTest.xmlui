<App
  var.flatData=`{[
    // Root level departments
    { id: "dept-1", name: "Engineering", type: "department", parentId: null, employeeCount: 45 },
    { id: "dept-2", name: "Marketing", type: "department", parentId: null, employeeCount: 12 },
    { id: "dept-3", name: "Sales", type: "department", parentId: null, employeeCount: 28 },
    
    // Engineering teams
    { id: "team-1", name: "Frontend Team", type: "team", parentId: "dept-1", employeeCount: 8 },
    { id: "team-2", name: "Backend Team", type: "team", parentId: "dept-1", employeeCount: 12 },
    { id: "team-3", name: "DevOps Team", type: "team", parentId: "dept-1", employeeCount: 5 },
    { id: "team-4", name: "QA Team", type: "team", parentId: "dept-1", employeeCount: 6 },
    
    // Marketing teams
    { id: "team-5", name: "Digital Marketing", type: "team", parentId: "dept-2", employeeCount: 6 },
    { id: "team-6", name: "Content Marketing", type: "team", parentId: "dept-2", employeeCount: 4 },
    
    // Sales teams
    { id: "team-7", name: "Enterprise Sales", type: "team", parentId: "dept-3", employeeCount: 15 },
    { id: "team-8", name: "SMB Sales", type: "team", parentId: "dept-3", employeeCount: 8 },
    
    // Frontend team members
    { id: "emp-1", name: "Sarah Chen", type: "employee", parentId: "team-1", role: "Senior Frontend Developer" },
    { id: "emp-2", name: "Mike Rodriguez", type: "employee", parentId: "team-1", role: "React Specialist" },
    { id: "emp-3", name: "Emily Watson", type: "employee", parentId: "team-1", role: "UI/UX Developer" },
    
    // Backend team members
    { id: "emp-4", name: "David Kim", type: "employee", parentId: "team-2", role: "Lead Backend Engineer" },
    { id: "emp-5", name: "Lisa Zhang", type: "employee", parentId: "team-2", role: "Database Architect" },
    { id: "emp-6", name: "Alex Johnson", type: "employee", parentId: "team-2", role: "API Developer" },
    
    // DevOps team members
    { id: "emp-7", name: "Chris Brown", type: "employee", parentId: "team-3", role: "DevOps Engineer" },
    { id: "emp-8", name: "Maria Garcia", type: "employee", parentId: "team-3", role: "Infrastructure Lead" },
    
    // QA team members
    { id: "emp-9", name: "James Wilson", type: "employee", parentId: "team-4", role: "QA Lead" },
    { id: "emp-10", name: "Anna Taylor", type: "employee", parentId: "team-4", role: "Automation Engineer" },
    
    // Marketing team members
    { id: "emp-11", name: "Tom Anderson", type: "employee", parentId: "team-5", role: "Digital Marketing Manager" },
    { id: "emp-12", name: "Jessica Lee", type: "employee", parentId: "team-6", role: "Content Writer" },
    
    // Sales team members
    { id: "emp-13", name: "Robert Davis", type: "employee", parentId: "team-7", role: "Enterprise Sales Rep" },
    { id: "emp-14", name: "Michelle White", type: "employee", parentId: "team-8", role: "SMB Account Manager" }
  ]}`
>
  <VStack padding="$space-4" gap="$space-4">
    <VStack gap="$space-2">
      <Text variant="h2">Flat Data Tree Test</Text>
      <Text>This demonstrates a Tree component with flat data format using parentId relationships.</Text>
    </VStack>
    
    <Card padding="$space-3" height="500px">
      <Tree
        data="{flatData}"
        dataFormat="flat"
        idField="id"
        labelField="name"
        parentField="parentId"
        selectedValue=""
        defaultExpanded="first-level"
        autoExpandToSelection="true"
        onSelectionChanged="{(event) => { console.log('Flat Data Selection:', event); console.log('Selected:', event.selectedItem?.name, '(' + event.selectedItem?.type + ')'); }}"
      >
        <property name="itemTemplate">
          <HStack verticalAlignment="center" gap="$space-2">
            <Text when="{$item.type === 'department'}">🏢</Text>
            <Text when="{$item.type === 'team'}">👥</Text>
            <Text when="{$item.type === 'employee'}">👤</Text>
            <VStack gap="0">
              <Text value="{$item.name}" />
              <Text when="{$item.employeeCount}" variant="caption" opacity="0.7">
                {$item.employeeCount} employees
              </Text>
              <Text when="{$item.role}" variant="caption" opacity="0.7">
                {$item.role}
              </Text>
            </VStack>
          </HStack>
        </property>
      </Tree>
    </Card>

    <Card padding="$space-3" backgroundColor="$surface-2">
      <VStack gap="$space-3">
        <Text variant="h3">Features Demonstrated:</Text>
        <VStack gap="$space-1">
          <Text><Text variant="strong">Flat Data Format:</Text> Array of objects with parentId relationships</Text>
          <Text><Text variant="strong">Multi-Level Hierarchy:</Text> Department → Team → Employee structure</Text>
          <Text><Text variant="strong">Mixed Data Types:</Text> Different entity types (department, team, employee)</Text>
          <Text><Text variant="strong">Rich Item Data:</Text> Additional properties like employeeCount and role</Text>
          <Text><Text variant="strong">Contextual Icons:</Text> Different icons based on item type</Text>
          <Text><Text variant="strong">Multi-Line Display:</Text> Name, count, and role information</Text>
        </VStack>
        
        <VStack gap="$space-2">
          <Text variant="body-emphasis">Data Structure Comparison:</Text>
          <VStack gap="$space-1">
            <Text><Text variant="strong">Flat Format:</Text> Single array with parentId references</Text>
            <Text><Text variant="strong">Vs Hierarchy:</Text> Nested objects with children arrays</Text>
            <Text><Text variant="strong">Benefits:</Text> Easier database storage, simpler data management</Text>
            <Text><Text variant="strong">Use Cases:</Text> Organization charts, file systems, category trees</Text>
          </VStack>
        </VStack>
        
        <VStack gap="$space-2">
          <Text variant="body-emphasis">Try this:</Text>
          <VStack gap="$space-1">
            <Text>Expand departments to see teams</Text>
            <Text>Expand teams to see individual employees</Text>
            <Text>Notice how flat data creates the same hierarchy</Text>
            <Text>Compare the data structure in console vs BasicHierarchyTest</Text>
          </VStack>
        </VStack>
      </VStack>
    </Card>
  </VStack>
</App>