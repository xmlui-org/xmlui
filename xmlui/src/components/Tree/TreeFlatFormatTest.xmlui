<!-- Test: Flat Data Format Transformation -->
<VStack spacing="large" padding="medium">
  <Heading level="2" text="Tree Component - Flat Data Format Test" />
  
  <!-- Test Case 1: Basic flat data with simple parent-child relationships -->
  <VStack spacing="medium">
    <Heading level="3" text="Test 1: Basic Flat Data Structure" />
    <Text text="Simple 3-level folder structure using flat data format with parentId relationships" />
    
    <Tree 
      dataFormat="flat"
      data="{[
        { id: '1', name: 'Documents', icon: 'folder' },
        { id: '2', name: 'Projects', icon: 'folder', parentId: '1' },
        { id: '3', name: 'Photos', icon: 'folder', parentId: '1' },
        { id: '4', name: 'Project1', icon: 'folder', parentId: '2' },
        { id: '5', name: 'main.js', icon: 'code', parentId: '4' },
        { id: '6', name: 'style.css', icon: 'code', parentId: '4' },
        { id: '7', name: 'vacation.jpg', icon: 'image', parentId: '3' }
      ]}"
      selectedValue="5"
      defaultExpanded="first-level"
      height="300px"
      onSelectionChanged="handleSelection1">
      
      <property name="itemTemplate">
        <HStack spacing="small">
          <Icon name="{$icon}" size="16px" />
          <Text value="{$item.name}" weight="{$hasChildren ? 'bold' : 'normal'}" />
          <Text value=" (depth: {$depth})" variant="secondary" />
          <Text value=" [id: {$item.id}]" variant="caption" />
        </HStack>
      </property>
    </Tree>
    
    <Text text="Selected: {selectedItem1?.name || 'None'} | ID: {selectedItem1?.id || 'None'}" variant="secondary" />
  </VStack>

  <!-- Test Case 2: Empty and edge cases -->
  <VStack spacing="medium">
    <Heading level="3" text="Test 2: Empty Data Array" />
    <Text text="Testing empty flat data array" />
    
    <Tree 
      dataFormat="flat"
      data="{[]}"
      height="100px">
      
      <property name="itemTemplate">
        <Text value="{$item.name}" />
      </property>
    </Tree>
    
    <Text text="Should show empty tree (no items)" variant="secondary" />
  </VStack>

  <!-- Test Case 3: Single root item -->
  <VStack spacing="medium">
    <Heading level="3" text="Test 3: Single Root Item" />
    <Text text="Testing single item with no parent" />
    
    <Tree 
      dataFormat="flat"
      data="{[
        { id: 'root', name: 'Single Item', icon: 'file' }
      ]}"
      height="100px"
      selectedValue="root"
      onSelectionChanged="handleSelection3">
      
      <property name="itemTemplate">
        <HStack spacing="small">
          <Icon name="{$icon}" size="16px" />
          <Text value="{$item.name}" />
          <Text value="[Selected: {$isSelected}]" variant="caption" />
        </HStack>
      </property>
    </Tree>
    
    <Text text="Selected: {selectedItem3?.name || 'None'}" variant="secondary" />
  </VStack>

  <!-- Test Case 4: Multiple root items -->
  <VStack spacing="medium">
    <Heading level="3" text="Test 4: Multiple Root Items" />
    <Text text="Testing multiple top-level items with children" />
    
    <Tree 
      dataFormat="flat"
      data="{[
        { id: 'root1', name: 'Root 1', icon: 'folder' },
        { id: 'root2', name: 'Root 2', icon: 'folder' },
        { id: 'child1', name: 'Child of Root 1', icon: 'file', parentId: 'root1' },
        { id: 'child2', name: 'Child of Root 2', icon: 'file', parentId: 'root2' },
        { id: 'grandchild1', name: 'Grandchild', icon: 'file', parentId: 'child1' }
      ]}"
      defaultExpanded="all"
      height="200px"
      onSelectionChanged="handleSelection4">
      
      <property name="itemTemplate">
        <HStack spacing="small">
          <div style="margin-left: {$depth * 10}px">
            <Icon name="{$icon}" size="16px" />
            <Text value="{$item.name}" />
            <Text value=" (depth {$depth})" variant="secondary" />
          </div>
        </HStack>
      </property>
    </Tree>
    
    <Text text="Selected: {selectedItem4?.name || 'None'} | Path: {selectedPath4?.join(' > ') || 'None'}" variant="secondary" />
  </VStack>

  <!-- Debug Information -->
  <VStack spacing="small">
    <Heading level="3" text="Debug Information" />
    <Text text="Selection Event Data:" weight="bold" />
    <Text text="Item 1: {JSON.stringify(selectedItem1, null, 2)}" variant="code" />
    <Text text="Item 3: {JSON.stringify(selectedItem3, null, 2)}" variant="code" />
    <Text text="Item 4: {JSON.stringify(selectedItem4, null, 2)}" variant="code" />
  </VStack>
</VStack>

<script>
export default {
  data: {
    selectedItem1: null,
    selectedItem3: null,
    selectedItem4: null,
    selectedPath4: null
  },
  
  actions: {
    handleSelection1: ({ selectedId, selectedItem, selectedNode }) => {
      console.log('Selection 1 - ID:', selectedId, 'Item:', selectedItem, 'Node:', selectedNode);
      updateState({ 
        selectedItem1: selectedItem
      });
    },
    
    handleSelection3: ({ selectedId, selectedItem, selectedNode }) => {
      console.log('Selection 3 - ID:', selectedId, 'Item:', selectedItem, 'Node:', selectedNode);
      updateState({ 
        selectedItem3: selectedItem
      });
    },
    
    handleSelection4: ({ selectedId, selectedItem, selectedNode }) => {
      console.log('Selection 4 - ID:', selectedId, 'Item:', selectedItem, 'Node:', selectedNode);
      
      // Extract path information
      const path = selectedNode ? selectedNode.parentIds?.map(id => 
        // Convert internal IDs back to source IDs for display
        id
      ) || [] : [];
      path.push(selectedId);
      
      updateState({ 
        selectedItem4: selectedItem,
        selectedPath4: path
      });
    }
  }
};
</script>