@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$component: "Tree";

// Tree component theme variables
$backgroundColor-Tree-row--selected: createThemeVar("backgroundColor-#{$component}-row--selected");
$backgroundColor-Tree-row--hover: createThemeVar("backgroundColor-#{$component}-row--hover");
$textColor-Tree: createThemeVar("textColor-#{$component}");
$textColor-Tree--selected: createThemeVar("textColor-#{$component}--selected");
$textColor-Tree--hover: createThemeVar("textColor-#{$component}--hover");
$borderColor-Tree-row--focus: createThemeVar("borderColor-#{$component}-row--focus");
$outlineColor-Tree--focus: createThemeVar("outlineColor-#{$component}--focus");
$outlineWidth-Tree--focus: createThemeVar("outlineWidth-#{$component}--focus");
$outlineStyle-Tree--focus: createThemeVar("outlineStyle-#{$component}--focus");
$outlineOffset-Tree--focus: createThemeVar("outlineOffset-#{$component}--focus");

@layer components {
  .wrapper {
    flex: 1;
    // Add small padding to provide breathing room for focus indicators
    padding: 1px 2px;
    // Remove focus outline since individual tree items handle focus styling
    outline: none;
    
    &:focus {
      outline: none;
    }
  }

  .rowWrapper {
    display: flex;
    flex-direction: row;
    align-items: center;
    flex: 1;
    min-width: 0;
    height: 100%;
    color: $textColor-Tree;
    position: relative;
    // Add small margin to ensure focus ring has space
    margin: 0 1px;
    // Use border-radius to make focus ring more polished
    border-radius: 2px;
    transition: background-color 0.15s ease-in-out, color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    
    // Remove browser default focus outline since we handle focus styling with CSS classes
    outline: none;
    
    &:focus {
      outline: none;
    }

    &.selected {
      background-color: $backgroundColor-Tree-row--selected;
      color: $textColor-Tree--selected;
      
      &:focus-visible {
        // Use inset box-shadow to stay within bounds
        box-shadow: inset 0 0 0 2px $outlineColor-Tree--focus;
      }
    }

    &.focused {
      // Use inset box-shadow to stay within row bounds and avoid clipping
      box-shadow: inset 0 0 0 2px $outlineColor-Tree--focus;
    }

    &:hover:not(.selected) {
      background-color: $backgroundColor-Tree-row--hover;
      color: $textColor-Tree--hover;
    }

    &:hover {
      .addButton {
        opacity: 1;
      }
    }
  }

  .gutter {
    flex-direction: row;
    flex-shrink: 0;
    height: 100%;
    display: flex;
    align-items: center;
  }

  .toggleWrapper {
    width: 40px;
    height: 24px;
    flex-shrink: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;

    &.hidden {
      visibility: hidden;
      pointer-events: none;
    }

    &:before {
      transition: transform .2s;
      content: "â€º";
      font-size: 24px;
      line-height: 0;
      height: 8px;
    }

    &.expanded {
      &:before {
        transform: rotate(90deg);
      }
    }
  }

  .depthPlaceholder {
    flex-shrink: 0;
  }

  .labelWrapper{
    white-space: nowrap;
    flex: 1;
    display: flex;
    flex-direction: row;
    height: 100%;
    flex-shrink: 0;
    min-width: fit-content;
  }

  .addButton {
    height: 100%;
    width: 32px;
    background-color: transparent;
    border: 0;
    cursor: pointer;
    opacity: 0;
    flex-shrink: 0;
  }
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}

