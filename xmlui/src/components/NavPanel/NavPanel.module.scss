@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$component: "NavPanel";
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$themeVars: t.composeBorderVars($themeVars, $component);
$backgroundColor-NavPanel: createThemeVar("backgroundColor-#{$component}");
$backgroundColor-NavPanel-horizontal: createThemeVar("backgroundColor-#{$component}-horizontal");
$boxShadow-NavPanel: createThemeVar("boxShadow-#{$component}");
$themeVars: t.composePaddingVars($themeVars, $component);
$themeVars: t.composePaddingVars($themeVars, "logo-#{$component}");
$marginBottom-logo-NavPanel: createThemeVar("marginBottom-logo-#{$component}");

$maxWidth-content-NavPanel: createThemeVar("maxWidth-content-App");

$height-NavPanel: createThemeVar("height-AppHeader");
$paddingVertical-AppHeader: createThemeVar("paddingVertical-AppHeader");
$alignment-content-AppHeader: createThemeVar("alignment-content-AppHeader");

// Variables for @layer section
$paddingHorizontal-NavPanel: createThemeVar("paddingHorizontal-#{$component}");
$paddingVertical-logo-NavPanel: createThemeVar("paddingVertical-logo-#{$component}");
$paddingHorizontal-logo-NavPanel: createThemeVar("paddingHorizontal-logo-#{$component}");
$horizontalAlignment-logo-NavPanel: createThemeVar("horizontalAlignment-logo-#{$component}");

@layer components {
  .wrapper {
    --footer-height: 0;     //temp solution, it's because of callbackDrive, settings stickyBox to the bottom (we'll have to introduce a smarter stickyBox)
    height: 100%;
    width: 100%;
    flex-shrink: 0;
    box-shadow: $boxShadow-NavPanel;
    @include t.paddingVars($themeVars, $component);
    @include t.borderVars($themeVars, $component);

    overflow: auto;
    position: relative;
    display: flex;
    flex-direction: column;
    scrollbar-width: thin;

    &:not(.condensed){
      background-color: $backgroundColor-NavPanel;
    }

    &.vertical {
      scrollbar-gutter: stable;
    }

    &.horizontal{
      box-shadow: none;
      height: $height-NavPanel;
      background-color: $backgroundColor-NavPanel-horizontal;

      &:not(.condensed){
        .wrapperInner{
          padding-inline: $paddingHorizontal-NavPanel;
          justify-content: $alignment-content-AppHeader;
        }
      }
      .wrapperInner{
        height: 100%;
        flex-direction: row;
        max-width: $maxWidth-content-NavPanel;
        //align-items: center;
        width: 100%;
        margin: 0 auto;
        justify-content: $alignment-content-AppHeader;
      }
    }
  }

  .wrapperInner{
    display: flex;
    flex-direction: column;
    justify-content: $alignment-content-AppHeader;
  }


  .logoWrapper{
    &:not(:empty) {
      display: flex;
      flex-shrink: 0;
      height: $height-NavPanel;
      padding-top: calc(#{$paddingVertical-logo-NavPanel} + #{$paddingVertical-AppHeader});
      padding-bottom: calc(#{$paddingVertical-logo-NavPanel} + #{$paddingVertical-AppHeader});
      padding-inline: $paddingHorizontal-logo-NavPanel;
      margin-bottom: $marginBottom-logo-NavPanel;
      justify-content: $horizontalAlignment-logo-NavPanel;
    }

    &.inDrawer {     //to make room for the close button
      min-height: 32px;
    }
  }
}

// --- We export the theme variables to add them to the component renderer
:export{
  themeVars: t.json-stringify($themeVars)
}