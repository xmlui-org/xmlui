@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$componentName: "TimePicker";

// --- TimePicker specific theme variables
$color-divider-TimePicker: createThemeVar("color-divider-#{$componentName}");
$spacing-divider-TimePicker: createThemeVar("spacing-divider-#{$componentName}");
$width-input-TimePicker: createThemeVar("width-input-#{$componentName}");
$minWidth-input-TimePicker: createThemeVar("minWidth-input-#{$componentName}");
$padding-input-TimePicker: createThemeVar("padding-input-#{$componentName}");
$textAlign-input-TimePicker: createThemeVar("textAlign-input-#{$componentName}");
$fontSize-input-TimePicker: createThemeVar("fontSize-input-#{$componentName}");
$borderRadius-input-TimePicker: createThemeVar("borderRadius-input-#{$componentName}");
$backgroundColor-input-TimePicker-invalid: createThemeVar("backgroundColor-input-#{$componentName}-invalid");
$padding-button-TimePicker: createThemeVar("padding-button-#{$componentName}");
$borderRadius-button-TimePicker: createThemeVar("borderRadius-button-#{$componentName}");
$hoverColor-button-TimePicker: createThemeVar("hoverColor-button-#{$componentName}");
$disabledColor-button-TimePicker: createThemeVar("disabledColor-button-#{$componentName}");
$outlineColor-button-TimePicker--focused: createThemeVar("outlineColor-button-#{$componentName}--focused");
$outlineWidth-button-TimePicker--focused: createThemeVar("outlineWidth-button-#{$componentName}--focused");
$outlineOffset-button-TimePicker--focused: createThemeVar("outlineOffset-button-#{$componentName}--focused");
$minWidth-ampm-TimePicker: createThemeVar("minWidth-ampm-#{$componentName}");
$fontSize-ampm-TimePicker: createThemeVar("fontSize-ampm-#{$componentName}");

// --- CSS properties of a particular TimePicker variant
@mixin variant($variantName) {
  border-radius: createThemeVar("Input:borderRadius-#{$componentName}-#{$variantName}");
  border-color: createThemeVar("Input:borderColor-#{$componentName}-#{$variantName}");
  border-width: createThemeVar("Input:borderWidth-#{$componentName}-#{$variantName}");
  border-style: createThemeVar("Input:borderStyle-#{$componentName}-#{$variantName}");
  background-color: createThemeVar("Input:backgroundColor-#{$componentName}-#{$variantName}");
  box-shadow: createThemeVar("Input:boxShadow-#{$componentName}-#{$variantName}");
  color: createThemeVar("Input:textColor-#{$componentName}-#{$variantName}");
  padding: createThemeVar("Input:padding-#{$componentName}-#{$variantName}");

  &:hover {
    border-color: createThemeVar("Input:borderColor-#{$componentName}-#{$variantName}--hover");
    background-color: createThemeVar(
      "Input:backgroundColor-#{$componentName}-#{$variantName}--hover"
    );
    box-shadow: createThemeVar("Input:boxShadow-#{$componentName}-#{$variantName}--hover");
    color: createThemeVar("Input:textColor-#{$componentName}-#{$variantName}--hover");
  }

  &:focus-within {
    border-color: createThemeVar("Input:borderColor-#{$componentName}-#{$variantName}--focus");
    background-color: createThemeVar(
      "Input:backgroundColor-#{$componentName}-#{$variantName}--focus"
    );
    box-shadow: createThemeVar("Input:boxShadow-#{$componentName}-#{$variantName}--focus");
    color: createThemeVar("Input:textColor-#{$componentName}-#{$variantName}--focus");
  }

  &:has(.reactTimePickerWrapper input:focus-visible) {
    outline-width: createThemeVar("Input:outlineWidth-#{$componentName}-#{$variantName}--focus");
    outline-color: createThemeVar("Input:outlineColor-#{$componentName}-#{$variantName}--focus");
    outline-style: createThemeVar("Input:outlineStyle-#{$componentName}-#{$variantName}--focus");
    outline-offset: createThemeVar("Input:outlineOffset-#{$componentName}-#{$variantName}--focus");
  }

  .adornment {
    color: createThemeVar("Input:color-adornment-#{$componentName}-#{$variantName}");
  }
}

@layer components {
  .timePicker {
    display: flex;
    align-items: center;
    position: relative;
    
    &.disabled {
      opacity: 0.6;
      pointer-events: none;
    }
    
    &.readOnly {
      .reactTimePickerWrapper input {
        cursor: default;
      }
    }
  }

  .reactTimePickerWrapper {
    display: flex;
    align-items: center;
    width: fit-content;
    border-style: solid;
    border-width: 1px;
    transition: background-color ease-in 0.1s;
    overflow: hidden;
    gap: createThemeVar("Input:gap-adornment-#{$componentName}");

    @include variant("default");

    &.error {
      @include variant("error");
    }
    &.warning {
      @include variant("warning");
    }
    &.valid {
      @include variant("success");
    }

    &:has(input:is(:disabled)) {
      cursor: not-allowed;
      background-color: createThemeVar("Input:backgroundColor-#{$componentName}--disabled");
      color: createThemeVar("Input:textColor-#{$componentName}--disabled");
      border-color: createThemeVar("Input:borderColor-#{$componentName}--disabled");
    }
    
    // Override react-time-picker internal styling
    :global(.react-time-picker__wrapper) {
      border: none !important;
      background: none !important;
      padding: 0 !important;
    }
    
    :global(.react-time-picker__inputGroup) {
      border: none !important;
      background: none !important;
      padding: 0 !important;
    }
    
    input {
      border: none;
      background: none;
      color: inherit;
      font: inherit;
      outline: none;
      padding: 0;
      margin: 0 0.125rem;
      min-width: 2ch;
      
      &::placeholder {
        color: createThemeVar("Input:textColor-placeholder-#{$componentName}-default");
        font-size: createThemeVar("Input:fontSize-placeholder-#{$componentName}-default");
      }
      
      &:disabled {
        cursor: not-allowed;
      }
    }
    
    button {
      background: transparent;
      border: none;
      cursor: pointer;
      color: inherit;
      padding: 0.25rem;
      border-radius: createThemeVar("Input:borderRadius-#{$componentName}-default");
      
      &:hover {
        background-color: createThemeVar("Input:backgroundColor-#{$componentName}--hover");
      }
      
      &:focus {
        outline: 2px solid createThemeVar("Input:outlineColor-#{$componentName}-default--focus");
        outline-offset: 2px;
      }
      
      &:disabled {
        cursor: not-allowed;
        opacity: 0.6;
      }
    }
  }

  // TimePicker internal components styling (moved from TimePicker.css)
  .wrapper {
    display: flex;
    flex-grow: 1;
    flex-shrink: 0;
  }

  .inputGroup {
    min-width: calc((4px * 3) + 0.54em * 6 + 0.217em * 2);
    flex-grow: 1;
    padding: 0 2px;
    box-sizing: content-box;
  }

  .divider {
    padding: $spacing-divider-TimePicker;
    white-space: pre;
    display: inline-block;
    font: inherit;
    color: $color-divider-TimePicker;
  }

  .leadingZero {
    display: inline-block;
    font: inherit;
  }

  .input {
    min-width: $minWidth-input-TimePicker;
    height: 100%;
    position: relative;
    padding: $padding-input-TimePicker;
    border: 0;
    background: none;
    color: currentColor;
    font: inherit;
    font-size: $fontSize-input-TimePicker;
    box-sizing: content-box;
    border-radius: $borderRadius-input-TimePicker;
    -webkit-appearance: textfield;
    -moz-appearance: textfield;
    appearance: textfield;

    // Specific widths for different input types
    &.hour,
    &.hour12, 
    &.hour24,
    &.minute,
    &.second {
      width: $width-input-TimePicker !important;
      min-width: $width-input-TimePicker !important;
      max-width: $width-input-TimePicker !important;
      text-align: $textAlign-input-TimePicker !important;
      padding: $padding-input-TimePicker !important;
      box-sizing: border-box !important;
    }

    // Hide spin buttons for number inputs
    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      margin: 0 !important;
      display: none !important;
    }

    // Hide spin buttons for Firefox
    &[type="number"] {
      -moz-appearance: textfield !important;
      appearance: textfield !important;
    }

    &:invalid {
      background: $backgroundColor-input-TimePicker-invalid;
    }

    .invalid {
      color: $backgroundColor-input-TimePicker-invalid;
    }

    &.hasLeadingZero {
      margin-left: -0.54em;
      padding-left: calc(1px + 0.54em);
    }
  }

  .amPm {
    min-width: $minWidth-ampm-TimePicker !important;
    width: auto !important;
    font: inherit;
    font-size: $fontSize-ampm-TimePicker;
    -webkit-appearance: menulist;
    -moz-appearance: menulist;
    appearance: menulist;
  }

  .button {
    border: 0;
    background: transparent;
    padding: $padding-button-TimePicker;
    border-radius: $borderRadius-button-TimePicker;

    &:enabled {
      cursor: pointer;

      &:hover .buttonIcon,
      &:focus .buttonIcon {
        stroke: $hoverColor-button-TimePicker;
      }
    }

    &:disabled .buttonIcon {
      stroke: $disabledColor-button-TimePicker;
    }

    &:focus {
      outline: $outlineWidth-button-TimePicker--focused solid $outlineColor-button-TimePicker--focused;
      outline-offset: $outlineOffset-button-TimePicker--focused;
    }

    svg {
      display: inherit;
    }
  }

  .clearButton {
    @extend .button;
  }

  .buttonIcon {
    // Base styling for button icons
    display: inherit;
  }

  .clearButtonIcon {
    @extend .buttonIcon;
  }
}

// Top-level invalid class for CSS modules export
.invalid {
  background: $backgroundColor-input-TimePicker-invalid;
}

// --- We export the theme variables to add them to the component renderer
:export{
  themeVars: t.json-stringify($themeVars)
}
