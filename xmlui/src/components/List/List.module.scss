@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

.outerWrapper {
  overflow: auto;
  //max-height: 100%;
  overflow-anchor: none;

  &.hasOutsideScroll {
    overflow: initial
  }
}

.innerWrapper{
  visibility: hidden;
  display: flex;
  flex-direction: column;
  min-height: 100%;

  &.reverse{
    justify-content: flex-end;
  }
}

.infoWrapper {
  width: 100%;
  margin: 0 auto;
}

.loadingWrapper {
  display: flex;
  flex-direction: row;
  justify-content: center;
  padding-top: t.$space-2;
  padding-bottom: t.$space-2;
}

.noRows {
  width: 100%;
  text-align: center;
  margin-top: t.$space-4;
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars)
}

.borderCollapse {
  &:not(.sectioned) {
    .row {
      //first row in the list (but not the last)
      &:first-child:not(:last-child) {
        & > * {
          border-bottom-left-radius: 0;
          border-bottom-right-radius: 0;
          border-bottom: 0;
        }
      }

      //last row in the list (but not the first)
      &:last-child:not(:first-child) {
        & > * {
          border-top-left-radius: 0;
          border-top-right-radius: 0;
        }
      }

      //rows in the middle of the list
      &:not(:first-child):not(:last-child) {
        & > * {
          border-bottom-left-radius: 0;
          border-bottom-right-radius: 0;
          border-top-left-radius: 0;
          border-top-right-radius: 0;
          border-bottom: 0;
        }
      }
    }
  }

  &.sectioned {
    //.row after the section header (first row in a section)
    .section + .row:not(:has(+.sectionFooter)) {
      & > * {
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
        border-bottom: 0;
      }
    }

    //.row before the sectionFooter (last row in a section)
    .row:has(+.sectionFooter):not(.section + .row) {
      & > * {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
      }
    }

    //we select the rows that has .row as direct sibling, but not the first row of a section (rows in the middle of the section)
    .row:has(+.row):not(.section + .row) {
      & > * {
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
        border-top-left-radius: 0;
        border-top-right-radius: 0;
        border-bottom: 0;
      }
    }
  }

}
