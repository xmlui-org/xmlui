@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$component: "AutoComplete";
$themeVars: t.composeBorderVars($themeVars, $component);

// --- CSS properties of a particular Select variant
@mixin variant($variantName) {
  border-radius: createThemeVar("Input:borderRadius-#{$component}-#{$variantName}");
  border-color: createThemeVar("Input:borderColor-#{$component}-#{$variantName}");
  border-width: createThemeVar("Input:borderWidth-#{$component}-#{$variantName}");
  border-style: createThemeVar("Input:borderStyle-#{$component}-#{$variantName}");
  font-size: createThemeVar("Input:fontSize-#{$component}-#{$variantName}");
  background-color: createThemeVar( "Input:backgroundColor-#{$component}-#{$variantName}");
  box-shadow: createThemeVar("Input:boxShadow-#{$component}-#{$variantName}");
  color: createThemeVar("Input:textColor-#{$component}-#{$variantName}");

  &:hover {
    border-color: createThemeVar("Input:borderColor-#{$component}-#{$variantName}--hover");
    background-color: createThemeVar("Input:backgroundColor-#{$component}-#{$variantName}--hover");
    box-shadow: createThemeVar("Input:boxShadow-#{$component}-#{$variantName}--hover");
    color: createThemeVar("Input:textColor-#{$component}-#{$variantName}--hover");
  }

  &::placeholder {
    color: createThemeVar("Input:textColor-placeholder-#{$component}-#{$variantName}");
  }
}

.command {
  width: 100%;
  height: auto;
  overflow: visible;
  background-color: transparent;
}

.badgeListWrapper {
  outline: none;
  width: 100%;
  display: flex;
  padding: t.$space-1 t.$space-2;
  min-height: 2.5rem; /* h-12 */

  @include variant("default");

  &.error {
    @include variant("error");
  }

  &.warning {
    @include variant("warning");
  }

  &.valid {
    @include variant("success");
  }

  &.disabled {
    cursor: not-allowed;
    opacity: 0.5;
    background-color: createThemeVar("Input:backgroundColor-#{$component}--disabled");
    color: createThemeVar("Input:textColor-#{$component}--disabled");
    border-color: createThemeVar("Input:borderColor-#{$component}--disabled");
  }

  &.focused {
    outline-width: createThemeVar('Input:outlineWidth-#{$component}--focus');
    outline-color: createThemeVar('Input:outlineColor-#{$component}--focus');
    outline-style: createThemeVar('Input:outlineStyle-#{$component}--focus');
    outline-offset: createThemeVar('Input:outlineOffset-#{$component}--focus');
  }
}

.badgeList {
  position: relative;
  flex-grow: 1;
  align-items: center;
  display: flex;
  flex-wrap: wrap;
  gap: 0.25rem;
}

.badge {
  width: fit-content;
  height: fit-content;
  min-width: 0;
  padding: createThemeVar("paddingVertical-#{$component}-badge") createThemeVar("paddingHorizontal-#{$component}-badge");
  border-radius: t.$borderRadius;
  transition: color 0.2s, background-color 0.2s;
  user-select: none;
  cursor: pointer;
  display: flex;
  gap: t.$space-1;
  justify-content: center;
  align-items: center;
  font-size: createThemeVar("Input:fontSize-#{$component}-badge");
  background-color: createThemeVar("Input:backgroundColor-#{$component}-badge");
  color: createThemeVar("Input:textColor-#{$component}-badge");

  &:hover {
    background-color: createThemeVar("Input:backgroundColor-#{$component}-badge--hover");
    color: createThemeVar("Input:textColor-#{$component}-badge--hover");
  }

  &:active {
    background-color: createThemeVar("Input:backgroundColor-#{$component}-badge--active");
    color: createThemeVar("Input:textColor-#{$component}-badge--active");
  }
}

.commandInput {
  flex: 1;
  background-color: transparent;
  outline: none;

  &:disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }

  &::placeholder {
    color: createThemeVar("Input:textColor-placeholder-#{$component}");
  }
  &:focus-within {
    outline: none;
  }
}

.actions {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.autoCompleteEmpty {
  display: flex;
  gap: .2rem;
  padding: 10px 0;
  justify-content: center;
  align-items: center;
  font-size: 14px;
  width: 100%;
}

.commandList {
  position: absolute;
  overflow: hidden;
  top: 0.25rem;
  z-index: 10;
  width: 100%;
  outline: none;
  background-color: createThemeVar("Input:backgroundColor-menu-#{$component}");
  border-radius: createThemeVar("Input:borderRadius-menu-#{$component}");
  box-shadow: createThemeVar("Input:boxShadow-menu-#{$component}");
  animation: fade-in 0.3s ease-in-out; /* animate-in */
}

.autoCompleteOption {
  padding: 0.5rem 1rem;
  display: flex;
  gap: 1rem;
  align-items: center;
  justify-content: space-between;
  cursor: pointer;
  transition: background-color 0.2s ease;
  background-color: createThemeVar("backgroundColor-item-#{$component}");

  &[data-selected=true] {
    background-color: createThemeVar("backgroundColor-item-#{$component}--hover");
  }

  &[data-disabled=true] {
    pointer-events: none;
    opacity: 0.5;
    cursor: not-allowed;
    color: createThemeVar("textColor-item-#{$component}--disabled");
    font-style: italic;
  }
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}




