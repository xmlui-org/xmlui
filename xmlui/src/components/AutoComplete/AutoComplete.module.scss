@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: (
);

@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$component: "AutoComplete";
$themeVars: t.composeBorderVars($themeVars, $component);
$themeVars: t.composePaddingVars($themeVars, $component);
$themeVars: t.composePaddingVars($themeVars, "item-#{$component}");

// --- CSS properties of a particular Select variant
@mixin variant($variantName) {
  border-radius: createThemeVar("Input:borderRadius-#{$component}-#{$variantName}");
  border-color: createThemeVar("Input:borderColor-#{$component}-#{$variantName}");
  border-width: createThemeVar("Input:borderWidth-#{$component}-#{$variantName}");
  border-style: createThemeVar("Input:borderStyle-#{$component}-#{$variantName}");
  font-size: createThemeVar("Input:fontSize-#{$component}-#{$variantName}");
  background-color: createThemeVar("Input:backgroundColor-#{$component}-#{$variantName}");
  box-shadow: createThemeVar("Input:boxShadow-#{$component}-#{$variantName}");
  color: createThemeVar("Input:textColor-#{$component}-#{$variantName}");

  &:hover {
    border-color: createThemeVar("Input:borderColor-#{$component}-#{$variantName}--hover");
    background-color: createThemeVar("Input:backgroundColor-#{$component}-#{$variantName}--hover");
    box-shadow: createThemeVar("Input:boxShadow-#{$component}-#{$variantName}--hover");
    color: createThemeVar("Input:textColor-#{$component}-#{$variantName}--hover");
  }

  &::placeholder {
    color: createThemeVar("Input:textColor-placeholder-#{$component}-#{$variantName}");
    font-size: createThemeVar("Input:fontSize-placeholder-#{$component}-#{$variantName}");
  }
}

@layer components {
  .command {
    width: 100%;
    height: auto;
    overflow: visible;
    background-color: transparent;
  }

  .badgeListWrapper {
    outline: none;
    width: 100%;
    gap: t.$space-1;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    @include t.paddingVars($themeVars, $component);

    @include variant("default");

    &.error {
      @include variant("error");
    }

    &.warning {
      @include variant("warning");
    }

    &.valid {
      @include variant("success");
    }

    &.disabled {
      cursor: not-allowed;
      opacity: 0.5;
      background-color: createThemeVar("Input:backgroundColor-#{$component}--disabled");
      color: createThemeVar("Input:textColor-#{$component}--disabled");
      border-color: createThemeVar("Input:borderColor-#{$component}--disabled");
    }

    &.focused {
      outline-width: createThemeVar("Input:outlineWidth-#{$component}--focus");
      outline-color: createThemeVar("Input:outlineColor-#{$component}--focus");
      outline-style: createThemeVar("Input:outlineStyle-#{$component}--focus");
      outline-offset: createThemeVar("Input:outlineOffset-#{$component}--focus");
    }
  }

  .badgeList {
    position: relative;
    align-items: center;
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }

  .inputWrapper {
    display: flex;
    align-items: center;
    min-width: fit-content;
    flex: 1;
    gap: t.$space-1;
  }

  .badge {
    width: fit-content;
    height: fit-content;
    min-width: 0;
    padding: createThemeVar("paddingVertical-#{$component}-badge") createThemeVar("paddingHorizontal-#{$component}-badge");
    border-radius: createThemeVar("borderRadius-#{$component}-badge");
    transition:
      color 0.2s,
      background-color 0.2s;
    user-select: none;
    cursor: pointer;
    display: flex;
    gap: t.$space-1;
    justify-content: center;
    align-items: center;
    font-size: createThemeVar("Input:fontSize-#{$component}-badge");
    background-color: createThemeVar("Input:backgroundColor-#{$component}-badge");
    color: createThemeVar("Input:textColor-#{$component}-badge");

    &:hover {
      background-color: createThemeVar("Input:backgroundColor-#{$component}-badge--hover");
      color: createThemeVar("Input:textColor-#{$component}-badge--hover");
    }

    &:active {
      background-color: createThemeVar("Input:backgroundColor-#{$component}-badge--active");
      color: createThemeVar("Input:textColor-#{$component}-badge--active");
    }
  }

  .commandInput {
    width: 100%;
    background-color: transparent;
    outline: none;

    &:disabled {
      cursor: not-allowed;
      opacity: 0.5;
    }

    &::placeholder {
      color: createThemeVar("Input:textColor-placeholder-#{$component}");
    }

    &:focus-within {
      outline: none;
    }
  }

  .actions {
    display: flex;
    align-items: center;
    flex-shrink: 0;
  }

  .action {
    cursor: pointer;
  }

  .autoCompleteEmpty {
    display: flex;
    gap: 0.2rem;
    padding: 10px 0;
    justify-content: center;
    align-items: center;
    font-size: 14px;
    width: 100%;
  }

  .commandList {
    width: 100%;
    position: absolute;
    overflow: hidden;
    top: t.$space-1;
    z-index: 999;
    outline: none;
    background-color: createThemeVar("Input:backgroundColor-menu-#{$component}");
    border-radius: createThemeVar("Input:borderRadius-menu-#{$component}");
    box-shadow: createThemeVar("Input:boxShadow-menu-#{$component}");
    animation: fade-in 0.3s ease-in-out;
  }

  .autoCompleteOption {
    @include t.paddingVars($themeVars, "item-#{$component}");
    display: flex;
    gap: t.$space-1;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    transition: background-color 0.2s ease;
    background-color: createThemeVar("backgroundColor-item-#{$component}");

    &[aria-selected="true"],
    &:hover {
      background-color: createThemeVar("backgroundColor-item-#{$component}--hover");
    }

    &[aria-disabled="true"],
    &.disabledOption {
      pointer-events: none;
      cursor: not-allowed;
      color: createThemeVar("textColor-item-#{$component}--disabled");
      font-style: italic;
    }
  }
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}