@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: (
);
$animDuration: 0.1s;

@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$componentName: "Select";
$themeVars: t.composeBorderVars($themeVars, $componentName);
$themeVars: t.composePaddingVars($themeVars, $componentName);
$themeVars: t.composePaddingVars($themeVars, "item-#{$componentName}");

// Variables for default variant
$borderRadius-Select-default: createThemeVar("Input:borderRadius-#{$componentName}-default");
$borderColor-Select-default: createThemeVar("Input:borderColor-#{$componentName}-default");
$borderWidth-Select-default: createThemeVar("Input:borderWidth-#{$componentName}-default");
$borderStyle-Select-default: createThemeVar("Input:borderStyle-#{$componentName}-default");
$fontSize-Select-default: createThemeVar("Input:fontSize-#{$componentName}-default");
$backgroundColor-Select-default: createThemeVar("Input:backgroundColor-#{$componentName}-default");
$boxShadow-Select-default: createThemeVar("Input:boxShadow-#{$componentName}-default");
$textColor-Select-default: createThemeVar("Input:textColor-#{$componentName}-default");
$borderColor-Select-default--hover: createThemeVar("Input:borderColor-#{$componentName}-default--hover");
$backgroundColor-Select-default--hover: createThemeVar("Input:backgroundColor-#{$componentName}-default--hover");
$boxShadow-Select-default--hover: createThemeVar("Input:boxShadow-#{$componentName}-default--hover");
$textColor-Select-default--hover: createThemeVar("Input:textColor-#{$componentName}-default--hover");
$outlineWidth-Select-default--focus: createThemeVar("Input:outlineWidth-#{$componentName}-default--focus");
$outlineColor-Select-default--focus: createThemeVar("Input:outlineColor-#{$componentName}-default--focus");
$outlineStyle-Select-default--focus: createThemeVar("Input:outlineStyle-#{$componentName}-default--focus");
$outlineOffset-Select-default--focus: createThemeVar("Input:outlineOffset-#{$componentName}-default--focus");
$textColor-placeholder-Select-default: createThemeVar("Input:textColor-placeholder-#{$componentName}-default");
$fontSize-placeholder-Select-default: createThemeVar("Input:fontSize-placeholder-#{$componentName}-default");

// Variables for error variant
$borderRadius-Select-error: createThemeVar("Input:borderRadius-#{$componentName}-error");
$borderColor-Select-error: createThemeVar("Input:borderColor-#{$componentName}-error");
$borderWidth-Select-error: createThemeVar("Input:borderWidth-#{$componentName}-error");
$borderStyle-Select-error: createThemeVar("Input:borderStyle-#{$componentName}-error");
$fontSize-Select-error: createThemeVar("Input:fontSize-#{$componentName}-error");
$backgroundColor-Select-error: createThemeVar("Input:backgroundColor-#{$componentName}-error");
$boxShadow-Select-error: createThemeVar("Input:boxShadow-#{$componentName}-error");
$textColor-Select-error: createThemeVar("Input:textColor-#{$componentName}-error");
$borderColor-Select-error--hover: createThemeVar("Input:borderColor-#{$componentName}-error--hover");
$backgroundColor-Select-error--hover: createThemeVar("Input:backgroundColor-#{$componentName}-error--hover");
$boxShadow-Select-error--hover: createThemeVar("Input:boxShadow-#{$componentName}-error--hover");
$textColor-Select-error--hover: createThemeVar("Input:textColor-#{$componentName}-error--hover");
$outlineWidth-Select-error--focus: createThemeVar("Input:outlineWidth-#{$componentName}-error--focus");
$outlineColor-Select-error--focus: createThemeVar("Input:outlineColor-#{$componentName}-error--focus");
$outlineStyle-Select-error--focus: createThemeVar("Input:outlineStyle-#{$componentName}-error--focus");
$outlineOffset-Select-error--focus: createThemeVar("Input:outlineOffset-#{$componentName}-error--focus");
$textColor-placeholder-Select-error: createThemeVar("Input:textColor-placeholder-#{$componentName}-error");
$fontSize-placeholder-Select-error: createThemeVar("Input:fontSize-placeholder-#{$componentName}-error");

// Variables for warning variant
$borderRadius-Select-warning: createThemeVar("Input:borderRadius-#{$componentName}-warning");
$borderColor-Select-warning: createThemeVar("Input:borderColor-#{$componentName}-warning");
$borderWidth-Select-warning: createThemeVar("Input:borderWidth-#{$componentName}-warning");
$borderStyle-Select-warning: createThemeVar("Input:borderStyle-#{$componentName}-warning");
$fontSize-Select-warning: createThemeVar("Input:fontSize-#{$componentName}-warning");
$backgroundColor-Select-warning: createThemeVar("Input:backgroundColor-#{$componentName}-warning");
$boxShadow-Select-warning: createThemeVar("Input:boxShadow-#{$componentName}-warning");
$textColor-Select-warning: createThemeVar("Input:textColor-#{$componentName}-warning");
$borderColor-Select-warning--hover: createThemeVar("Input:borderColor-#{$componentName}-warning--hover");
$backgroundColor-Select-warning--hover: createThemeVar("Input:backgroundColor-#{$componentName}-warning--hover");
$boxShadow-Select-warning--hover: createThemeVar("Input:boxShadow-#{$componentName}-warning--hover");
$textColor-Select-warning--hover: createThemeVar("Input:textColor-#{$componentName}-warning--hover");
$outlineWidth-Select-warning--focus: createThemeVar("Input:outlineWidth-#{$componentName}-warning--focus");
$outlineColor-Select-warning--focus: createThemeVar("Input:outlineColor-#{$componentName}-warning--focus");
$outlineStyle-Select-warning--focus: createThemeVar("Input:outlineStyle-#{$componentName}-warning--focus");
$outlineOffset-Select-warning--focus: createThemeVar("Input:outlineOffset-#{$componentName}-warning--focus");
$textColor-placeholder-Select-warning: createThemeVar("Input:textColor-placeholder-#{$componentName}-warning");
$fontSize-placeholder-Select-warning: createThemeVar("Input:fontSize-placeholder-#{$componentName}-warning");

// Variables for success variant
$borderRadius-Select-success: createThemeVar("Input:borderRadius-#{$componentName}-success");
$borderColor-Select-success: createThemeVar("Input:borderColor-#{$componentName}-success");
$borderWidth-Select-success: createThemeVar("Input:borderWidth-#{$componentName}-success");
$borderStyle-Select-success: createThemeVar("Input:borderStyle-#{$componentName}-success");
$fontSize-Select-success: createThemeVar("Input:fontSize-#{$componentName}-success");
$backgroundColor-Select-success: createThemeVar("Input:backgroundColor-#{$componentName}-success");
$boxShadow-Select-success: createThemeVar("Input:boxShadow-#{$componentName}-success");
$textColor-Select-success: createThemeVar("Input:textColor-#{$componentName}-success");
$borderColor-Select-success--hover: createThemeVar("Input:borderColor-#{$componentName}-success--hover");
$backgroundColor-Select-success--hover: createThemeVar("Input:backgroundColor-#{$componentName}-success--hover");
$boxShadow-Select-success--hover: createThemeVar("Input:boxShadow-#{$componentName}-success--hover");
$textColor-Select-success--hover: createThemeVar("Input:textColor-#{$componentName}-success--hover");
$outlineWidth-Select-success--focus: createThemeVar("Input:outlineWidth-#{$componentName}-success--focus");
$outlineColor-Select-success--focus: createThemeVar("Input:outlineColor-#{$componentName}-success--focus");
$outlineStyle-Select-success--focus: createThemeVar("Input:outlineStyle-#{$componentName}-success--focus");
$outlineOffset-Select-success--focus: createThemeVar("Input:outlineOffset-#{$componentName}-success--focus");
$textColor-placeholder-Select-success: createThemeVar("Input:textColor-placeholder-#{$componentName}-success");
$fontSize-placeholder-Select-success: createThemeVar("Input:fontSize-placeholder-#{$componentName}-success");

// Variables for @layer section
$backgroundColor-Select--disabled: createThemeVar("Input:backgroundColor-#{$componentName}--disabled");
$textColor-Select--disabled: createThemeVar("Input:textColor-#{$componentName}--disabled");
$borderColor-Select--disabled: createThemeVar("Input:borderColor-#{$componentName}--disabled");
$outlineWidth-Select--focus: createThemeVar("Input:outlineWidth-#{$componentName}--focus");
$outlineColor-Select--focus: createThemeVar("Input:outlineColor-#{$componentName}--focus");
$outlineStyle-Select--focus: createThemeVar("Input:outlineStyle-#{$componentName}--focus");
$outlineOffset-Select--focus: createThemeVar("Input:outlineOffset-#{$componentName}--focus");
$textColor-placeholder-Select: createThemeVar("Input:textColor-placeholder-#{$componentName}");
$paddingVertical-Select-badge: createThemeVar("paddingVertical-#{$componentName}-badge");
$paddingHorizontal-Select-badge: createThemeVar("paddingHorizontal-#{$componentName}-badge");
$borderRadius-Select-badge: createThemeVar("borderRadius-#{$componentName}-badge");
$fontSize-Select-badge: createThemeVar("Input:fontSize-#{$componentName}-badge");
$backgroundColor-Select-badge: createThemeVar("Input:backgroundColor-#{$componentName}-badge");
$textColor-Select-badge: createThemeVar("Input:textColor-#{$componentName}-badge");
$backgroundColor-Select-badge--hover: createThemeVar("Input:backgroundColor-#{$componentName}-badge--hover");
$textColor-Select-badge--hover: createThemeVar("Input:textColor-#{$componentName}-badge--hover");
$backgroundColor-Select-badge--active: createThemeVar("Input:backgroundColor-#{$componentName}-badge--active");
$textColor-Select-badge--active: createThemeVar("Input:textColor-#{$componentName}-badge--active");
$backgroundColor-menu-Select: createThemeVar("Input:backgroundColor-menu-#{$componentName}");
$borderRadius-menu-Select: createThemeVar("Input:borderRadius-menu-#{$componentName}");
$boxShadow-menu-Select: createThemeVar("Input:boxShadow-menu-#{$componentName}");
$borderWidth-menu-Select: createThemeVar("Input:borderWidth-menu-#{$componentName}");
$borderColor-menu-Select: createThemeVar("Input:borderColor-menu-#{$componentName}");
$backgroundColor-item-Select: createThemeVar("backgroundColor-item-#{$componentName}");
$backgroundColor-item-Select--active: createThemeVar("backgroundColor-item-#{$componentName}--active");
$backgroundColor-item-Select--hover: createThemeVar("backgroundColor-item-#{$componentName}--hover");
$textColor-item-Select--disabled: createThemeVar("textColor-item-#{$componentName}--disabled");
$opacity-text-item-Select--disabled: createThemeVar("opacity-text-item-#{$componentName}--disabled");
$textColor-indicator-Select: createThemeVar("textColor-indicator-#{$componentName}");


// --- CSS properties of a particular Select variant
@mixin variant($variantName) {
  border-radius: createThemeVar("Input:borderRadius-#{$componentName}-#{$variantName}");
  border-color: createThemeVar("Input:borderColor-#{$componentName}-#{$variantName}");
  border-width: createThemeVar("Input:borderWidth-#{$componentName}-#{$variantName}");
  border-style: createThemeVar("Input:borderStyle-#{$componentName}-#{$variantName}");
  font-size: createThemeVar("Input:fontSize-#{$componentName}-#{$variantName}");
  background-color: createThemeVar("Input:backgroundColor-#{$componentName}-#{$variantName}");
  box-shadow: createThemeVar("Input:boxShadow-#{$componentName}-#{$variantName}");
  color: createThemeVar("Input:textColor-#{$componentName}-#{$variantName}");

  &:not(:disabled) {
    &:hover {
      border-color: createThemeVar("Input:borderColor-#{$componentName}-#{$variantName}--hover");
      background-color: createThemeVar("Input:backgroundColor-#{$componentName}-#{$variantName}--hover");
      box-shadow: createThemeVar("Input:boxShadow-#{$componentName}-#{$variantName}--hover");
      color: createThemeVar("Input:textColor-#{$componentName}-#{$variantName}--hover");
    }

    &:focus-visible {
      outline-width: createThemeVar('Input:outlineWidth-#{$componentName}-#{$variantName}--focus');
      outline-color: createThemeVar('Input:outlineColor-#{$componentName}-#{$variantName}--focus');
      outline-style: createThemeVar('Input:outlineStyle-#{$componentName}-#{$variantName}--focus');
      outline-offset: createThemeVar('Input:outlineOffset-#{$componentName}-#{$variantName}--focus');
    }
  }

  &::placeholder {
    color: createThemeVar("Input:textColor-placeholder-#{$componentName}-#{$variantName}");
    font-size: createThemeVar("Input:fontSize-placeholder-#{$componentName}-#{$variantName}");
  }
}

@layer components {
  // =============================================================================
  // SHARED COMPONENTS (used by both SimpleSelect and MultiSelect)
  // =============================================================================

  /**
   * Common trigger styles for both SimpleSelect and searchable/multiSelect
   */
  .selectTrigger {
    outline: none;
    width: 100%;
    gap: t.$space-1;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    @include t.paddingVars($themeVars, $componentName);

    @include variant("default");

    &.error {
      @include variant("error");
    }

    &.warning {
      @include variant("warning");
    }

    &.valid {
      @include variant("success");
    }

    &.disabled {
      cursor: not-allowed;
      opacity: 0.5;
      background-color: $backgroundColor-Select--disabled;
      color: $textColor-Select--disabled;
      border-color: $borderColor-Select--disabled;
    }

    &:focus {
      outline-width: $outlineWidth-Select--focus;
      outline-color: $outlineColor-Select--focus;
      outline-style: $outlineStyle-Select--focus;
      outline-offset: $outlineOffset-Select--focus;
    }

    .placeholder {
      flex:1;
      display: flex;
      justify-content: start;
      align-items: center;
      color: $textColor-placeholder-Select;
    }
  }

  .selectTrigger>span {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 1;
    line-clamp: 1;
    overflow: hidden;
  }

  /**
   * Common trigger value and actions
   */

  .actions {
    display: flex;
    align-items: center;
    flex-shrink: 0;
  }

  .action {
    cursor: pointer;
  }

  /**
   * Common empty state
   */
  .emptyList {
    display: flex;
    gap: .2rem;
    padding: 10px 0;
    justify-content: center;
    align-items: center;
    font-size: 14px;
    width: 100%;
  }

  // =============================================================================
  // MULTI-SELECT SPECIFIC (searchable + multiSelect)
  // =============================================================================

  /**
   * Badge display for multi-select values
   */
  .badgeListContainer {
    display: flex;
    flex: 1;
    justify-content: space-between;
    align-items: center;
  }

  .badgeList {
    position: relative;
    align-items: center;
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }

  .inputWrapper {
    display: flex;
    align-items: center;
    min-width: fit-content;
    flex: 1;
    gap: t.$space-1;
  }

  .badge {
    width: fit-content;
    height: fit-content;
    min-width: 0;
    padding: $paddingVertical-Select-badge $paddingHorizontal-Select-badge;
    transition: color 0.2s, background-color 0.2s;
    user-select: none;
    cursor: pointer;
    display: flex;
    gap: t.$space-1;
    justify-content: center;
    align-items: center;
    border-radius: $borderRadius-Select-badge;
    font-size: $fontSize-Select-badge;
    background-color: $backgroundColor-Select-badge;
    color: $textColor-Select-badge;

    &:hover {
      background-color: $backgroundColor-Select-badge--hover;
      color: $textColor-Select-badge--hover;
    }

    &:active {
      background-color: $backgroundColor-Select-badge--active;
      color: $textColor-Select-badge--active;
    }
  }

  /**
   * Search input and dropdown for searchable/multi-select
   */

  .selectContent {
    z-index: 1000;
    outline: none;
    overflow: auto;
    background-color: $backgroundColor-menu-Select;
    border-radius: $borderRadius-menu-Select;
    box-shadow: $boxShadow-menu-Select;
    border: $borderWidth-menu-Select solid $borderColor-menu-Select;
  }

  .command {
    width: 100%;
    height: auto;
    overflow: visible;
  }

  .commandInputContainer {
    display: flex;
    align-items: center;
    padding: 0 12px;
    border-bottom: 1px solid t.$borderColor;
  }

  .commandInput {
    width: 100%;
    background-color: transparent;
    outline: none;
    padding: t.$space-2;

    &:disabled {
      cursor: not-allowed;
      opacity: 0.5;
    }



    &:focus-within {
      outline: none;
    }
  }

  .commandList {
    width: 100%;
    overflow: auto;
  }

  /**
   * MultiSelectOption component (used in searchable/multi-select dropdown)
   */
  .multiSelectOption {
    @include t.paddingVars($themeVars, "item-#{$componentName}");
    display: flex;
    gap: t.$space-1;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    transition: background-color 0.2s ease;
    background-color: $backgroundColor-item-Select;

    .multiSelectOptionContent {
      width: 100%;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    &[aria-selected="true"] {
      background-color: $backgroundColor-item-Select--active;
    }

    &:hover,
    &.highlighted {
      background-color: $backgroundColor-item-Select--hover;
    }

    &[data-selected=true] {
      background-color: $backgroundColor-item-Select--active;
    }

    &[aria-disabled="true"],
    &.disabledOption {
      pointer-events: none;
      cursor: not-allowed;
      color: $textColor-item-Select--disabled;
      font-style: italic;
    }

    &[data-disabled=true] {
      pointer-events: none;
      opacity: $opacity-text-item-Select--disabled;
      cursor: not-allowed;
      font-style: italic;
    }
  }

  // =============================================================================
  // SIMPLE SELECT (non-searchable, single select using Radix UI)
  // =============================================================================

  /**
   * Trigger value display for SimpleSelect
   */
  .selectValue {
    flex: 1;
    display: flex;
    align-items: center;
    min-height: t.$space-7;
    outline: none;
    background-color: transparent;
    font-size: t.$fontSize;
  }

  .action {
    font-size: t.$fontSize;
  }

  /**
   * Dropdown content container
   */
  .selectDropdownContent {
    position: relative;
    width: 100%;
    max-height: 280px;
    z-index: 1000;
    overflow: auto;
    background-color: $backgroundColor-menu-Select;
    border-radius: $borderRadius-menu-Select;
    box-shadow: $boxShadow-menu-Select;
    border: $borderWidth-menu-Select solid $borderColor-menu-Select;

    &[data-state='open'] {
      animation: fadeIn $animDuration ease-in-out, zoomIn $animDuration ease-in-out;
    }

    &[data-state='closed'] {
      animation: fadeOut $animDuration ease-in-out, zoomOut $animDuration ease-in-out;
    }

    &[data-side='bottom'] {
      animation: slideInFromTop 0.08s ease-in-out;
      transform: translateY(0.15rem);
    }

    &[data-side='left'] {
      animation: slideInFromRight $animDuration ease-in-out;
      transform: translateX(-0.15rem);
    }

    &[data-side='right'] {
      animation: slideInFromLeft $animDuration ease-in-out;
      transform: translateX(0.15rem);
    }

    &[data-side='top'] {
      animation: slideInFromBottom $animDuration ease-in-out;
      transform: translateY(-0.15rem);
    }
  }

  .selectViewport {
    height: fit-content;
    width: 100%;
  }

  .selectScrollUpButton {
    display: flex;
    cursor: default;
    align-items: center;
    justify-content: center;
    padding-top: 0.25rem;
    padding-bottom: 0.25rem;
  }

  .selectScrollDownButton {
    display: flex;
    cursor: default;
    align-items: center;
    justify-content: center;
    padding-top: 0.25rem;
    padding-bottom: 0.25rem;
  }

  .selectEmpty {
    display: flex;
    gap: .2rem;
    height: 100%;
    padding: 10px 0;
    justify-content: center;
    align-items: center;
    font-size: 14px;
    width: 100%;
  }

  /**
   * SelectOption component (used in SimpleSelect dropdown)
   */
  .selectOption {
    @include t.paddingVars($themeVars, "item-#{$componentName}");
    transition: background-color 0.2s ease;
    background-color: $backgroundColor-item-Select;
    gap: t.$space-1;
    position: relative;
    display: flex;
    cursor: pointer;
    user-select: none;
    align-items: center;
    outline: none;
    justify-content: space-between;

    &[data-state=checked] {
      background-color: $backgroundColor-item-Select--active;
    }

    &[data-highlighted] {
      background-color: $backgroundColor-item-Select--hover;
    }

    .selectOptionContent {
      display: flex;
      flex: 1;
      cursor: pointer;
      user-select: none;
      align-items: center;
      outline: none;
    }

    &[data-disabled] {
      pointer-events: none;
      opacity: $opacity-text-item-Select--disabled;
      cursor: not-allowed;
      font-style: italic;
    }
  }

  .selectOptionIndicator {
    display: flex;
    margin-right: 0.5rem;
    flex-shrink: 0;
    height: 0.875rem;
    width: 0.875rem;
    align-items: center;
    justify-content: center;
    color: $textColor-indicator-Select;
  }

  // =============================================================================
  // UTILITY CLASSES
  // =============================================================================

  .loading {
    padding: 0.5rem 1rem;
  }

  .srOnly {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
    }

    to {
      opacity: 0;
    }
  }

  @keyframes zoomIn {
    from {
      transform: scale(0.95);
    }

    to {
      transform: scale(1);
    }
  }

  @keyframes zoomOut {
    from {
      transform: scale(1);
    }

    to {
      transform: scale(0.95);
    }
  }

  @keyframes slideInFromTop {
    from {
      transform: translateY(-0.75rem);
    }

    to {
      transform: translateY(0);
    }
  }

  @keyframes slideInFromBottom {
    from {
      transform: translateY(0.75rem);
    }

    to {
      transform: translateY(0);
    }
  }

  @keyframes slideInFromLeft {
    from {
      transform: translateX(-100%);
    }

    to {
      transform: translateX(0);
    }
  }

  @keyframes slideInFromRight {
    from {
      transform: translateX(100%);
    }

    to {
      transform: translateX(0);
    }
  }
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}
