@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: (
);
$animDuration: 0.1s;

@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$componentName: "Select";
$themeVars: t.composePaddingVars($themeVars, "item-#{$componentName}");
$themeVars: t.composePaddingVars($themeVars, $componentName);


// --- CSS properties of a particular Select variant
@mixin variant($variantName) {
  border-radius: createThemeVar("Input:borderRadius-#{$componentName}-#{$variantName}");
  border-color: createThemeVar("Input:borderColor-#{$componentName}-#{$variantName}");
  border-width: createThemeVar("Input:borderWidth-#{$componentName}-#{$variantName}");
  border-style: createThemeVar("Input:borderStyle-#{$componentName}-#{$variantName}");
  font-size: createThemeVar("Input:fontSize-#{$componentName}-#{$variantName}");
  background-color: createThemeVar("Input:backgroundColor-#{$componentName}-#{$variantName}");
  box-shadow: createThemeVar("Input:boxShadow-#{$componentName}-#{$variantName}");
  color: createThemeVar("Input:textColor-#{$componentName}-#{$variantName}");

  &:not(:disabled) {
    &:hover {
      border-color: createThemeVar("Input:borderColor-#{$componentName}-#{$variantName}--hover");
      background-color: createThemeVar("Input:backgroundColor-#{$componentName}-#{$variantName}--hover");
      box-shadow: createThemeVar("Input:boxShadow-#{$componentName}-#{$variantName}--hover");
      color: createThemeVar("Input:textColor-#{$componentName}-#{$variantName}--hover");
    }

    &:focus-visible {
      outline-width: createThemeVar('Input:outlineWidth-#{$componentName}-#{$variantName}--focus');
      outline-color: createThemeVar('Input:outlineColor-#{$componentName}-#{$variantName}--focus');
      outline-style: createThemeVar('Input:outlineStyle-#{$componentName}-#{$variantName}--focus');
      outline-offset: createThemeVar('Input:outlineOffset-#{$componentName}-#{$variantName}--focus');
    }
  }

  &::placeholder {
    color: createThemeVar("Input:textColor-placeholder-#{$componentName}-#{$variantName}");
    font-size: createThemeVar("Input:fontSize-placeholder-#{$componentName}-#{$variantName}");
  }
}

@layer components {
  .selectTrigger {
    outline: none;
    width: 100%;
    gap: t.$space-1;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    @include t.paddingVars($themeVars, $componentName);

    @include variant("default");

    &.error {
      @include variant("error");
    }

    &.warning {
      @include variant("warning");
    }

    &.valid {
      @include variant("success");
    }

    &.disabled {
      cursor: not-allowed;
      opacity: 0.5;
      background-color: createThemeVar("Input:backgroundColor-#{$componentName}--disabled");
      color: createThemeVar("Input:textColor-#{$componentName}--disabled");
      border-color: createThemeVar("Input:borderColor-#{$componentName}--disabled");
    }

    &.focused {
      outline-width: createThemeVar("Input:outlineWidth-#{$componentName}--focus");
      outline-color: createThemeVar("Input:outlineColor-#{$componentName}--focus");
      outline-style: createThemeVar("Input:outlineStyle-#{$componentName}--focus");
      outline-offset: createThemeVar("Input:outlineOffset-#{$componentName}--focus");
    }
  }

  .selectTrigger>span {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 1;
    line-clamp: 1;
    overflow: hidden;
  }

  .badgeListContainer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
  }

  .badgeList {
    position: relative;
    align-items: center;
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }

  .inputWrapper {
    display: flex;
    align-items: center;
    min-width: fit-content;
    flex: 1;
    gap: t.$space-1;
  }

  .badge {
    width: fit-content;
    height: fit-content;
    min-width: 0;
    padding: createThemeVar("paddingVertical-#{$componentName}-badge") createThemeVar("paddingHorizontal-#{$componentName}-badge");
    transition: color 0.2s, background-color 0.2s;
    user-select: none;
    cursor: pointer;
    display: flex;
    gap: t.$space-1;
    justify-content: center;
    align-items: center;
    border-radius: createThemeVar("borderRadius-#{$componentName}-badge");
    font-size: createThemeVar("Input:fontSize-#{$componentName}-badge");
    background-color: createThemeVar("Input:backgroundColor-#{$componentName}-badge");
    color: createThemeVar("Input:textColor-#{$componentName}-badge");

    &:hover {
      background-color: createThemeVar("Input:backgroundColor-#{$componentName}-badge--hover");
      color: createThemeVar("Input:textColor-#{$componentName}-badge--hover");
    }

    &:active {
      background-color: createThemeVar("Input:backgroundColor-#{$componentName}-badge--active");
      color: createThemeVar("Input:textColor-#{$componentName}-badge--active");
    }
  }

  .actions {
    display: flex;
    align-items: center;
    flex-shrink: 0;
  }

  .action {
    cursor: pointer;
  }

  .placeholder {
    display: block;
    color: createThemeVar("Input:textColor-placeholder-#{$componentName}");
  }

  .emptyList {
    display: flex;
    gap: .2rem;
    padding: 10px 0;
    justify-content: center;
    align-items: center;
    font-size: 14px;
    width: 100%;
  }

  .selectScrollUpButton {
    display: flex;
    cursor: default;
    align-items: center;
    justify-content: center;
    padding-top: 0.25rem;
    padding-bottom: 0.25rem;
  }

  .selectScrollDownButton {
    display: flex;
    cursor: default;
    align-items: center;
    justify-content: center;
    padding-top: 0.25rem;
    padding-bottom: 0.25rem;
  }

  .command {
    width: 100%;
    height: auto;
    overflow: visible;
    background-color: transparent;
  }

  .commandInputContainer {
    display: flex;
    align-items: center;
    padding: 0 12px;
    border-bottom: 1px solid t.$borderColor;
  }

  .commandInput {
    width: 100%;
    background-color: transparent;
    outline: none;

    &:disabled {
      cursor: not-allowed;
      opacity: 0.5;
    }

    &::placeholder {
      color: createThemeVar("Input:textColor-placeholder-#{$componentName}");
    }

    &:focus-within {
      outline: none;
    }
  }

  .commandList {
    overflow-y: auto;
    overflow-x: hidden;
  }

  .selectContent {
    position: relative;
    width: 100%;
    max-height: 280px;
    z-index: 1000;
    overflow: auto;
    background-color: createThemeVar("Input:backgroundColor-menu-#{$componentName}");
    border-radius: createThemeVar("Input:borderRadius-menu-#{$componentName}");
    box-shadow: createThemeVar("Input:boxShadow-menu-#{$componentName}");
    border: createThemeVar("Input:borderWidth-menu-#{$componentName}") solid createThemeVar("Input:borderColor-menu-#{$componentName}");

    &[data-state='open'] {
      animation: fadeIn $animDuration ease-in-out, zoomIn $animDuration ease-in-out;
    }

    &[data-state='closed'] {
      animation: fadeOut $animDuration ease-in-out, zoomOut $animDuration ease-in-out;
    }

    &[data-side='bottom'] {
      animation: slideInFromTop 0.08s ease-in-out;
    }

    &[data-side='left'] {
      animation: slideInFromRight $animDuration ease-in-out;
    }

    &[data-side='right'] {
      animation: slideInFromLeft $animDuration ease-in-out;
    }

    &[data-side='top'] {
      animation: slideInFromBottom $animDuration ease-in-out;
    }

    &[data-side='bottom'] {
      transform: translateY(0.15rem);
    }

    &[data-side='left'] {
      transform: translateX(-0.15rem);
    }

    &[data-side='right'] {
      transform: translateX(0.15rem);
    }

    &[data-side='top'] {
      transform: translateY(-0.15rem);
    }
  }

  .multiComboboxOption {
    padding: 0.5rem 1rem;
    display: flex;
    gap: 1rem;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    transition: background-color 0.2s ease;
    background-color: createThemeVar("backgroundColor-item-#{$componentName}");

    .multiComboboxOptionContent {
      width: 100%;
      gap: 1rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    &[aria-selected="true"],
    &:hover {
      background-color: createThemeVar("backgroundColor-item-#{$componentName}--hover");
    }

    &[data-selected=true] {
      background-color: createThemeVar("backgroundColor-item-#{$componentName}--hover");
    }

    &[aria-disabled="true"],
    &.disabledOption {
      pointer-events: none;
      cursor: not-allowed;
      color: createThemeVar("textColor-item-#{$componentName}--disabled");
      font-style: italic;
    }

    &[data-disabled=true] {
      pointer-events: none;
      opacity: createThemeVar("opacity-text-item-#{$componentName}--disabled");
      cursor: not-allowed;
      font-style: italic;
    }
  }

  .selectItem {
    position: relative;
    display: flex;
    cursor: pointer;
    user-select: none;
    align-items: center;
    outline: none;
    font-size: createThemeVar("fontSize-#{$componentName}");

    &[data-highlighted] {
      background-color: createThemeVar("backgroundColor-item-#{$componentName}--hover");
    }

    &[data-state=checked] {
      background-color: createThemeVar("backgroundColor-item-#{$componentName}--active");
    }

    .selectItemContent {
      display: flex;
      flex: 1;
      cursor: pointer;
      user-select: none;
      align-items: center;
      outline: none;
      @include t.paddingVars($themeVars, "item-#{$componentName}");
    }
  }

  .selectItem[data-disabled] {
    pointer-events: none;
    opacity: createThemeVar("opacity-text-item-#{$componentName}--disabled");
    cursor: not-allowed;
    font-style: italic;
  }

  .selectItemIndicator {
    display: flex;
    margin-right: 0.5rem;
    flex-shrink: 0;
    height: 0.875rem;
    width: 0.875rem;
    align-items: center;
    justify-content: center;
    color: createThemeVar("textColor-indicator-#{$componentName}");
  }

  .selectViewport {
    height: fit-content;
    width: 100%;
    min-width: var(--radix-select-trigger-width);
  }

  .selectEmpty {
    display: flex;
    gap: .2rem;
    height: 100%;
    padding: 10px 0;
    justify-content: center;
    align-items: center;
    font-size: 14px;
    width: 100%;
  }

  .loading {
    padding: 0.5rem 1rem;
  }

  .srOnly {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
    }

    to {
      opacity: 0;
    }
  }

  @keyframes zoomIn {
    from {
      transform: scale(0.95);
    }

    to {
      transform: scale(1);
    }
  }

  @keyframes zoomOut {
    from {
      transform: scale(1);
    }

    to {
      transform: scale(0.95);
    }
  }

  @keyframes slideInFromTop {
    from {
      transform: translateY(-0.75rem);
    }

    to {
      transform: translateY(0);
    }
  }

  @keyframes slideInFromBottom {
    from {
      transform: translateY(0.75rem);
    }

    to {
      transform: translateY(0);
    }
  }

  @keyframes slideInFromLeft {
    from {
      transform: translateX(-100%);
    }

    to {
      transform: translateX(0);
    }
  }

  @keyframes slideInFromRight {
    from {
      transform: translateX(100%);
    }

    to {
      transform: translateX(0);
    }
  }
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}