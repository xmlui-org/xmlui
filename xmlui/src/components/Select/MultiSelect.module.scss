@use "@components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$componentName: "MultiCombobox";

// --- CSS properties of a particular Select variant
@mixin variant($variantName) {
  border-radius: createThemeVar("Input:radius-#{$componentName}-#{$variantName}");
  border-color: createThemeVar("Input:color-border-#{$componentName}-#{$variantName}");
  border-width: createThemeVar("Input:thickness-border-#{$componentName}-#{$variantName}");
  border-style: createThemeVar("Input:style-border-#{$componentName}-#{$variantName}");
  font-size: createThemeVar("Input:font-size-#{$componentName}-#{$variantName}");
  background-color: createThemeVar("Input:color-bg-#{$componentName}-#{$variantName}");
  box-shadow: createThemeVar("Input:shadow-#{$componentName}-#{$variantName}");
  color: createThemeVar("Input:color-text-#{$componentName}-#{$variantName}");

  &:hover {
    border-color: createThemeVar("Input:color-border-#{$componentName}-#{$variantName}--hover");
    background-color: createThemeVar("Input:color-bg-#{$componentName}-#{$variantName}--hover");
    box-shadow: createThemeVar("Input:shadow-#{$componentName}-#{$variantName}--hover");
    color: createThemeVar("Input:color-text-#{$componentName}-#{$variantName}--hover");
  }

  &:focus {
    outline-width: createThemeVar('Input:thickness-outline-#{$componentName}-#{$variantName}--focus');
    outline-color: createThemeVar('Input:color-outline-#{$componentName}-#{$variantName}--focus');
    outline-style: createThemeVar('Input:style-outline-#{$componentName}-#{$variantName}--focus');
    outline-offset: createThemeVar('Input:offset-outline-#{$componentName}-#{$variantName}--focus');
  }
}

.multiComboboxButton {
  display: flex;
  padding: t.$space-1;
  width: 100%;
  align-items: center;
  justify-content: space-between;
  outline: none;
  overflow: hidden;
  line-height: 1.25rem;

  @include variant("default");

  &.error {
    @include variant("error");
  }

  &.warning {
    @include variant("warning");
  }

  &.valid {
    @include variant("success");
  }

  &:disabled {
    cursor: not-allowed;
    opacity: 0.5;
    background-color: createThemeVar("Input:color-bg-#{$componentName}--disabled");
    color: createThemeVar("Input:color-text-#{$componentName}--disabled");
    border-color: createThemeVar("Input:color-border-#{$componentName}--disabled");
  }
}

.badgeListContainer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
}

.badgeList {
  gap: 4px;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
}

.placeholder {
  margin: 3px 0;
  display: block;
  color: createThemeVar("Input:color-placeholder-#{$componentName}");

  &:empty::before {
    content: "\00a0";
    display: inline-block;
  }
}




.actions {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.emptyList {
  display: flex;
  gap: .2rem;
  padding: 10px 0;
  justify-content: center;
  align-items: center;
  font-size: 14px;
  width: 100%;
}

.empty {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  margin-left: auto;
  margin-right: auto;
}

.multiSelectMenu {
  padding: 0;
  overflow-y: auto;
  list-style: none;
  transition: height 0.2s ease;
  height: fit-content;
  max-height: 200px;
  box-shadow: createThemeVar("Input:shadow-menu-#{$componentName}");
  background-color: createThemeVar("Input:color-bg-menu-#{$componentName}");
  border-radius: createThemeVar("Input:radius-menu-#{$componentName}");
}

.multiComboboxOption {
  padding: 0.5rem 1rem;
  display: flex;
  gap: 1rem;
  align-items: center;
  justify-content: space-between;
  cursor: pointer;
  transition: background-color 0.2s ease;
  background-color: createThemeVar("color-bg-item-#{$componentName}");

  &[data-selected=true] {
    background-color: createThemeVar("color-bg-item-#{$componentName}--hover");
  }

  /*  &[data-state=checked] {
      background-color: createThemeVar("color-bg-item-#{$componentName}--active");
    }*/

  &[data-disabled=true] {
    pointer-events: none;
    opacity: 0.5;
    cursor: not-allowed;
    color: createThemeVar("color-text-item-#{$componentName}--disabled");
    font-style: italic;
  }
}


// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}
