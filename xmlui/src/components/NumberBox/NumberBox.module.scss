@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$componentName: "NumberBox";

// --- CSS properties of a particular NumberBox variant
@mixin variant($variantName) {
  border-radius: createThemeVar("Input:borderRadius-#{$componentName}-#{$variantName}");
  border-color: createThemeVar("Input:borderColor-#{$componentName}-#{$variantName}");
  border-width: createThemeVar("Input:borderWidth-#{$componentName}-#{$variantName}");
  border-style: createThemeVar("Input:borderStyle-#{$componentName}-#{$variantName}");
  font-size: createThemeVar("Input:fontSize-#{$componentName}-#{$variantName}");

  background-color: createThemeVar("Input:backgroundColor-#{$componentName}-#{$variantName}");
  box-shadow: createThemeVar("Input:boxShadow-#{$componentName}-#{$variantName}");
  color: createThemeVar("Input:textColor-#{$componentName}-#{$variantName}");

  &:hover {
    border-color: createThemeVar("Input:borderColor-#{$componentName}-#{$variantName}--hover");
    background-color: createThemeVar(
      "Input:backgroundColor-#{$componentName}-#{$variantName}--hover"
    );
    box-shadow: createThemeVar("Input:boxShadow-#{$componentName}-#{$variantName}--hover");
    color: createThemeVar("Input:textColor-#{$componentName}-#{$variantName}--hover");
  }

  &:focus-within {
    border-color: createThemeVar("Input:borderColor-#{$componentName}-#{$variantName}--focus");
    background-color: createThemeVar(
      "Input:backgroundColor-#{$componentName}-#{$variantName}--focus"
    );
    box-shadow: createThemeVar("Input:boxShadow-#{$componentName}-#{$variantName}--focus");
    color: createThemeVar("Input:textColor-#{$componentName}-#{$variantName}--focus");
  }

  &:has(.input:focus-visible) {
    outline-width: createThemeVar("Input:outlineWidth-#{$componentName}-#{$variantName}--focus");
    outline-color: createThemeVar("Input:outlineColor-#{$componentName}-#{$variantName}--focus");
    outline-style: createThemeVar("Input:outlineStyle-#{$componentName}-#{$variantName}--focus");
    outline-offset: createThemeVar("Input:outlineOffset-#{$componentName}-#{$variantName}--focus");
  }

  .input {
    &::placeholder {
      color: createThemeVar("Input:textColor-placeholder-#{$componentName}-#{$variantName}");
    }
  }
  .adornment {
    color: createThemeVar("Input:textColor-adornment-#{$componentName}-#{$variantName}");
  }
}

.inputRoot {
  display: flex;
  align-items: center;
  gap: createThemeVar("Input:gap-adornment-#{$componentName}");
  padding: t.$space-2;
  width: 100%;
  border-style: solid;
  border-width: 1px;
  transition: background-color ease-in 0.1s;
  overflow: hidden;

  @include variant("default");

  &.error {
    @include variant("error");
  }
  &.warning {
    @include variant("warning");
  }
  &.valid {
    @include variant("success");
  }

  &:has(.input:is(:disabled)) {
    cursor: not-allowed;
    background-color: createThemeVar("Input:backgroundColor-NumberBox--disabled");
    color: createThemeVar("Input:textColor-NumberBox--disabled");
    border-color: createThemeVar("Input:borderColor-NumberBox--disabled");
  }

  .input {
    font-size: inherit;
    color: inherit;
    border: 0;
    outline: none;
    background-color: transparent;
    padding: 0;
    width: 100%;
    cursor: inherit;

    /* Remove default spinners */
    /* Chrome, Safari, Edge, Opera */
    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
    /* Firefox */
    -webkit-appearance: textfield;
    -moz-appearance: textfield;
    appearance: textfield;
  }

  .spinnerBox {
    display: flex;
    flex-direction: column;
    height: 0;
    align-items: center;
    justify-content: center;
  }

  .spinnerButton {
    padding: 0 !important;
    width: t.$space-6;
    border: none;

    // &:hover {
    //   background-color: transparent !important;
    // }
  }
}

.readOnly {
  cursor: text;
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}
