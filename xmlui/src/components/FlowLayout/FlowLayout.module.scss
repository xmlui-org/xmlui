@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}


.outer{
  contain: layout;
}

.flowContainer {
  display: flex;
  flex-wrap: wrap;

  &.horizontal {
    flex-direction: row;

    .flowItem {
      flex-shrink: 0;

      & > * {
        width: 100% !important; //reset the wrapped content's width-like properties to their default
        min-width: 0 !important;
        max-width: none !important;
      }
    }
  }

  &.vertical {
    height: 100%;
    flex-direction: column;
    align-content: flex-start;

    .flowItem {
      width: auto;
      flex-shrink: 0;

      & > * {
        height: auto !important;
        min-height: 0 !important;
        max-height: none !important;
      }
    }
  }
}

//we use the .break class to create a new line in the flow
// if there are multiple star-sized elements in a row, the break will be ignored between them
.break:not(.forceBreak):has(+ .starSized) {
  display: none;
}

.break, .forceBreak {
  flex-basis: 100%;
  height: 0;
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}
