@use "../../components-core/theming/themes" as t;
@use "../Toggle/Toggle.module.scss";

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

@mixin hoverAndDisabledState($componentName) {
  &:hover {
    border-color: createThemeVar("Input:borderColor-#{$componentName}-default--hover");
  }

  &:disabled {
    cursor: not-allowed;
    background-color: createThemeVar("Input:backgroundColor-#{$componentName}--disabled");
    border-color: createThemeVar("Input:borderColor-#{$componentName}--disabled");
  }
}

@mixin checkedState($componentName) {
  &:checked {
    border-color: createThemeVar("Input:borderColor-checked-#{$componentName}");
    background-color: createThemeVar("Input:backgroundColor-checked-#{$componentName}");
  }

  &:checked:disabled {
    background-color: createThemeVar("Input:backgroundColor-#{$componentName}--disabled");
    border-color: createThemeVar("Input:borderColor-#{$componentName}--disabled");
  }

  &:checked.error {
    border-color: createThemeVar("Input:borderColor-checked-#{$componentName}-error");
    background-color: createThemeVar("Input:backgroundColor-checked-#{$componentName}-error");
  }

  &:checked.warning {
    border-color: createThemeVar("Input:borderColor-checked-#{$componentName}-warning");
    background-color: createThemeVar("Input:backgroundColor-checked-#{$componentName}-warning");
  }

  &:checked.valid {
    border-color: createThemeVar("Input:borderColor-checked-#{$componentName}-success");
    background-color: createThemeVar("Input:backgroundColor-checked-#{$componentName}-success");
  }
}

.switch {
  --thumb-size: 1rem;
  --thumb-position: 0%;
  --track-size: calc(var(--thumb-size) * 3);
  --padding-size: 4px;

  cursor: pointer;
  flex-shrink: 0;
  display: grid;
  align-items: center;
  grid: [track] 1fr / [track] 1fr;
  background-color: createThemeVar("Input:backgroundColor-Switch");

  width: var(--track-size);
  min-height: var(--thumb-size);

  padding: var(--padding-size);
  border: 1px solid createThemeVar("Input:borderColor-Switch");
  border-radius: 1rem;
  
  &::before {
    content: "";
    grid-area: track;
    height: var(--thumb-size);
    width: var(--thumb-size);
    background: createThemeVar("backgroundColor-indicator-Switch");
    border-radius: 50%;

    transform: translateX(var(--thumb-position));
    transition: 0.3s transform;
  }

  &:checked {
    background: createThemeVar("backgroundColor-checked-Switch");

    &::before {
      background: createThemeVar("backgroundColor-indicator-checked-Switch");
      --thumb-position: calc(var(--track-size) - var(--thumb-size) - 2 * var(--padding-size) - 2px);
    }
  }

  @include hoverAndDisabledState("Switch");
  @include checkedState("Switch");

  &:focus-visible{
    outline-width: createThemeVar('Input:outlineWidth-Switch--focus');
    outline-color: createThemeVar('Input:outlineColor-Switch--focus');
    outline-style: createThemeVar('Input:outlineStyle-Switch--focus');
    outline-offset: createThemeVar('Input:outlineOffset-Switch--focus');
  }

  &:disabled {
    &::before {
      background-color: createThemeVar("backgroundColor-Switch-indicator--disabled");
    }
  }

  &.error {
    border-color: createThemeVar("Input:borderColor-Switch-error");
  }

  &.warning {
    border-color: createThemeVar("Input:borderColor-Switch-warning");
  }

  &.valid {
    border-color: createThemeVar("Input:borderColor-Switch-success");
  }
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}
