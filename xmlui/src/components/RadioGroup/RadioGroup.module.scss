@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

// Generic RadioGroupOption variables
$gap-RadioGroupOption: createThemeVar("gap-RadioGroupOption");

// Borders
$borderWidth-RadioGroupOption: createThemeVar("borderWidth-RadioGroupOption");
$borderWidth-RadioGroupOption-validation: createThemeVar("borderWidth-RadioGroupOption-validation");

$borderColor-RadioGroupOption-default: createThemeVar("Input:borderColor-RadioGroupOption-default");
$borderColor-checked-RadioGroupOption: createThemeVar("Input:borderColor-checked-RadioGroupOption");
$borderColor-RadioGroupOption-default--hover: createThemeVar(
  "Input:borderColor-RadioGroupOption-default--hover"
);
$borderColor-RadioGroupOption-default--active: createThemeVar(
  "Input:borderColor-RadioGroupOption-default--active"
);
$borderColor-RadioGroupOption--disabled: createThemeVar(
  "Input:borderColor-RadioGroupOption--disabled"
);

$borderColor-RadioGroupOption-error: createThemeVar("Input:borderColor-RadioGroupOption-error");
$borderColor-RadioGroupOption-warning: createThemeVar("Input:borderColor-RadioGroupOption-warning");
$borderColor-RadioGroupOption-success: createThemeVar("Input:borderColor-RadioGroupOption-success");

// Outline focus variables
$outlineWidth-RadioGroupOption--focus: createThemeVar("Input:outlineWidth-RadioGroupOption--focus");
$outlineColor-RadioGroupOption--focus: createThemeVar("Input:outlineColor-RadioGroupOption--focus");
$outlineStyle-RadioGroupOption--focus: createThemeVar("Input:outlineStyle-RadioGroupOption--focus");
$outlineOffset-RadioGroupOption--focus: createThemeVar("Input:outlineOffset-RadioGroupOption--focus");

// Backgrounds

$backgroundColor-RadioGroupOption-default: createThemeVar(
  "Input:backgroundColor-RadioGroupOption-default"
);
$backgroundColor-checked-RadioGroupOption: createThemeVar(
  "Input:backgroundColor-checked-RadioGroupOption"
);
$backgroundColor-checked-RadioGroupOption--disabled: createThemeVar(
  "Input:backgroundColor-checked-RadioGroupOption--disabled"
);

// Foreground

$color-RadioGroupOption--disabled: createThemeVar("Input:color-RadioGroupOption--disabled");

// Text

$fontSize-RadioGroupOption: createThemeVar("Input:fontSize-RadioGroupOption");
$fontWeight-RadioGroupOption: createThemeVar("Input:fontWeight-RadioGroupOption");

$textColor-RadioGroupOption-default: createThemeVar("Input:textColor-RadioGroupOption-default");
$textColor-RadioGroupOption-error: createThemeVar("Input:textColor-RadioGroupOption-error");
$textColor-RadioGroupOption-warning: createThemeVar("Input:textColor-RadioGroupOption-warning");
$textColor-RadioGroupOption-success: createThemeVar("Input:textColor-RadioGroupOption-success");


@layer components {
  .radioGroupContainer {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: t.$space-2;
  }

  .radioOptionContainer {
    display: flex;
    align-items: center;
    gap: $gap-RadioGroupOption;
  }

  .radioOption {
    flex-shrink: 0;
    width: 18px;
    height: 18px;
    border-radius: 100%;
    background: $backgroundColor-RadioGroupOption-default;
    border-width: $borderWidth-RadioGroupOption;
    border-style: solid;
    border-color: $borderColor-RadioGroupOption-default;
    padding: 0;
    cursor: pointer;

    &:hover {
      border-color: $borderColor-RadioGroupOption-default--hover;
    }
    &:focus-visible {
      outline-width: $outlineWidth-RadioGroupOption--focus;
      outline-color: $outlineColor-RadioGroupOption--focus;
      outline-style: $outlineStyle-RadioGroupOption--focus;
      outline-offset: $outlineOffset-RadioGroupOption--focus;
    }
    &:disabled {
      cursor: not-allowed;
      border-color: $borderColor-RadioGroupOption--disabled;
    }
    &:disabled + label {
      cursor: not-allowed;
      color: $color-RadioGroupOption--disabled;
    }
    &:not(:disabled) {
      &:not(.error):not(.warning):not(.valid) {
        border-color: $borderColor-checked-RadioGroupOption;
      }
      &.error {
        border-width: $borderWidth-RadioGroupOption-validation;
        border-color: $borderColor-RadioGroupOption-error;
      }
      &.warning {
        border-width: $borderWidth-RadioGroupOption-validation;
        border-color: $borderColor-RadioGroupOption-warning;
      }
      &.valid {
        border-width: $borderWidth-RadioGroupOption-validation;
        border-color: $borderColor-RadioGroupOption-success;
      }
    }
  }

  // The indicator is the circle that appears inside the radio button:
  // both the larger circle and an inner circle.
  .indicator {
    display: grid;
    place-content: center;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: radial-gradient(
                    circle,
                    transparent 28%,
                    $backgroundColor-checked-RadioGroupOption 34%
    );

    &.disabled {
      background: radial-gradient(
                      circle,
                      transparent 28%,
                      $backgroundColor-checked-RadioGroupOption--disabled 34%
      );
    }
  }

  .itemContainer {
    z-index: -1;
    position: relative;
    opacity: 0;
    width: 0;
    height: 0;
  }

  .optionLabel {
    width: 100%;
    cursor: pointer;
  }

  .label {
    width: 100%;
    color: $textColor-RadioGroupOption-default;
    font-size: $fontSize-RadioGroupOption;
    font-weight: $fontWeight-RadioGroupOption;
    user-select: none;
    cursor: pointer;

    &.error {
      color: $textColor-RadioGroupOption-error;
    }
    &.warning {
      color: $textColor-RadioGroupOption-warning;
    }
    &.valid {
      color: $textColor-RadioGroupOption-success;
    }
  }
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}
