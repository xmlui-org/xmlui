@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$component: "Splitter";
$boxShadow-Splitter: createThemeVar("boxShadow-#{$component}");
$backgroundColor-Splitter: createThemeVar("backgroundColor-#{$component}");
$borderRadius-Splitter: createThemeVar("borderRadius-#{$component}");
$borderColor-Splitter: createThemeVar("borderColor-#{$component}");
$borderWidth-Splitter: createThemeVar("borderWidth-#{$component}");
$borderStyle-Splitter: createThemeVar("borderStyle-#{$component}");
$border-Splitter: createThemeVar("border-#{$component}");
$backgroundColor-resizer-Splitter: createThemeVar("backgroundColor-resizer-#{$component}");
$thickness-resizer-Splitter: createThemeVar("thickness-resizer-#{$component}");
$cursor-resizer-horizontal-Splitter: createThemeVar("cursor-resizer-horizontal-#{$component}");
$cursor-resizer-vertical-Splitter: createThemeVar("cursor-resizer-vertical-#{$component}");

.splitter {
  overflow: hidden;
  position: relative;
  flex-wrap: nowrap;
  display: flex;
  height: 100%;
  width: 100%;
  box-shadow: $boxShadow-Splitter;
  background-color: $backgroundColor-Splitter;
  border-radius: $borderRadius-Splitter;
  border: $border-Splitter $borderStyle-Splitter $borderColor-Splitter;
  user-select: none;

  &.vertical {
    flex-direction: column;
  }

  &.horizontal {
    flex-direction: row;
  }
}

.panel {
  overflow: hidden;
  display: flex;
  flex-direction: column;
  flex: 1;
}

.primaryPanel {
  flex-shrink: 0;
  flex-grow: 0;
  overflow: auto;
  order: 1;
}

.secondaryPanel {
  flex: 1;
  overflow: auto;
  order: 3;
}

.resizer {
  order: 2;
  overflow: hidden;
  background-color: t.useVar($backgroundColor-resizer-Splitter, transparent);

  &.vertical {
    cursor: t.useVar($cursor-resizer-vertical-Splitter, ns-resize);
    height: t.useVar($thickness-resizer-Splitter, 5px);
  }

  &.horizontal {
    cursor: t.useVar($cursor-resizer-horizontal-Splitter, ew-resize);
    width: t.useVar($thickness-resizer-Splitter, 5px);
  }
}

.floatingResizer {
  position: absolute;
  z-index: 1000;
  opacity: 0;
  overflow: hidden;
  transition: opacity 0.2s;
  background-color: t.useVar($backgroundColor-resizer-Splitter, transparent);

  &.vertical {
    cursor: t.useVar($cursor-resizer-vertical-Splitter, ns-resize);
    width: 100%;
    height: t.useVar($thickness-resizer-Splitter, 5px);
    transform: translateY(-50%);
  }

  &.horizontal {
    cursor: t.useVar($cursor-resizer-horizontal-Splitter, ew-resize);
    width: t.useVar($thickness-resizer-Splitter, 5px);
    height: 100%;
    transform: translateX(-50%);
  }
}


// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}
