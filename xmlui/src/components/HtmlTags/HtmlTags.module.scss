@use "../../components-core/theming/themes" as t;

// --- table

$themeVarsTable: (
);

@function createThemeVarTable($componentVariable) {
  $themeVarsTable: t.appendThemeVar($themeVarsTable, $componentVariable) !global;
  @return t.getThemeVar($themeVarsTable, $componentVariable);
}

$color-text-HtmlTable: createThemeVarTable("color-text-HtmlTable");
$color-bg-HtmlTable: createThemeVarTable("color-bg-HtmlTable");
$font-family-HtmlTable: createThemeVarTable("font-family-HtmlTable");
$font-size-HtmlTable: createThemeVarTable("font-size-HtmlTable");
$font-weight-HtmlTable: createThemeVarTable("font-weight-HtmlTable");
$textTransform-HtmlTable: createThemeVarTable("textTransform-HtmlTable");
$margin-top-HtmlTable: createThemeVarTable("margin-top-HtmlTable");
$margin-bottom-HtmlTable: createThemeVarTable("margin-bottom-HtmlTable");
$themeVarsTable: t.composeBorderVars($themeVarsTable, "HtmlTable");
$themeVarsTable: t.composePaddingVars($themeVarsTable, "HtmlTable");

.htmlTable {
  background-color: $color-bg-HtmlTable;
  color: $color-text-HtmlTable;
  font-family: $font-family-HtmlTable;
  font-size: $font-size-HtmlTable;
  font-weight: $font-weight-HtmlTable;
  text-transform: $textTransform-HtmlTable;
  margin-top: $margin-top-HtmlTable;
  margin-bottom: $margin-bottom-HtmlTable;
  @include t.borderVars($themeVarsTable, "HtmlTable");
  @include t.paddingVars($themeVarsTable, "HtmlTable");
}

// --- thead

$themeVarsThead: (
);

@function createThemeVarThead($componentVariable) {
  $themeVarsThead: t.appendThemeVar($themeVarsThead, $componentVariable) !global;
  @return t.getThemeVar($themeVarsThead, $componentVariable);
}

$color-bg-HtmlThead: createThemeVarThead("color-bg-HtmlThead");
$color-text-HtmlThead: createThemeVarThead("color-text-HtmlThead");
$font-weight-HtmlThead: createThemeVarThead("font-weight-HtmlThead");
$font-size-HtmlThead: createThemeVarThead("font-size-HtmlThead");
$textTransform-HtmlThead: createThemeVarThead("textTransform-HtmlThead");
$themeVarsThead: t.composeBorderVars($themeVarsThead, "HtmlThead");
$themeVarsThead: t.composePaddingVars($themeVarsThead, "HtmlThead");

.htmlThead {
  background-color: $color-bg-HtmlThead;
  color: $color-text-HtmlThead;
  font-weight: $font-weight-HtmlThead;
  font-size: $font-size-HtmlThead;
  text-transform: $textTransform-HtmlThead;
  @include t.borderVars($themeVarsThead, "HtmlThead");
  @include t.paddingVars($themeVarsThead, "HtmlThead");
}

// --- tbody

$themeVarsTbody: (
);

@function createThemeVarTbody($componentVariable) {
  $themeVarsTbody: t.appendThemeVar($themeVarsTbody, $componentVariable) !global;
  @return t.getThemeVar($themeVarsTbody, $componentVariable);
}

$color-bg-HtmlTbody: createThemeVarTbody("color-bg-HtmlTbody");
$color-text-HtmlTbody: createThemeVarTbody("color-text-HtmlTbody");
$textAlign-HtmlTbody: createThemeVarTbody("textAlign-HtmlTbody");
$vertical-alignment-HtmlTbody: createThemeVarTbody("vertical-alignment-HtmlTbody");
$textTransform-HtmlTbody: createThemeVarTbody("textTransform-HtmlTbody");

.htmlTbody {
  background-color: $color-bg-HtmlTbody;
  color: $color-text-HtmlTbody;
  text-align: $textAlign-HtmlTbody;
  vertical-align: $vertical-alignment-HtmlTbody;
  text-transform: $textTransform-HtmlTbody;
}

// --- tfoot

$themeVarsTfoot: (
);

@function createThemeVarTfoot($componentVariable) {
  $themeVarsTfoot: t.appendThemeVar($themeVarsTfoot, $componentVariable) !global;
  @return t.getThemeVar($themeVarsTfoot, $componentVariable);
}

$color-bg-HtmlTfoot: createThemeVarTfoot("color-bg-HtmlTfoot");
$color-text-HtmlTfoot: createThemeVarTfoot("color-text-HtmlTfoot");

.htmlTfoot {
  background-color: $color-bg-HtmlTfoot;
  color: $color-text-HtmlTfoot;
}

// --- th

$themeVarsTh: (
);

@function createThemeVarTh($componentVariable) {
  $themeVarsTh: t.appendThemeVar($themeVarsTh, $componentVariable) !global;
  @return t.getThemeVar($themeVarsTh, $componentVariable);
}

$color-bg-HtmlTh: createThemeVarTh("color-bg-HtmlTh");
$color-text-HtmlTh: createThemeVarTh("color-text-HtmlTh");
$font-weight-HtmlTh: createThemeVarTh("font-weight-HtmlTh");
$font-size-HtmlTh: createThemeVarTh("font-size-HtmlTh");
$color-bg-HtmlTh--hover: createThemeVarTh("color-bg-HtmlTh--hover");
$themeVarsTh: t.composeBorderVars($themeVarsTh, "HtmlTh");
$themeVarsTh: t.composePaddingVars($themeVarsTh, "HtmlTh");

.htmlTh {
  background-color: $color-bg-HtmlTh;
  color: $color-text-HtmlTh;
  font-weight: $font-weight-HtmlTh;
  font-size: $font-size-HtmlTh;
  @include t.borderVars($themeVarsTh, "HtmlTh");
  @include t.paddingVars($themeVarsTh, "HtmlTh");

  &:hover {
    background-color: $color-bg-HtmlTh--hover;
  }
}

// --- tr

$themeVarsTr: (
);

@function createThemeVarTr($componentVariable) {
  $themeVarsTr: t.appendThemeVar($themeVarsTr, $componentVariable) !global;
  @return t.getThemeVar($themeVarsTr, $componentVariable);
}

$color-bg-HtmlTr: createThemeVarTr("color-bg-HtmlTr");
$color-bg-HtmlTr--hover: createThemeVarTr("color-bg-HtmlTr--hover");
$color-bg-even-HtmlTr: createThemeVarTr("color-bg-even-HtmlTr");
$color-text-HtmlTr: createThemeVarTr("color-text-HtmlTr");
$color-text-HtmlTr--hover: createThemeVarTr("color-text-HtmlTr--hover");
$font-size-HtmlTr: createThemeVarTr("font-size-HtmlTr");
$font-weight-HtmlTr: createThemeVarTr("font-weight-HtmlTr");
$themeVarsTr: t.composeBorderVars($themeVarsTr, "HtmlTr");

.htmlTr {
  background-color: $color-bg-HtmlTr;
  color: $color-text-HtmlTr;
  font-weight: $font-weight-HtmlTr;
  font-size: $font-size-HtmlTr;
  @include t.borderVars($themeVarsTr, "HtmlTr");

  &:nth-child(even) {
    background-color: $color-bg-even-HtmlTr;
  }

  // Apply hover effect for rows with mixed th, td elements
  &:hover {
    background-color: $color-bg-HtmlTr--hover;
    color: $color-text-HtmlTr--hover;
  }

  // Remove hover effect for rows with only th elements
  &:hover:not(:has(:not(th))) {
    background-color: initial;
  }
}

// --- td

$themeVarsTd: (
);

@function createThemeVarTd($componentVariable) {
  $themeVarsTd: t.appendThemeVar($themeVarsTd, $componentVariable) !global;
  @return t.getThemeVar($themeVarsTd, $componentVariable);
}

$color-bg-HtmlTd: createThemeVarTd("color-bg-HtmlTd");
$text-align-HtmlTd: createThemeVarTd("text-align-HtmlTd");
$vertical-align-HtmlTd: createThemeVarTd("vertical-align-HtmlTd");
$font-size-HtmlTd: createThemeVarTd("font-size-HtmlTd");
$font-weight-HtmlTd: createThemeVarTd("font-weight-HtmlTd");
$themeVarsTd: t.composeBorderVars($themeVarsTd, "HtmlTd");
$themeVarsTd: t.composePaddingVars($themeVarsTd, "HtmlTd");

.htmlTd {
  background-color: $color-bg-HtmlTd;
  text-align: $text-align-HtmlTd;
  vertical-align: $vertical-align-HtmlTd;
  font-size: $font-size-HtmlTd;
  font-weight: $font-weight-HtmlTd;
  @include t.borderVars($themeVarsTd, "HtmlTd");
  @include t.paddingVars($themeVarsTd, "HtmlTd");
}

// --- List styling (for both ul and ol)

$themeVarsList: (
);

@function createThemeVarList($componentVariable) {
  $themeVarsList: t.appendThemeVar($themeVarsList, $componentVariable) !global;
  @return t.getThemeVar($themeVarsList, $componentVariable);
}

$margin-top-HtmlOl: createThemeVarList("margin-top-HtmlOl");
$margin-bottom-HtmlOl: createThemeVarList("margin-bottom-HtmlOl");
$margin-top-HtmlUl: createThemeVarList("margin-top-HtmlUl");
$margin-bottom-HtmlUl: createThemeVarList("margin-bottom-HtmlUl");

// Apply to both ul and ol elements
.htmlUl {
  margin-top: $margin-top-HtmlUl;
  margin-bottom: $margin-bottom-HtmlUl;
}
.htmlOl {
  margin-top: $margin-top-HtmlOl;
  margin-bottom: $margin-bottom-HtmlOl;
}

li .htmlUl,
li .htmlOl {
  margin-top: 0;
  margin-bottom: 0;
}

// Only apply flex layout to list items that contain checkboxes
.htmlUl li:has(> input[type="checkbox"]),
.htmlOl li:has(> input[type="checkbox"]) {
  display: flex;
  align-items: flex-start;

  >input[type="checkbox"] {
    margin-right: 8px;
    margin-top: 4px;
    flex-shrink: 0;
  }
}


// --- Heading styling
$themeVarsHeading: (
);

@function createThemeVarHeading($componentVariable) {
  $themeVarsHeading: t.appendThemeVar($themeVarsHeading, $componentVariable) !global;
  @return t.getThemeVar($themeVarsHeading, $componentVariable);
}

$margin-top-HtmlHeading: createThemeVarHeading("margin-top-HtmlHeading");
$margin-bottom-HtmlHeading: createThemeVarHeading("margin-bottom-HtmlHeading");

.htmlH1, .htmlH2, .htmlH3, .htmlH4, .htmlH5, .htmlH6 {
  margin-top: $margin-top-HtmlHeading;
  margin-bottom: $margin-bottom-HtmlHeading;
}


// --- We export the theme variables to add them to the component renderer
:export {
  themeVarsTable: t.json-stringify($themeVarsTable);
  themeVarsThead: t.json-stringify($themeVarsThead);
  themeVarsTbody: t.json-stringify($themeVarsTbody);
  themeVarsTfoot: t.json-stringify($themeVarsTfoot);
  themeVarsTh: t.json-stringify($themeVarsTh);
  themeVarsTr: t.json-stringify($themeVarsTr);
  themeVarsTd: t.json-stringify($themeVarsTd);
  themeVarsList: t.json-stringify($themeVarsList);
  themeVarsHeading: t.json-stringify($themeVarsHeading);
  
}