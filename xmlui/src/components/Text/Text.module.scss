@use "../../components-core/theming/themes" as t;

$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$component: "Text";

@mixin textVariant($variant) {
  $variantName: if($variant == "", "#{$component}", "#{$component}-#{$variant}");
  $themeVars: t.composePaddingVars($themeVars, $variantName);
  $themeVars: t.composeBorderVars($themeVars, $variantName);
  $themeVars: t.composeTextVars($themeVars, $variantName, $component);
  @include t.paddingVars($themeVars, $variantName);
  @include t.borderVars($themeVars, $variantName);
  @include t.textVars($themeVars, $variantName);
  margin-top: createThemeVar("marginTop-#{$variantName}");
  margin-bottom: createThemeVar("marginBottom-#{$variantName}");
  margin-left: createThemeVar("marginLeft-#{$variantName}");
  margin-right: createThemeVar("marginRight-#{$variantName}");
  vertical-align: createThemeVar("verticalAlignment-#{$variantName}");
}

@layer components {
  .text {
    display: inline;
    overflow: hidden;
    text-overflow: ellipsis;
    margin: 0;
    padding: 0;
    min-height: fit-content;

    &.default {
      @include textVariant("");
    }

    &.inherit {
      @include t.ignoreTextVars();
    }

    &.abbr {
      font-weight: createThemeVar("fontWeight-#{$component}-abbr");
      text-transform: createThemeVar("textTransform-#{$component}-abbr");
    }

    &.cite {
      font-style: createThemeVar("fontStyle-#{$component}-cite");
    }

    &.em {
      font-style: createThemeVar("fontStyle-#{$component}-em");
    }

    &.deleted {
      text-decoration-line: createThemeVar("textDecorationLine-#{$component}-deleted");
      text-decoration-color: createThemeVar("textDecorationColor-#{$component}-deleted");
      text-decoration-style: createThemeVar("textDecorationStyle-#{$component}-deleted");
      text-decoration-thickness: createThemeVar("textDecorationThickness-#{$component}-deleted");

      // Based on accessibility concerns
      // Source: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del
      &::before,
      &::after {
        clip-path: inset(100%);
        clip: rect(1px, 1px, 1px, 1px);
        height: 1px;
        overflow: hidden;
        position: absolute;
        white-space: nowrap;
        width: 1px;
      }
      &::before {
        content: " [deletion start] ";
      }
      &::after {
        content: " [deletion end] ";
      }
    }

    &.inserted {
      text-decoration-line: createThemeVar("textDecorationLine-#{$component}-inserted") !important;
      text-decoration-color: createThemeVar("textDecorationColor-#{$component}-inserted") !important;
      text-decoration-style: createThemeVar("textDecorationStyle-#{$component}-inserted") !important;
      text-decoration-thickness: createThemeVar("textDecorationThickness-#{$component}-inserted") !important;

      // Based on accessibility concerns
      // Source: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins
      &::before,
      &::after {
        clip-path: inset(100%);
        clip: rect(1px, 1px, 1px, 1px);
        height: 1px;
        overflow: hidden;
        position: absolute;
        white-space: nowrap;
        width: 1px;
      }
      &::before {
        content: " [insertion start] ";
      }
      &::after {
        content: " [insertion end] ";
      }
    }

    // This is just a style placeholder
    &.keyboard {
      background-color: createThemeVar("backgroundColor-#{$component}-keyboard");
      font-family: createThemeVar("fontFamily-#{$component}-keyboard");
      font-weight: createThemeVar("fontWeight-#{$component}-keyboard");
      font-size: createThemeVar("fontSize-#{$component}-keyboard");
      border-width: createThemeVar("borderWidth-#{$component}-keyboard");
      border-color: createThemeVar("borderColor-#{$component}-keyboard");
      border-style: createThemeVar("borderStyle-#{$component}-keyboard");
      border-radius: createThemeVar("borderRadius-#{$component}-keyboard");
      padding-left: createThemeVar("paddingHorizontal-#{$component}-keyboard");
      padding-right: createThemeVar("paddingHorizontal-#{$component}-keyboard");
    }

    &.marked {
      background-color: createThemeVar("backgroundColor-#{$component}-marked");
      color: createThemeVar("color-#{$component}-marked");
      font-weight: createThemeVar("fontWeight-#{$component}-marked");
      font-style: createThemeVar("fontStyle-#{$component}-marked");
      line-height: createThemeVar("lineHeight-#{$component}-marked");

      // Based on accessibility concerns
      // Source: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark
      &::before,
      &::after {
        clip-path: inset(100%);
        clip: rect(1px, 1px, 1px, 1px);
        height: 1px;
        overflow: hidden;
        position: absolute;
        white-space: nowrap;
        width: 1px;
      }
      &::before {
        content: " [highlight start] ";
      }
      &::after {
        content: " [highlight end] ";
      }
    }

    &.mono {
      font-family: createThemeVar("fontFamily-#{$component}-mono");
    }

    &.sample {
      font-family: createThemeVar("fontFamily-#{$component}-sample");
      font-size: createThemeVar("fontSize-#{$component}-sample");
    }

    &.sup {
      font-size: createThemeVar("fontSize-#{$component}-sup");
      vertical-align: createThemeVar("verticalAlignment-#{$component}-sup");
    }

    &.sub {
      font-size: createThemeVar("fontSize-#{$component}-sub");
      vertical-align: createThemeVar("verticalAlignment-#{$component}-sub");
    }

    &.var {
      font-style: createThemeVar("fontStyle-#{$component}-var");
    }

    &.title {
      font-size: createThemeVar("fontSize-#{$component}-title");
    }

    &.subtitle {
      font-size: createThemeVar("fontSize-#{$component}-subtitle");
    }

    &.small {
      @include textVariant("small");
    }

    &.caption {
      letter-spacing: createThemeVar("letterSpacing-#{$component}-caption");
    }

    &.placeholder {
      color: createThemeVar("color-#{$component}-placeholder");
      font-style: createThemeVar("fontStyle-#{$component}-placeholder");
      font-weight: createThemeVar("fontWeight-#{$component}-placeholder");
      font-size: createThemeVar("fontSize-#{$component}-placeholder");
    }

    &.paragraph {
      font-size: createThemeVar("fontSize-#{$component}-paragraph");
      padding-top: createThemeVar("paddingVertical-#{$component}-paragraph");
      padding-bottom: createThemeVar("paddingVertical-#{$component}-paragraph");
    }

    &.subheading {
      font-size: createThemeVar("fontSize-#{$component}-subheading");
      font-weight: createThemeVar("fontWeight-#{$component}-subheading");
      font-style: createThemeVar("fontStyle-#{$component}-subheading");
      letter-spacing: createThemeVar("letterSpacing-#{$component}-subheading");
      text-transform: createThemeVar("textTransform-#{$component}-subheading");
      color: createThemeVar("color-#{$component}-subheading");
    }

    &.tableheading {
      margin-top: createThemeVar("marginTop-#{$component}-tableheading");
      margin-bottom: createThemeVar("marginBottom-#{$component}-tableheading");
      padding-left: createThemeVar("paddingHorizontal-#{$component}-tableheading");
      padding-right: createThemeVar("paddingHorizontal-#{$component}-tableheading");
      font-size: createThemeVar("fontSize-#{$component}-tableheading");
      font-weight: createThemeVar("fontWeight-#{$component}-tableheading");
    }

    &.secondary {
      font-size: createThemeVar("fontSize-#{$component}-secondary");
      color: createThemeVar("color-#{$component}-secondary");
    }

    &.strong{
      font-weight: t.$fontWeight-bold;
    }
  }

  /*
  This is a Chromium based solution that is supported by most modern browsers.
  See this source for details: https://css-tricks.com/line-clampin/
  */
  .truncateOverflow {
    overflow: hidden;
    overflow-wrap: break-word;
    white-space: nowrap;
    max-width: 100%;
  }

  .preserveLinebreaks {
    white-space: pre-wrap;
    display: inline-block;
  }

  .noEllipsis {
    text-overflow: clip;
  }

  // --- Overflow behavior classes
  .overflowNone {
    // Force single line as per metadata: "No wrapping, text stays on a single line"
    white-space: nowrap;
    // Hide overflow content
    overflow: hidden;
    // Use clip instead of ellipsis
    text-overflow: clip;
    // Constrain width
    max-width: 100%;
  }

  .overflowScroll {
    white-space: nowrap;
    overflow-x: auto;
    overflow-y: hidden;
    text-overflow: unset;
    max-width: 100%;
    
    // Ensure scrollbar is visible when needed
    &::-webkit-scrollbar {
      height: 6px;
    }
    
    &::-webkit-scrollbar-track {
      background: transparent;
    }
    
    &::-webkit-scrollbar-thumb {
      background-color: rgba(0, 0, 0, 0.3);
      border-radius: 3px;
    }
  }

  .overflowFlow {
    // Allow text to wrap to multiple lines
    white-space: normal;
    // Hide horizontal overflow, show vertical scrollbar when needed
    overflow-x: hidden;
    overflow-y: auto;
    // Disable text-overflow ellipsis since we want wrapping
    text-overflow: unset;
    // Constrain width but allow height to grow
    max-width: 100%;
    // Change display to block to respect width/height constraints
    display: block;
    // Ensure height constraint is respected in flex contexts
    flex-shrink: 0;
    flex-grow: 0;
    // Use min-height instead of height to avoid conflicts
    min-height: 0;
    
    // Style vertical scrollbar
    &::-webkit-scrollbar {
      width: 6px;
    }
    
    &::-webkit-scrollbar-track {
      background: transparent;
    }
    
    &::-webkit-scrollbar-thumb {
      background-color: rgba(0, 0, 0, 0.3);
      border-radius: 3px;
    }
  }
}

// --- Break mode classes
.breakNormal {
  word-break: normal;
  overflow-wrap: normal;
}

.breakWord {
  overflow-wrap: break-word;
}

.breakAnywhere {
  word-break: break-all;
  overflow-wrap: anywhere;
}

.breakKeep {
  word-break: keep-all;
}

.breakHyphenate {
  hyphens: auto;
  overflow-wrap: break-word;
}

:export {
  themeVars: t.json-stringify($themeVars);
}
