@use "../../components-core/theming/themes" as t;

$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$component: "Text";
$themeVars: t.composeTextVars($themeVars, $component);

// Variables for default variant (empty string means default)
$marginTop-Text: createThemeVar("marginTop-#{$component}");
$marginBottom-Text: createThemeVar("marginBottom-#{$component}");
$marginLeft-Text: createThemeVar("marginLeft-#{$component}");
$marginRight-Text: createThemeVar("marginRight-#{$component}");
$verticalAlignment-Text: createThemeVar("verticalAlignment-#{$component}");
$textColor-Text--hover: createThemeVar("textColor-#{$component}--hover");

// Variables for small variant
$marginTop-Text-small: createThemeVar("marginTop-#{$component}-small");
$marginBottom-Text-small: createThemeVar("marginBottom-#{$component}-small");
$marginLeft-Text-small: createThemeVar("marginLeft-#{$component}-small");
$marginRight-Text-small: createThemeVar("marginRight-#{$component}-small");
$verticalAlignment-Text-small: createThemeVar("verticalAlignment-#{$component}-small");
$textColor-Text-small--hover: createThemeVar("textColor-#{$component}-small--hover");

// Variables for code variant
$marginTop-Text-code: createThemeVar("marginTop-#{$component}-code");
$marginBottom-Text-code: createThemeVar("marginBottom-#{$component}-code");
$marginLeft-Text-code: createThemeVar("marginLeft-#{$component}-code");
$marginRight-Text-code: createThemeVar("marginRight-#{$component}-code");
$verticalAlignment-Text-code: createThemeVar("verticalAlignment-#{$component}-code");
$textColor-Text-code--hover: createThemeVar("textColor-#{$component}-code--hover");

// Variables for @layer section - abbr variant
$fontWeight-Text-abbr: createThemeVar("fontWeight-#{$component}-abbr");
$textTransform-Text-abbr: createThemeVar("textTransform-#{$component}-abbr");

// Variables for cite variant
$fontStyle-Text-cite: createThemeVar("fontStyle-#{$component}-cite");

// Variables for em variant
$fontStyle-Text-em: createThemeVar("fontStyle-#{$component}-em");

// Variables for deleted variant
$textDecorationLine-Text-deleted: createThemeVar("textDecorationLine-#{$component}-deleted");
$textDecorationColor-Text-deleted: createThemeVar("textDecorationColor-#{$component}-deleted");
$textDecorationStyle-Text-deleted: createThemeVar("textDecorationStyle-#{$component}-deleted");
$textDecorationThickness-Text-deleted: createThemeVar("textDecorationThickness-#{$component}-deleted");

// Variables for inserted variant
$textDecorationLine-Text-inserted: createThemeVar("textDecorationLine-#{$component}-inserted");
$textDecorationColor-Text-inserted: createThemeVar("textDecorationColor-#{$component}-inserted");
$textDecorationStyle-Text-inserted: createThemeVar("textDecorationStyle-#{$component}-inserted");
$textDecorationThickness-Text-inserted: createThemeVar("textDecorationThickness-#{$component}-inserted");

// Variables for keyboard variant
$backgroundColor-Text-keyboard: createThemeVar("backgroundColor-#{$component}-keyboard");
$fontFamily-Text-keyboard: createThemeVar("fontFamily-#{$component}-keyboard");
$fontWeight-Text-keyboard: createThemeVar("fontWeight-#{$component}-keyboard");
$fontSize-Text-keyboard: createThemeVar("fontSize-#{$component}-keyboard");
$borderWidth-Text-keyboard: createThemeVar("borderWidth-#{$component}-keyboard");
$borderColor-Text-keyboard: createThemeVar("borderColor-#{$component}-keyboard");
$borderStyle-Text-keyboard: createThemeVar("borderStyle-#{$component}-keyboard");
$borderRadius-Text-keyboard: createThemeVar("borderRadius-#{$component}-keyboard");
$paddingHorizontal-Text-keyboard: createThemeVar("paddingHorizontal-#{$component}-keyboard");

// Variables for marked variant
$backgroundColor-Text-marked: createThemeVar("backgroundColor-#{$component}-marked");
$textColor-Text-marked: createThemeVar("textColor-#{$component}-marked");
$fontWeight-Text-marked: createThemeVar("fontWeight-#{$component}-marked");
$fontStyle-Text-marked: createThemeVar("fontStyle-#{$component}-marked");
$lineHeight-Text-marked: createThemeVar("lineHeight-#{$component}-marked");

// Variables for mono variant
$fontFamily-Text-mono: createThemeVar("fontFamily-#{$component}-mono");

// Variables for sample variant
$fontFamily-Text-sample: createThemeVar("fontFamily-#{$component}-sample");
$fontSize-Text-sample: createThemeVar("fontSize-#{$component}-sample");

// Variables for sup variant
$fontSize-Text-sup: createThemeVar("fontSize-#{$component}-sup");
$verticalAlignment-Text-sup: createThemeVar("verticalAlignment-#{$component}-sup");

// Variables for sub variant
$fontSize-Text-sub: createThemeVar("fontSize-#{$component}-sub");
$verticalAlignment-Text-sub: createThemeVar("verticalAlignment-#{$component}-sub");

// Variables for var variant
$fontStyle-Text-var: createThemeVar("fontStyle-#{$component}-var");

// Variables for title variant
$fontSize-Text-title: createThemeVar("fontSize-#{$component}-title");

// Variables for subtitle variant
$fontSize-Text-subtitle: createThemeVar("fontSize-#{$component}-subtitle");

// Variables for caption variant
$letterSpacing-Text-caption: createThemeVar("letterSpacing-#{$component}-caption");

// Variables for placeholder variant
$textColor-Text-placeholder: createThemeVar("textColor-#{$component}-placeholder");
$fontStyle-Text-placeholder: createThemeVar("fontStyle-#{$component}-placeholder");
$fontWeight-Text-placeholder: createThemeVar("fontWeight-#{$component}-placeholder");
$fontSize-Text-placeholder: createThemeVar("fontSize-#{$component}-placeholder");

// Variables for paragraph variant
$fontSize-Text-paragraph: createThemeVar("fontSize-#{$component}-paragraph");
$paddingVertical-Text-paragraph: createThemeVar("paddingVertical-#{$component}-paragraph");

// Variables for subheading variant
$fontSize-Text-subheading: createThemeVar("fontSize-#{$component}-subheading");
$fontWeight-Text-subheading: createThemeVar("fontWeight-#{$component}-subheading");
$fontStyle-Text-subheading: createThemeVar("fontStyle-#{$component}-subheading");
$letterSpacing-Text-subheading: createThemeVar("letterSpacing-#{$component}-subheading");
$textTransform-Text-subheading: createThemeVar("textTransform-#{$component}-subheading");
$textColor-Text-subheading: createThemeVar("textColor-#{$component}-subheading");

// Variables for tableheading variant
$marginTop-Text-tableheading: createThemeVar("marginTop-#{$component}-tableheading");
$marginBottom-Text-tableheading: createThemeVar("marginBottom-#{$component}-tableheading");
$paddingHorizontal-Text-tableheading: createThemeVar("paddingHorizontal-#{$component}-tableheading");
$fontSize-Text-tableheading: createThemeVar("fontSize-#{$component}-tableheading");
$fontWeight-Text-tableheading: createThemeVar("fontWeight-#{$component}-tableheading");

// Variables for secondary variant
$fontSize-Text-secondary: createThemeVar("fontSize-#{$component}-secondary");
$textColor-Text-secondary: createThemeVar("textColor-#{$component}-secondary");

@mixin textVariant($variant) {
  $variantName: if($variant == "", "#{$component}", "#{$component}-#{$variant}");
  $themeVars: t.composePaddingVars($themeVars, $variantName);
  $themeVars: t.composeBorderVars($themeVars, $variantName);
  $themeVars: t.composeTextVars($themeVars, $variantName, $component);
  @include t.paddingVars($themeVars, $variantName);
  @include t.borderVars($themeVars, $variantName);
  @include t.textVars($themeVars, $variantName);
  margin-top: createThemeVar("marginTop-#{$variantName}");
  margin-bottom: createThemeVar("marginBottom-#{$variantName}");
  margin-left: createThemeVar("marginLeft-#{$variantName}");
  margin-right: createThemeVar("marginRight-#{$variantName}");
  vertical-align: createThemeVar("verticalAlignment-#{$variantName}");

  &:hover {
    color: createThemeVar("textColor-#{$variantName}--hover");
  }
}

@layer components {
  .text {
    display: inline;
    overflow: hidden;
    text-overflow: ellipsis;
    margin: 0;
    padding: 0;
    min-height: fit-content;

    &.default {
      @include textVariant("");
    }

    &.inherit {
      @include t.ignoreTextVars();
    }

    &.abbr {
      font-weight: $fontWeight-Text-abbr;
      text-transform: $textTransform-Text-abbr;
    }

    &.cite {
      font-style: $fontStyle-Text-cite;
    }

    &.em {
      font-style: $fontStyle-Text-em;
    }

    &.deleted {
      text-decoration-line: $textDecorationLine-Text-deleted;
      text-decoration-color: $textDecorationColor-Text-deleted;
      text-decoration-style: $textDecorationStyle-Text-deleted;
      text-decoration-thickness: $textDecorationThickness-Text-deleted;

      // Based on accessibility concerns
      // Source: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del
      &::before,
      &::after {
        clip-path: inset(100%);
        clip: rect(1px, 1px, 1px, 1px);
        height: 1px;
        overflow: hidden;
        position: absolute;
        white-space: nowrap;
        width: 1px;
      }
      &::before {
        content: " [deletion start] ";
      }
      &::after {
        content: " [deletion end] ";
      }
    }

    &.inserted {
      text-decoration-line: $textDecorationLine-Text-inserted !important;
      text-decoration-color: $textDecorationColor-Text-inserted !important;
      text-decoration-style: $textDecorationStyle-Text-inserted !important;
      text-decoration-thickness: $textDecorationThickness-Text-inserted !important;

      // Based on accessibility concerns
      // Source: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins
      &::before,
      &::after {
        clip-path: inset(100%);
        clip: rect(1px, 1px, 1px, 1px);
        height: 1px;
        overflow: hidden;
        position: absolute;
        white-space: nowrap;
        width: 1px;
      }
      &::before {
        content: " [insertion start] ";
      }
      &::after {
        content: " [insertion end] ";
      }
    }

    // This is just a style placeholder
    &.keyboard {
      background-color: $backgroundColor-Text-keyboard;
      font-family: $fontFamily-Text-keyboard;
      font-weight: $fontWeight-Text-keyboard;
      font-size: $fontSize-Text-keyboard;
      border-width: $borderWidth-Text-keyboard;
      border-color: $borderColor-Text-keyboard;
      border-style: $borderStyle-Text-keyboard;
      border-radius: $borderRadius-Text-keyboard;
      padding-left: $paddingHorizontal-Text-keyboard;
      padding-right: $paddingHorizontal-Text-keyboard;
    }

    &.marked {
      background-color: $backgroundColor-Text-marked;
      color: $textColor-Text-marked;
      font-weight: $fontWeight-Text-marked;
      font-style: $fontStyle-Text-marked;
      line-height: $lineHeight-Text-marked;

      // Based on accessibility concerns
      // Source: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark
      &::before,
      &::after {
        clip-path: inset(100%);
        clip: rect(1px, 1px, 1px, 1px);
        height: 1px;
        overflow: hidden;
        position: absolute;
        white-space: nowrap;
        width: 1px;
      }
      &::before {
        content: " [highlight start] ";
      }
      &::after {
        content: " [highlight end] ";
      }
    }

    &.mono {
      font-family: $fontFamily-Text-mono;
    }

    &.sample {
      font-family: $fontFamily-Text-sample;
      font-size: $fontSize-Text-sample;
    }

    &.sup {
      font-size: $fontSize-Text-sup;
      vertical-align: $verticalAlignment-Text-sup;
    }

    &.sub {
      font-size: $fontSize-Text-sub;
      vertical-align: $verticalAlignment-Text-sub;
    }

    &.var {
      font-style: $fontStyle-Text-var;
    }

    &.title {
      font-size: $fontSize-Text-title;
    }

    &.subtitle {
      font-size: $fontSize-Text-subtitle;
    }

    &.small {
      @include textVariant("small");
    }

    &.code {
      @include textVariant("code");
    }

    &.caption {
      letter-spacing: $letterSpacing-Text-caption;
    }

    &.placeholder {
      color: $textColor-Text-placeholder;
      font-style: $fontStyle-Text-placeholder;
      font-weight: $fontWeight-Text-placeholder;
      font-size: $fontSize-Text-placeholder;
    }

    &.paragraph {
      font-size: $fontSize-Text-paragraph;
      padding-top: $paddingVertical-Text-paragraph;
      padding-bottom: $paddingVertical-Text-paragraph;
    }

    &.subheading {
      font-size: $fontSize-Text-subheading;
      font-weight: $fontWeight-Text-subheading;
      font-style: $fontStyle-Text-subheading;
      letter-spacing: $letterSpacing-Text-subheading;
      text-transform: $textTransform-Text-subheading;
      color: $textColor-Text-subheading;
    }

    &.tableheading {
      margin-top: $marginTop-Text-tableheading;
      margin-bottom: $marginBottom-Text-tableheading;
      padding-left: $paddingHorizontal-Text-tableheading;
      padding-right: $paddingHorizontal-Text-tableheading;
      font-size: $fontSize-Text-tableheading;
      font-weight: $fontWeight-Text-tableheading;
    }

    &.secondary {
      font-size: $fontSize-Text-secondary;
      color: $textColor-Text-secondary;
    }

    &.strong{
      font-weight: t.$fontWeight-bold;
    }
  }

  /*
  This is a Chromium based solution that is supported by most modern browsers.
  See this source for details: https://css-tricks.com/line-clampin/
  */
  .truncateOverflow {
    overflow: hidden;
    overflow-wrap: break-word;
    white-space: nowrap;
    max-width: 100%;
  }

  .preserveLinebreaks {
    white-space: pre-wrap;
    display: inline-block;
  }

  .noEllipsis {
    text-overflow: clip;
  }

  // --- Overflow behavior classes
  .overflowNone {
    // Force single line as per metadata: "No wrapping, text stays on a single line"
    white-space: nowrap;
    // Hide overflow content
    overflow: hidden;
    // Use clip instead of ellipsis
    text-overflow: clip;
    // Constrain width
    max-width: 100%;
  }

  .overflowScroll {
    white-space: nowrap;
    overflow-x: auto;
    overflow-y: hidden;
    text-overflow: unset;
    max-width: 100%;
    
    // Ensure scrollbar is visible when needed
    &::-webkit-scrollbar {
      height: 6px;
    }
    
    &::-webkit-scrollbar-track {
      background: transparent;
    }
    
    &::-webkit-scrollbar-thumb {
      background-color: rgba(0, 0, 0, 0.3);
      border-radius: 3px;
    }
  }

  .overflowFlow {
    // Allow text to wrap to multiple lines
    white-space: normal;
    // Hide horizontal overflow, show vertical scrollbar when needed
    overflow-x: hidden;
    overflow-y: auto;
    // Disable text-overflow ellipsis since we want wrapping
    text-overflow: unset;
    // Constrain width but allow height to grow
    max-width: 100%;
    // Change display to block to respect width/height constraints
    display: block;
    // Ensure height constraint is respected in flex contexts
    flex-shrink: 0;
    flex-grow: 0;
    // Use min-height instead of height to avoid conflicts
    min-height: 0;
    
    // Style vertical scrollbar
    &::-webkit-scrollbar {
      width: 6px;
    }
    
    &::-webkit-scrollbar-track {
      background: transparent;
    }
    
    &::-webkit-scrollbar-thumb {
      background-color: rgba(0, 0, 0, 0.3);
      border-radius: 3px;
    }
  }
}

// --- Break mode classes
.breakNormal {
  word-break: normal;
  overflow-wrap: normal;
}

.breakWord {
  overflow-wrap: break-word;
}

.breakAnywhere {
  word-break: break-all;
  overflow-wrap: anywhere;
}

.breakKeep {
  word-break: keep-all;
}

.breakHyphenate {
  hyphens: auto;
  overflow-wrap: break-word;
}

:export {
  themeVars: t.json-stringify($themeVars);
}
