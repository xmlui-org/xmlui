@use "@components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$componentName: "Combobox";

// --- CSS properties of a particular Select variant
@mixin variant($variantName) {
  border-radius: createThemeVar("Input:radius-#{$componentName}-#{$variantName}");
  border-color: createThemeVar("Input:color-border-#{$componentName}-#{$variantName}");
  border-width: createThemeVar("Input:thickness-border-#{$componentName}-#{$variantName}");
  border-style: createThemeVar("Input:style-border-#{$componentName}-#{$variantName}");

  font-size: createThemeVar("Input:font-size-#{$componentName}-#{$variantName}");

  background-color: createThemeVar("Input:color-bg-#{$componentName}-#{$variantName}");
  box-shadow: createThemeVar("Input:shadow-#{$componentName}-#{$variantName}");
  color: createThemeVar("Input:color-text-#{$componentName}-#{$variantName}");

  &:has(.comboboxInput:focus-visible) {
    outline-width: createThemeVar('Input:thickness-outline-#{$componentName}-#{$variantName}--focus');
    outline-color: createThemeVar('Input:color-outline-#{$componentName}-#{$variantName}--focus');
    outline-style: createThemeVar('Input:style-outline-#{$componentName}-#{$variantName}--focus');
    outline-offset: createThemeVar('Input:offset-outline-#{$componentName}-#{$variantName}--focus');
  }

  &:hover {
    border-color: createThemeVar("Input:color-border-#{$componentName}-#{$variantName}--hover");
    background-color: createThemeVar("Input:color-bg-#{$componentName}-#{$variantName}--hover");
    box-shadow: createThemeVar("Input:shadow-#{$componentName}-#{$variantName}--hover");
    color: createThemeVar("Input:color-text-#{$componentName}-#{$variantName}--hover");
  }

  .placeholder {
    color: createThemeVar("Input:color-placeholder-#{$componentName}-#{$variantName}");
  }
}

.comboboxButton {
  width: 100%;
  justify-content: space-between;
  display: flex;
  align-items: center;
  padding: 8px 12px;
  border: 1px solid #d1d5db;
  background-color: white;
  border-radius: 0.375rem;
  cursor: pointer;
  font-size: 1rem;
  color: #111827;
  transition: background-color 0.2s ease;

  @include variant("default");

  &.error {
    @include variant("error");
  }

  &.warning {
    @include variant("warning");
  }

  &.valid {
    @include variant("success");
  }

  &:hover {
    background-color: #f9fafb;
  }

  &.disabled {
    cursor: not-allowed;
    background-color: createThemeVar("Input:color-bg-Combobox--disabled");
    color: createThemeVar("Input:color-text-Combobox--disabled");
    border-color: createThemeVar("Input:color-border-Combobox--disabled");

  }
}

.popoverContent {
  width: 200px;
  padding: 0;
  background-color: white;
  border: 1px solid #d1d5db;
  border-radius: 0.375rem;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
  z-index: 10;
}

.commandInput {
  width: 100%;
  padding: 0.5rem 1rem;
  border-bottom: 1px solid #d1d5db;
  font-size: 1rem;
  color: #111827;

  &::placeholder {
    color: #6b7280;
  }
}

.commandList {
  list-style: none;
  margin: 0;
  padding: 0;
}

.commandGroup {
  padding: 0.5rem 0;
}

.commandItem {
  padding: 0.5rem 1rem;
  display: flex;
  align-items: center;
  cursor: pointer;
  transition: background-color 0.2s ease;

  &:hover {
    background-color: #f3f4f6;
  }

  &:active {
    background-color: #e5e7eb;
  }
}

.commandEmpty {
  padding: 10px 0;
  font-size: 0.875rem;
  display: flex;
  gap: 0.5rem;
  width: 100%;
  align-items: center;
  justify-content: center;
}

.checkIcon {
  margin-left: auto;
  opacity: 0;
  transition: opacity 0.2s ease;
}

.checkIconVisible {
  opacity: 1;
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}

