@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$componentName: "Slider";

// Basic variant mixin for consistent theming
@mixin variant($variantName) {
  border-radius: createThemeVar("Input:borderRadius-#{$componentName}-#{$variantName}");
  border-color: createThemeVar("Input:borderColor-#{$componentName}-#{$variantName}");
  border-width: createThemeVar("Input:borderWidth-#{$componentName}-#{$variantName}");
  border-style: createThemeVar("Input:borderStyle-#{$componentName}-#{$variantName}");
  box-shadow: createThemeVar("Input:boxShadow-#{$componentName}-#{$variantName}");

  &:hover {
    border-color: createThemeVar("Input:borderColor-#{$componentName}-#{$variantName}--hover");
    box-shadow: createThemeVar("Input:boxShadow-#{$componentName}-#{$variantName}--hover");
  }

  &:focus-within {
    border-color: createThemeVar("Input:borderColor-#{$componentName}-#{$variantName}--focus");
    box-shadow: createThemeVar("Input:boxShadow-#{$componentName}-#{$variantName}--focus");
  }
}

// Container for the slider
.sliderContainer {
  width: 100%;
  position: relative;
  padding: t.$space-2 0;
}

// Root element
.sliderRoot {
  position: relative;
  display: flex;
  width: 100%;
  touch-action: none;
  user-select: none;
  align-items: center;
  height: 20px;
}

// Track element
.sliderTrack {
  position: relative;
  height: 8px;
  width: 100%;
  flex-grow: 1;
  overflow: hidden;
  border-radius: 9999px;
  background-color: createThemeVar("Input:backgroundColor-track-#{$componentName}");

  @include variant("default");

  &.error {
    @include variant("error");
  }
  &.warning {
    @include variant("warning");
  }
  &.valid {
    @include variant("success");
  }

  &.disabled, &[data-disabled] {
    background-color: createThemeVar("Input:backgroundColor-track-#{$componentName}--disabled");
  }
}

// Range element
.sliderRange {
  position: absolute;
  height: 100%;
  background-color: createThemeVar("Input:backgroundColor-range-#{$componentName}");
  border-radius: 9999px;

  &.disabled, &[data-disabled] {
    background-color: createThemeVar("Input:backgroundColor-range-#{$componentName}--disabled");
  }
}

// Thumb element
.sliderThumb {
  display: block;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  border: createThemeVar("Input:borderWidth-thumb-#{$componentName}")
          createThemeVar("Input:borderStyle-thumb-#{$componentName}")
          createThemeVar("Input:borderColor-thumb-#{$componentName}");
  background-color: createThemeVar("Input:backgroundColor-thumb-#{$componentName}");
  box-shadow: createThemeVar("Input:boxShadow-thumb-#{$componentName}");
  position: relative;
  transition: background-color 0.2s;
  outline: none;

  &.disabled, &[data-disabled] {
    pointer-events: none;
    opacity: 0.5;
  }
}

/* States */
.disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.readOnly {
  opacity: 0.7;
  cursor: default;
}

.error {
  border-color: createThemeVar("Input:borderColor-#{$componentName}-error");
}

.warning {
  border-color: createThemeVar("Input:borderColor-#{$componentName}-warning");
}

.valid {
  border-color: createThemeVar("Input:borderColor-#{$componentName}-success");
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}