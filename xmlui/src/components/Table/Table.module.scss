@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$component: "Table";
$color-text-pagination-Table: createThemeVar("color-text-pagination-#{$component}");
$color-bg-Table: createThemeVar("color-bg-#{$component}");
$color-text-Table: createThemeVar("color-text-#{$component}");
$color-bg-row-Table: createThemeVar("color-bg-row-#{$component}");
$color-bg-row-Table--hover: createThemeVar("color-bg-row-#{$component}--hover");
$color-bg-selected-Table: createThemeVar("color-bg-selected-#{$component}");
$color-bg-selected-Table--hover: createThemeVar("color-bg-selected-#{$component}--hover");
$color-bg-heading-Table: createThemeVar("color-bg-heading-#{$component}");
$color-bg-heading-Table--hover: createThemeVar("color-bg-heading-#{$component}--hover");
$color-bg-heading-Table--active: createThemeVar("color-bg-heading-#{$component}--active");
$themeVars: t.composePaddingVars($themeVars, "heading-#{$component}");
$themeVars: t.composePaddingVars($themeVars, "cell-#{$component}");
$themeVars: t.composePaddingVars($themeVars, "cell-first-#{$component}");
$themeVars: t.composePaddingVars($themeVars, "cell-last-#{$component}");
$color-border-cell-Table: createThemeVar("color-border-cell-Table");
$thickness-border-cell-Table: createThemeVar("thickness-border-cell-#{$component}");
$style-border-cell-Table: createThemeVar("style-border-cell-#{$component}");
$border-cell-Table: createThemeVar("border-cell-#{$component}");
$color-bg-pagination-Table: createThemeVar("color-bg-pagination-#{$component}");
$color-text-heading-Table: createThemeVar("color-text-heading-#{$component}");
$font-weight-row-Table: createThemeVar("font-weight-row-#{$component}");
$font-size-row-Table: createThemeVar("font-size-row-#{$component}");
$font-weight-heading-Table: createThemeVar("font-weight-heading-#{$component}");
$font-size-heading-Table: createThemeVar("font-size-heading-#{$component}");
$transform-text-heading-Table: createThemeVar("transform-text-heading-#{$component}");

.wrapper {
  width: 100%;
  outline: none;
  overflow: auto;
  isolation: isolate;

  &.noScroll {
    overflow-y: initial;
  }
}


.headerWrapper, .tableBody {
  display: inline-block;
  min-width: 100%;
  background-color: $color-bg-Table;
}

.clickableHeader {
  width: 100%;
  height: 100%;
  color: $color-text-heading-Table;
  background-color: transparent;
  border: none;
  transition: color 0.2s, background-color 0.2s;
  cursor: pointer;
  @include t.paddingVars($themeVars, "heading-#{$component}");

  .headerContent {
    padding: 0;
  }

  &:not([disabled]) {
    &:hover {
      background-color: $color-bg-heading-Table--hover;
    }

    &:active {
      background-color: $color-bg-heading-Table--active;
    }

    &:focus-visible {
      outline-width: createThemeVar('thickness-outline-heading-#{$component}--focus');
      outline-color: createThemeVar('color-outline-heading-#{$component}--focus');
      outline-style: createThemeVar('style-outline-heading-#{$component}--focus');
      outline-offset: createThemeVar('offset-outline-heading-#{$component}--focus');

    }
  }
}

.headerContent {
  display: flex;
  flex-direction: row;
  gap: 0.5rem;
  align-items: center;
  text-transform: $transform-text-heading-Table;
  font-size: $font-size-heading-Table;
  color: $color-text-heading-Table;
  font-weight: $font-weight-heading-Table;
  @include t.paddingVars($themeVars, "heading-#{$component}");
}

.headerRow {
  height: 100%;
  background-color: $color-bg-heading-Table;
}

.columnCell, .cell{
  display: flex;
  align-items: center;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.table {
  display: block;
  color: $color-text-Table;

  .row, .headerRow {
    display: flex;
    flex-direction: row;
    border-bottom: $border-cell-Table;
    user-select: none;
    //background-color: inherit;

    .checkBoxWrapper {
      font-size: 1rem;
      visibility: hidden;

      &.showInHeader {
        visibility: visible;
      }
    }


    &:hover,
    &.selected,
    &:focus-within,
    &.allSelected {
      .checkBoxWrapper {
        visibility: visible;
      }
    }

    .columnCell:first-child {
      .headerContent {
        @include t.paddingVars($themeVars, "cell-first-#{$component}");
      }

      > button {
        @include t.paddingVars($themeVars, "cell-first-#{$component}");

        .headerContent {
          padding-left: 0;
        }
      }
    }

    .columnCell:last-child {
      .headerContent {
        @include t.paddingVars($themeVars, "cell-last-#{$component}");
      }

      > button {
        @include t.paddingVars($themeVars, "cell-last-#{$component}");

        .headerContent {
          padding-right: 0;
        }
      }
    }

    .cell:first-child {
      @include t.paddingVars($themeVars, "cell-first-#{$component}");
      border-left: 0;
    }

    .cell:last-child {
      @include t.paddingVars($themeVars, "cell-last-#{$component}");
      border-right: 0;
    }
  }

  .row {
    font-size: $font-size-row-Table;
    font-weight: $font-weight-row-Table;
    background-color: $color-bg-row-Table;

    &.selected {
      background-color: $color-bg-selected-Table;

      .cell {
        background-color: $color-bg-selected-Table;

      }
    }

    &:hover {
      background-color: $color-bg-row-Table--hover;

      .cell {
        background-color: $color-bg-row-Table--hover;
      }
    }

    &.selected.focused {
      background-color: $color-bg-selected-Table;

      .cell {
        background-color: $color-bg-selected-Table;
      }
    }

    &.selected:hover {
      background-color: $color-bg-selected-Table--hover;

      .cell {
        background-color: $color-bg-selected-Table--hover;
      }
    }

    &.disabled {
      pointer-events: none;
      opacity: 0.6;
    }
  }
}

.cell {
  overflow: hidden;
  text-overflow: ellipsis;
  @include t.paddingVars($themeVars, "cell-#{$component}");
}

.headerWrapper {
  position: sticky;
  top: 0;
  z-index: 2;
}

.columnCell {
  background-color: $color-bg-heading-Table;
  text-align: start;
  white-space: nowrap;
  text-overflow: ellipsis;
  padding: 0;
}

.noRows {
  width: 100%;
  text-align: center;
  margin-top: t.$space-16;
}

.pagination {
  position: sticky;
  left: 0;
  padding-top: t.$space-4;
  padding-bottom: t.$space-4;
  padding-inline: t.$space-4;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: flex-end;
  gap: t.$space-8;
  width: 100%;
  margin: 0 auto;
  background-color: $color-bg-pagination-Table;
}

.paginationLabel {
  color: $color-text-pagination-Table;
  font-size: t.$font-size-small;
}

.paginationSelect {
  color: inherit;
  background-color: transparent;
  margin-left: t.$space-4;
}

.paginationButtons {
  display: flex;
  flex-direction: row;
}

.searchIconWrapper {
  width: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.loadingWrapper {
  display: flex;
  flex-direction: row;
  justify-content: center;
  padding-top: t.$space-2;
  padding-bottom: t.$space-2;
}

.checkBoxWrapper {
  opacity: 0.5;

  &:hover {
    opacity: 1;
  }
}

.resizer {
  position: absolute;
  top: 0;
  height: 100%;
  width: 6px;
  cursor: col-resize;
  user-select: none;
  touch-action: none;
  right: 0;
  overflow: visible;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  &:before{
    content: '';
    width: 1px;
    height: 100%;
    background: $color-border-cell-Table;
  }
}

.resizer.isResizing {
  opacity: 1;
  &:before{
    box-shadow: t.$shadow;
  }
}

@media (hover: hover) {
  .resizer {
    opacity: 0;
  }

  *:hover > .resizer {
    opacity: 1;
  }
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}


