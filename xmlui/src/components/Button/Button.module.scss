@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

// --- CSS properties of solid buttons with the specified color scheme
@mixin solid($colorScheme){
  font-family: createThemeVar('font-family-Button-#{$colorScheme}-solid');
  font-size: createThemeVar('font-size-Button-#{$colorScheme}-solid');
  font-weight: createThemeVar('font-weight-Button-#{$colorScheme}-solid');
  border-radius: createThemeVar('radius-Button-#{$colorScheme}-solid');
  border-width: createThemeVar('thickness-border-Button-#{$colorScheme}-solid');
  border-color: createThemeVar('color-border-Button-#{$colorScheme}-solid');
  border-style: createThemeVar('style-border-Button-#{$colorScheme}-solid');
  background: createThemeVar('color-bg-Button-#{$colorScheme}-solid');
  color: createThemeVar('color-text-Button-#{$colorScheme}-solid');
  box-shadow: createThemeVar('shadow-Button-#{$colorScheme}-solid');


  &:focus-visible {
    outline-width: createThemeVar('thickness-outline-Button-#{$colorScheme}-solid--focus');
    outline-color: createThemeVar('color-outline-Button-#{$colorScheme}-solid--focus');
    outline-style: createThemeVar('style-outline-Button-#{$colorScheme}-solid--focus');
    outline-offset: createThemeVar('offset-outline-Button-#{$colorScheme}-solid--focus');
  }

  &:not([disabled]) {
    &:hover {
      border-color: createThemeVar('color-border-Button-#{$colorScheme}-solid--hover');
      color: createThemeVar('color-text-Button-#{$colorScheme}-solid--hover');
      background: createThemeVar('color-bg-Button-#{$colorScheme}-solid--hover');
    }

    &:active {
      border-color: createThemeVar('color-border-Button-#{$colorScheme}-solid--active');
      color: createThemeVar('color-text-Button-#{$colorScheme}-solid--active');
      box-shadow: createThemeVar('shadow-Button-#{$colorScheme}-solid--active');
      background: createThemeVar('color-bg-Button-#{$colorScheme}-solid--active');
    }
  }

  &:disabled {
    cursor: not-allowed;
    background: createThemeVar('color-bg-Button--disabled');
    color: createThemeVar('color-text-Button--disabled');
    border-color: createThemeVar('color-border-Button--disabled');
  }
}

// --- CSS properties of outlined buttons with the specified color scheme
@mixin outlined($colorScheme){
  font-family: createThemeVar('font-family-Button-#{$colorScheme}-outlined');
  font-size: createThemeVar('font-size-Button-#{$colorScheme}-outlined');
  font-weight: createThemeVar('font-weight-Button-#{$colorScheme}-outlined');
  border-radius: createThemeVar('radius-Button-#{$colorScheme}-outlined');
  border-width: createThemeVar('thickness-border-Button-#{$colorScheme}-outlined');
  border-color: createThemeVar('color-border-Button-#{$colorScheme}-outlined');
  border-style: createThemeVar('style-border-Button-#{$colorScheme}-outlined');
  color: createThemeVar('color-text-Button-#{$colorScheme}-outlined');
  box-shadow: createThemeVar('shadow-Button-#{$colorScheme}-outlined');
  background: transparent;

  &:focus-visible {
    outline-width: createThemeVar('thickness-outline-Button-#{$colorScheme}-outlined--focus');
    outline-color: createThemeVar('color-outline-Button-#{$colorScheme}-outlined--focus');
    outline-style: createThemeVar('style-outline-Button-#{$colorScheme}-outlined--focus');
    outline-offset: createThemeVar('offset-outline-Button-#{$colorScheme}-outlined--focus');
  }

  &:not([disabled]) {
    &:hover {
      border-color: createThemeVar('color-border-Button-#{$colorScheme}-outlined--hover');
      background: createThemeVar('color-bg-Button-#{$colorScheme}-outlined--hover');
      color: createThemeVar('color-text-Button-#{$colorScheme}-outlined--hover');
    }

    &:active {
      border-color: createThemeVar('color-border-Button-#{$colorScheme}-outlined--active');
      background: createThemeVar('color-bg-Button-#{$colorScheme}-outlined--active');
      color: createThemeVar('color-text-Button-#{$colorScheme}-outlined--active');
    }
  }

  &:disabled {
    cursor: not-allowed;
    color: createThemeVar('color-text-Button--disabled');
    border-color: createThemeVar('color-border-Button--disabled');
  }
}

// --- CSS properties of ghost buttons with the specified color scheme
@mixin ghost($colorScheme){
  font-family: createThemeVar('font-family-Button-#{$colorScheme}-ghost');
  font-size: createThemeVar('font-size-Button-#{$colorScheme}-ghost');
  font-weight: createThemeVar('font-weight-Button-#{$colorScheme}-ghost');
  border-radius: createThemeVar('radius-Button-#{$colorScheme}-ghost');
  border-width: createThemeVar('thickness-border-Button-#{$colorScheme}-ghost');
  border-color: transparent;
  border-style: solid;
  background: transparent;
  color: createThemeVar('color-text-Button-#{$colorScheme}-ghost');

  &:focus-visible {
    outline-width: createThemeVar('thickness-outline-Button-#{$colorScheme}-ghost--focus');
    outline-color: createThemeVar('color-outline-Button-#{$colorScheme}-ghost--focus');
    outline-style: createThemeVar('style-outline-Button-#{$colorScheme}-ghost--focus');
    outline-offset: createThemeVar('offset-outline-Button-#{$colorScheme}-ghost--focus');
  }

  &:not([disabled]) {
    &:hover {
      background: createThemeVar('color-bg-Button-#{$colorScheme}-ghost--hover');
      color: createThemeVar('color-text-Button-#{$colorScheme}-ghost--hover');
    }

    &:active {
      background: createThemeVar('color-bg-Button-#{$colorScheme}-ghost--active');
      color: createThemeVar('color-text-Button-#{$colorScheme}-ghost--active');
    }
  }

  &:disabled {
    cursor: not-allowed;
    color: createThemeVar('color-text-Button--disabled');
  }
}

// --- CSS styles
.button {
  width: createThemeVar("width-Button");
  height: createThemeVar("height-Button");
  line-height: normal;
  min-width: 0;
  padding: 0;
  margin: 0;
  border-style: solid;
  transition: color 0.2s, background 0.2s;
  user-select: none;
  cursor: pointer;
  display: flex;
  gap: t.$space-2;
  justify-content: center;
  align-items: center;

  &.alignStart {
    justify-content: start;
  }

  &.alignEnd {
    justify-content: end;
  }

  * {
    color: inherit;
  }

  &.buttonHorizontal {
    flex-direction: row;
    &.xs {
      padding: createThemeVar("padding-vertical-Button-xs") createThemeVar("padding-horizontal-Button-xs");
    }

    &.sm {
      padding: createThemeVar("padding-vertical-Button-sm") createThemeVar("padding-horizontal-Button-sm");
    }

    &.md {
      padding: createThemeVar("padding-vertical-Button-md") createThemeVar("padding-horizontal-Button-md");
    }

    &.lg {
      padding: createThemeVar("padding-vertical-Button-lg") createThemeVar("padding-horizontal-Button-lg");
    }
  }

  &.buttonVertical {
    flex-direction: column;
    gap: t.$space-1;
    width: fit-content;
    height: fit-content;

    &.xs {
      padding: t.$space-0_5 t.$space-1;
    }

    &.sm {
      padding: t.$space-2;
    }

    &.md {
      padding: t.$space-4;
    }

    &.lg {
      padding: t.$space-5;
    }
  }

  &.solidPrimary {
    @include solid('primary');
  }

  &.solidSecondary {
    @include solid('secondary');
  }

  &.solidAttention {
    @include solid('attention');
  }

  &.outlinedPrimary {
    @include outlined('primary');
  }

  &.outlinedSecondary {
    @include outlined('secondary');
  }

  &.outlinedAttention {
    @include outlined('attention');
  }

  &.ghostPrimary {
    @include ghost('primary');
  }

  &.ghostSecondary {
    @include ghost('secondary');
  }

  &.ghostAttention {
    @include ghost('attention');
  }
}

// --- We export the theme variables to add them to the component renderer
:export{
  themeVars: t.json-stringify($themeVars)
}