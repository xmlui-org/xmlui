@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$component: "NavLink";
$themeVars: t.composePaddingVars($themeVars, $component);
$themeVars: t.composeBorderVars($themeVars, $component);
$backgroundColor-NavLink: createThemeVar("backgroundColor-#{$component}");
$backgroundColor-NavLink--hover: createThemeVar("backgroundColor-#{$component}--hover");
$backgroundColor-NavLink--hover--active: createThemeVar("backgroundColor-#{$component}--hover--active");
$backgroundColor-NavLink--active: createThemeVar("backgroundColor-#{$component}--active");
$backgroundColor-NavLink--pressed: createThemeVar("backgroundColor-#{$component}--pressed");
$backgroundColor-NavLink--pressed--active: createThemeVar("backgroundColor-#{$component}--pressed--active");
$fontSize-NavLink: createThemeVar("fontSize-#{$component}");
$wordWrap-NavLink: createThemeVar("wordWrap-#{$component}");
$textColor-NavLink: createThemeVar("textColor-#{$component}");
$textColor-NavLink--hover: createThemeVar("textColor-#{$component}--hover");
$textColor-NavLink--active: createThemeVar("textColor-#{$component}--active");
$textColor-NavLink--hover--active: createThemeVar("textColor-#{$component}--hover--active");
$textColor-NavLink--pressed: createThemeVar("textColor-#{$component}--pressed");
$textColor-NavLink--pressed--active: createThemeVar("textColor-#{$component}--pressed--active");
$color-icon-NavLink: createThemeVar("color-icon-#{$component}");
$fontFamily-NavLink: createThemeVar("fontFamily-#{$component}");
$fontWeight-NavLink: createThemeVar("fontWeight-#{$component}");
$fontWeight-NavLink--pressed: createThemeVar("fontWeight-#{$component}--pressed");
$fontWeight-NavLink--active: createThemeVar("fontWeight-#{$component}--active");
$borderRadius-indicator-NavLink: createThemeVar("borderRadius-indicator-#{$component}");
$thickness-indicator-NavLink: createThemeVar("thickness-indicator-#{$component}");
$color-indicator-NavLink: createThemeVar("color-indicator-#{$component}");
$color-indicator-NavLink--hover: createThemeVar("color-indicator-#{$component}--hover");
$color-indicator-NavLink--active: createThemeVar("color-indicator-#{$component}--active");
$color-indicator-NavLink--pressed: createThemeVar("color-indicator-#{$component}--pressed");

$transition: color 0.1s, background-color 0.1s;

.content {
  &.base {
    @include t.borderVars($themeVars, $component);
    @include t.paddingVars($themeVars, $component);
    outline: inherit;
    text-decoration: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: t.$space-2;
    font-size: $fontSize-NavLink;
    font-weight: $fontWeight-NavLink;
    font-family: $fontFamily-NavLink;
    word-wrap: $wordWrap-NavLink;
    position: relative;
    transition: $transition;
    color: $textColor-NavLink;
    background-color: $backgroundColor-NavLink;
    flex-shrink: 0;
    white-space: nowrap;

    .icon {
      color: $color-icon-NavLink;
    }

    * {
      color: $textColor-NavLink;
    }

    &.includeHoverIndicator {
      &:after {
        transition: $transition;
        position: absolute;
        left: 0.1em;
        right: 0.1em;
        bottom: 0;
        height: $thickness-indicator-NavLink;
        border-radius: $borderRadius-indicator-NavLink;
        content: "";
      }
    }

    &:hover.displayActive,
    &:focus-visible {
      color: $textColor-NavLink--hover;
      background-color: $backgroundColor-NavLink--hover;
      * {
        color: $textColor-NavLink--hover;
      }
      &:after {
        background-color: $color-indicator-NavLink--hover;
      }
    }


    &:focus-visible{
      outline-width: createThemeVar('outlineWidth-#{$component}--focus');
      outline-color: createThemeVar('outlineColor-#{$component}--focus');
      outline-style: createThemeVar('outlineStyle-#{$component}--focus');
      outline-offset: createThemeVar('outlineOffset-#{$component}--focus');
    }

    &[role='menuitem']{           //e.g. inside a navGroup, for hover it focuses the item, so it's always visible, that's why we have this selector here
      outline: none;
      &:not(:hover):focus-visible{
        outline-width: createThemeVar('outlineWidth-#{$component}--focus');
        outline-color: createThemeVar('outlineColor-#{$component}--focus');
        outline-style: createThemeVar('outlineStyle-#{$component}--focus');
        outline-offset: createThemeVar('outlineOffset-#{$component}--focus');
      }
    }

    &:active.displayActive {
      color: $textColor-NavLink--pressed;
      background-color: $backgroundColor-NavLink--pressed;
      font-weight: $fontWeight-NavLink--pressed;
      * {
        font-weight: $fontWeight-NavLink--pressed;
        color: $textColor-NavLink--pressed;
      }
      &:after {
        background-color: $color-indicator-NavLink--pressed;
      }
    }

    &.navItemActive {
      color: $textColor-NavLink--active;
      background-color: $backgroundColor-NavLink--active;
      font-weight: $fontWeight-NavLink--active;
      * {
        font-weight: $fontWeight-NavLink--active;
        color: $textColor-NavLink--active;
      }
      & > * {
        z-index: 1;
      }
      &:hover {
        color: $textColor-NavLink--hover--active;
        background-color: $backgroundColor-NavLink--hover--active;
        * {
          color: $textColor-NavLink--hover--active;
        }
      }
      &:after {
        z-index: 0;
        background-color: $color-indicator-NavLink--active;
      }

      &:active {
        color: $textColor-NavLink--pressed--active;
        background-color: $backgroundColor-NavLink--pressed--active;
        font-weight: $fontWeight-NavLink--pressed;
        * {
          font-weight: $fontWeight-NavLink--pressed;
          color: $textColor-NavLink--pressed--active;
        }
        &:after {
          background-color: $color-indicator-NavLink--pressed;
        }
      }
    }

    &.disabled {
      cursor: not-allowed;
      color: t.$textColor--disabled;
    }

    &.vertical {
      &:after {
        top: 0;
        bottom: 0;
        left: 0;
        right: auto;
        width: $thickness-indicator-NavLink;
        height: auto;
        border-radius: $borderRadius-indicator-NavLink;
      }
    }

    &.indented {
      padding-left: 2.4em;
      flex-shrink: 0;
    }
  }
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}
