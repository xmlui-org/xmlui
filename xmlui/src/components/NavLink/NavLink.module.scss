@use "../../components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$component: "NavLink";
$themeVars: t.composePaddingVars($themeVars, $component);
$themeVars: t.composeBorderVars($themeVars, $component);
$color-bg-NavLink: createThemeVar("color-bg-#{$component}");
$color-bg-NavLink--hover: createThemeVar("color-bg-#{$component}--hover");
$color-bg-NavLink--hover--active: createThemeVar("color-bg-#{$component}--hover--active");
$color-bg-NavLink--active: createThemeVar("color-bg-#{$component}--active");
$color-bg-NavLink--pressed: createThemeVar("color-bg-#{$component}--pressed");
$color-bg-NavLink--pressed--active: createThemeVar("color-bg-#{$component}--pressed--active");
$font-size-NavLink: createThemeVar("font-size-#{$component}");
$color-text-NavLink: createThemeVar("color-text-#{$component}");
$color-text-NavLink--hover: createThemeVar("color-text-#{$component}--hover");
$color-text-NavLink--active: createThemeVar("color-text-#{$component}--active");
$color-text-NavLink--hover--active: createThemeVar("color-text-#{$component}--hover--active");
$color-text-NavLink--pressed: createThemeVar("color-text-#{$component}--pressed");
$color-text-NavLink--pressed--active: createThemeVar("color-text-#{$component}--pressed--active");
$color-icon-NavLink: createThemeVar("color-icon-#{$component}");
$font-family-NavLink: createThemeVar("font-family-#{$component}");
$font-weight-NavLink: createThemeVar("font-weight-#{$component}");
$font-weight-NavLink--pressed: createThemeVar("font-weight-#{$component}--pressed");
$font-weight-NavLink--active: createThemeVar("font-weight-#{$component}--active");
$radius-indicator-NavLink: createThemeVar("radius-indicator-#{$component}");
$thickness-indicator-NavLink: createThemeVar("thickness-indicator-#{$component}");
$color-indicator-NavLink: createThemeVar("color-indicator-#{$component}");
$color-indicator-NavLink--hover: createThemeVar("color-indicator-#{$component}--hover");
$color-indicator-NavLink--active: createThemeVar("color-indicator-#{$component}--active");
$color-indicator-NavLink--pressed: createThemeVar("color-indicator-#{$component}--pressed");

$transition: color 0.1s, background-color 0.1s;

.content {
  &.base {
    @include t.borderVars($themeVars, $component);
    @include t.paddingVars($themeVars, $component);
    outline: inherit;
    text-decoration: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: t.$space-2;
    font-size: $font-size-NavLink;
    font-weight: $font-weight-NavLink;
    font-family: $font-family-NavLink;
    position: relative;
    transition: $transition;
    color: $color-text-NavLink;
    background-color: $color-bg-NavLink;
    flex-shrink: 0;
    white-space: nowrap;

    .icon {
      color: $color-icon-NavLink;
    }

    * {
      color: $color-text-NavLink;
    }

    &.includeHoverIndicator {
      &:after {
        transition: $transition;
        position: absolute;
        left: 0.1em;
        right: 0.1em;
        bottom: 0;
        height: $thickness-indicator-NavLink;
        border-radius: $radius-indicator-NavLink;
        content: "";
      }
    }

    &:hover.displayActive,
    &:focus-visible {
      color: $color-text-NavLink--hover;
      background-color: $color-bg-NavLink--hover;
      * {
        color: $color-text-NavLink--hover;
      }
      &:after {
        background-color: $color-indicator-NavLink--hover;
      }
    }


    &:focus-visible{
      outline-width: createThemeVar('thickness-outline-#{$component}--focus');
      outline-color: createThemeVar('color-outline-#{$component}--focus');
      outline-style: createThemeVar('style-outline-#{$component}--focus');
      outline-offset: createThemeVar('offset-outline-#{$component}--focus');
    }

    &[role='menuitem']{           //e.g. inside a navGroup, for hover it focuses the item, so it's always visible, that's why we have this selector here
      outline: none;
      &:not(:hover):focus-visible{
        outline-width: createThemeVar('thickness-outline-#{$component}--focus');
        outline-color: createThemeVar('color-outline-#{$component}--focus');
        outline-style: createThemeVar('style-outline-#{$component}--focus');
        outline-offset: createThemeVar('offset-outline-#{$component}--focus');
      }
    }

    &:active.displayActive {
      color: $color-text-NavLink--pressed;
      background-color: $color-bg-NavLink--pressed;
      font-weight: $font-weight-NavLink--pressed;
      * {
        font-weight: $font-weight-NavLink--pressed;
        color: $color-text-NavLink--pressed;
      }
      &:after {
        background-color: $color-indicator-NavLink--pressed;
      }
    }

    &.navItemActive {
      color: $color-text-NavLink--active;
      background-color: $color-bg-NavLink--active;
      font-weight: $font-weight-NavLink--active;
      * {
        font-weight: $font-weight-NavLink--active;
        color: $color-text-NavLink--active;
      }
      & > * {
        z-index: 1;
      }
      &:hover {
        color: $color-text-NavLink--hover--active;
        background-color: $color-bg-NavLink--hover--active;
        * {
          color: $color-text-NavLink--hover--active;
        }
      }
      &:after {
        z-index: 0;
        background-color: $color-indicator-NavLink--active;
      }

      &:active {
        color: $color-text-NavLink--pressed--active;
        background-color: $color-bg-NavLink--pressed--active;
        font-weight: $font-weight-NavLink--pressed;
        * {
          font-weight: $font-weight-NavLink--pressed;
          color: $color-text-NavLink--pressed--active;
        }
        &:after {
          background-color: $color-indicator-NavLink--pressed;
        }
      }
    }

    &.disabled {
      cursor: not-allowed;
      color: t.$color-text--disabled;
    }

    &.vertical {
      &:after {
        top: 0;
        bottom: 0;
        left: 0;
        right: auto;
        width: $thickness-indicator-NavLink;
        height: auto;
        border-radius: $radius-indicator-NavLink;
      }
    }

    &.indented {
      padding-left: 2.4em;
      flex-shrink: 0;
    }
  }
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}
