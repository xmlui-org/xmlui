@use "@components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$width-navPanel-App: createThemeVar("width-navPanel-App");
$shadow-header-App: createThemeVar("shadow-header-App");
$shadow-pages-App: createThemeVar("shadow-pages-App");
$max-content-width-App: createThemeVar("max-content-width-App");
$color-bg-AppHeader: createThemeVar("color-bg-AppHeader");
$border-bottom-NavPanel: createThemeVar("border-bottom-AppHeader");

.wrapper {
  --footer-height: 0px;
  --header-height: 0px;
  width: 100%;
  height: 100%;
  position: relative; //leave it here, otherwise there could be double scrollbars because of the absolute positionings (typically radix's visuallyHidden)
  display: flex;
  flex-direction: column;
  isolation: isolate;

  &.vertical {
    flex-direction: row;
    overflow: initial;

    .contentWrapper {
      overflow: auto;
      position: relative;
      scrollbar-gutter: stable both-edges;
    }
    .navPanelWrapper {
      width: $width-navPanel-App;
      flex-shrink: 0;
    }

    .PagesWrapper {
      min-height: initial;
      flex: 1;
    }

    .footerWrapper {
      position: static;
    }
    &.sticky {
      .footerWrapper {
        position: sticky;
        bottom: 0;
      }
    }
  }

  &.horizontal {
    overflow: auto;
    .PagesWrapper {
      min-height: initial;
    }
    .footerWrapper {
      position: static;
    }
    &.sticky {
      scroll-padding-top: var(--header-height);
      min-height: 100%;
      .footerWrapper {
        position: sticky;
        bottom: 0;
      }
    }
    .navPanelWrapper {
      border-bottom: $border-bottom-NavPanel;
    }
  }

  &.verticalFullHeader {
    min-height: 100%;
    height: 100%;
    overflow: auto;
    scroll-padding-top: var(--header-height);
    --containerHeight: 100vh;
    //padding-bottom: var(--footer-height);
    .navPanelWrapper {
      width: $width-navPanel-App;
      position: sticky;
      height: calc(var(--containerHeight) - var(--footer-height) - var(--header-height));
      top: var(--header-height);
    }
    .PagesWrapper {
      overflow: initial;
      min-height: calc(var(--containerHeight) - var(--header-height) - var(--footer-height));
      height: 100%;
    }

    .PagesWrapperInner {
      height: 100%;
      & > :global(.xmlui-page-root) {
        height: 100%;
      }
    }

    .footerWrapper {
      position: sticky;
      left: 0;
      right: 0;
      bottom: 0;
    }

    @container app-container (height > 0) {
      --containerHeight: 100cqh;
    }
  }

  &.scrollWholePage {
    scrollbar-gutter: stable both-edges;
  
    .headerWrapper {
      & > div {
        padding-inline: var(--scrollbar-width);
      }
      margin-inline: calc(-1 * var(--scrollbar-width));
    }

    .footerWrapper {
      margin-inline: calc(-1 * var(--scrollbar-width));
      & > div {
        padding-inline: var(--scrollbar-width);
      }
    }

    &.verticalFullHeader {
      .content {
        margin-inline: calc(-1 * var(--scrollbar-width));
      }
      .contentWrapper {
        padding-inline: var(--scrollbar-width);
      }
    }
  }

  &:not(.scrollWholePage) {
    overflow: hidden;
    .content {
      min-height: 0;
      height: 100%;
    }
    .contentWrapper {
      overflow: initial;
    }
    .PagesWrapper {
      overflow: auto;
      scroll-padding-top: var(--header-height);
      min-height: 0;
      height: 100%;
      scrollbar-gutter: stable both-edges;
    }
    .PagesWrapperInner {
      min-height: 100%;
    }
  }

  &.noScrollbarGutters {
    scrollbar-gutter: auto;
  }
}

.headerWrapper {
  z-index: 1;
  //position: relative;
  min-height: 0;
  flex-shrink: 0;
  overflow-x: clip;
  top: 0;
  box-shadow: $shadow-header-App;
  background-color: $color-bg-AppHeader;
  &.sticky {
    position: sticky;
  }
}

.content {
  display: flex;
  flex-direction: row;
  isolation: isolate;
}

.contentWrapper {
  position: relative;
  min-width: 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  box-shadow: $shadow-pages-App;
}

.navPanelWrapper {
  display: flex;
  position: sticky;
  top: 0;

  &:empty {
    display: none;
  }
}

.PagesWrapper {
  flex: 1;
  //display: flex;
  //flex-direction: column;
  //flex: 1;
  //min-height: 0;
  //width: 100%;
  isolation: isolate;
  //height: 100%;
  //overflow: auto;
}

.PagesWrapperInner {
  --page-padding-left: #{t.$space-4};
  --page-padding-right: #{t.$space-4};
  --page-padding-top: #{t.$space-5};
  --page-padding-bottom: #{t.$space-5};
  --page-gap: #{t.$space-5};
  max-width: $max-content-width-App;
  width: 100%;
  margin: 0 auto;
  //flex: 1;
  min-height: 100%;
  padding-top: var(--page-padding-top);
  padding-bottom: var(--page-padding-bottom);
  padding-right: var(--page-padding-right);
  padding-left: var(--page-padding-left);
  gap: var(--page-gap);
  display: flex;
  flex-direction: column;

  & > :global(.xmlui-page-root) {
    padding-top: var(--page-padding-top-override, var(--page-padding-top));
    padding-bottom: var(--page-padding-bottom-override, var(--page-padding-bottom));
    padding-right: var(--page-padding-right-override, var(--page-padding-right));
    padding-left: var(--page-padding-left-override, var(--page-padding-left));
    gap: var(--page-gap);
    margin-top: calc(-1 * var(--page-padding-top));
    margin-bottom: calc(-1 * var(--page-gap));
    margin-left: calc(-1 * var(--page-padding-left));
    margin-right: calc(-1 * var(--page-padding-right));
  }
}

.footerWrapper {
  flex-shrink: 0;
  //position: sticky;
  //bottom:  calc(-1 * var(--footer-height));
  //margin-bottom: calc(-1 * var(--footer-height));
}


// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}
