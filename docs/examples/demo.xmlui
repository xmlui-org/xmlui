<App layout="horizontal">
    <AppHeader>Component Display App</AppHeader>
    <NavPanel>
        <NavLink>NavLink1</NavLink>
        <NavLink active="true">NavLink2</NavLink>
        <NavLink>NavLink3</NavLink>
    </NavPanel>
    <Card height="{100%}" padding="1rem" gap="1rem">
        <ComponentSection heading="Buttons">
            <Subsection heading="Variants &amp; themeColors">
                <HStack gap="1rem">
                    <Button label="solid/primary" variant="solid" themeColor="primary"/>
                    <Button label="outlined/primary" variant="outlined" themeColor="primary"/>
                    <Button label="ghost/primary" variant="ghost" themeColor="primary"/>
                </HStack>
                <HStack gap="1rem">
                    <Button label="solid/secondary" variant="solid" themeColor="secondary"/>
                    <Button label="outlined/secondary" variant="outlined" themeColor="secondary"/>
                    <Button label="ghost/secondary" variant="ghost" themeColor="secondary"/>
                </HStack>
                <HStack gap="1rem">
                    <Button label="solid/attention" variant="solid" themeColor="attention"/>
                    <Button label="outlined/attention" variant="outlined" themeColor="attention"/>
                    <Button label="ghost/attention" variant="ghost" themeColor="attention"/>
                </HStack>
                <HStack gap="1rem">
                    <Button label="disabled/solid" variant="solid" enabled="{false}"/>
                    <Button label="disabled/outlined" variant="outlined" enabled="{false}"/>
                    <Button label="disabled/ghost" variant="ghost" enabled="{false}"/>
                </HStack>
            </Subsection>

            <Subsection heading="Icons">
                <HStack gap="1rem">
                    <Button icon="trash" variant="solid" themeColor="primary"/>
                    <Button icon="trash" variant="outlined" themeColor="primary"/>
                    <Button icon="trash" variant="ghost" themeColor="primary"/>
                </HStack>
                <HStack gap="1rem">
                    <Button icon="trash" variant="solid" themeColor="secondary"/>
                    <Button icon="trash" variant="outlined" themeColor="secondary"/>
                    <Button icon="trash" variant="ghost" themeColor="secondary"/>
                </HStack>
                <HStack gap="1rem">
                    <Button icon="trash" label="icon left" iconPosition="left" variant="solid" themeColor="primary"/>
                    <Button icon="trash" label="icon right" iconPosition="right" variant="solid" themeColor="primary"/>
                </HStack>
            </Subsection>

            <Subsection heading="Sizes">
                <HStack gap="1rem">
                    <Button icon="drive" label="extra-small" size="xs"/>
                    <Button icon="drive" label="small" size="sm"/>
                    <Button icon="drive" label="medium" size="md"/>
                    <Button icon="drive" label="large" size="lg"/>
                </HStack>
                <HStack gap="1rem">
                    <Button label="extra-small" size="xs"/>
                    <Button label="small" size="sm"/>
                    <Button label="medium" size="md"/>
                    <Button label="large" size="lg"/>
                </HStack>
                <HStack gap="1rem">
                    <Button icon="drive" size="xs"/>
                    <Button icon="drive" size="sm"/>
                    <Button icon="drive" size="md"/>
                    <Button icon="drive" size="lg"/>
                </HStack>
            </Subsection>
        </ComponentSection>

        <ComponentSection heading="Card">
            <Card width="33%">
                <HStack gap="1rem" verticalAlignment="center">
                    <Icon name="trash"/>
                    This is a card
                </HStack>
            </Card>
            <List datasource="https://api.spacexdata.com/v3/rockets" height="300">
                <prop name="itemTemplate">
                    <Card avatarUrl="{$item.flickr_images[0]}" title="{$item.rocket_name}" subTitle="{$item.company}">
                        <HStack gap="1rem" verticalAlignment="center">
                            <Icon name="info"/>
                            <Text value="{$item.description}" canShrink="true" />
                        </HStack>
                    </Card>
                </prop>
            </List>
        </ComponentSection>

        <ComponentSection heading="ContentSeparator">
            <Subsection heading="Horizontal">
                <HStack>
                    <ContentSeparator size="8px" radius="5px"/>
                </HStack>
                <HStack height="48px">
                    <ContentSeparator orientation="vertical" size="8px"/>
                </HStack>
            </Subsection>
            <Subsection heading="Badge">
                <Badge value="Badge"/>
                <Badge value="Long Pill" variant="pill"/>
                <Badge value="Val1" colorMap="{{'Val1': 'red'}}"/>

            </Subsection>
        </ComponentSection>

        <ComponentSection heading="Checkbox">
            <HStack gap="10rem">
                <Subsection heading="States">
                    <NoFormLabelContainer label="value: false">
                        <Checkbox initialValue="{false}" />
                    </NoFormLabelContainer>
                    <NoFormLabelContainer label="value: false + disabled">
                        <Checkbox initialValue="{false}" enabled="{false}" />
                    </NoFormLabelContainer>
                    <NoFormLabelContainer label="value: true">
                        <Checkbox initialValue="{true}" />
                    </NoFormLabelContainer>
                    <NoFormLabelContainer label="value: true + disabled">
                        <Checkbox initialValue="{true}" enabled="{false}" />
                    </NoFormLabelContainer>
                    <NoFormLabelContainer label="value: true + readOnly">
                        <Checkbox initialValue="{true}" readOnly="{true}" />
                    </NoFormLabelContainer>
                </Subsection>


                <Subsection heading="Validation Statuses">
                    <NoFormLabelContainer label="value: false + error">
                        <Checkbox initialValue="{false}" validationStatus="error" />
                    </NoFormLabelContainer>
                    <NoFormLabelContainer label="value: true + error">
                        <Checkbox initialValue="{true}" validationStatus="error" />
                    </NoFormLabelContainer>
                    <NoFormLabelContainer label="value: false + warning">
                        <Checkbox initialValue="{false}" validationStatus="warning" />
                    </NoFormLabelContainer>
                    <NoFormLabelContainer label="value: true + warning">
                        <Checkbox initialValue="{true}" validationStatus="warning" />
                    </NoFormLabelContainer>
                    <NoFormLabelContainer label="value: false + valid">
                        <Checkbox initialValue="{false}" validationStatus="valid" />
                    </NoFormLabelContainer>
                    <NoFormLabelContainer label="value: true + valid">
                        <Checkbox initialValue="{true}" validationStatus="valid" />
                    </NoFormLabelContainer>
                </Subsection>

                <Subsection heading="Indeterminate">
                    <Checkbox indeterminate="true" label="Indeterminate"/>
                    <Checkbox indeterminate="true" readOnly="true" label="Indeterminate + readonly"/>
                </Subsection>


                <Subsection heading="Label Position">
                    <Checkbox label="left label" labelPosition="left"/>
                    <Checkbox label="top label" labelPosition="top"/>
                    <Checkbox label="right label" labelPosition="right"/>
                    <Checkbox label="bottom label" labelPosition="bottom"/>
                </Subsection>
            </HStack>
        </ComponentSection>

        <ComponentSection heading="Switch">
            <HStack gap="10rem">
                <Subsection heading="States">
                    <NoFormLabelContainer label="value: false">
                        <Switch initialValue="{false}" />
                    </NoFormLabelContainer>
                    <NoFormLabelContainer label="value: false + disabled">
                        <Switch initialValue="{false}" enabled="{false}" />
                    </NoFormLabelContainer>
                    <NoFormLabelContainer label="value: true">
                        <Switch initialValue="{true}" />
                    </NoFormLabelContainer>
                    <NoFormLabelContainer label="value: true + disabled">
                        <Switch initialValue="{true}" enabled="{false}" />
                    </NoFormLabelContainer>
                    <NoFormLabelContainer label="value: true + readOnly">
                        <Switch initialValue="{true}" readOnly="{true}" />
                    </NoFormLabelContainer>
                </Subsection>


                <Subsection heading="Validation Statuses">
                    <NoFormLabelContainer label="value: false + error">
                        <Switch initialValue="{false}" validationStatus="error" />
                    </NoFormLabelContainer>
                    <NoFormLabelContainer label="value: true + error">
                        <Switch initialValue="{true}" validationStatus="error" />
                    </NoFormLabelContainer>
                    <NoFormLabelContainer label="value: false + warning">
                        <Switch initialValue="{false}" validationStatus="warning" />
                    </NoFormLabelContainer>
                    <NoFormLabelContainer label="value: true + warning">
                        <Switch initialValue="{true}" validationStatus="warning" />
                    </NoFormLabelContainer>
                    <NoFormLabelContainer label="value: false + valid">
                        <Switch initialValue="{false}" validationStatus="valid" />
                    </NoFormLabelContainer>
                    <NoFormLabelContainer label="value: true + valid">
                        <Switch initialValue="{true}" validationStatus="valid" />
                    </NoFormLabelContainer>
                </Subsection>

                <Subsection heading="Label Position">
                    <Switch label="left label" labelPosition="left"/>
                    <Switch label="top label" labelPosition="rop"/>
                    <Switch label="right label" labelPosition="right"/>
                    <Switch label="bottom label" labelPosition="bottom"/>
                </Subsection>
            </HStack>
        </ComponentSection>

        <ComponentSection heading="RadioGroup">
            <HStack gap="4rem">
                <RadioGroup initialValue="first">
                    <HStack gap="1rem">
                        <RadioGroupOption label="first" value="first"/>
                        <RadioGroupOption label="second" value="second"/>
                        <RadioGroupOption label="third" value="third"/>
                    </HStack>
                    <VStack>
                        <RadioGroupOption value="first"/>
                        <RadioGroupOption value="second"/>
                        <RadioGroupOption value="third" enabled="{false}"/>
                    </VStack>
                </RadioGroup>

                <RadioGroup initialValue="second">
                    <RadioGroupOption label="first" value="first"/>
                    <RadioGroupOption label="second" value="second"/>
                    <RadioGroupOption label="third" value="third"/>
                </RadioGroup>

                <RadioGroup initialValue="third" enabled="{false}">
                    <RadioGroupOption label="first" value="first"/>
                    <RadioGroupOption label="second" value="second"/>
                    <RadioGroupOption label="thirdD" value="third"/>
                </RadioGroup>

                <RadioGroup initialValue="first" validationStatus="error">
                    <RadioGroupOption value="first"/>
                    <RadioGroupOption value="second"/>
                    <RadioGroupOption value="third"/>
                </RadioGroup>
                <RadioGroup initialValue="second" validationStatus="warning">
                    <RadioGroupOption value="first"/>
                    <RadioGroupOption value="second"/>
                    <RadioGroupOption value="third"/>
                </RadioGroup>
                <RadioGroup initialValue="third" validationStatus="valid">
                    <RadioGroupOption value="first"/>
                    <RadioGroupOption value="second"/>
                    <RadioGroupOption value="third"/>
                </RadioGroup>
            </HStack>
        </ComponentSection>
        <ComponentSection heading="Combobox">
            <Combobox id="combobox" label="Combobox" placeholder="Select...">
                <Option value="opt1" label="first"/>
                <Option value="opt2" label="second"/>
                <Option value="opt3" label="third"/>
            </Combobox>
            <Combobox placeholder="Disabled Combobox" enabled="{false}"/>
            <Combobox placeholder="Empty Combobox"/>

            <Form subject="{{ asd: '0' }}" onSubmit="(eventArgs) => console.log(eventArgs)">
                <FormItem label="Authentication Type" bindTo="asd" type="combobox">
                    <prop name="validation">
                        <field name="minLength" value="2"/>
                        <field name="severity" value="warning"/>
                    </prop>
                    <Option label="Password" value="0"/>
                    <Option label="Public Key" value="1"/>
                    <Option label="Keyboard (interactive)" value="2"/>
                </FormItem>
            </Form>
        </ComponentSection>

        <ComponentSection heading="MultiCombobox">
            <MultiCombobox id="multiCombobox" label="MultiCombobox" placeholder="Select...">
                <Option value="opt1" label="first"/>
                <Option value="opt2" label="second"/>
                <Option value="opt3" label="third"/>
            </MultiCombobox>
            <MultiCombobox placeholder="Disabled MultiCombobox" enabled="{false}"/>
            <MultiCombobox placeholder="Empty MultiCombobox"/>

            <Form subject="{{ asd: '0' }}" onSubmit="(eventArgs) => console.log(eventArgs)">
                <FormItem label="Authentication Type" bindTo="asd" type="multiCombobox">
                    <prop name="validation">
                        <field name="minLength" value="2"/>
                        <field name="severity" value="warning"/>
                    </prop>
                    <Option label="Password" value="0"/>
                    <Option label="Public Key" value="1"/>
                    <Option label="Keyboard (interactive)" value="2"/>
                </FormItem>
            </Form>
        </ComponentSection>

        <ComponentSection heading="Select">
            <Select initialValue="opt1" id="demoSelect" placeholder="Select...">
                <Option value="opt1" label="first"/>
                <Option value="opt2" label="second"/>
                <Option value="opt3" label="third"/>
            </Select>
            <Select placeholder="Disabled Select" enabled="{false}"/>
            <Select placeholder="Empty Select"/>

            <Form onSubmit="(eventArgs) => console.log(eventArgs)">
                <FormItem initialValue="two" label="Form item" bindTo="asd" type="select" onValidate="(value) => ({
                                       isValid: value === 'one',
                                       invalidMessage: 'must be one',
                                       validMessage: 'yay, one (it should be green)',
                                       severity: 'warning'
                                     })">
                    <Option value="one" label="first"/>
                    <Option value="two" label="second"/>
                    <Option value="three" label="third"/>
                </FormItem>
            </Form>
        </ComponentSection>

        <ComponentSection heading="MultiSelect">
            <MultiSelect label="MultiSelect Component" id="multiSelect" placeholder="Select...">
                <Option value="opt1" label="first"/>
                <Option value="opt2" label="second"/>
                <Option value="opt3" label="third"/>
            </MultiSelect>
            <MultiSelect placeholder="Disabled MultiSelect" enabled="{false}"/>
            <MultiSelect placeholder="Empty MultiSelect"/>

            <Form subject="{{ asd: 'opt1' }}" onSubmit="(eventArgs) => console.log(eventArgs)">
                <FormItem label="Form item" bindTo="asd" type="multiSelect">
                    <Option value="opt1" label="first"/>
                    <Option value="opt2" label="second"/>
                    <Option value="opt3" label="third"/>
                </FormItem>
            </Form>
        </ComponentSection>

        <!--
        <ComponentSection heading="DatePicker">
            <Form subject="{{ date: '2024-02-21' }}" onSubmit="(eventArgs) => console.log(eventArgs)">
                <FormItem width="100%" label="DatePicker" bindTo="date" required="true" type="datePicker"/>
            </Form>

            <var name="date" value="2022-12-22"/>
            <DatePicker value="{date}" onChange="(selectedDate) => date = selectedDate" enabled="{false}"/>
        </ComponentSection>
        -->

        <ComponentSection heading="TextBox">
            <HStack gap="2rem">
                <Subsection>
                    <TextBox placeholder="Field with placeholder"/>
                    <TextBox value="Value set"/>
                    <TextBox value="Disabled" enabled="{false}"/>
                    <TextBox value="Warning" validationStatus="warning"/>
                    <TextBox value="Error" validationStatus="error"/>
                    <TextBox value="Valid" validationStatus="valid"/>
                </Subsection>

                <Subsection>
                    <TextBox value="start icon set" startIcon="trash"/>
                    <TextBox value="end icon set" endIcon="trash"/>
                    <TextBox value="start text set" startText="Start Text"/>
                    <TextBox value="end text set" endText="End Text"/>
                    <TextBox value="all adornments set" startIcon="trash" startText="Start Text" endText="End Text"
                             endIcon="trash"/>
                    <TextBox value="all adornments set (error)" startIcon="trash" startText="Start Text"
                             endText="End Text" endIcon="trash" validationStatus="error"/>
                </Subsection>
            </HStack>
        </ComponentSection>

        <ComponentSection heading="NumberBox">
            <HStack gap="2rem">
                <Subsection>
                    <NumberBox placeholder="Field with placeholder"/>
                    <NumberBox placeholder="No spinbox" hasSpinBox="{false}"/>
                    <NumberBox value="{123}"/>
                    <NumberBox placeholder="Disabled" enabled="{false}"/>
                    <NumberBox placeholder="Warning" validationStatus="warning"/>
                    <NumberBox placeholder="Error" validationStatus="error"/>
                    <NumberBox placeholder="Valid" validationStatus="valid"/>
                </Subsection>

                <Subsection>
                    <NumberBox placeholder="start icon set" startIcon="trash"/>
                    <NumberBox placeholder="end icon set" endIcon="trash"/>
                    <NumberBox placeholder="start text set" startText="Start Text"/>
                    <NumberBox placeholder="end text set" endText="End Text"/>
                    <NumberBox placeholder="all adornments set"
                               startIcon="trash" startText="Start Text" endText="End Text" endIcon="trash"/>
                    <NumberBox placeholder="all adornments set + no Spinner" hasSpinBox="{false}"
                               startIcon="trash" startText="Start Text" endText="End Text" endIcon="trash"/>
                </Subsection>
            </HStack>
        </ComponentSection>

        <ComponentSection heading="TextArea">
            <TextArea placeholder="Hello TextArea!" label="text area label" hideWrapper="{false}" resize="both"/>
            <TextArea placeholder="Hello TextArea!" embedded="{true}" resize="vertical"/>
        </ComponentSection>

        <ComponentSection heading="FileInput">
            <HStack gap="2rem">
                <Subsection>
                    <FileInput placeholder="Field with placeholder"/>
                    <FileInput value="Value set"/>
                    <FileInput value="Disabled" enabled="{false}"/>
                    <FileInput value="Warning" validationStatus="warning"/>
                    <FileInput value="Error" validationStatus="error"/>
                    <FileInput value="Valid" validationStatus="valid" acceptsFiletype=".doc"/>
                </Subsection>
                <Subsection>
                    <FileInput placeholder="Field with placeholder" buttonIcon="trash"/>
                    <FileInput value="Value set" buttonIcon="trash" contentPosition="end"/>
                    <FileInput value="Disabled" enabled="{false}" buttonIcon="trash" buttonIconPosition="right"/>
                    <FileInput value="Warning" validationStatus="warning" buttonIcon="trash" buttonIconPosition="right"/>
                    <FileInput value="Error" validationStatus="error" buttonIcon="trash"/>
                    <FileInput value="Valid" validationStatus="valid" buttonIcon="trash"/>
                </Subsection>
            </HStack>
        </ComponentSection>

        <ComponentSection heading="Form">
            <Form id="form"
                  subject="{{ text: 'some value here', integer: 123, number: 123.4, file: '', radio: '0', switcher: true, checkbox: true, select: '1' }}">
                <event name="save">
                    <ApiAction url="/form-test"
                                method="post"
                                body="{subject}"/>
                </event>
                <FlowLayout gap="1rem">
                    <FormItem width="50%" label="TextBox" bindTo="text" required="true"/>
                    <FormItem width="50%" label="NumberBox (integer)" bindTo="integer" type="integer"/>
                    <FormItem width="50%" label="NumberBox" bindTo="number" type="number"/>
                    <FormItem width="50%" label="FileInput" bindTo="file" type="file" buttonLabel="Input Button"/>
                    <FormItem width="50%" label="Select" bindTo="select" type="select">
                        <Option label="First" value="0"/>
                        <Option label="Second" value="1"/>
                        <Option label="Third" value="2"/>
                    </FormItem>
                    <FormItem label="RadioGroup" bindTo="radio" type="radioGroup">
                        <FlowLayout>
                            <RadioGroupOption label="First" value="0" width="25%"/>
                            <RadioGroupOption label="Second" value="1" width="25%"/>
                            <RadioGroupOption label="Third" value="2" width="25%"/>
                            <RadioGroupOption label="Fourth" value="3" width="25%"/>
                        </FlowLayout>
                    </FormItem>
                    <FormItem label="Switch" bindTo="switcher" type="switch"/>
                    <FormItem label="Checkbox" bindTo="checkbox" type="checkbox"/>
                </FlowLayout>
            </Form>
        </ComponentSection>

        <ComponentSection heading="Badge">
            <HStack gap="2rem">
                <Badge value="badge"/>
                <Badge value="badge" colorMap="{{ badge: 'red' }}"/>
                <Badge value="pill variant" variant="pill"/>
            </HStack>
        </ComponentSection>

        <ComponentSection heading="Heading">
            <HStack gap="2rem">
                <Subsection heading="Levels">
                    <Heading level="h1">Heading lvl 1</Heading>
                    <Heading level="h2">Heading lvl 2</Heading>
                    <Heading level="h3">Heading lvl 3</Heading>
                    <Heading level="h4">Heading lvl 4</Heading>
                    <Heading level="h5">Heading lvl 5</Heading>
                    <Heading level="h6">Heading lvl 6</Heading>
                </Subsection>

                <Subsection heading="Ellipses">
                    <Heading level="h1" maxWidth="10rem" maxLines="1">A long long long long heading text</Heading>
                </Subsection>
            </HStack>
        </ComponentSection>
        <ComponentSection heading="Text">
            <Subsection heading="Variants">
                <HStack>
                    <Text width="100">(default)</Text>
                    <Text variant="default">This is an example text</Text>
                </HStack>

                <HStack>
                    <Text width="100">(abbr)</Text>
                    <Text variant="abbr">This is an example text</Text>
                </HStack>

                <HStack>
                    <Text width="100">(cite)</Text>
                    <Text variant="cite">This is an example text</Text>
                </HStack>

                <HStack>
                    <Text width="100">(code)</Text>
                    <Text variant="code">This is an example text</Text>
                </HStack>

                <HStack>
                    <Text width="100">(deleted)</Text>
                    <Text variant="deleted">This is an example text</Text>
                </HStack>

                <HStack>
                    <Text width="100">(inserted)</Text>
                    <Text variant="inserted">This is an example text</Text>
                </HStack>

                <HStack>
                    <Text width="100">(keyboard)</Text>
                    <Text variant="keyboard">This is an example text</Text>
                </HStack>

                <HStack>
                    <Text width="100">(marked)</Text>
                    <Text variant="marked">This is an example text</Text>
                </HStack>

                <HStack>
                    <Text width="100">(sample)</Text>
                    <Text variant="sample">This is an example text</Text>
                </HStack>

                <HStack>
                    <Text width="100">(sup)</Text>
                    <Text>
                        This is an example text
                        <Text variant="sup">(with some additional text)</Text>
                    </Text>
                </HStack>

                <HStack>
                    <Text width="100">(sub)</Text>
                    <Text>
                        This is an example text
                        <Text variant="sub">(with some additional text)</Text>
                    </Text>
                </HStack>

                <HStack>
                    <Text width="100">(var)</Text>
                    <Text variant="var">This is an example text</Text>
                </HStack>

                <HStack>
                    <Text width="100">(mono)</Text>
                    <Text variant="mono">This is an example text</Text>
                </HStack>

                <HStack>
                    <Text width="100">(strong)</Text>
                    <Text variant="strong">This is an example text</Text>
                </HStack>

                <HStack>
                    <Text width="100">(em)</Text>
                    <Text variant="em">This is an example text</Text>
                </HStack>

                <HStack>
                    <Text width="100">(title)</Text>
                    <Text variant="title">This is an example text</Text>
                </HStack>

                <HStack>
                    <Text width="100">(subtitle)</Text>
                    <Text variant="subtitle">This is an example text</Text>
                </HStack>

                <HStack>
                    <Text width="100">(small)</Text>
                    <Text variant="small">This is an example text</Text>
                </HStack>

                <HStack>
                    <Text width="100">(caption)</Text>
                    <Text variant="caption">This is an example text</Text>
                </HStack>

                <HStack>
                    <Text width="100">(placeholder)</Text>
                    <Text variant="placeholder">This is an example text</Text>
                </HStack>
            </Subsection>

            <HStack gap="2rem">
                <Subsection heading="Ellipses">
                    <Text maxWidth="10rem" maxLines="1">A long long long long text</Text>
                </Subsection>
                <Subsection heading="Inlining">
                    <Text>
                        This text is default
                        <Text variant="mono">while this one should be mono</Text>
                        , and this is default again.
                        <Text variant="subtitle">
                            This is a subtitle
                            <Text>with an embedded default Text</Text>
                            <Text variant="deleted">and a deleted (strikethrough) section</Text>
                            , and coming round back to a subtitle again.
                        </Text>
                    </Text>

                    <Text>
                        This text is default
                        <Text variant="deleted">while this one should be deleted</Text>
                        , and this is default again.
                    </Text>
                </Subsection>
            </HStack>
        </ComponentSection>

        <ComponentSection heading="Markdown">
            <Markdown>
                <![CDATA[
# Who's that then?

Well, she turned me into a newt. Burn her! We want a shrubbery!! Well, I got better. Listen. Strange women lying in ponds distributing swords is no basis for a system of government. Supreme executive power derives from a mandate from the masses, not from some farcical aquatic ceremony.

Listen. __Strange women lying in ponds distributing swords is no basis for a system of government.__ *Supreme executive power derives from a mandate from the masses, not from some farcical aquatic ceremony.* The swallow may fly south with the sun, and the house martin or the plover may seek warmer climes in winter, yet these are not strangers to our land.

## Well, Mercia's a temperate zone!

You don't frighten us, English pig-dogs! Go and boil your bottoms, sons of a silly person! I blow my nose at you, so-called Ah-thoor Keeng, you and all your silly English K-n-n-n-n-n-n-n-niggits! A newt?

1. Listen. Strange women lying in ponds distributing swords is no basis for a system of government. Supreme executive power derives from a mandate from the masses, not from some farcical aquatic ceremony.
2. I don't want to talk to you no more, you empty-headed animal food trough water! I fart in your general direction! Your mother was a hamster and your father smelt of elderberries! Now leave before I am forced to taunt you a second time!
3. We found them.

### What do you mean?

Oh! Come and see the violence inherent in the system! Help, help, I'm being repressed! The Lady of the Lake, her arm clad in the purest shimmering samite, held aloft Excalibur from the bosom of the water, signifying by divine providence that I, Arthur, was to carry Excalibur. That is why I am your king.

* The Knights Who Say Ni demand a sacrifice!
* Be quiet!
* Bloody Peasant!

Well, I got better. Camelot! A newt? We want a shrubbery!! The Lady of the Lake, her arm clad in the purest shimmering samite, held aloft Excalibur from the bosom of the water, signifying by divine providence that I, Arthur, was to carry Excalibur. That is why I am your king.

Shut up! …Are you suggesting that coconuts migrate? I'm not a witch. Well, we did do the nose.

Well, how'd you become king, then? Shut up! Ni! Ni! Ni! Ni! Well, Mercia's a temperate zone! I don't want to talk to you no more, you empty-headed animal food trough water! I fart in your general direction! Your mother was a hamster and your father smelt of elderberries! Now leave before I am forced to taunt you a second time!

```scss
$extra-colors: (
  "blue": $blue,
  "azure": $azure,
  "indigo": $indigo,
  "purple": $purple,
  "pink": $pink,
  "red": $red,
  "orange": $orange,
  "yellow": $yellow,
  "lime": $lime,
  "green": $green,
) !default;
```

You can't expect to wield supreme power just 'cause some watery tart threw a sword at you! You don't frighten us, English pig-dogs! Go and boil your bottoms, sons of a silly person! I blow my nose at you, so-called Ah-thoor Keeng, you and all your silly English K-n-n-n-n-n-n-n-niggits!

What do you mean? Listen. Strange women lying in ponds distributing swords is no basis for a system of government. Supreme executive power derives from a mandate from the masses, not from some farcical aquatic ceremony.

---

## Emphasis

**This is bold text**

__This is bold text__

*This is italic text*

_This is italic text_

~~Strikethrough~~ (detection is not supported yet, but we have a Text variant for it, not found in regular markdown, only Github Flavored Markdown)

## Blockquotes

> Blockquotes can also be nested...
>> ...by using additional greater-than signs right next to each other...
> > > ...or with spaces between arrows.

## Lists

Unordered

+ Create a list by starting a line with `+`, `-`, or `*`
+ Sub-lists are made by indenting 2 spaces:
  - Marker character change forces new list start:
  * Ac tristique libero volutpat at
    + Facilisis in pretium nisl aliquet
    - Nulla volutpat aliquam velit
+ Very easy!

Ordered

1. Lorem ipsum dolor sit amet
2. Consectetur adipiscing elit
3. Integer molestie lorem at massa

## Code

Inline `code`

Block code "fences"

```
Sample text here...
```

Syntax highlighting

```js
var foo = function (bar) {
  return bar++;
};

console.log(foo(5));
```
                ]]>
            </Markdown>
        </ComponentSection>

        <ComponentSection heading="Link">
            <HStack gap="2rem">
                <Link label="Link"/>
                <Link label="Link" active="{true}"/>
                <Link label="Link" icon="trash"/>
                <Link label="Link" icon="trash" active="{true}"/>
                <Link label="Link" disabled="{true}"/>
                <Link label="Link" icon="trash" disabled="{true}"/>
            </HStack>
        </ComponentSection>

        <ComponentSection heading="NavLink">
            <HStack gap="2rem">
                <Subsection heading="Horizontal">
                    <NavLink label="navlink/horizontal" vertical="{false}"/>
                    <NavLink label="navlink/horizontal/active" vertical="{false}" active="{true}"/>
                    <NavLink label="navlink/horizontal/disabled" vertical="{false}" enabled="{false}"/>
                    <NavLink label="navlink/horizontal icon" icon="trash" vertical="{false}"/>
                    <NavLink label="navlink/horizontal/active icon" icon="trash" vertical="{false}" active="{true}"/>
                </Subsection>
                <Subsection heading="Vertical">
                    <NavLink label="navlink/vertical" vertical="{true}"/>
                    <NavLink label="navlink/vertical/active" vertical="{true}" active="{true}"/>
                    <NavLink label="navlink/vertical/disabled" vertical="{true}" enabled="{false}"/>
                    <NavLink label="navlink/vertical icon" icon="trash" vertical="{true}"/>
                    <NavLink label="navlink/vertical/active icon" icon="trash" vertical="{true}" active="{true}"/>
                </Subsection>
            </HStack>
        </ComponentSection>

        <ComponentSection heading="NavGroup">
            <NavGroup label="NavGroup Dropdown">
                <NavLink label="link1" to="/"/>
                <NavLink label="link2" to="/link2"/>
                <NavLink label="link3" to="/link3"/>
            </NavGroup>
        </ComponentSection>

        <ComponentSection heading="Avatar">
            <H3 value="Sizes"/>
            <HStack gap="1rem" verticalAlignment="end">
                <Avatar name="Test" size="xs"/>
                <Avatar name="Test" size="sm"/>
                <Avatar name="Test" size="md"/>
                <Avatar name="Test" size="lg"/>
            </HStack>

            <H3 value="Sizes with First & Last Names"/>
            <HStack gap="1rem" verticalAlignment="end">
                <Avatar name="Two Names" size="xs"/>
                <Avatar name="Two Names" size="sm"/>
                <Avatar name="Two Names" size="md"/>
                <Avatar name="Two Names" size="lg"/>
            </HStack>

            <H3 value="Sizes with URLs"/>
            <HStack gap="1rem" verticalAlignment="end">
                <Avatar url="https://i.pravatar.cc/100" size="xs"/>
                <Avatar url="https://i.pravatar.cc/200" size="sm"/>
                <Avatar url="https://i.pravatar.cc/300" size="md"/>
                <Avatar url="https://i.pravatar.cc/400" size="lg"/>
            </HStack>
        </ComponentSection>

        <ComponentSection heading="Image">
            <Image src="https://i.pravatar.cc/100" width="100px"/>
        </ComponentSection>

        <ComponentSection heading="ProgressBar">
            <Subsection>
                <ProgressBar value="0"/>
                <ProgressBar value="0.2"/>
                <ProgressBar value="0.4"/>
                <ProgressBar value="0.6"/>
                <ProgressBar value="0.8"/>
                <ProgressBar value="1"/>
            </Subsection>
        </ComponentSection>

        <ComponentSection heading="Spinner">
            <Spinner/>
        </ComponentSection>

        <ComponentSection heading="ContentSeparator">
            <ContentSeparator orientation="horizontal"/>
            <ContentSeparator orientation="vertical" height="42px"/>
        </ComponentSection>

        <ComponentSection heading="Splitter">
            <HStack gap="2rem">
                <Subsection>
                    <Splitter>
                        <Stack backgroundColor="gray" minWidth="30px" minHeight="240px"></Stack>
                        <Stack backgroundColor="lightgray" minWidth="30px" minHeight="240px"></Stack>
                    </Splitter>
                </Subsection>
                <Subsection>
                    <Splitter horizontal="{true}">
                        <Stack backgroundColor="gray" minWidth="30px" minHeight="120px"></Stack>
                        <Stack backgroundColor="lightgray" minWidth="30px" minHeight="120px"></Stack>
                    </Splitter>
                </Subsection>
            </HStack>
        </ComponentSection>

        <ComponentSection heading="Table">
            <SelectionStore id="id">
                <Table width="100%" isPaginated="{true}" rowsSelectable="{true}">
                    <prop name="items">
                        <Datasource url="https://api.spacexdata.com/v3/rockets"/>
                    </prop>
                    <TableColumnDef header="Image" size="140px">
                        <Image height="100px" fit="cover" src="{$item.flickr_images[0]}"/>
                    </TableColumnDef>
                    <TableColumnDef canSort="true" bindTo="country"/>
                    <TableColumnDef canSort="true" bindTo="company"/>
                </Table>
            </SelectionStore>
        </ComponentSection>

        <ComponentSection heading="List">
            <List minWidth="200px">
                <prop name="items">
                    <item value="item1"/>
                    <item value="item2"/>
                    <item value="item3"/>
                    <item value="item4"/>
                </prop>
                <prop name="itemTemplate">
                    <HStack verticalAlignment="center">
                        <NavLink label="{$item}"/>
                        <Button variant="ghost" icon="dotmenu"/>
                    </HStack>
                </prop>
            </List>
        </ComponentSection>

        <ComponentSection heading="Footer">
            <Footer>
                <Text value="Footer test"/>
            </Footer>
        </ComponentSection>

        <ComponentSection heading="ModalDialog">
            <var name="showBasicModal" value="{false}"/>
            <var name="showFullWidthModal" value="{false}"/>
            <var name="showFullScreenModal" value="{false}"/>

            <HStack gap="1rem">
                <Button label="Basic ModalDialog" onClick="showBasicModal = true"/>
                <Button label="Full Width ModalDialog" onClick="showFullWidthModal = true"/>
                <Button label="Full Screen ModalDialog" onClick="showFullScreenModal = true"/>
            </HStack>

            <ModalDialog when="{showBasicModal}" title="Basic ModalDialog Component" onClose="showBasicModal = false"/>
            <ModalDialog when="{showFullWidthModal}" title="Full Width ModalDialog Component" width="80%"
                   onClose="showFullWidthModal = false"/>
            <ModalDialog when="{showFullScreenModal}" title="Full Screen ModalDialog Component" fullScreen="{true}"
                   onClose="showFullScreenModal = false"/>
        </ComponentSection>

        <ComponentSection heading="DropdownMenu">
            <Subsection heading="Basic DropdownMenu with trigger template">
                <HStack gap="2rem">
                    <DropdownMenu label="DropdownMenu">
                        <prop name="triggerTemplate">
                            <Button label="Basic dropdown menu" icon="chevrondown" iconPosition="right"/>
                        </prop>
                        <MenuItem>Item 1</MenuItem>
                        <MenuItem>Item 2</MenuItem>
                        <MenuItem>Item 3</MenuItem>
                    </DropdownMenu>
                </HStack>
            </Subsection>
            <Subsection heading="With Submenu">
                <HStack gap="2rem">
                    <DropdownMenu label="DropdownMenu with Submenu">
                        <MenuItem>
                            <event name="click" value="console.log('demo')"/>
                            Item 1
                        </MenuItem>
                        <MenuItem>Item 2</MenuItem>
                        <SubMenuItem label="Submenu">
                            <MenuItem>Subitem 1</MenuItem>
                            <MenuItem>Subitem 2</MenuItem>
                            <MenuItem>Subitem 3</MenuItem>
                            <SubMenuItem label="Submenu1">
                                <MenuItem>Subitem 1</MenuItem>
                                <MenuItem>Subitem 2</MenuItem>
                                <MenuItem>Subitem 3</MenuItem>
                            </SubMenuItem>
                        </SubMenuItem>
                    </DropdownMenu>
                </HStack>
            </Subsection>
        </ComponentSection>

        <ComponentSection heading="FileUploadDropZone">
            <Text value="Pull a file onto the area below to see styles"/>
            <FileUploadDropZone id="fileUpload" height="100px" width="100%"/>
            <FileUploadDropZone id="fileUpload2" height="100px" width="100%" text="Here!!!"/>
        </ComponentSection>

        <ComponentSection heading="NoResult">
            <NoResult/>
            <NoResult label="No data retrieved"/>
            <NoResult label="No data, hidden icon" hideIcon="{true}"/>
            <NoResult icon="trash" fontSize="2em"/>
        </ComponentSection>
    </Card>
</App>
