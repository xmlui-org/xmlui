<Component name="Code">

<H1>XMLUI Code</H1>

<Markdown><![CDATA[
With XMLUI you can go a long way without coding anything more than small JavaScript snippets like those we've seen in the [Markup](/markup) chapter.

![js snippets](/resources/js-snippets.png)

So far, the most elaborate code we've seen was this function, used in [Components](/components) chapter to extract data from a complex API response.

```js
window.transformStops = function(stops) {
  return stops.map(function(stop) {
  // Helper to extract a value from additionalProperties by key
    function getProp(key) {
      if (!stop.additionalProperties) return '';
      var propObj = stop.additionalProperties.find(function(p) { return p.key === key; });
      return propObj ? propObj.value : '';
    }
    return {
      name: stop.commonName,
      zone: getProp('Zone'),
      wifi: getProp('WiFi'),
      toilets: getProp('Toilets'),
      // A comma-separated list of line names that serve this stop
      lines: stop.lines
        ? stop.lines.map(function(line) { return line.name; }).join(', ')
        : ''
    };
  });
}
```

Here's how it works.

- The `transformStops` function receives a `stops` argument which is an array of JavaScript objects created by a `DataSource`. Each is a complex object representing a tube stop.
- `map` is a method on an array object like `stops`. It takes an anonymous function as an argument, runs it for each item in the array, and returns a new array with each item transformed by a call to the function.
- `function(stop) { ... }` is the anonymous function passed to `map`. It defines a nested helper function, `getProp`, to extract property values.
- `getProp` calls `find`, another method on an array object. In this case the array is `stop.additionalProperties`. Like `map` it receives an anonymous function (`function(p)`) that receives an `additionalProperties` object. It  returns true if the name passed to `getProp` matches the value of `p.key`.

It helps to see the structure of a single object in the `stops` array.


```
  "commonName": "Baker Street Underground Station",
    "placeType": "StopPoint",
    "additionalProperties": [
      {
        "$type": "Tfl.Api.Presentation.Entities.AdditionalProperties, Tfl.Api.Presentation.Entities",
        "category": "ServiceInfo",
        "key": "WiFi",
        "sourceSystemKey": "StaticObjects",
        "value": "yes"
      },
      {
        "$type": "Tfl.Api.Presentation.Entities.AdditionalProperties, Tfl.Api.Presentation.Entities",
        "category": "Facility",
        "key": "Car park",
        "sourceSystemKey": "StaticObjects",
        "value": "no"
      },
```

Here's an example of the transformed data passed to the `Table`.

```
{
  "value": [
    {
      "name": "Bank Underground Station",
      "zone": "1",
      "wifi": "yes",
      "toilets": "yes",
      "lines": "Central, Northern, Waterloo & City"
    },
    {
      "name": "Waterloo Underground Station",
      "zone": "1",
      "wifi": "yes",
      "toilets": "no",
      "lines": "Bakerloo, Jubilee, Northern, Waterloo & City"
    }
  ]
}
```

We defined the function in XMLUI's `index.html` like so:

```
<script>
window.transformStops = function(stops) {
  ...
}
</script>
```
]]></Markdown>




<Markdown><![CDATA[
_
]]></Markdown>


<Markdown><![CDATA[
_
]]></Markdown>


</Component>