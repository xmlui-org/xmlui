<Component name="UserDefinedComponents">

  <HStack>
    <VStack width="*">

      <H1>User-defined components</H1>

      <Markdown><![CDATA[

Here's a simple component to package a name/value pair.

```xmlui
<Component name="NameValue">
  <Card width="20%">
    <Text>Name: { $props.name} </Text>
    <Text>Value: { $props.value} </Text>
  </Card>
</Component>
```

It's saved as `components/NameValue.xmlui`. Let's use it!

```xmlui
<App>
  <NameValue name="Mary" value="123" />
</App>
```

]]></Markdown>

      <NameValue name="Mary" value="123" />

      <Markdown><![CDATA[


The component's name must start with an uppercase letter followed by letters, digits, the underscore (`_`), or the dollar sign (`$`) character. Components must be placed into separate files in the `components` folder within the app's root folder. The component's name must match its filename.

You can also define default values for properties.

```xmlui
<Component name="NameValue">
  <Card width="20%">
    <Text>Name: { $props.name ?? '[no name]' } </Text>
    <Text>Value: { $props.value ?? '[no value]' } </Text>
  </Card>
</Component>
```
]]></Markdown>

      <H2>Events</H2>

      <Markdown><![CDATA[

This `<IncButton>` component increments its value for every click, and notifies its environment by firing an event. The event's handler receives the current counter as an event parameter.

```xmlui
<Component name="IncButton">
  <variable name="count" value="{0}" />
  <Button
    label="Click to increment: {count}"
    onClick="count++; emitEvent('incremented', count)"
  />
</Component>
```

This app uses the event to append the number of clicks to a text. The handler of the `incremented` event (`onIncremented`) declares an function that receives the event value `clickCount`.

```xmlui
<App>
  <Card width="30%">
    <variable name="text" value=""/>
    <IncButton onIncremented="(clickCount) => text += ' ' + clickCount" />
    <Text value="{text}" />
  </Card>
</App>
```

]]></Markdown>

      <Card width="30%">
        <variable name="text" value=""/>
        <IncButton onIncremented="(clickCount) => text += ' ' + clickCount" />
        <Text value="{text}" />
      </Card>

<!--
      <H2>Methods</H2>

<Markdown><![CDATA[
This version exports a method, `setValue`, to set the button's counter value from outside the component.

```xmlui
<Component name="IncButton2">
  <variable name="count" value="{0}" />
  <Button
    label="Click to increment: {count}"
    method.setValue="(clickCount) => count = clickCount"
    onClick="count++;"
  />
</Component>

<Component name="IncButton2">
  <variable name="count" value="{0}" />
  <Button
    label="Click to increment"
    method.setValue="(clickCount) => count = clickCount"
    onClick="count++;"
  />
</Component>
```

]]></Markdown>

  <HStack>
    <IncButton2 id="IncButton2" />
    <Button
      label="Set count to 123!"
      onClick="IncButton2.setValue(123)" />
  </HStack>

      <H2>Layout</H2>

Let's create a `Boxes` component with this markup.

<Markdown><![CDATA[

```xmlui
<Component name="Boxes">
  <Card width="30%">
    <Stack width="100px" height="36px" backgroundColor="purple" />
    <Stack width="50px" height="36px" backgroundColor="orange" />
  </Card>
</Component>
```

]]></Markdown>

    <Boxes />

-->

    </VStack>

    <TableOfContents width="$space-64" />

  </HStack>
</Component>