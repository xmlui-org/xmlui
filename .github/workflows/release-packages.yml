name: Release Packages

on:
  workflow_dispatch:
  pull_request:
    types:
      - closed
    branches:
      - dotneteer/exp-with-release

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  publish_and_github_release:
    name: Publish Stable and Create GitHub Release
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true &&
      (startsWith(github.event.pull_request.title, 'Version Packages for Stable Release') || contains(github.event.pull_request.labels.*.name, 'changeset-release')))
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      NODE_OPTIONS: "--max-old-space-size=8192"
    # needs: [create_version_pr] # This is implied by the trigger conditions
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci --prefer-offline
      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
      - name: Store Playwright's Version
        run: |
          PLAYWRIGHT_VERSION=$(npm ls @playwright/test | grep @playwright | sed 's/.*@//' | sort | head -n 1)
          echo "Playwright's Version: $PLAYWRIGHT_VERSION"
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV
      - name: Cache Playwright Browsers for Playwright's Version
        id: cache-playwright-browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ env.PLAYWRIGHT_VERSION }}
      - name: Install Playwright Browsers
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Create Version PR or Publish to NPM and Create GitHub Releases
        id: changesets_publish
        uses: changesets/action@v1
        with:
          publish: npm run publish-packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{secrets.PUBLISH_NPM_TOKEN}}
      - name: Output Published Packages Info
        if: steps.changesets_publish.outputs.published == 'true'
        run: |
          echo "Packages published: ${{ steps.changesets_publish.outputs.publishedPackages }}"

      - name: Prepare standalone js file
        if: steps.changesets_publish.outputs.published == 'true' && contains(fromJSON(steps.changesets_publish.outputs.publishedPackages).*.name, 'xmlui')
        run: |
          XMLUI_VERSION=$(jq -r .version xmlui/package.json)
          STANDALONE_FILENAME="xmlui-${XMLUI_VERSION}.js"
          cp xmlui/dist/standalone/xmlui-standalone.umd.js $STANDALONE_FILENAME
          echo "XMLUI_VERSION=$XMLUI_VERSION" >> $GITHUB_ENV
          echo "STANDALONE_FILENAME=$STANDALONE_FILENAME" >> $GITHUB_ENV

          echo "prepared xmlui-standalone.umd.js for release with filename: $STANDALONE_FILENAME"
      - name: Upload standalone js file
        if: env.STANDALONE_FILENAME != ''
        uses: softprops/action-gh-release@v1
        with:
          files: "${{ env.STANDALONE_FILENAME }}"
          tag_name: xmlui@${{ env.XMLUI_VERSION }}
          fail_on_unmatched_files: true

      - name: Get VSCode Extension release info
        id: xmlui_vscode_info
        if: steps.changesets_publish.outputs.published
        run: |
          XMLUI_VSCODE_VERSION=$(jq -r .version tools/vscode/package.json)
          XMLUI_VSCODE_TAG="xmlui-vscode@${XMLUI_VSCODE_VERSION}"
          echo "tag=$XMLUI_VSCODE_TAG" >> $GITHUB_OUTPUT

          XMLUI_VSCODE_TAG_EXISTING=$(git tag --list $XMLUI_VSCODE_TAG)
          TAG_EXISTS="false"
          if [ ! -z "$XMLUI_VSCODE_TAG_EXISTING" ]; then
            TAG_EXISTS="true"
          fi
          echo "tagExists=$TAG_EXISTS" >> $GITHUB_OUTPUT

          echo "current VSCode extension version: $XMLUI_VSCODE_VERSION"
          echo "release tag for VSCode extension: $XMLUI_VSCODE_TAG"
          echo "tag already exists: $TAG_EXISTS"
      - name: Build VSCode extension
        if: success() && steps.xmlui_vscode_info.outputs.tagExists == 'false'
        run: npm run build-vscode-extension
      - name: Upload VSIX to Release
        if: success() && steps.xmlui_vscode_info.outputs.tagExists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          files: "tools/vscode/*.vsix"
          tag_name: ${{ steps.xmlui_vscode_info.outputs.tag }}
          fail_on_unmatched_files: true

      - name: Update releases.json
        if: steps.changesets_publish.outputs.published == 'true'
        run: |
          # Extract changes from PR description
          CHANGES=""
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGES=$(echo '${{ github.event.pull_request.body }}' | grep -v "This PR was created by the \[changesets release\]" | grep -v "^$" | tr '\n' ' ' | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')
          fi

          # Get file size of standalone JS if it exists
          FILE_SIZE=""
          if [ ! -z "$STANDALONE_FILENAME" ]; then
            FILE_SIZE=$(ls -l "$STANDALONE_FILENAME" | awk '{print $5}')
          fi

          # Get current timestamp
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Read the current releases.json file
          RELEASES_JSON=$(cat releases.json)
          
          # Initialize new releases array
          NEW_RELEASES=[]
          
          # Add the new release info for the main xmlui package if it was published
          if [ ! -z "$XMLUI_VERSION" ]; then
            NEW_RELEASE="{\"name\":\"xmlui@$XMLUI_VERSION\",\"version\":\"$XMLUI_VERSION\",\"timestamp\":\"$TIMESTAMP\",\"changes\":\"$CHANGES\",\"fileSize\":\"$FILE_SIZE\"}"
            NEW_RELEASES=$(echo $NEW_RELEASES | jq ". += [$NEW_RELEASE]")
          fi
          
          # Add release info for all other published packages
          if [ "${{ steps.changesets_publish.outputs.published }}" == "true" ]; then
            PUBLISHED_PACKAGES='${{ steps.changesets_publish.outputs.publishedPackages }}'
            
            # Loop through each published package
            for pkg in $(echo $PUBLISHED_PACKAGES | jq -r '.[] | @base64'); do
              PKG_INFO=$(echo $pkg | base64 --decode)
              PKG_NAME=$(echo $PKG_INFO | jq -r '.name')
              PKG_VERSION=$(echo $PKG_INFO | jq -r '.version')
              
              # Skip if it's the main xmlui package (already added above)
              if [ "$PKG_NAME" != "xmlui" ]; then
                NEW_RELEASE="{\"name\":\"$PKG_NAME@$PKG_VERSION\",\"version\":\"$PKG_VERSION\",\"timestamp\":\"$TIMESTAMP\",\"changes\":\"$CHANGES\"}"
                NEW_RELEASES=$(echo $NEW_RELEASES | jq ". += [$NEW_RELEASE]")
              fi
            done
          fi
          
          # Add VSCode extension info if it was published
          if [ "${{ steps.xmlui_vscode_info.outputs.tagExists }}" == "false" ]; then
            VSCODE_VERSION="${{ steps.xmlui_vscode_info.outputs.tag }}"
            if [ ! -z "$VSCODE_VERSION" ]; then
              VSCODE_VERSION_NUMBER=$(echo $VSCODE_VERSION | sed 's/xmlui-vscode@//')
              NEW_RELEASE="{\"name\":\"$VSCODE_VERSION\",\"version\":\"$VSCODE_VERSION_NUMBER\",\"timestamp\":\"$TIMESTAMP\",\"changes\":\"$CHANGES\"}"
              NEW_RELEASES=$(echo $NEW_RELEASES | jq ". += [$NEW_RELEASE]")
            fi
          fi
          
          # Combine existing releases with new ones
          COMBINED_RELEASES=$(echo $RELEASES_JSON | jq ".releases += $NEW_RELEASES")
          
          # Write back to releases.json
          echo $COMBINED_RELEASES | jq . > releases.json
          
          # Print the updated file for logging
          echo "Updated releases.json with new release information:"
          cat releases.json
          
      - name: Commit and push releases.json
        if: steps.changesets_publish.outputs.published == 'true'
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add releases.json
          git commit -m "chore: update releases.json with latest release info [skip ci]"
          git push
