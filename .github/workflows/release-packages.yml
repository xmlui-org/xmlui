name: Release Packages

on:
  workflow_dispatch:
  pull_request:
    types:
      - closed
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  publish_and_github_release:
    name: Publish Stable and Create GitHub Release
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true &&
      (startsWith(github.event.pull_request.title, 'Version Packages for Stable Release') || contains(github.event.pull_request.labels.*.name, 'changeset-release')))
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      NODE_OPTIONS: "--max-old-space-size=8192"
    # needs: [create_version_pr] # This is implied by the trigger conditions
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci --prefer-offline
      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
      - name: Store Playwright's Version
        run: |
          PLAYWRIGHT_VERSION=$(npm ls @playwright/test | grep @playwright | sed 's/.*@//' | sort | head -n 1)
          echo "Playwright's Version: $PLAYWRIGHT_VERSION"
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV
      - name: Cache Playwright Browsers for Playwright's Version
        id: cache-playwright-browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ env.PLAYWRIGHT_VERSION }}
      - name: Install Playwright Browsers
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Get VSCode Extension release info
        id: xmlui_vscode_release_info
        run: |
          touch tmp.json
          npx changeset status --since=origin/main --output tmp.json
          cat tmp.json | node CI/scripts/get-vscode-release-info.mjs >> $GITHUB_OUTPUT
      - name: Build VSCode extension
        if: success() && steps.xmlui_vscode_release_info.outputs.version
        run: npm run build-vscode-extension
      - name: Upload VSIX to Release
        if: success() && steps.xmlui_vscode_release_info.outputs.version
        uses: softprops/action-gh-release@v1
        with:
          files: "tools/vscode/*.vsix"
          tag_name: xmlui-vscode@${{ steps.xmlui_vscode_release_info.outputs.version }}
          fail_on_unmatched_files: true
          body: ${{ steps.xmlui_vscode_release_info.outputs.releaseNotes }}

      - name: Create Version PR or Publish to NPM and Create GitHub Releases
        id: changesets_publish
        uses: changesets/action@v1
        with:
          version: npm run changeset:version
          commit: "chore: version packages for stable release"
          title: "Version Packages for Stable Release"
          publish: npm run publish-packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{secrets.PUBLISH_NPM_TOKEN}}

      - name: Output Published Packages Info
        if: steps.changesets_publish.outputs.published == 'true'
        run: |
          echo "Packages published: ${{ steps.changesets_publish.outputs.publishedPackages }}"
          echo "GitHub Releases have been created."
