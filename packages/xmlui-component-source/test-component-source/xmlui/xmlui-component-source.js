(function(r,u){typeof exports=="object"&&typeof module<"u"?module.exports=u(require("react/jsx-runtime"),require("xmlui"),require("react")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","xmlui","react"],u):(r=typeof globalThis<"u"?globalThis:r||self,r["xmlui-component-source"]=u(r.jsxRuntime,r.xmlui,r.React))})(this,function(r,u,h){"use strict";const R={autoLoad:!0};function L({autoLoad:e=R.autoLoad,onSourceLoaded:l,onError:i,updateState:a,componentName:m,uid:s}){const[A,c]=h.useState(!1),[w,d]=h.useState(""),g=h.useRef(null),x=async()=>{var f,C;console.log("ComponentSource fetchSourceCode - trying to find current context source"),c(!0),d("");try{const o=g.current;if(!o)throw new Error("Container element not found");console.log("ComponentSource container element:",o),console.log("ComponentSource container parent:",o.parentElement),console.log("ComponentSource container parent class:",(f=o.parentElement)==null?void 0:f.className),console.log("ComponentSource container parent attributes:",(C=o.parentElement)==null?void 0:C.getAttributeNames());let n=o.parentElement,S=0;for(;n&&S<10;)console.log(`ComponentSource DOM level ${S}:`,n.tagName,n.className),console.log(`ComponentSource DOM level ${S} attributes:`,n.getAttributeNames()),n.getAttributeNames().forEach(E=>{console.log(`  - ${E}:`,n.getAttribute(E))}),n=n.parentElement,S++;console.log("ComponentSource trying different selectors:"),console.log("- [data-xmlui-component]:",document.querySelectorAll("[data-xmlui-component]").length),console.log("- [data-component]:",document.querySelectorAll("[data-component]").length),console.log("- [data-name]:",document.querySelectorAll("[data-name]").length),console.log('- [class*="xmlui"]:',document.querySelectorAll('[class*="xmlui"]').length),console.log('- [class*="component"]:',document.querySelectorAll('[class*="component"]').length),console.log('- [class*="page"]:',document.querySelectorAll('[class*="page"]').length),console.log('- [class*="app"]:',document.querySelectorAll('[class*="app"]').length);const U=o.closest('[class*="xmlui-page"], [class*="page-root"], [class*="page"]'),b=o.closest('[class*="xmlui-component"], [class*="component-root"], [class*="component"]'),M=o.closest('[class*="xmlui-app"], [class*="app-root"], [class*="app"]');console.log("ComponentSource context check:"),console.log("- Page ancestor found:",!!U),console.log("- Component ancestor found:",!!b),console.log("- App ancestor found:",!!M);let t="";if(m?(console.log("ComponentSource using provided component name:",m),t=`components/${m}.xmlui`):(console.log("ComponentSource uid:",s),s&&s.includes("test")?(t="components/Test.xmlui",console.log("ComponentSource using Test component source URL based on uid:",t)):s&&s.includes("home")?(t="components/Home.xmlui",console.log("ComponentSource using Home component source URL based on uid:",t)):s&&s.includes("app")?(t="Main.xmlui",console.log("ComponentSource using App source URL:",t)):(t="Main.xmlui",console.log("ComponentSource using Main.xmlui source URL:",t))),!t)throw new Error("Could not determine source URL for current context");console.log("ComponentSource final source URL:",t);const p=await fetch(t);if(console.log("ComponentSource response status:",p.status),console.log("ComponentSource response URL:",p.url),!p.ok)throw new Error(`HTTP ${p.status}: ${p.statusText}`);const y=await p.text();console.log("ComponentSource fetched content length:",y.length),console.log("ComponentSource fetched content preview:",y.substring(0,100)),a==null||a({value:y,isLoading:!1,error:""}),l==null||l(y)}catch(o){const n=o instanceof Error?o.message:"Failed to load source code";d(n),a==null||a({error:n,isLoading:!1}),i==null||i(n),console.error("Error loading source code:",o)}finally{c(!1)}};return h.useEffect(()=>{e&&x()},[e]),r.jsx("div",{ref:g,style:{display:"none"}})}const q=u.createMetadata({description:"ComponentSource component that fetches and exposes the source code of the current component",status:"experimental",props:{autoLoad:{description:"Whether to automatically load the source code on mount",isRequired:!1,type:"boolean",defaultValue:!0},onSourceLoaded:{description:"Callback function called when source code is loaded",isRequired:!1,type:"function"},onError:{description:"Callback function called when an error occurs",isRequired:!1,type:"function"}}});return{namespace:"XMLUIExtensions",components:[u.createComponentRenderer("ComponentSource",q,({node:e,extractValue:l,updateState:i,appContext:a})=>{var w,d,g,x,f,C;console.log("ComponentSource renderer called with node:",e),console.log("ComponentSource renderer node.parent:",e.parent),console.log("ComponentSource renderer node.parent?.type:",(w=e.parent)==null?void 0:w.type),console.log("ComponentSource renderer node.parent?.name:",(d=e.parent)==null?void 0:d.name);const m=l.asOptionalBoolean((g=e.props)==null?void 0:g.autoLoad,!0),s=l((x=e.props)==null?void 0:x.onSourceLoaded),A=l((f=e.props)==null?void 0:f.onError);let c=null;if(e.parent&&e.parent.type==="Component"&&(c=e.parent.name,console.log("ComponentSource renderer found component name from parent:",c)),!c&&e.parent&&e.parent.type==="Page"){const o=(C=e.parent.props)==null?void 0:C.url;if(o){const n=o.split("/").pop()||o;c=n.charAt(0).toUpperCase()+n.slice(1),console.log("ComponentSource renderer found page name:",c)}}return console.log("ComponentSource renderer final componentName:",c),r.jsx(L,{autoLoad:m,onSourceLoaded:s,onError:A,updateState:i,componentName:c,uid:e.uid})})]}});typeof window.xmlui<"u"&&window.xmlui.standalone.registerExtension(window["xmlui-component-source"].default||window["xmlui-component-source"]);
