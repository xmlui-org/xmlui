@use "@components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$componentName: "MultiCombobox";

// --- CSS properties of a particular Select variant
@mixin variant($variantName) {
  border-radius: createThemeVar("Input:radius-#{$componentName}-#{$variantName}");
  border-color: createThemeVar("Input:color-border-#{$componentName}-#{$variantName}");
  border-width: createThemeVar("Input:thickness-border-#{$componentName}-#{$variantName}");
  border-style: createThemeVar("Input:style-border-#{$componentName}-#{$variantName}");

  font-size: createThemeVar("Input:font-size-#{$componentName}-#{$variantName}");

  background-color: createThemeVar("Input:color-bg-#{$componentName}-#{$variantName}");
  box-shadow: createThemeVar("Input:shadow-#{$componentName}-#{$variantName}");
  color: createThemeVar("Input:color-text-#{$componentName}-#{$variantName}");

  &:hover {
    border-color: createThemeVar("Input:color-border-#{$componentName}-#{$variantName}--hover");
    background-color: createThemeVar("Input:color-bg-#{$componentName}-#{$variantName}--hover");
    box-shadow: createThemeVar("Input:shadow-#{$componentName}-#{$variantName}--hover");
    color: createThemeVar("Input:color-text-#{$componentName}-#{$variantName}--hover");
  }

  &:has(.comboboxInput:focus-visible){
    outline-width: createThemeVar('Input:thickness-outline-#{$componentName}-#{$variantName}--focus');
    outline-color: createThemeVar('Input:color-outline-#{$componentName}-#{$variantName}--focus');
    outline-style: createThemeVar('Input:style-outline-#{$componentName}-#{$variantName}--focus');
    outline-offset: createThemeVar('Input:offset-outline-#{$componentName}-#{$variantName}--focus');
  }

  .placeholder {
    color: createThemeVar("Input:color-placeholder-#{$componentName}-#{$variantName}");
  }
}

$min-height: createThemeVar("Input:min-height-#{$componentName}");

.comboboxContainer {
  display: flex;
  align-items: center;
  width: 100%;
  position: relative;
}

.comboboxToggleButton {
  align-items: center;
  display: flex;
  justify-content: space-between;
  min-height: $min-height;
  outline: 0;
  border-width: 1px;
  border-style: solid;
  width: 100%;
  transition: background-color ease-in .1s;
  overflow: hidden;

  @include variant("default");

  &.error {
    @include variant("error");
  }
  &.warning {
    @include variant("warning");
  }
  &.valid {
    @include variant("success");
  }

  &.disabled {
    cursor: not-allowed;
    background-color: createThemeVar("Input:color-bg-MultiCombobox--disabled");
    color: createThemeVar("Input:color-text-MultiCombobox--disabled");
    border-color: createThemeVar("Input:color-border-MultiCombobox--disabled");

    .indicator, .comboboxInput {
      cursor: not-allowed;
    }
  }

  .comboboxInputContainer {
    display: inline-flex;
    flex: 1 1 auto;
    margin: 2px;
    padding-bottom: 2px;
    padding-top: 2px;

    .comboboxInput {
      font-size: inherit;
      color: inherit;
      outline: none;
      width: 100%;
      background: transparent;
      border: 0;
      outline: 0;
    }
  }

  .indicator {
    align-items: center;
    justify-content: center;
    color: createThemeVar("Input:color-text-indicator-MultiCombobox");
    display: flex;
    height: 32px;
    border-radius: 2px;
    padding-left: 4px;
    padding-right: 4px;
    width: 32px;
    background-color: transparent;
    cursor: pointer;
    border: 0;
    margin: 0;
  }

  .selectedOptions {
    align-items: center;
    display: flex;
    flex-wrap: wrap;
    flex: 1;
    position: relative;
    overflow: hidden;
    padding: 2px 8px;
    gap: t.$space-2;
  }

  .multiValue {
    display: flex;
    min-width: 0;
    border-radius: 2px;
    margin: 2px;
    color: createThemeVar("Input:color-text-value-MultiCombobox");
    background-color: createThemeVar("Input:color-bg-value-MultiCombobox");
  }

  .multiValueLabel {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    border-radius: 2px;
    font-size: 85%;
    padding: 3px;
    padding-left: 6px;
  }

  .multiValueRemove {
    padding-left: 4px;
    padding-right: 4px;
    border-radius: 2px;
    display: flex;
    cursor: pointer;
    align-items: center;

    &.disabled {
        cursor: not-allowed;
    }
  }
}

.multiComboboxMenu {
  z-index: 1;
  padding: 0;
  overflow-y: auto;
  list-style: none;
  transition: height 0.2s ease;
  height: fit-content;
  max-height: 200px;
  box-shadow: createThemeVar("Input:shadow-menu-MultiCombobox");
  background-color: createThemeVar("Input:color-bg-menu-MultiCombobox");
  border-radius: createThemeVar("Input:radius-menu-MultiCombobox");

  &:focus,
  &:focus-visible {
    outline: none;
  }

  .item {
    display: flex;
    padding-top: 0.5em;
    padding-bottom: 0.5em;
    padding-inline: 1em;
    align-items: center;
    user-select: none;

    .empty {
      display: flex;
      gap: 0.5rem;
      width: 100%;
      align-items: center;
      justify-content: center;
    }

    &.selectable {
      user-select: initial;
      cursor: pointer;

      &.itemActive, &[data-highlighted], &:hover:not(.itemDisabled) {
        background-color: createThemeVar("Input:color-bg-item-MultiCombobox--hover");
      }

      &.itemSelected {
        background-color: createThemeVar("Input:color-bg-item-MultiCombobox--active");
      }

      &.itemDisabled {
        cursor: not-allowed;
        color: createThemeVar("Input:color-text-item-MultiCombobox--disabled");
        font-style: italic;
      }
    }
  }
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}




