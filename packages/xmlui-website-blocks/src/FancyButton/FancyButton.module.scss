// FancyButton.module.scss
@use "../../../../xmlui/src/components-core/theming/themes" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

// Define theme variables
$width-FancyButton: createThemeVar("width-FancyButton");
$height-FancyButton: createThemeVar("height-FancyButton");
$fontSize-FancyButton: createThemeVar("fontSize-FancyButton");
$fontWeight-FancyButton: createThemeVar("fontWeight-FancyButton");
$borderStyle-FancyButton: createThemeVar("borderStyle-FancyButton");
$borderWidth-FancyButton: createThemeVar("borderWidth-FancyButton");
$outlineColor-FancyButton--focus: createThemeVar("outlineColor-FancyButton--focus");
$outlineWidth-FancyButton--focus: createThemeVar("outlineWidth-FancyButton--focus");
$outlineStyle-FancyButton--focus: createThemeVar("outlineStyle-FancyButton--focus");
$outlineOffset-FancyButton--focus: createThemeVar("outlineOffset-FancyButton--focus");

// Disabled state variables
$backgroundColor-FancyButton--disabled: createThemeVar("backgroundColor-FancyButton--disabled");
$borderColor-FancyButton--disabled: createThemeVar("borderColor-FancyButton--disabled");
$textColor-FancyButton--disabled: createThemeVar("textColor-FancyButton--disabled");

// Size-specific padding variables
$paddingHorizontal-FancyButton-xs: createThemeVar("paddingHorizontal-FancyButton-xs");
$paddingVertical-FancyButton-xs: createThemeVar("paddingVertical-FancyButton-xs");
$paddingHorizontal-FancyButton-sm: createThemeVar("paddingHorizontal-FancyButton-sm");
$paddingVertical-FancyButton-sm: createThemeVar("paddingVertical-FancyButton-sm");
$paddingHorizontal-FancyButton-md: createThemeVar("paddingHorizontal-FancyButton-md");
$paddingVertical-FancyButton-md: createThemeVar("paddingVertical-FancyButton-md");
$paddingHorizontal-FancyButton-lg: createThemeVar("paddingHorizontal-FancyButton-lg");
$paddingVertical-FancyButton-lg: createThemeVar("paddingVertical-FancyButton-lg");
$paddingHorizontal-FancyButton-xl: createThemeVar("paddingHorizontal-FancyButton-xl");
$paddingVertical-FancyButton-xl: createThemeVar("paddingVertical-FancyButton-xl");

// Rounded variant theme variables
$borderRadius-FancyButton-rounded: createThemeVar("borderRadius-FancyButton-rounded");
$backgroundColor-FancyButton-rounded: createThemeVar("backgroundColor-FancyButton-rounded");
$backgroundColor-FancyButton-rounded--hover: createThemeVar(
  "backgroundColor-FancyButton-rounded--hover"
);
$backgroundColor-FancyButton-rounded--active: createThemeVar(
  "backgroundColor-FancyButton-rounded--active"
);
$textColor-FancyButton-rounded: createThemeVar("textColor-FancyButton-rounded");
$borderColor-FancyButton-rounded: createThemeVar("borderColor-FancyButton-rounded");
$borderColor-FancyButton-rounded--hover: createThemeVar("borderColor-FancyButton-rounded--hover");

// Square variant theme variables
$borderRadius-FancyButton-square: createThemeVar("borderRadius-FancyButton-square");
$backgroundColor-FancyButton-square: createThemeVar("backgroundColor-FancyButton-square");
$backgroundColor-FancyButton-square--hover: createThemeVar(
  "backgroundColor-FancyButton-square--hover"
);
$backgroundColor-FancyButton-square--active: createThemeVar(
  "backgroundColor-FancyButton-square--active"
);
$textColor-FancyButton-square: createThemeVar("textColor-FancyButton-square");
$borderColor-FancyButton-square: createThemeVar("borderColor-FancyButton-square");
$borderColor-FancyButton-square--hover: createThemeVar("borderColor-FancyButton-square--hover");

// --- This part defines the CSS styles
.fancyButton {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
  border: none;
  outline: none;
  font-family: inherit;
  text-decoration: none;
  user-select: none;
  position: relative;

  width: $width-FancyButton;
  height: $height-FancyButton;
  font-size: $fontSize-FancyButton;
  font-weight: $fontWeight-FancyButton;
  border-style: $borderStyle-FancyButton;
  border-width: $borderWidth-FancyButton;

  &:focus-visible {
    outline: $outlineStyle-FancyButton--focus $outlineWidth-FancyButton--focus
      $outlineColor-FancyButton--focus;
    outline-offset: $outlineOffset-FancyButton--focus;
  }

  // Size variations
  &.xs {
    padding: $paddingVertical-FancyButton-xs $paddingHorizontal-FancyButton-xs;
  }

  &.sm {
    padding: $paddingVertical-FancyButton-sm $paddingHorizontal-FancyButton-sm;
  }

  &.md {
    padding: $paddingVertical-FancyButton-md $paddingHorizontal-FancyButton-md;
  }

  &.lg {
    padding: $paddingVertical-FancyButton-lg $paddingHorizontal-FancyButton-lg;
  }

  &.xl {
    padding: $paddingVertical-FancyButton-xl $paddingHorizontal-FancyButton-xl;
  }

  // Rounded variant
  &.rounded {
    border-radius: $borderRadius-FancyButton-rounded;
    background-color: $backgroundColor-FancyButton-rounded;
    color: $textColor-FancyButton-rounded;
    border-color: $borderColor-FancyButton-rounded;

    &:hover:not(.fancyButton--disabled) {
      background-color: $backgroundColor-FancyButton-rounded--hover;
      border-color: $borderColor-FancyButton-rounded--hover;
    }

    &:active:not(.fancyButton--disabled) {
      background-color: $backgroundColor-FancyButton-rounded--active;
    }
  }

  // Square variant
  &.square {
    border-radius: $borderRadius-FancyButton-square;
    background-color: $backgroundColor-FancyButton-square;
    color: $textColor-FancyButton-square;
    border-color: $borderColor-FancyButton-square;

    &:hover:not(.fancyButton--disabled) {
      background-color: $backgroundColor-FancyButton-square--hover;
      border-color: $borderColor-FancyButton-square--hover;
    }

    &:active:not(.fancyButton--disabled) {
      background-color: $backgroundColor-FancyButton-square--active;
    }
  }

  // Disabled state
  &.disabled {
    cursor: not-allowed;
    background-color: $backgroundColor-FancyButton--disabled !important;
    border-color: $borderColor-FancyButton--disabled !important;
    color: $textColor-FancyButton--disabled !important;
  }

  // Icon only styling
  &.iconOnly {
    aspect-ratio: 1;
    padding: 0.5rem;
  }

  // Orientation
  &.orientationVertical {
    flex-direction: column;
  }

  &.orientationHorizontal {
    flex-direction: row;
  }

  // Content position
  &.contentPositionStart {
    justify-content: flex-start;
  }

  &.contentPositionCenter {
    justify-content: center;
  }

  &.contentPositionEnd {
    justify-content: flex-end;
  }

  // Icon position (when both icon and content exist)
  &.iconPositionEnd {
    flex-direction: row-reverse;

    &.orientationVertical {
      flex-direction: column-reverse;
    }
  }

  // Icon and content styling
  &__icon {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }

  &__content {
    display: flex;
    align-items: center;
    justify-content: center;
  }
}

// --- We export the theme variables to add them to the component renderer
:export {
  themeVars: t.json-stringify($themeVars);
}
