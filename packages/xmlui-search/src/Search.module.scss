@use "xmlui/themes.scss" as t;

// --- This code snippet is required to collect the theme variables used in this module
$themeVars: ();
@function createThemeVar($componentVariable) {
  $themeVars: t.appendThemeVar($themeVars, $componentVariable) !global;
  @return t.getThemeVar($themeVars, $componentVariable);
}

$componentContainer: "SearchContainer";
$themeVars: t.composePaddingVars($themeVars, $componentContainer);

$componentListPanel: "SearchPanel";
$themeVars: t.composeBorderVars($themeVars, $componentListPanel);
$themeVars: t.composePaddingVars($themeVars, $componentListPanel);
$backgroundColor-Search: createThemeVar("backgroundColor-#{$componentListPanel}");
$boxShadow-Search: createThemeVar("boxShadow-#{$componentListPanel}");

$componentListItem: "SearchItem";
$borderRadius-SearchItem: createThemeVar("borderRadius-#{$componentListItem}");
$backgroundColor-SearchItem--hover: createThemeVar("backgroundColor-#{$componentListItem}--hover");
$borderColor-SearchItem--focus: createThemeVar("borderColor-#{$componentListItem}--focus");

.listPanel {
  @include t.borderVars($themeVars, $componentListPanel);
  @include t.paddingVars($themeVars, $componentListPanel);
  overflow: hidden;
  width: 580px;
  margin-top: 4px;
  box-shadow: $boxShadow-Search;

  &.inDrawer {
    width: var(--radix-popover-trigger-width);
    z-index: 1;
  }
}

.list {
  background-color: $backgroundColor-Search;
  max-height: 360px;
  overflow-y: auto;
  scrollbar-gutter: stable;
  scrollbar-width: thin;
  padding: 0.75rem;
}

.noResults {
  display: flex;
  justify-content: center;
  align-items: center;
}

.item {
  list-style: none;
  padding-top: 0.4rem;
  padding-bottom: 0.4rem;
  padding-inline: 0.75rem;
  border-radius: $borderRadius-SearchItem;
  border: 2px solid transparent;
  cursor: pointer;
  
  // This style is used to denote keyboard focus
  &.keyboardFocus {
    background-color: $backgroundColor-SearchItem--hover;
    
    // Ensures the underlying link is visible on programmatic hover
    & > a {
      color: var(--xmlui-textColor-primary);
    }
  }

  & > a {
    color: var(--xmlui-textColor-primary);

    &:hover {
      color: inherit;
    }
    &:active {
      color: var(--xmlui-textColor-primary);
    }
  }

  & > a .snippet {
    padding-top: 0.25rem;
    padding-bottom: 0.25rem;
  }

  &.header:has(+ .content):not(:first-child) {
    margin-top: 0.5rem;
  }

  &.content {}
}

:export{
  themeVars: t.json-stringify($themeVars)
}
