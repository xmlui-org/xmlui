const data = {
  "cheat-sheet":"import { Callout } from 'nextra/components'\r\nimport { XMLUI_EMPTY, XMLUI_STARTER } from \"../meta/downloads\";\r\nimport { COMPONENT_APP, COMPONENT_FLOWLAYOUT, COMPONENT_HSTACK, COMPONENT_SPACEFILLER, COMPONENT_SPLITTER, COMPONENT_STACK, COMPONENT_VSTACK, MARKUP, THE_APP_COMPONENT, THE_APP_COMPONENT_LAYOUT_VARIANTS, WORKING_WITH_DATA, WORKING_WITH_DATA_PERSISTING_DATA, XMLUI_EXPRESSIONS_EXPRESSION_SYNTAX } from '../meta/pages';\r\n\r\n# XMLUI Cheat Sheet\r\n\r\n## Properties\r\n\r\nYou can influence components' visual appearance (and behavior) by setting component properties.\r\n\r\n**Set a Simple Component Property**\r\n\r\nComponent properties are represented with attributes in the markup. Set this attribute value with a literal string.\r\n\r\n```xmlui copy /value=\"I'm a text!\"/\r\n<Text value=\"I'm a text!\" />\r\n```\r\n\r\n**Set a component property with an expression**\r\n\r\nYou can use expressions to set up a property value. Expressions are wrapped in curly braces (between `{` and `}` characters).\r\n\r\n```xmlui copy /{6 * 7}/\r\n<!-- Displays: \"Life, universe, and everything: 42\" -->\r\n<Text value=\"Life, universe, and everything: {6 * 7}\" />\r\n```\r\n\r\n**Set a component property with the `<property>` helper tag and nested value**\r\n\r\nThis construct is helpful when you want to set a property value to a component declaration (for example, you define a template with a property).\r\n\r\n```xmlui copy\r\n<Items data=\"{[1, 2, 3]}\">\r\n  <property name=\"itemTemplate\">\r\n    <Text value=\"This item is: {$item}\" />\r\n  </property>\r\n</Items>\r\n```\r\n\r\n**Set component presence and visibility**\r\n\r\nBy setting a component's `when` attribute to `false`, you can omit it from the markup tree (as if the definition were not there).\r\n\r\n```xmlui copy\r\n<Text when=\"false\" value=\"I'm omitted from the markup\" />\r\n```\r\n\r\nNaturally, components omitted from the markup (`when` set to `false`) are not visible.\r\n\r\n**Access exposed component properties**\r\n\r\nYou can assign an identifier to the component with the `id` attribute and use that to access its exposed properties.\r\n\r\n```xmlui copy /id=\"myTextBox\"/ /{myTextBox.value}/\r\n<App>\r\n  <TextBox id=\"myTextBox\" placeholder=\"Type something\" />\r\n  <Text variant=\"title\">You typed: {myTextBox.value}</Text>\r\n</App>\r\n```\r\n\r\nThis way, you can bind components: changing a particular property of one will trigger changing the other.\r\n\r\n**Invoke exposed component methods**\r\n\r\nYou can assign an identifier to the component with the `id` attribute and use that to invoke its exposed methods.\r\n\r\n```xmlui copy /id=\"myTextBox\"/ /{myTextBox.value}/\r\n<App>\r\n  <Checkbox \r\n    id=\"myCheckbox\" \r\n    label=\"Use encrypted channel\"\r\n    initialValue=\"false\" />\r\n  <Button label=\"Turn on encryption\" onClick=\"myCheckbox.setValue(true)\"/>\r\n</App>\r\n```\r\n\r\n## Expressions\r\n\r\nThe expressions in XMLUI use the same syntax and semantics as JavaScript. For details on syntax, see this \r\n<SmartLink href={XMLUI_EXPRESSIONS_EXPRESSION_SYNTAX}>article</SmartLink>.\r\n\r\n**Use an expression in a property value or component text**\r\n\r\nExpressions are wrapped between curly braces; the engine evaluates them and replaces them with their actual value.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Text value=\"{1 + 2 * 3}\" /> <!-- Displays 7 -->\r\n  <Text>{6 * 7}</Text>         <!-- Displays 42 -->\r\n  <Text value=\"{ 3 < 4}\" />    <!-- Displays true -->\r\n</App>\r\n```\r\n\r\n**Use an expression for interpolation**\r\n\r\nYou can use multiple expressions combined with literal string segments in property values or component text.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Text value=\"10 times 10 is {10*10} and not {9 * 10}\" />\r\n</App>\r\n```\r\n\r\n**Use curly braces in values**\r\n\r\nUse `\\{` as an escape for the opening curly brace. You do not need to escape the closing curly brace.\r\n\r\n```xmlui copy\r\n<Text value=\"\\{1 + 2 * 3}\" /> <!-- Displays {1 + 2 * 3} -->\r\n```\r\n\r\n## Variables\r\n\r\nVariable names start with a letter or an underscore (`_`) and continue with these characters or digits.\r\n\r\nVariables are scoped; their name must be unique in the declaring scope. When you declare variables in markup, they are visible within the declaring component (including all direct and indirect children). When you declare them in a code-behind file, their scope is the markup within the corresponding file.\r\n\r\n**Declare a variable with the `var.` prefix**\r\n\r\n```xmlui copy /var.myVar/ /{myVar}/\r\n<App var.myVar=\"Hello, World!\">\r\n  <Text>{myVar}</Text> <!-- Displays: Hello, World! -->\r\n</App>\r\n```\r\n\r\n**Declare a variable with the `<variable>` helper tag and a nested value**\r\n\r\n```xmlui copy {2-4} /name=\"myVar\"/ /{myVar}/\r\n<App>\r\n  <variable name=\"myVar\">\r\n    Hello, World!\r\n  </variable>\r\n  <Text>{myVar}</Text> <!-- Displays: Hello, World! -->\r\n</App>\r\n```\r\n\r\n**Declare a variable in the code-behind file**\r\n\r\n<br/>\r\n<div style={{display: \"flex\", flexDirection: \"row\"}}>\r\n    <div style={{width: \"50%\", paddingRight: \"0.25rem\"}}>\r\n```js copy filename=\"Main.xmlui.xs\"\r\nvar myVar=\"Hello, World!\";\r\n\r\n\r\n```\r\n    </div>\r\n    <div style={{width: \"50%\", paddingLeft: \"0.25rem\"}}>\r\n```xmlui copy filename=\"Main.xmlui\" /{myVar}/\r\n<App>\r\n  <Text>{myVar}</Text>\r\n</App>\r\n```\r\n    </div>\r\n</div>\r\n\r\n**Reusing a variable name in a nested scope**\r\n\r\nThe same variable name can be declared in nested scopes. The engine resolves the name to the variable in the closest (innermost) scope.\r\n\r\n```xmlui copy\r\n<App var.myVar=\"Hello, from App!\">\r\n  <H1>{myVar}</H1> <!-- Displays: Hello, from App! -->\r\n  <VStack var.myVar=\"Hello, from VStack!\">\r\n    <Text>{myVar}</Text> <!-- Displays: Hello, from VStack! -->\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n**Leverage the reactive nature of variables**\r\n\r\nIf you initialize them with an expression, the engine detects any changes on which the variable value depends. When a change happens, the engine refreshes the UI.\r\n\r\n```xmlui copy\r\n<App var.count=\"{0}\" var.countTimes3=\"{3 * count}\" >\r\n  <Button\r\n    label=\"Click to increment!\"\r\n    onClick=\"count++\" />\r\n  <Text>Click count = {count}</Text>\r\n  <Text>Click count * 3 = {countTimes3}</Text>\r\n</App>\r\n```\r\nAny time `count` is incremented, `count3Times` follows the change and will always have the value of three times `count.`\r\n\r\n## Event Handlers\r\n\r\n**Declare an event handler with the `on` attribute prefix**\r\n\r\nYou can define an event handler for a particular component event using an attribute with the `on` prefix followed by the event name:\r\n\r\n```xmlui copy /onClick=\"toast('Clicked!')\"/\r\n<Button label=\"Click me\" onClick=\"toast('Clicked!')\" />\r\n```\r\n\r\n**Declare an event handler with the `<event>` helper tag and nested value**\r\n\r\n```xmlui copy\r\n<Button label=\"Click me\">\r\n  <event name=\"click\">\r\n    toast('Clicked!')\r\n  </event>\r\n</Button>\r\n```\r\n\r\n**Declare an event handler in the code-behind file**\r\n\r\nYou can assign the function's name declared in the code-behind file to the event handler in the markup.\r\n\r\n<br/>\r\n<div style={{display: \"flex\", flexDirection: \"row\"}}>\r\n    <div style={{width: \"50%\", paddingRight: \"0.25rem\"}}>\r\n```js copy filename=\"Main.xmlui.xs\"\r\nfunction displayToast() {\r\n  toast('Clicked!');\r\n}\r\n```\r\n    </div>\r\n    <div style={{width: \"50%\", paddingLeft: \"0.25rem\"}}>\r\n```xmlui copy filename=\"Main.xmlui\" /{myVar}/\r\n<Button \r\n  label=\"Click me\" \r\n  onClick=\"displayToast\" />\r\n```\r\n    </div>\r\n</div>\r\n\r\n**Declare a code-behind event handler with auto markup-binding**\r\n\r\nWhen your component must have an id, and the event handler function name follows the `[componentId]_on[eventName]` pattern, XMLUI automatically binds the event handler to the corresponding component.\r\n\r\n<br/>\r\n<div style={{display: \"flex\", flexDirection: \"row\"}}>\r\n    <div style={{width: \"50%\", paddingRight: \"0.25rem\"}}>\r\n```js copy filename=\"Main.xmlui.xs\"\r\nfunction myButton_onClick() {\r\n  toast('Clicked!');\r\n}\r\n```\r\n    </div>\r\n    <div style={{width: \"50%\", paddingLeft: \"0.25rem\"}}>\r\n```xmlui copy filename=\"Main.xmlui\" /{myVar}/\r\n<Button\r\n  id=\"myButton\" \r\n  label=\"Click me\" />\r\n```\r\n    </div>\r\n</div>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nUse auto-binding of event handlers with care. Though your markup is shorter, you must look into the code-behind file to check if a component declares a particular event handler.\r\n</Callout>\r\n\r\n**Use an `APICall` component as an event handler**\r\n\r\nThe XMLUI engine supports using an `APICall` component definition as an event handler. This option is available only with the component markup (not in the code-behind file) using the `<event>` helper tag:\r\n\r\n```xmlui copy\r\n<Button label=\"Delete Customer\">\r\n  <event name=\"click\">\r\n    <APICall \r\n      url=\"/api/customer/12345\"\r\n      method=\"delete\"\r\n      confirmMessage=\"Are you sure you want to delete the customer?\"\r\n    />\r\n  </event>\r\n</Button>\r\n```\r\n\r\n`APICall` provides valuable services (such as confirmation before the invocation and many others). Learn more in <SmartLink href={WORKING_WITH_DATA_PERSISTING_DATA}>this article</SmartLink>.\r\n\r\n## Layout\r\n\r\nXMLUI has a few fundamental components you can use to establish the app's layout. Their sole responsibility is to provide a viewport and organize the placement, dimensions, and other visual traits of their children.\r\n\r\n| Component | Description |\r\n| --------- | ----------- |\r\n| <SmartLink href={COMPONENT_APP}>`App`</SmartLink> | This component provides a UI frame for XMLUI apps. According to predefined (and run-time configurable) structure templates, `App` allows you to display your preferred layout. |\r\n| <SmartLink href={COMPONENT_STACK}>`Stack`</SmartLink> | This component is a layout container displaying children in a horizontal or vertical stack. |\r\n| <SmartLink href={COMPONENT_VSTACK}>`VStack`</SmartLink>, <SmartLink href={COMPONENT_HSTACK}>`HStack`</SmartLink> | These components are specialized versions of `Stack` that display children in a vertical or horizontal stack, respectively. |\r\n| <SmartLink href={COMPONENT_FLOWLAYOUT}>`FlowLayout`</SmartLink> | This layout component is used to position content in rows with an auto wrapping feature: if the length of the items exceed the available space the layout will wrap into a new line. |\r\n| <SmartLink href={COMPONENT_SPACEFILLER}>`SpaceFiler`</SmartLink> | This component works in layout containers to fill the remaining (unused) space. Its behavior depends on the layout container in which it is used. |\r\n| <SmartLink href={COMPONENT_SPLITTER}>`Splitter`</SmartLink> | This component divides a container (such as a window, panel, pane, etc.) into two resizable sections. |\r\n\r\n\r\n## Fetching Data\r\n\r\n**Use a URL with the GET operation (list)**\r\n\r\nSetting the `data` property of data-aware components (such as `List`, `Items`, `Table`, and others) to a string fetches the data from the specified URL (with the GET verb).\r\n\r\n```xmlui copy\r\n<List data=\"/api/products\">\r\n  <Card title=\"{$item.name}\" subtitle=\"{$item.description}\"/>\r\n</List>\r\n```\r\n\r\n**Use a URL with the GET operation (filtered list)**\r\n\r\n```xmlui copy\r\n<App var.category=\"electronics\">\r\n  <Button label=\"Use books\" onClick=\"category = 'books'\" />\r\n  <List data=\"/api/products/{category}\" >\r\n    <Card title=\"{$item.name}\" subtitle=\"{$item.description}\" />\r\n  </List>\r\n</App>\r\n```\r\n\r\n**Bind an input value with a URL**\r\n\r\nYou can combine the value of a particular input with the URL.\r\n\r\n```xmlui copy /{myTextBox.value}/ /myTextBox/ \r\n<App>\r\n  <TextBox id=\"myTextBox\" placeholder=\"Search value\" />\r\n  <List data=\"/api/products?search={myTextBox.value}\" >\r\n    <Card title=\"{$item.name}\" subtitle=\"{$item.description}\" />\r\n  </List>\r\n</App>\r\n```\r\n\r\n**Use a URL with another verb**\r\n\r\nIf you must use a verb other than GET, you can use a `DataSource` that provides more control over the request. The identifier of the `DataSource` is in the `data` property.\r\n\r\n```xmlui copy {2} /method=\"post\"/ /{productSource}/ /productSource/\r\n<App>\r\n  <DataSource id=\"productSource\" url=\"/api/products\" method=\"post\" />\r\n  <List data=\"{productSource}\" >\r\n    <Card title=\"{$item.name}\" subtitle=\"{$item.description}\" />\r\n  </List>\r\n</App>\r\n```\r\n\r\n**Use a request header**\r\n\r\nYou can set a request header in a `DataSource` component.\r\n\r\n```xmlui copy {2-5} /headers/ /{productSource}/ /productSource/\r\n<App>\r\n  <DataSource \r\n    id=\"productSource\" \r\n    url=\"/api/products\"\r\n    headers=\"{{ 'x-api-key': 'my-secret-key' }}\" />\r\n  <List data=\"{productSource}\" >\r\n    <Card title=\"{$item.name}\" subtitle=\"{$item.description}\" />\r\n  </List>\r\n</App>\r\n```\r\n\r\n**Select a part of the response as the result**\r\n\r\nIf the data you want to use is just a part of the response, you can drill down to the response segment with your data.\r\n\r\n```xmlui copy {2} /{productSource}/ /productSource/ /resultSelector=\"items\"/\r\n<App>\r\n  <DataSource id=\"productSource\" url=\"/api/products\" resultSelector=\"items\"/>\r\n  <List data=\"{productSource}\" >\r\n    <Card title=\"{$item.name}\" subtitle=\"{$item.description}\" />\r\n  </List>\r\n</App>\r\n```\r\n\r\nThis example assumes the response contains a `metadata` property (to ignore) and an `items` property (the actual payload for your query).\r\n\r\n**Filter or modify the fetched result**\r\n\r\nYou can refer to the `value` property of a `DataSource` and use that to filter or modify the result.\r\n\r\n```xmlui copy {2} /{productSource}/ /productSource/ /resultSelector=\"items\"/\r\n<App>\r\n  <DataSource id=\"productSource\" url=\"/api/products\" resultSelector=\"items\"/>\r\n  <List data=\"{productSource.value.filter(p => p.weight > 100)}\" >\r\n    <Card title=\"{$item.name}\" subtitle=\"{$item.description}\" />\r\n  </List>\r\n</App>\r\n```\r\n\r\nThe markup in this example filters the product with a weight over 100 lbs.\r\n\r\n## Calling an API\r\n\r\n_TBD_ \r\n\r\n## Using Forms\r\n\r\n_TBD_\r\n\r\n## Dialogs\r\n\r\n_TBD_\r\n\r\n## Creating App-Specific components\r\n\r\n_TBD_\r\n\r\n## Using Themes\r\n\r\n_TBD_\r\n\r\n\r\n\r\n",
  "cl-app":"# Contact List Tutorial\r\n\r\nIn this tutorial, you will create a Contact List app from scratch using XMLUI. This app lets you manage a small database tracking your contacts.\r\n\r\nThis app will implement a complete client-server scenario, allowing easy access to a database through a REST API to retrieve and store data. Importantly, you will not need to build and manage an actual backend with some database. The **XMLUI API emulation** technology will seamlessly emulate this backend, relieving you of this complex task.\r\n\r\nWhen the app is complete, it will provide this functionality:\r\n\r\n- Displaying a contact list, filtering and sectioning it by contact categories\r\n- Adding new contacts, editing, and deleting contacts from the database\r\n- Showing a dashboard\r\n\r\nHere are a few screenshots:\r\n\r\n<br/>\r\n<Image alt=\"Sections ordered\" src=\"/resources/images/get-started/sections-ordered.png\" />\r\n\r\n<br/>\r\n<Image alt=\"Add new task\" src=\"/resources/images/get-started/add-new-contact.png\" />\r\n\r\n<br/>\r\n<Image alt=\"Table with badge\" src=\"/resources/images/get-started/table-with-badge.png\" />\r\n",
  "cl-app/01-create-app":"import { Callout } from 'nextra/components'\r\nimport { CL_TUTORIAL } from '../../meta/downloads'\r\n\r\n# Create The App\r\n\r\nDownload the contact list app's starter zip file from <DownloadLink href={CL_TUTORIAL}>here</DownloadLink> and unzip it into a working folder.\r\n\r\nThe unzipped content has the following folders and files:\r\n\r\n| File/Folder | Description |\r\n| --- | --- |\r\n| **`index.html`** | The default webpage to display |\r\n| **`Main.xmlui`** | The XMLUI app's entry point |\r\n| **`components`** | The folder with the app's XMLUI components (empty) |\r\n| **`resources`** | The folder with static app resources like images, logos, icons, etc. |\r\n| **`xmlui`** | The folder with the XMLUI framework's runtime and the emulated API |\r\n| **`mockApi.js`** | The service worker for emulated backend |\r\n| **`start.bat`** | The batch file to start the `http-server` utility (assumes Node.js is installed) on Windows |\r\n| **`start.sh`** | The bash script file to start the `http-server` utility (assumes Node.js is installed) on Mac and Linux |\r\n\r\n<Callout emoji=\"💡\">\r\nRemember, you need a local web server to run the XMLUI app. Install the LTS version of Node.js on your machine (https://nodejs.org/en), for you will use the **http-server** Node package to host the tutorial.\r\n\r\nIn your command prompt, select the downloaded sample's unzipped folder (with the cd command), and run `start.bat` on Windows or `start.sh` on Mac or Linux, which will start the web server and open your browser with the app.\r\n\r\nAlternatively, you can start the webserver directly by issuing the `npx -y http-server -o` command.\r\n</Callout>\r\n\r\nThis is how the sample app should appear:\r\n\r\n<br/>\r\n<Image alt=\"App start\" src=\"/resources/images/get-started/cl-start.png\" />\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  This app uses an emulated backend that persists data. XMLUI has a built-in emulation technology for this purpose.\r\n</Callout>\r\n\r\nThe app is straightforward as it only contains one single markup file (`Main.xmlui`) which acts as the entry point for an XMLUI app:\r\n\r\n```xmlui copy filename=\"Main.xmlui\"\r\n<App \r\n  layout=\"vertical-sticky\" \r\n  name=\"Contact List Tutorial\" \r\n  logo=\"resources/logo.svg\" \r\n  logo-dark=\"resources/logo-dark.svg\">\r\n  <AppHeader>\r\n    <H2>Contact Management</H2>\r\n    <SpaceFiller />\r\n    <ToneChangerButton />\r\n  </AppHeader>  \r\n  <NavPanel>\r\n    <NavLink label=\"Home\" to=\"/\" />\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">\r\n      Home\r\n    </Page>\r\n  </Pages>\r\n  <Footer>\r\n    Powered by XMLUI\r\n  </Footer>\r\n</App>\r\n```\r\n\r\nThe application uses the `vertical-sticky` layout, which renders a vertical menu on the left side of the app and provides a sticky header and footer above and below the main content area. The `name` property of `App` defines the title to display in the browser tab.\r\n\r\nThe `AppHeader` defines a title and allows a `ToneChangerButton` to choose between light and dark themes.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  The `logo` and `logo-dark` properties set the resource files to **display a logo**. If you omit them, the app will not show a logo.\r\n</Callout>\r\n\r\n## Setting Up the Scenario\r\n\r\nThe sample app works with a list of contacts stored in a database with two tables, `contacts` and `categories`. The latter one is a dictionary that associates an integer ID with a display name to describe contact categories like \"Decision Maker,\" \"Influencer,\" and others.\r\n\r\nThe structure of these tables is the following:\r\n\r\n**The `contacts` table**:\r\n\r\n| Field | Type | Description |\r\n| --- | --- | --- |\r\n| id | integer | The unique identifier of the contact |\r\n| fullName | string | The contact's name |\r\n| categoryId | integer | Reference to the category ID of the contact |\r\n| comments | string | Additional information about the contact |\r\n| reviewDueDate | date | The date when the contact should be reviewed |\r\n| reviewCompleted | boolean | Indicates whether the review is completed |\r\n\r\n**The `categories` table**:\r\n\r\n| Field | Type | Description |\r\n| --- | --- | --- |\r\n| id | integer | The unique identifier of the category |\r\n| name | string | The category's name |\r\n| color | string | The category's color |\r\n\r\n<Callout emoji=\"💡\">\r\n  Though storing something like \"color\" in a database may be an anti-pattern, we store category colors there for the sake of simplicity, and we use this information in this tutorial.\r\n</Callout>\r\n\r\nIn this application, we assume that each contact's information is regularly reviewed by someone (for example, after a visit or a call). We store related data for each contact in the `reviewDueDate` and `reviewCompleted` fields. In the tutorial, you will use the information for filtering and grouping.\r\n\r\n## Creating Pages for the App\r\n\r\nThe default app uses a horizontal layout with a single menu item, Home.\r\nThe initial version of the Contact List app will contain only two pages, one for a dashboard and another for listing contacts.\r\n\r\nYou can modify the default app structure in a few steps:\r\n\r\nFirst, open the `Main.xmlui` file in your text editor and change its contents to the following:\r\n\r\n```xmlui copy filename=\"Main.xmlui\" /layout=\"vertical-full-header\"/ {11-18}\r\n<App \r\n  layout=\"vertical-sticky\" \r\n  name=\"Contact List Tutorial\" \r\n  logo=\"resources/logo.svg\" \r\n  logo-dark=\"resources/logo-dark.svg\">\r\n  <AppHeader>\r\n    <H2>Contact Management</H2>\r\n    <SpaceFiller />\r\n    <ToneChangerButton />\r\n  </AppHeader>  \r\n  <NavPanel>\r\n    <NavLink label=\"Dashboard\" to=\"/\" />\r\n    <NavLink label=\"Contacts\" to=\"/contacts\" />\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">Dashboard</Page>\r\n    <Page url=\"/contacts\">Contacts</Page>\r\n  </Pages>\r\n  <Footer>\r\n    Powered by XMLUI\r\n  </Footer>\r\n</App>\r\n```\r\n\r\nRefresh the browser to see your changes.\r\nYou should see a new navigation item in the side navigation panel:\r\n\r\n<br/>\r\n<Image alt=\"Initial P2DO\" src=\"/resources/images/get-started/cl-initial.png\" />\r\n\r\n## Using an Emulated Backend\r\n\r\nThe app will use a backend to retrieve and store data. XMLUI provides a powerful tool, the API emulator, as part of the framework, which provides an in-browser backend.\r\n\r\n<Callout emoji=\"💡\">\r\n  Creating an emulated backend is not very complex but requires a different experience than leveraging web API endpoints. We provided this emulation with the contact list app for you; you just use it.\r\n</Callout>\r\n\r\nTest the emulated backend by adding code that triggers invoking an endpoint. Replace the `Page` tag with the `/contacts` URL with this one:\r\n\r\n```xmlui copy {3-4} filename=\"Main.xmlui\"\r\n<!-- Omitted -->\r\n<Page url=\"/contacts\">\r\n  <DataSource id=\"message\" url=\"/api/test\" />\r\n  <Text>{message.value}</Text>\r\n</Page>\r\n<!-- Omitted -->\r\n```\r\n\r\nThe framework considers text wrapped between curly braces an **expression**. Instead of displaying the literal value, it replaces them with their evaluated value.\r\n\r\n`DataSource` is a powerful component responsible for fetching data. The code above uses the `/api/test` endpoint, which retrieves a string. This component has an identifier, `message`, which allows accessing its exposed properties and methods. \r\n\r\nThe `Text` element displays a `message.value` expression. The engine recognizes that it must fetch data from the URL specified in the component identified with `message` (it is the `DataSource`). When the fetch has been completed, `message.value` represents the returned string, and the UI refreshes to display that string. \r\n\r\nTurn to the app running in the browser and refresh. Click the \"Contact List\" menu item; it will trigger fetching the test data (message) from the backend and display it on the screen:\r\n\r\n<br/>\r\n<Image alt=\"Test API\" src=\"/resources/images/get-started/test-emulated-api.png\" />\r\n\r\nIn the following article, you will learn how the `DataSource` component works together with others to fetch and leverage data from a backend.",
  "cl-app/02-use-list":"import { Callout } from 'nextra/components'\r\nimport { CL_TUTORIAL2 } from '../../meta/downloads'\r\n\r\n# Display Data in a List\r\n\r\nAt the end of the previous article, you fetched data from the emulated backend and displayed it as a JSON structure to test the backend. In this article, you will learn how to use data-aware components to display data.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou can continue working with the code you completed in the previous tutorial section. Alternatively, you can download the code from <DownloadLink href={CL_TUTORIAL2}>here</DownloadLink> and carry on. \r\n</Callout>\r\n\r\n## Fetching Data from API\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nWith XMLUI, fetching data from a REST API is straightforward.\r\n</Callout>\r\n\r\nThe markup in the previous articles fetched a message with the `DataSource` component. Often, you use only a URL to access data in a backend.\r\n\r\nWhen using the **`data` property** (with any component), the framework infers from its value that it must fetch data (invoking a GET request with the particular URL).\r\n\r\nTo see how it works, replace the `Page` tag with the `/contacts` URL to use the following contents:\r\n\r\n```xmlui copy {2-4} filename=\"Main.xmlui\"\r\n<!-- Omitted -->\r\n<Page url=\"/contacts\">\r\n  <List data=\"/api/contacts\" />\r\n</Page>\r\n<!-- Omitted -->\r\n```\r\n\r\n`List` is a component that works with an array of items.  The framework fetches the data from the `/api/contacts` URL and injects it into the `List`, which displays each item.\r\n\r\nIf the app is not running yet, start it on your web server and visit the app's page in your browser. The code snippet you have just added displays some contact data when you click the Contacts menu:\r\n\r\n<br/>\r\n<Image alt=\"Default task list\" src=\"/resources/images/get-started/default-contact-list.png\" />\r\n\r\nThe `List` component does not know anything about the semantics and structure of the data. Unless you provide some hints (or a sophisticated description) of the UI to display a particular data item, `List` will display a simple layout selecting a field as a title and another as a subtitle.\r\n\r\nThe default layout is good for quick prototyping, but in this case, you need a better way to display fetched data!\r\n\r\n## Customizing the List\r\n\r\nThe `List` component is versatile and provides several services, making it easy to customize the layout. In this section, you will change the outlook of list items. A contact record has these fields (columns):\r\n\r\n| Field | Type | Description |\r\n| --- | --- | --- |\r\n| id | integer | The unique identifier of the contact |\r\n| fullName | string | The contact's name |\r\n| categoryId | integer | Reference to the category ID of the contact |\r\n| comments | string | Additional information about the contact |\r\n| reviewDueDate | date | The date when the contact should be reviewed |\r\n| reviewCompleted | boolean | Indicates whether the review is completed |\r\n\r\nThe default display of the list uses the `fullName` and then `categoryId` fields. If you want to change the default view of an item, you can modify the template used to show a particular item. Modify the `List` component's definition to use a different template:\r\n\r\n```xmlui copy {2-4} filename=\"Main.xmlui\"\r\n<!-- Omitted -->\r\n<List data=\"/api/contacts\">\r\n  <Card title=\"{$item.fullName}\" subtitle=\"{$item.comments}\" />\r\n</List>\r\n<!-- Omitted -->\r\n```\r\n\r\nThe nested markup defines the UI for a single item in the list. The code snippet uses a `Card` component for a list item. `Card` is a simple container for displaying cohesive data, such as record fields. This component has a predefined layout we can leverage through the `title` and `subtitle` fields. \r\n\r\nWhen processing the data, `List` uses a special property, `$item`, to refer to the current iteration item. In the expressions above, `$item.fullName` and `$item.comments` are the fields of the current iteration item, of a contact record.\r\n\r\n<br/>\r\n<Image alt=\"Template with Card\" src=\"/resources/images/get-started/template-with-card.png\" />\r\n\r\n## Adding and Formatting Fields\r\n\r\nLet's change the layout of the items to something more attractive and helpful. Modify the nested items of `List` as in the following code snippet:\r\n\r\n```xmlui copy {3-14} filename=\"Main.xmlui\"\r\n<!-- Omitted -->\r\n<List data=\"/api/contacts\">\r\n  <Card>\r\n    <HStack verticalAlignment=\"center\">\r\n      <Checkbox initialValue=\"{$item.reviewCompleted}\" />\r\n      <VStack width=\"*\" gap=\"0\">\r\n        <Text variant=\"strong\">{$item.fullName}</Text>\r\n        <Text>{$item.comments}</Text>\r\n      </VStack>\r\n      <HStack verticalAlignment=\"center\" horizontalAlignment=\"end\">\r\n        <Text>{smartFormatDate($item.reviewDueDate)}</Text>\r\n      </HStack>\r\n    </HStack>\r\n  </Card>\r\n</List>\r\n<!-- Omitted -->\r\n```\r\n\r\nHere, you add a checkbox indicating the completeness of a particular item. With the help of `VStack` and `HStack` **layout components**, you align the item's title and description in a column with two rows and display the `reviewDueDate` field aligned right in the item's row. Observe the `smartFormatDate($item.reviewDueDate)` expression, which smartly transforms a `reviewDueDate` field, for example, recognizing that a particular date is `Yesterday`.\r\n\r\n<br/>\r\n<Image alt=\"Test API\" src=\"/resources/images/get-started/detailed-template.png\" />\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nIt might occur to you that rendering hundreds or thousands of data items would consume a lot of resources. The `List` component is a **virtualized container** that ensures that only data items visible in the current viewport (and a few near the edges) are rendered.\r\n</Callout>\r\n\r\n## Categorizing Data\r\n\r\nIn the app's database, each contact can be assigned a category. The available categories are stored in the database with the following structure:\r\n\r\n| Field | Type | Description |\r\n| --- | --- | --- |\r\n| id | integer | The unique identifier of the category |\r\n| name | string | The category's name |\r\n| color | string | The category's color |\r\n\r\nXMLUI has a `Badge` component that can use a color map (name and color pairs). When you pass a value to a `Badge`, it leverages the color map to set up the component's background according to the badge's text. In this section, you will add a `Badge` displaying the category associated with a particular contact:\r\n\r\n1. Add a `DataSource` component to the markup before the `NavPanel` tag with the `categories` identifier. This `DataSource` component will fetch all category data from the backend.\r\n\r\n```xmlui copy {11} filename=\"Main.xmlui\" /id=\"categories\"/\r\n<App \r\n  layout=\"vertical-sticky\" \r\n  name=\"Contact List Tutorial\" \r\n  logo=\"resources/logo.svg\" \r\n  logo-dark=\"resources/logo-dark.svg\">\r\n  <AppHeader>\r\n    <H2>Contact Management</H2>\r\n    <SpaceFiller />\r\n    <ToneChangerButton />\r\n  </AppHeader>\r\n  <DataSource id=\"categories\" url=\"/api/categories\" />\r\n  <!-- Omitted -->\r\n  <NavPanel>\r\n  <!-- Omitted -->\r\n</App>\r\n```\r\n\r\n2. Create a new `Main.xmlui.xs` file in the app's root folder. This file intentionally has the same name extended with `.xs` as the `Main.xmlui` markup file. It is a **code-behind** file containing variables and functions visible within the app's main component. A code-behind file represents states, actions, and other utility functionality. In this case, it will declare variables. Copy this content into the new file:\r\n\r\n```javascript copy filename=\"Main.xmlui.xs\"\r\n// Create a color map for all categories\r\nvar categoriesColorMap = toHashObject(categories.value, \"name\", \"color\");\r\n\r\n// Resolve category name by id\r\nfunction getCategoryNameById(categoryId) {\r\n  const category = findByField(categories.value, \"id\", categoryId);\r\n  return category ? category.name : \"\";\r\n}\r\n```\r\n\r\nThe `categoriesColorMap` variable converts the list of topic records into a hash object with the topic name and color value pairs.\r\n\r\nThe `getCategoryNameById` looks up the name of a particular category based on its id.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nThis transformation with the `toHashObject` JavaScript function converts category records from this format\r\n\r\n```json\r\n[\r\n  { \"name\": \"<name1>\", \"color\": \"<color1>\" },\r\n  { \"name\": \"<name2>\", \"color\": \"<color2>\" },\r\n  // ...\r\n]\r\n```\r\n\r\ninto a hash object:\r\n\r\n```json\r\n{\r\n  \"<name1>\": \"<color1>\",\r\n  \"<name2>\": \"<color2>\",\r\n  // ...\r\n}\r\n```\r\n</Callout>\r\n\r\n3. Change the definition of `Card` within the list:\r\n\r\n```xmlui copy {3,11} filename=\"Main.xmlui\" /var.categoryName/ /categoriesColorMap/ /categoryName/\r\n<!-- Omitted -->\r\n<List data=\"/api/contacts\">\r\n  <Card var.categoryName=\"{getCategoryNameById($item.categoryId)}\">\r\n    <HStack verticalAlignment=\"center\">\r\n      <Checkbox initialValue=\"{$item.reviewCompleted}\" />\r\n      <VStack width=\"*\" gap=\"0\">\r\n        <Text variant=\"strong\">{$item.fullName}</Text>\r\n        <Text>{$item.comments}</Text>\r\n      </VStack>\r\n      <HStack verticalAlignment=\"center\" horizontalAlignment=\"end\">\r\n        <Badge when=\"{categoryName}\" value=\"{categoryName}\" colorMap=\"{categoriesColorMap}\"/>\r\n        <Text>{smartFormatDate($item.reviewDueDate)}</Text>\r\n      </HStack>\r\n    </HStack>\r\n  </Card>\r\n</List>\r\n<!-- Omitted -->\r\n```\r\nThis code snippet adds a `categoryName` variable to the `Card` (this variable's scope is `Card` and its children). The markup uses this variable as its value will be used in multiple properties within `Badge`; the variable caches the value. The `Badge` component uses the `categoryName` variable's value to display its text with the associated `categoriesColorMap` (maps each category name to a particular color). Observe the `when` attribute: if there is no name for the particular contact category, the `when` value will be false, and the `Badge` component will not be rendered.\r\n\r\nNow, running the app will display the topics of task items:\r\n\r\n<br/>\r\n<Image alt=\"Badges\" src=\"/resources/images/get-started/items-and-badges.png\" />\r\n\r\nIn the following article, you will learn to display filtered data.\r\n",
  "cl-app/03-filter-data":"import { Callout } from 'nextra/components'\r\nimport { CL_TUTORIAL3 } from '../../meta/downloads'\r\n\r\n# Filter Data\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou can continue working with the code you completed in the previous tutorial section. Alternatively, you can download the code from <DownloadLink href={CL_TUTORIAL3}>here</DownloadLink> and carry on. \r\n</Callout>\r\n\r\nIn the previous article, you created and customized a list of contacts. That list displayed all contacts retrieved from the database. However, you often want to display only a subset of them, such as contacts with their review overdue. In this article, you will learn how you can filter data.\r\n\r\nTechnically, you have two different options for data filtering in a client-server scenario:\r\n1. You call a particular API with the filter condition to retrieve only the requested data.\r\n2. You get the data from the backend and filter it on the client side.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  You may combine these two options: query some pre-filtered data from the backend and apply further filtering in the UI.\r\n</Callout>\r\n\r\nIn this article, you will implement the filtering functionality with both options.\r\n\r\n## Create Filter Pages\r\n\r\nAdd a few new menu items with their corresponding pages to the app definition in the `Main.xmlui` file. Change the `/contacts` URL representing all contacts to `/contacts/all`. Set up each page to display only the related filter's name:\r\n\r\n```xmlui copy {13-17, 21, 24-27} filename=\"Main.xmlui\"\r\n<App \r\n  layout=\"vertical-sticky\" \r\n  name=\"Contact List Tutorial\" \r\n  logo=\"resources/logo.svg\" \r\n  logo-dark=\"resources/logo-dark.svg\">\r\n  <AppHeader>\r\n    <H2>Contact Management</H2>\r\n    <SpaceFiller />\r\n    <ToneChangerButton />\r\n  </AppHeader>  \r\n  <NavPanel>\r\n    <NavLink label=\"Dashboard\" to=\"/\" />\r\n    <NavLink label=\"All Contacts\" to=\"/contacts/all\" />\r\n    <NavLink label=\"Overdue Reviews\" to=\"/contacts/overdue\"/>\r\n    <NavLink label=\"Today's Reviews\" to=\"/contacts/today\"/>\r\n    <NavLink label=\"Upcoming Reviews\" to=\"/contacts/upcoming\"/>\r\n    <NavLink label=\"Completed Reviews\" to=\"/contacts/completed\"/>\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">Dashboard</Page>\r\n    <Page url=\"/contacts/all\">\r\n      <!-- Unchanged -->\r\n    </Page>\r\n    <Page url=\"/contacts/overdue\">Overdue</Page>\r\n    <Page url=\"/contacts/today\">Today</Page>\r\n    <Page url=\"/contacts/upcoming\">Upcoming</Page>\r\n    <Page url=\"/contacts/completed\">Completed</Page>\r\n  </Pages>\r\n  <Footer>\r\n    Powered by XMLUI\r\n  </Footer>\r\n</App>\r\n```\r\n\r\nThe URLs specified in the `NavLink` components will navigate to the page determined by the matching `Page` component.\r\nFor example, selecting the \"Overdue Reviews menu\" item displays the following:\r\n\r\n<br/>\r\n<Image alt=\"Task menus\" src=\"/resources/images/get-started/contact-menus.png\" />\r\n\r\n## Filter on the Client\r\n\r\nFirst, let's focus on filtering the data on the client side.\r\nIn this scenario, you will fetch all the data from the backend but filter it before assigning it to the displayed list. All lists use the same logic; the only difference is how they filter the contact data. \r\n\r\n### Using a DataSource\r\n\r\nPreviously, you used a URL, `/api/contacts` to display the contact data in a `List`:\r\n\r\n```xmlui copy {4} filename=\"Main.xmlui\"\r\n<App>\r\n  <!-- Omitted -->\r\n  <Page url=\"/contacts/all\">\r\n    <List data=\"/api/contacts\">\r\n      <!-- Omitted -->\r\n    </List>\r\n  </Page>\r\n  <!-- Omitted -->\r\n</App>\r\n```\r\n\r\nWith the new app pages, you will use the same URL five times and filter the data by different criteria. Instead of writing the same URL five times, outsource the fetch mechanism to a `DataSource` component. Harness it with an id (`contactsDs`), and refer to this id in the list's `data` property with the following steps:\r\n\r\nAdd a `DataSource` declaration to `Main.xmlui` before the `<Pages>` tag:\r\n\r\n```xmlui copy {7} filename=\"Main.xmlui\" /id=\"contactsDs\"/\r\n<App \r\n  layout=\"vertical-sticky\" \r\n  name=\"Contact List Tutorial\" \r\n  logo=\"resources/logo.svg\" \r\n  logo-dark=\"resources/logo-dark.svg\">\r\n  <!-- Omitted -->\r\n  <DataSource id=\"contactsDs\" url=\"/api/contacts\" />\r\n  <Pages>\r\n  <!-- Omitted -->\r\n</App>\r\n```\r\n\r\nUpdate the contacts page to use this `DataSource` (refer to the identifier of `DataSource`):\r\n\r\n```xmlui copy {4} filename=\"Main.xmlui\" /contactsDs/\r\n<App>\r\n  <!-- Omitted -->\r\n  <Page url=\"/contacts/all\">\r\n    <List data=\"{contactsDs}\">\r\n      <!-- Omitted -->\r\n    </List>\r\n  </Page>\r\n  <!-- Omitted -->\r\n</App>\r\n```\r\n\r\nWhen you visit the All Contacts page, the UI displays the same list as before.\r\n\r\n<br/>\r\n<Image alt=\"Contact predicates\" src=\"/resources/images/get-started/contact-predicates.png\" />\r\n\r\nEarlier, you learned that XMLUI handles the `data` property in a special way: when its value is evaluated as a string, the framework considers it a URL and fetches the data from there.\r\n\r\nHere, you can learn another specialty of handling `data`. When its value is evaluated to a `DataSource` component, that data source is used to fetch the data from the backend. \r\n\r\n`DataSource` allows you granular control over how a web request is sent to the backend; in addition to the URL, you can configure other parameters, including headers, the request method, the body, and a few others.\r\n\r\nSo, in the `<List data=\"{contactsDs}\">` tag, the `contactsDs` expression is evaluated to a `DataSource` instance (as `contactsDs` is the identifier of that data source). This way, the framework knows how to set the list's data to display.\r\n\r\n### A Reusable `Contacts` Component\r\n\r\nSo far, you have used the markup to display the contact list only within a single `Page` definition. However, as you continue to define pages with filtered information, you will leverage the same markup in four more pages. Though the copy-and-paste approach would work, it would create a maintenance nightmare. Every modification in the list's view would require five updates in the markup.\r\n\r\nIt's time to create a reusable component for the contact list and use that to remove the maintenance pain.\r\n \r\nFirst, create a new file, `Contacts.xmlui` in the `components` folder, and add this piece of code:\r\n\r\n```xmlui copy filename=\"Contacts.xmlui\"\r\n<Component name=\"Contacts\">\r\n</Component>\r\n```\r\n\r\nThis component is empty; fill it with content! Copy the contents of the All contacts page (omit the wrapping `Page` tag):\r\n\r\n```xmlui copy {2-16} filename=\"Contacts.xmlui\"\r\n<Component name=\"Contacts\">\r\n  <List data=\"{contactsDs}\">\r\n    <Card var.categoryName=\"{getCategoryNameById($item.categoryId)}\">\r\n      <HStack verticalAlignment=\"center\">\r\n        <Checkbox initialValue=\"{$item.reviewCompleted}\" />\r\n        <VStack width=\"*\" gap=\"0\">\r\n          <Text variant=\"strong\">{$item.fullName}</Text>\r\n          <Text>{$item.comments}</Text>\r\n        </VStack>\r\n        <HStack verticalAlignment=\"center\" horizontalAlignment=\"end\">\r\n          <Badge when=\"{categoryName}\" value=\"{categoryName}\" colorMap=\"{categoriesColorMap}\"/>\r\n          <Text>{smartFormatDate($item.reviewDueDate)}</Text>\r\n        </HStack>\r\n      </HStack>\r\n    </Card>\r\n  </List>\r\n</Component>\r\n```\r\n\r\nYou are almost done. However, as we filter each data list according to different criteria, the `Contacts` component should not use the data source with all contact records. It should either receive the filtered data or a filter condition.\r\n\r\nIn this example, you will use the first approach (using the filtered data), as the component's responsibility is to display the list. We do not want to mix the display logic with the filtering.\r\n\r\nChange the `List` component to use the data received through a property:\r\n\r\n```xmlui copy filename=\"Contacts.xmlui\" /data=\"{$props.data}\"/\r\n<Component name=\"Contacts\">\r\n  <List data=\"{$props.data}\">\r\n    <!-- Unchanged -->\r\n  </List>\r\n</Component>\r\n```\r\n\r\n\r\nThe `Contacts` component passes the array of contact items (received in its `data` property) to the underlying list, which displays them as before.\r\n\r\nThe `$props` context value represents the properties the `Contacts` component receives. Thus, `$props.data` is the `data` property passed to a `Contacts` instance.\r\n\r\nUpdate the Contact `Page` (the one with the `/contacts/all` URL) in `Main.xmlui` to use the new `Contacts` component:\r\n\r\n```xmlui copy {5} filename=\"Main.xmlui\" /data=\"{contactsDs}\"/\r\n<!-- Omitted -->\r\n<Pages>\r\n  <Page url=\"/\">Dashboard</Page>\r\n  <Page url=\"/contacts/all\">\r\n    <Contacts data=\"{contactsDs}\" />\r\n  </Page>\r\n  <!-- Omitted -->\r\n</Pages>\r\n<!-- Omitted -->\r\n```\r\n\r\nYou can check that your app behaves just like before. **Ooops, the category badges are not displayed!**\r\n\r\n### Fix Categories\r\n\r\nWe moved the contact list markup into the `Contacts` component but forgot about the UI logic, which is in the `Main.xmlui.xs` file. This logic is responsible for the category badges. Let's fix this issue!\r\n\r\nCategories use the `Datasource` with the `categories` id in `Main.xmlui` (you find it before the`<Pages>` tag). Move this `DataSource` into `Contacts.xmlui`:\r\n\r\n```xmlui copy {2} filename=\"Contacts.xmlui\"\r\n<Component name=\"Contacts\">\r\n  <DataSource id=\"categories\" url=\"/api/categories\" />\r\n  <!-- Unchanged -->\r\n</Component>\r\n```\r\n\r\nCreate a code-behind file for `Contacts.xmlui` (put it into the `components` folder and name it `Contacts.xmlui.xs`). Copy the contents of `Main.xmlui.xs` into the new `Contacts.xmlui.xs` file:\r\n\r\n```js copy filename=\"Contacts.xmlui.xs\"\r\n// Create a color map for all categories\r\nvar categoriesColorMap = toHashObject(categories.value, \"name\", \"color\");\r\n\r\n// Resolve category name by id\r\nfunction getCategoryNameById(categoryId) {\r\n  const category = findByField(categories.value, \"id\", categoryId);\r\n  return category ? category.name : \"\";\r\n}\r\n```\r\n\r\nNow, when refreshing the app in the browser, you should see the category badges again.\r\n\r\n### Define Filters\r\n\r\nThe `Contacts` component displays the data it receives, so the UI logic must pass the appropriate filtered data to each `Contacts` instance. You will prepare the pages to show filtered contacts.\r\n\r\nChange the content of `Main.xmlui.xs` code-behind file to this code (yes, you can remove the previous code entirely):\r\n\r\n```js filename=\"Main.xmlui.xs\"\r\nfunction getSection(contact) {\r\n  if (contact.reviewCompleted) return \"Completed\";\r\n  if (!contact.reviewDueDate) return \"No Due Date\";\r\n  if (isToday(contact.reviewDueDate)) return \"Today\";\r\n  return getDate(contact.reviewDueDate) < getDate() ? \"Overdue\" : \"Upcoming\";\r\n}\r\n\r\nfunction filterBySection(contacts, section) {\r\n  return contacts.filter((contact) => getSection(contact) === section);\r\n}\r\n\r\nvar allContacts = contactsDs.value;\r\nvar overdueContacts = filterBySection(allContacts, \"Overdue\");\r\nvar todayContacts = filterBySection(allContacts, \"Today\");\r\nvar upcomingContacts = filterBySection(allContacts, \"Upcoming\");\r\nvar completedContacts = filterBySection(allContacts, \"Completed\");\r\n```\r\n\r\nThe `getSection(contact)` function returns a particular contact's section, one of these values according to the state of its review process: `\"Completed\"`, `\"No Due Date\"`, `\"Today\"`, `\"Overdue\"`, or `\"Upcoming\"`.\r\n\r\nThe `filterBySection(contacts, section)` function retrieves only the `contacts` in the specified `section`.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou may not understand precisely how the \r\n```\r\ncontacts.filter((contact) => getSection(contact) === section);\r\n``` \r\ncode snippet works; just accept that it does its job.\r\n</Callout>\r\n\r\nThe `allContacts`, `overdueContacts`, `todayContacts`, `upcomingContacts`, and `completedContacts` variables store the filtered contact lists.\r\n\r\nUpdate all remaining contact pages in `Main.xmlui` to use `Contacts` with filtered data:\r\n\r\n```xmlui copy filename=\"Main.xmlui\" /{overdueContacts}/ /{todayContacts}/ /{upcomingContacts}/ /{completedContacts}/\r\n<App> \r\n  <!-- Omitted -->\r\n  <Pages>\r\n    <Page url=\"/\">Dashboard</Page>\r\n    <Page url=\"/contacts/all\">\r\n      <Contacts data=\"{allContacts}\" />\r\n    </Page>\r\n    <Page url=\"/contacts/overdue\">\r\n      <Contacts data=\"{overdueContacts}\" />\r\n    </Page>\r\n    <Page url=\"/contacts/today\">\r\n      <Contacts data=\"{todayContacts}\" />\r\n    </Page>\r\n    <Page url=\"/contacts/upcoming\">\r\n      <Contacts data=\"{upcomingContacts}\" />\r\n    </Page>\r\n    <Page url=\"/contacts/completed\">\r\n      <Contacts data=\"{completedContacts}\" />\r\n    </Page>\r\n  </Pages>\r\n  <!-- Omitted -->\r\n</App>\r\n```\r\n\r\nNow, contact filtering works as expected. The list of today's reviews contains only contacts belonging to that category.\r\n\r\n<br/>\r\n<Image alt=\"Today's Reviews\" src=\"/resources/images/get-started/review-today.png\" />\r\n\r\n### Display Contact Counts\r\n\r\nFrom a UX point of view, it would be good to display the number of contacts in a particular section with the menu items to indicate, for example, that there are some reviews to be done today.\r\n\r\nUpdate the `NavLabel` components in `Main.xmlui`:\r\n\r\n```xmlui copy {4-8} filename=\"Main.xmlui\"\r\n<!-- Omitted -->\r\n<NavPanel>\r\n  <NavLink label=\"Dashboard\" to=\"/\" />\r\n  <NavLink label=\"All Contacts ({allContacts.length})\" to=\"/contacts/all\" />\r\n  <NavLink label=\"Overdue Reviews ({overdueContacts.length})\" to=\"/contacts/overdue\"/>\r\n  <NavLink label=\"Today's Reviews ({todayContacts.length})\" to=\"/contacts/today\"/>\r\n  <NavLink label=\"Upcoming Reviews ({upcomingContacts.length})\" to=\"/contacts/upcoming\"/>\r\n  <NavLink label=\"Completed Reviews ({completedContacts.length})\" to=\"/contacts/completed\"/>\r\n</NavPanel>\r\n<!-- Omitted -->\r\n```\r\n\r\nWhen you run the app, it displays the contact record counts in the menu item labels:\r\n\r\n<br/>\r\n<Image alt=\"Completed tasks\" src=\"/resources/images/get-started/contact-counts.png\" />\r\n\r\n## Filter on the Server\r\n\r\nSo far, the app has used a single API endpoint, `/api/contacts` to receive all contact records.\r\nHowever, the API has other endpoints to get filtered data, as the following URLs indicate:\r\n\r\n- `/api/contacts/overdue`\r\n- `/api/contacts/today`\r\n- `/api/contacts/upcoming`\r\n- `/api/contacts/completed`\r\n\r\nIn this section, you will change the code to get filtered contact data from the backend.\r\n\r\nAs you leverage five different URLs to get the data, you do not need the `DataSource` referring to the `/api/contacts` URL (its id is `contactsDs`). Remove this `DataSource` from `Main.xmlui`. Change the `data` properties of `Contacts` instances to use the corresponding URLs:\r\n\r\n\r\n```xmlui copy {5, 8, 11, 14, 17} filename=\"Main.xmlui\"\r\n<!-- Omitted -->\r\n<Pages>\r\n  <Page url=\"/\">Dashboard</Page>\r\n  <Page url=\"/contacts/all\">\r\n    <Contacts data=\"/api/contacts\" />\r\n  </Page>\r\n  <Page url=\"/contacts/overdue\">\r\n    <Contacts data=\"/api/contacts/overdue\" />\r\n  </Page>\r\n  <Page url=\"/contacts/today\">\r\n    <Contacts data=\"/api/contacts/today\" />\r\n  </Page>\r\n  <Page url=\"/contacts/upcoming\">\r\n    <Contacts data=\"/api/contacts/upcoming\" />\r\n  </Page>\r\n  <Page url=\"/contacts/completed\">\r\n    <Contacts data=\"/api/contacts/completed\" />\r\n  </Page>\r\n</Pages>\r\n<!-- Omitted -->\r\n```\r\n\r\nWhen you refresh the app in the browser, you can test that data filtering still works. However, this time, it happens on the backend. Nonetheless, the item counts in the menu labels show \"undefined\", because the counters were calculated through the `DataSource` component you just removed.\r\n\r\n<br/>\r\n<Image alt=\"Completed tasks\" src=\"/resources/images/get-started/filter-completed.png\" />\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nIf you still see the item counters, you forgot to remove the `DataSource` component from `Main.xmlui`.\r\n</Callout>\r\n\r\nLet's fix this! The API has an endpoint, `/api/contactcounts`,\r\nretrieving the task category counts in an object with properties `all`, `overdue`, `today`, `upcoming`, and `completed`,\r\neach representing a particular contact section.\r\n\r\nAdd a new `DataSource` to the `Main.xmlui` file to fetch the contact counts:\r\n\r\n```xmlui copy {2} filename=\"Main.xmlui\"\r\n<!-- After AppHeader -->\r\n<DataSource id=\"contactCounts\" url=\"/api/contactcounts\" />\r\n<NavPanel>\r\n  <!-- Omitted -->\r\n</NavPanel>\r\n<!-- Omitted -->\r\n```\r\n\r\nUpdate the menu item labels to use the contact counts retrieved from the server:\r\n\r\n```xmlui copy {4-8} filename=\"Main.xmlui\"\r\n<!-- Omitted -->\r\n<NavPanel>\r\n  <NavLink label=\"Dashboard\" to=\"/\" />\r\n  <NavLink label=\"All Contacts ({contactCounts.value.all})\" to=\"/contacts/all\" />\r\n  <NavLink label=\"Overdue Reviews ({contactCounts.value.overdue})\" to=\"/contacts/overdue\"/>\r\n  <NavLink label=\"Today's Reviews ({contactCounts.value.today})\" to=\"/contacts/today\"/>\r\n  <NavLink label=\"Upcoming Reviews ({contactCounts.value.upcoming})\" to=\"/contacts/upcoming\"/>\r\n  <NavLink label=\"Completed Reviews ({contactCounts.value.completed})\" to=\"/contacts/completed\"/>\r\n</NavPanel>\r\n<!-- Omitted -->\r\n```\r\n\r\nWith this step, the contact counts are displayed again (refresh the browser to see the changes):\r\n\r\n<br/>\r\n<Image alt=\"Completed tasks\" src=\"/resources/images/get-started/contact-counts.png\" />\r\n\r\nWhen you filtered the data on the client, you used a `Main.xmlui.xs` code-behind file with several helper functions and variables. Since you no longer leverage them, you can remove the `Main.xmlui.xs` file.\r\n\r\nNow that you learned how to retrieve and filter data on the client or the backend site, it is time to add a few finishing touches to the app. The next article will show you how.",
  "cl-app/04-polishing":"import { Callout } from 'nextra/components'\r\nimport { CL_TUTORIAL4 } from '../../meta/downloads'\r\n\r\n# A Few Finishing Touches\r\n\r\nThere are a few things left to improve the user experience in our app.\r\nIn this section, you will make minor changes to enhance the app's look and feel.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou can continue working with the code you completed in the previous tutorial section. Alternatively, you can download the code from <DownloadLink href={CL_TUTORIAL4}>here</DownloadLink> and carry on. \r\n</Callout>\r\n\r\n## Fetching the Number of Records\r\n\r\nWhen the app starts, it takes a fraction of a second to reach the backend and retrieve the number of contact records to display.\r\nYou may still see an \"(undefined)\" label while the data loads.\r\nWe can quickly fix this by showing a \"loading...\" message while the contact data is retrieved from the database.\r\n\r\nCreate a code-behind file for `Main.xmlui` (remember, you must name it `Main.xmlui.xs`). Add a new function, `countLabel` to `Main.xmlui.xs`:\r\n\r\n```javascript copy filename=\"Main.xmlui.xs\"\r\nfunction countLabel(cat) { \r\n  return contactCounts.inProgress ? \"loading...\" : contactCounts.value[cat];\r\n}\r\n```\r\n\r\nThis function takes a name (the name of the contact section) as its argument and retrieves the corresponding number of contact categories. \r\nThe \"true\" value of the `contactCounts.inProgress` property indicates whether the `DataSource` (with the `contactCounts` id) retrieving the contact counts is currently fetching data.\r\n\r\nUpdate the task count expression in the menu item labels to leverage the new, improved display:\r\n\r\n```xmlui copy {4-8} filename=\"Main.xmlui\"\r\n<!-- Omitted -->\r\n<NavPanel>\r\n  <NavLink label=\"Dashboard\" to=\"/\" />\r\n  <NavLink label=\"All Contacts ({countLabel('all')})\" to=\"/contacts/all\" />\r\n  <NavLink label=\"Overdue Reviews ({countLabel('overdue')})\" to=\"/contacts/overdue\"/>\r\n  <NavLink label=\"Today's Reviews ({countLabel('today')})\" to=\"/contacts/today\"/>\r\n  <NavLink label=\"Upcoming Reviews ({countLabel('upcoming')})\" to=\"/contacts/upcoming\"/>\r\n  <NavLink label=\"Completed Reviews ({countLabel('completed')})\" to=\"/contacts/completed\"/>\r\n</NavPanel>\r\n<!-- Omitted -->\r\n```\r\n\r\nNow, instead of \"undefined\", labels display \"loading...\":\r\n\r\n<br/>\r\n<Image alt=\"Loading message\" src=\"/resources/images/get-started/loading-message.png\" />\r\n\r\n## Displaying List Sections\r\n\r\nThe `List` component supports the grouping of list items according to a specified attribute.\r\nIt has a `groupBy` property that enables this grouping.\r\nThe `List` identifies each unique value of the attribute given to `groupBy` and groups the items accordingly.\r\n\r\nIn the previous section, you created a `getSections` function within `Main.xmlui.xs`. Let's use the same function in the `Contact.xmlui.xs` code-behind file; append the definition of `getSections` and a few other functions to it:\r\n\r\n```javascript copy filename=\"Contacts.xmlui.xs\"\r\nfunction getSection(contact) {\r\n  if (contact.reviewCompleted) return \"Completed\";\r\n  if (!contact.reviewDueDate) return \"No Due Date\";\r\n  if (isToday(contact.reviewDueDate)) return \"Today\";\r\n  return getDate(contact.reviewDueDate) < getDate() ? \"Overdue\" : \"Upcoming\";\r\n}\r\n\r\nfunction extendWithSection(contact) {\r\n  return { ...contact, section: getSection(contact) };\r\n}\r\n\r\nfunction loading(contacts, message) {\r\n  return contacts.inProgress ? \"loading...\" : message;\r\n}\r\n```\r\n\r\nThe `extendWithSection` function takes a particular contact and adds a new property named `section`. If you do not precisely understand the `{ ...contact, section: getSection(contact) }` expression, just accept that it does its job.\r\n\r\nThe `loading` function displays the \"loading...\" text while the data is fetched from the backend. When the data is received, it shows the `message` passed.\r\n\r\nTo display the section information, add the `groupBy` property to the `List` and define the template to display section headers:\r\n\r\n```xmlui copy {5-11} filename=\"Contacts.xmlui\" /groupBy=\"section\"/ /map(extendWithSection)/\r\n<Component name=\"Contacts\">\r\n  <DataSource id=\"categories\" url=\"/api/categories\" />\r\n  <List data=\"{$props.data.map(extendWithSection)}\"\r\n    groupBy=\"section\">\r\n    <property name=\"groupHeaderTemplate\">\r\n      <HStack paddingHorizontal=\"$space-normal\" paddingVertical=\"$space-tight\">\r\n        <Text \r\n          variant=\"subtitle\"\r\n          value=\"{$group.key} ({loading(contacts, $group.items.length ?? 0)})\" />\r\n      </HStack>\r\n    </property>\r\n    <!-- Unchanged -->\r\n  </List>\r\n</Component>\r\n```\r\n\r\nThe list now uses the contact records extended with the `section` property (mapping the contacts with the `extendWithSection` function).\r\n\r\nIn this code snippet, the `groupBy` property of `List` names the list's property for grouping items; it is the newly calculated `section` property of a contact record.\r\n\r\nThe highlighted `groupHeaderTemplate` area is the markup that represents the header of a particular item group. The list passes the special `$group` context property to the template. Its value is an object with `key` holding the grouping value; `items` store the items within the particular group.\r\n\r\nNow, When you display all contacts, you can see that items are sectioned:\r\n\r\n<br/>\r\n<Image alt=\"Sectioned items\" src=\"/resources/images/get-started/sectioned-items.png\" />\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nWhen you do not declare a group template, the items are still grouped, but the list does not indicate the group boundaries. Besides `groupHeaderTemplate`, `List` provides a `groupFooterTemplate`. With this property, you can declare a markup for the footer of a section.\r\n</Callout>\r\n\r\n## Expanding and Collapsing Sections\r\n\r\nThe sections of a list can be expanded or collapsed. Unless you declare otherwise, all sections are expanded by default. Using the `$group` context property, you can query the state of the section (`isExpanded`) and use the `toggle` function to expand or collapse the section.\r\n\r\nUpdate the `List` definition in `Contacts`:\r\n\r\n```xmlui copy {5-19} filename=\"Contacts.xmlui\" /$space-normal/ /$space-tight/\r\n<Component name=\"Contacts\">\r\n  <DataSource id=\"categories\" url=\"/api/categories\" />\r\n  <List data=\"{$props.data.map(extendWithSection)}\"\r\n    groupBy=\"section\">\r\n    <property name=\"groupHeaderTemplate\">\r\n      <HStack \r\n        paddingHorizontal=\"$space-normal\" \r\n        paddingVertical=\"$space-tight\"\r\n        verticalAlignment=\"center\"\r\n        onClick=\"$group.toggle\">\r\n          <Text \r\n            variant=\"subtitle\" \r\n            value=\"{$group.key} ({loading(contacts, $group.items.length ?? 0)})\" />\r\n        <SpaceFiller />\r\n        <Icon \r\n          name=\"{$group.isExpanded ? 'chevrondown' : 'chevronright'}\" \r\n          size=\"md\" />  \r\n      </HStack>\r\n    </property>\r\n    <!-- Unchanged -->\r\n  </List>\r\n</Component>\r\n```\r\n\r\nThe `paddingHorizontal` and `paddingVertical` properties of `HStack` (XMLUI calls them **layout properties**) define some spacing around the content within `HStack`. The `$space-normal` and `$space-tight` layout values refer to theme settings (they come from the app's current theme). Using these values ensures that your app accommodates the theme changes.\r\n\r\nNow, you can expand or collapse sections by clicking them. The following figure shows the Completed section in its collapsed state:\r\n\r\n<br/>\r\n<Image alt=\"collapsed sections\" src=\"/resources/images/get-started/section-collapsed.png\" />\r\n\r\n## Section Ordering\r\n\r\nThe order of sections displayed above could be more helpful using a different ordering. With the help of the `defaultGroups` property of the `List`, you can define the order of sections.\r\n\r\nModify the `List` accordingly:\r\n\r\n```xmlui copy {4} filename=\"Contacts.xmlui\"\r\n<!-- Omitted -->\r\n<List \r\n  items=\"{contacts.value.map(t => ({...t, section: getSection(t)}))}\"\r\n  defaultGroups=\"{['Overdue', 'Today', 'Upcoming', 'No Due Date', 'Completed']}\"\r\n  groupBy=\"section\">\r\n  <!-- Omitted -->\r\n</List>\r\n<!-- Omitted -->\r\n```\r\n\r\nYou can see the updated section order:\r\n\r\n<br/>\r\n<Image alt=\"Sections ordered\" src=\"/resources/images/get-started/sections-ordered.png\" />\r\n\r\nWhen you visit a filtered page, only the corresponding section is displayed, like in the following figure:\r\n\r\n<br/>\r\n<Image alt=\"no empty sections\" src=\"/resources/images/get-started/no-empty-sections.png\" />\r\n\r\nSo far, you have displayed only read-only data. In the following section, you will create, edit, and delete contact data.",
  "cl-app/05-editing-data":"import { Callout } from 'nextra/components'\r\nimport { CL_TUTORIAL5 } from '../../meta/downloads'\r\n\r\n# Editing Data\r\n\r\nIn the previous sections, you created several user interfaces displaying contact data. This article teaches you to manipulate data by creating, editing, and deleting contacts.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou can continue working with the code you completed in the previous tutorial section. Alternatively, you can download the code from <DownloadLink href={CL_TUTORIAL5}>here</DownloadLink> and carry on. \r\n</Callout>\r\n\r\n## Preparing the UI\r\n\r\nThere are several ways to add data editing functionality to an app. In this article, you will use a modal dialog to add and edit contact items.\r\n\r\n### Button for New Contacts\r\n\r\nLet's change the layout of the `Contacts` component to add a button above the list (and wrap the button and the list into a `VStack`). Later, when you click this button, it will display a dialog for adding a new contact item.\r\n\r\n```xmlui copy {3-6, 10} filename=\"Contacts.xmlui\"\r\n<Component name=\"Contacts\">\r\n  <DataSource id=\"categories\" url=\"/api/categories\" />\r\n  <VStack>\r\n    <HStack horizontalAlignment=\"end\">\r\n      <Button icon=\"plus\">New Contact</Button>\r\n    </HStack>\r\n    <List \r\n      <!-- Unchanged -->\r\n    </List>\r\n  </VStack>\r\n</Component>\r\n```\r\n\r\nThe `HStack` section adds a button above the list:\r\n\r\n<br/>\r\n<Image alt=\"New contact button\" src=\"/resources/images/get-started/new-contact-button.png\" />\r\n\r\n### Triggers for Edit and Delete\r\n\r\nNext, you should add a context menu to each contact item. This menu appears on the right side of a list item with the following markup in the `Contacts` component:\r\n\r\n```xmlui copy {18-24} filename=\"Contacts.xmlui\"\r\n<Component name=\"Contacts\">\r\n  <DataSource id=\"categories\" url=\"/api/categories\" />\r\n  <VStack>\r\n    <HStack horizontalAlignment=\"end\">\r\n      <Button icon=\"plus\">New Contact</Button>\r\n    </HStack>\r\n    <List data=\"{$props.data.map(extendWithSection)}\"\r\n      defaultGroups=\"{['Overdue', 'Today', 'Upcoming', 'No Due Date', 'Completed']}\"\r\n      groupBy=\"section\">\r\n      <!-- Unchanged -->\r\n      <Card var.categoryName=\"{getCategoryNameById($item.categoryId)}\">\r\n        <HStack verticalAlignment=\"center\">\r\n          <!-- Unchanged -->\r\n          <HStack verticalAlignment=\"center\" horizontalAlignment=\"end\">\r\n            <Badge when=\"{categoryName}\" value=\"{categoryName}\" colorMap=\"{categoriesColorMap}\"/>\r\n            <Text>{smartFormatDate($item.reviewDueDate)}</Text>\r\n          </HStack>\r\n          <DropdownMenu>\r\n            <property name=\"triggerTemplate\">\r\n              <Button icon=\"dotmenu\" variant=\"ghost\" themeColor=\"secondary\"/>\r\n            </property>\r\n            <MenuItem label=\"Edit\" />\r\n            <MenuItem label=\"Delete\" />\r\n          </DropdownMenu>\r\n        </HStack>\r\n      </Card>\r\n    </List>\r\n  </VStack>\r\n</Component>\r\n```\r\n\r\nThe `DropdownMenu` definition adds the context menu to the contact items. You can reveal the menu by clicking the three dots to the right of a particular contect item in the list:\r\n\r\n<br/>\r\n<Image alt=\"Context menu\" src=\"/resources/images/get-started/context-menu.png\" />\r\n\r\n## Contact Data Dialog\r\n\r\nWhen you add a new contact's details or edit a contact, the app displays a form in a modal dialog.\r\nCreate a component, `ContactForm`  (`ContactForm.xmlui` within the `components` folder), to display the dialog:\r\n  \r\n```xmlui copy {5} filename=\"ContactForm.xmlui\" \r\n<Component name=\"ContactForm\">\r\n  <ModalDialog id=\"dialog\" title=\"Add a new Contact\">\r\n    <Text>Contact Form</Text>\r\n  </ModalDialog>\r\n  <method name=\"open\" value=\"dialog.open\" />\r\n</Component>\r\n```\r\n\r\nThis component embeds a `ModalDialog` component to display a dialog on demand. This dialog is only displayed if it is explicitly opened. The `ModalDialog` component is nested within the component definition, so it cannot be displayed outside of `ContactForm` without the component's cooperation. `ContactForm` exposes an `open` method that can be invoked from outside; it displays the dialog by invoking the `dialog.open` method.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nWhatever parameters you pass to the exposed `open` method, XMLUI conveys to the `dialog.open` method when calling it.\r\n</Callout>\r\n\r\n### Showing the Form\r\n\r\nAdd a `ContactForm` component to `Contacts`, and set up click event handler in the New Contact button to display this dialog:\r\n\r\n```xmlui copy {2, 6} filename=\"Contacts.xmlui\" /onClick=\"contactForm.open()\"/\r\n<Component name=\"Contacts\">\r\n  <ContactForm id=\"contactForm\" />\r\n  <DataSource id=\"categories\" url=\"/api/categories\" />\r\n  <VStack>\r\n    <HStack horizontalAlignment=\"end\">\r\n      <Button icon=\"plus\" onClick=\"contactForm.open()\">New Contact</Button>\r\n    </HStack>\r\n      <List>\r\n        <!-- Unchanged -->\r\n      </List>\r\n  </VStack>\r\n</Component>\r\n```\r\n\r\nIn the code you assign an id (`contactForm`) to the dialog component.\r\nThe dialog is not displayed unless you explicitly invoke its exposed `open` method through its identifier by clicking the \"New Contact\" button(`contactForm.open()`):\r\n\r\n<br/>\r\n<Image alt=\"Contact dialog\" src=\"/resources/images/get-started/contact-dialog.png\" />\r\n\r\nYou can reuse this dialog when editing data. Modify the markup of `ContactRow`:\r\n\r\n```xmlui copy {3, 10} filename=\"ContactRow.xmlui\" /onClick=\"contactForm.open()\"/\r\n<Component name=\"ContactRow\">\r\n  <DataSource id=\"categories\" url=\"/api/categories\" />\r\n  <ContactForm id=\"contactForm\" />\r\n  <Card>\r\n    <!-- Unchanged -->\r\n      <DropdownMenu>\r\n        <property name=\"triggerTemplate\">\r\n          <Button icon=\"dotmenu\" variant=\"ghost\" themeColor=\"secondary\"/>\r\n        </property>\r\n        <MenuItem label=\"Edit\" onClick=\"contactForm.open()\"/>\r\n        <MenuItem label=\"Delete\" />\r\n      </DropdownMenu>\r\n    </HStack>\r\n  </Card>\r\n</Component>\r\n```\r\n\r\nYou use the same dialog in the `ContactRow` component here. Clicking the Edit action in the dropdown opens the form imperatively, just as the New Contact button did.\r\n\r\n### Context Sensitive Dialog\r\n\r\nThe dialog always displays its title as \"Add a new Contact\" whether you invoke it with the \"Add button\" or the \"Edit\" menu command. Modify the dialog to test the parameter passed to the `open` function (you invoke it from the `Contacts` component). The `$param` value represents the first parameter passed to `open`.\r\n\r\n```xmlui copy {1, 4, 7} filename=\"ContactForm.xmlui\" /$param/\r\n<Component name=\"ContactForm\">\r\n  <ModalDialog \r\n    id=\"dialog\" \r\n    title=\"{$param ? 'Edit a Contact' : 'Add a new Contact'}\">\r\n    <Text>Contact Form</Text>\r\n  </ModalDialog>\r\n  <method name=\"open\" value=\"dialog.open\" />\r\n</Component>\r\n```\r\n\r\nWhen we edit data, the dialog receives a contact item. However, when we add a new contact, the dialog does not receive any parameters.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou can also use the `$params` (plural form) value, an array of parameters (`open` can be invoked with multiple parameters). In this case, you can use `$params[0]`, `$params[1]`, and so on to get a particular parameter's value. `$param` is the same as `$params[0]`.\r\n</Callout>\r\n\r\nModify `Contacts` to pass the contact item to edit when opening the dialog:\r\n\r\n```xmlui copy {10} filename=\"Contacts.xmlui\" /onClick=\"contactForm.open($item)\"/\r\n<Component name=\"ContactRow\">\r\n  <DataSource id=\"categories\" url=\"/api/categories\" />\r\n  <ContactForm id=\"contactForm\" />\r\n  <Card>\r\n    <!-- Unchanged -->\r\n      <DropdownMenu>\r\n        <property name=\"triggerTemplate\">\r\n          <Button icon=\"dotmenu\" variant=\"ghost\" themeColor=\"secondary\"/>\r\n        </property>\r\n        <MenuItem label=\"Edit\" onClick=\"contactForm.open($item)\"/>\r\n        <MenuItem label=\"Delete\" />\r\n      </DropdownMenu>\r\n    </HStack>\r\n  </Card>\r\n</Component>\r\n```\r\n\r\nNow, when you display the dialog clicking on the \"Edit\" menu, it will display the correct title:\r\n\r\n<br/>\r\n<Image alt=\"Contact dialog #2\" src=\"/resources/images/get-started/contact-dialog-title.png\" />\r\n\r\n## Contact Data Form\r\n\r\nThe current contact dialog has no functionality. To flesh it out, create a form that accepts data entry. \r\n\r\nReplace the `Text` with the highlighted `Form` in `ContactForm`:\r\n\r\n```xmlui copy {5-32} filename=\"ContactForm.xmlui\"\r\n<Component name=\"ContactForm\">\r\n  <ModalDialog \r\n    id=\"dialog\" \r\n    title=\"{$param ? 'Edit a Contact' : 'Add a new Contact'}\">\r\n    <Form \r\n      id=\"contactForm\" \r\n      data=\"{$param}\"\r\n      onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n      <FormItem\r\n        label=\"Full name\" \r\n        placeholder=\"Specify the contact name\" \r\n        bindTo=\"fullName\" autoFocus=\"true\"\r\n        maxLength=\"64\" \r\n        required=\"true\" />\r\n      <FormItem label=\"Review due date\" bindTo=\"reviewDueDate\" type=\"datePicker\" />\r\n      <FormItem\r\n        label=\"Comments\" \r\n        placeholder=\"Add comments here\"\r\n        bindTo=\"comments\"\r\n        type=\"textarea\" \r\n        maxLength=\"256\" />\r\n      <DataSource id=\"categories\" method=\"get\" url=\"/api/categories\"/>\r\n      <FormItem \r\n        placeholder=\"Select a category\" \r\n        bindTo=\"categoryId\"\r\n        initialValue=\"{$props.contact.categoryId}\"\r\n        type=\"select\">\r\n        <Items items=\"{categories.value}\">\r\n          <Option label=\"{$item.name}\" value=\"{$item.id}\"/>\r\n        </Items>\r\n      </FormItem>\r\n    </Form>\r\n  </ModalDialog>\r\n  <method name=\"open\" value=\"dialog.open\" />\r\n</Component>\r\n```\r\n\r\nThe `Form` component is responsible for editing the nested data items. Its `data` property describes the data to edit; we pass the first parameter (`$param`) that is passed to the `open` function to show the dialog. Remember, when we add a new contact, this data is empty. However, the dialog gets the corresponding contact record when editing a contact.\r\n\r\nEach `FormItem` is an input field associated with an attribute of the original `data` via the `bindTo` property.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  The `FormItem` bound to the `categoryId` property is more complex.\r\n  It displays a selection list and uses a `DataSource` (`categories`) to fetch this list's content (with IDs and names).\r\n  The `initialValue` property of this `FormItem` ensures that the selected category is displayed when you edit a contact.\r\n  In this case, `ContactForm` will receive the data to edit in its `contact` property.\r\n  You will add this functionality soon.\r\n</Callout>\r\n\r\nThe `submit` event handler of the `Form` (defined with the `onSubmit` attribute) defines the activity to execute when the form is saved. So far, this event handler does not persist the data; it just displays it in JSON.\r\n\r\nWhen you run the app, adding a new contact displays an empty form. \r\n\r\n<br/>\r\n<Image alt=\"Add new\" src=\"/resources/images/get-started/add-new-contact.png\" />\r\n\r\nFill out the form and click the submit button.\r\nThe current submit event handler displays the JSON representation of the data to save (it does not persist yet):\r\n\r\n<br/>\r\n<Image alt=\"Submit new\" src=\"/resources/images/get-started/submit-new-contact.png\" />\r\n\r\nWhen you click the \"Edit\" context menu of a particular contact, the form displays the data of the record:\r\n\r\n<br/>\r\n<Image alt=\"Edit details\" src=\"/resources/images/get-started/edit-contact-details.png\" />\r\n\r\nIf you modify and save the contact data, you will see a message with the modified contact data that is similar to adding a new one.\r\n\r\n## Saving Data\r\n\r\nYou can edit the form data, but it must still be saved to the backend. You will use methods the backend provides for adding and editing a contact record:\r\n\r\n- The `POST /api/contacts` method inserts a new data record\r\n- The `PUT /api/contacts/{contactId}` method updates the contact record with ID `contactId`\r\n- The `DELETE /api/contacts/{contactId}` method removes the contact record with ID `contactId`\r\n\r\nThe first two methods accept the contact details in their request bodies; the DELETE method does not need a body.\r\n\r\n### Add and Edit a Contact Record\r\n\r\nXMLUI provides an `onSubmit` event handler to declare the submit action. Within this handler, you can invoke the appropriate API endpoint and do other activities related to saving the form's data. The `Contacts` component uses this method to display the data to save.\r\n\r\nMost of the time, submitting a form invokes a particular (REST) API endpoint with a POST or a PUT verb, and the data to save is in the request body. XMLUI offers two properties that help you apply this pattern quickly: ' submitUrl' and `submitMethod`.\r\n\r\nRemove the form's `onSubmit` event handler and add the highlighted code to the form:\r\n\r\n\r\n```xmlui copy {8-9} filename=\"ContactForm.xmlui\" /submitUrl/ /submitMethod/\r\n<Component name=\"ContactForm\">\r\n  <ModalDialog \r\n    id=\"dialog\" \r\n    title=\"{$param ? 'Edit a Contact' : 'Add a new Contact'}\">\r\n    <Form \r\n      id=\"contactForm\" \r\n      data=\"{$param}\"\r\n      submitUrl=\"/api/contacts/{$param.id ?? ''}\" \r\n      submitMethod=\"{$param ? 'put' : 'post'}\">\r\n      <!-- Unchanged -->\r\n</Component>\r\n```\r\n\r\nWhen you add a new item, the `$param` value is undefined; according to the `submiUrl and `submit method` properties, the form will use the `/api/contacts/` URL with the `POST` action. \r\n\r\nHowever, when `$param` holds a contact item, the same properties will drive the form to use `/api/contacts/[id]`, where \"[id]\" is the contact identifier.\r\n\r\nThe form puts the edited data into the request body when submitting the request.\r\n\r\nRefresh the app in the browser and go to the Today's Reviews page. Add a new contact with its review due date set to today. After saving it, the contact appears in the list:\r\n\r\n<br/>\r\n<Image alt=\"New contact saved\" src=\"/resources/images/get-started/new-contact-saved.png\" />\r\n\r\nSimilarly, you can modify a contact. After the changes are saved, the modified contact data is refreshed in the list:\r\n\r\n<br/>\r\n<Image alt=\"Edited contact saved\" src=\"/resources/images/get-started/edited-contact-saved.png\" />\r\n\r\n### Delete a Contact Record\r\n\r\nTo delete a record, invoke the API endpoint directly from the context menu defined in `Contacts`.\r\n\r\n```xmlui copy {11-18} filename=\"Contacts.xmlui\"\r\n<Component name=\"Contacts\">\r\n  <ContactForm id=\"contactForm\" />\r\n  <DataSource id=\"categories\" url=\"/api/categories\" />\r\n    <!-- Unchanged -->\r\n          <DropdownMenu>\r\n            <property name=\"triggerTemplate\">\r\n              <Button icon=\"dotmenu\" variant=\"ghost\" themeColor=\"secondary\"/>\r\n            </property>\r\n            <MenuItem label=\"Edit\" onClick=\"contactForm.open($item)\"/>\r\n            <MenuItem label=\"Delete\">\r\n              <event name=\"click\">\r\n                <APICall\r\n                  url=\"/api/contacts/{$item.id}\"\r\n                  method=\"delete\"\r\n                  confirmTitle=\"Delete Contact {$item.fullName}\"\r\n                  confirmMessage=\"Are you sure you want to delete this contact?\"\r\n                  confirmButtonLabel=\"Delete\" />\r\n              </event>\r\n            </MenuItem>  \r\n          </DropdownMenu>\r\n        </HStack>\r\n      </Card>\r\n    </List>\r\n  </VStack>\r\n</Component>\r\n```\r\n\r\nIn this code snippet, the event handler of the Delete command does not use a script or expression; it declares an `APICall` component, which acts as an event handler by invoking the specified endpoint. According to the definition, the component will invoke a DELETE request using the `/api/contacts/[id]` endpoint to remove the contact with the specified identifier.\r\n\r\nIt is good practice to ask the user for confirmation before deleting a particular record item. `APICall` makes this confirmation as easy as setting a few properties, such as `confirmTitle`, `confirmMessage`, and `ConfirmButtonLabel`. Before invoking the specified API endpoint, `APICall` will display the confirmation dialog. If the user proceeds, the engine invokes the action; otherwise, it cancels it:\r\n\r\n<br/>\r\n<Image alt=\"Delete\" src=\"/resources/images/get-started/delete-contact.png\" />\r\n\r\nNow that you have implemented the core functionality of the contact management system, it is time to add a dashboard to the app.\r\n",
  "cl-app/06-dashboard":"import { Callout } from 'nextra/components'\r\nimport { CL_TUTORIAL6, CL_TUTORIAL_FINAL } from '../../meta/downloads'\r\n\r\n# Create a Dashboard\r\n\r\nThough you created a Dashboard page when starting with this tutorial, that page is still empty.\r\nIt is time to create a dashboard with some information and charts.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou can continue working with the code you completed in the previous tutorial section. Alternatively, you can download the code from <DownloadLink href={CL_TUTORIAL6}>here</DownloadLink> and carry on. \r\n</Callout>\r\n\r\n## A Rudimentary Dashboard\r\n\r\nThe dashboard will display indicative numbers of significant review counts.\r\nThese indicators will be housed in interactive cards. By clicking on a card, the app will navigate to the list of the corresponding contacts.\r\n\r\nCreate a new file, `Dashboard.xmlui` within the `components` folder:\r\n\r\n```xmlui copy filename=\"Dashboard.xmlui\"\r\n<Component name=\"Dashboard\">\r\n  <DataSource id=\"contactCounts\" url=\"/api/contactcounts\" />\r\n  <FlowLayout var.counts=\"{contactCounts.value}\">\r\n    <H2>Overdue Reviews: {counts.overdue}</H2>\r\n    <H2>Today's Reviews: {counts.today}</H2>\r\n    <H2>Upcoming Reviews: {counts.upcoming}</H2>\r\n    <H2>Completed Reviews: {counts.completed}</H2>\r\n  </FlowLayout>\r\n</Component>\r\n```\r\n\r\nThe `Dashboard` component uses a `DataSource` with the `/api/contactcounts` endpoint (you used it earlier) to get some counter values to display. The `counts` variable allows referencing the individual counters shorter, for example, using `counts.overdue` instead of `contactCounts.value.overdue`.\r\n\r\nUse this new component instead of the placeholder text within `Main.xmlui`:\r\n\r\n```xmlui copy {4-6} filename=\"Main.xmlui\"\r\n<App layout=\"vertical-full-header\">\r\n  <!-- Omitted -->\r\n  <Pages>\r\n    <Page url=\"/\">\r\n      <Dashboard />\r\n    </Page>\r\n    <!-- Omitted -->\r\n</App>\r\n```\r\n\r\nEarlier, you created a `DataSource` with the `contactCounts` ID, which retrieves several counters in an object. The dashboard displays this data.\r\n\r\nWhen you navigate to the Dashboard page, it displays a some numeric information:\r\n\r\n<br/>\r\n<Image alt=\"Rudimentary dashboard\" src=\"/resources/images/get-started/rudimentary-dashboard.png\" />\r\n\r\n## Cards with Numbers\r\n\r\nThis user interface needs to look more exciting and helpful.\r\nYour next task will be to create a card that highlights useful numerical information.\r\nStart with the `InfoCard` component by adding the `InfoCard.xmlui` file to the `components` folder with the following code:\r\n\r\n```xmlui copy filename=\"InfoCard.xmlui\"\r\n<Component name=\"InfoCard\">\r\n  <Card height=\"{$props.height}\">\r\n    <Text variant=\"subtitle\" value=\"{$props.title}\"/>\r\n    <CVStack width=\"100%\">\r\n      <H2 color=\"{$props.color}\" fontSize=\"4em\">\r\n        {$props.isLoading ? \"...\" : $props.value}\r\n      </H2>\r\n    </CVStack>\r\n  </Card>\r\n</Component>\r\n```\r\n\r\n`InforCard` allows you to set its title text, color, and number to display. It also receives an `isLoading` property to display \"...\" while the counter data is being fetched from the backend.\r\n\r\nChange the dashboard to use the `InfoCard` component:\r\n\r\n```xmlui copy filename=\"Dashboard.xmlui\"\r\n<Component name=\"Dashboard\">\r\n  <DataSource id=\"contactCounts\" url=\"/api/contactcounts\" />\r\n  <FlowLayout \r\n    var.counts=\"{contactCounts.value}\"\r\n    var.isLoading=\"{contactCounts.inProgress}\">\r\n    <InfoCard \r\n      width=\"25%\" title=\"Reviews Overdue\" \r\n      isLoading=\"{isLoading}\" \r\n      value=\"{counts.overdue}\" \r\n      color=\"$color-danger\" />\r\n    <InfoCard \r\n      width=\"25%\" \r\n      title=\"Today's Reviews\" \r\n      isLoading=\"{isLoading}\" \r\n      value=\"{counts.today}\" \r\n      color=\"$color-warning\" />\r\n    <InfoCard \r\n      width=\"25%\" \r\n      title=\"Upcoming Reviews\" \r\n      isLoading=\"{isLoading}\" \r\n      value=\"{counts.upcoming}\" />\r\n    <InfoCard \r\n      width=\"25%\" \r\n      title=\"Completed Reviews\" \r\n      isLoading=\"{isLoading}\" \r\n      value=\"{counts.completed}\"\r\n      color=\"$color-valid\" />\r\n  </FlowLayout>\r\n</Component>\r\n```\r\n\r\nEach `InfoCard` displays its associated value. The `FlowLayout` component and setting a width of 25% ensures items placed inside will use 25% of the available width of available space:\r\n\r\n<br/>\r\n<Image alt=\"Dashboard numbers\" src=\"/resources/images/get-started/dashboard-numbers.png\" />\r\n\r\n## Adding Navigation\r\n\r\nThe dashboard is just a summary of essential numbers.\r\nTo let the user investiage what is behind the number, you need to let them navigate to the list of corresponding contacts.\r\n\r\nPrepare the `InfoCard` component to receive a `link` property and navigate to that link when it is clicked:\r\n\r\n```xmlui copy {4} filename=\"InfoCard.xmlui\"\r\n<Component name=\"InfoCard\">\r\n  <Card \r\n    height=\"{$props.height}\"\r\n    onClick=\"{Actions.navigate('/contacts/' + $props.link)}\">\r\n    <Text variant=\"subtitle\" value=\"{$props.title}\"/>\r\n    <CVStack width=\"100%\">\r\n      <H2 color=\"{$props.color}\" fontSize=\"4em\">\r\n        {$props.isLoading ? \"...\" : $props.value}\r\n      </H2>\r\n    </CVStack>\r\n  </Card>\r\n</Component>\r\n```\r\n\r\nThe `Actions.navigate` method visits the specified link. Remember, the `<NavPanel>` section of `Main.xmlui` contains the links in the menu; all of them start with `/contacts`.\r\n\r\nSet the `link` property's value for each `InfoCard` on the dashboard:\r\n\r\n```xmlui copy {10, 17, 23, 30} filename=\"Dashboard.xmlui\"\r\n<Component name=\"Dashboard\">\r\n  <DataSource id=\"contactCounts\" url=\"/api/contactcounts\" />\r\n  <FlowLayout \r\n    var.counts=\"{contactCounts.value}\"\r\n    var.isLoading=\"{contactCounts.inProgress}\">\r\n    <InfoCard \r\n      width=\"25%\" title=\"Reviews Overdue\" \r\n      isLoading=\"{isLoading}\" \r\n      value=\"{counts.overdue}\"\r\n      link=\"overdue\" \r\n      color=\"$color-danger\" />\r\n    <InfoCard \r\n      width=\"25%\" \r\n      title=\"Today's Reviews\" \r\n      isLoading=\"{isLoading}\" \r\n      value=\"{counts.today}\" \r\n      link=\"today\"\r\n      color=\"$color-warning\" />\r\n    <InfoCard \r\n      width=\"25%\" \r\n      title=\"Upcoming Reviews\" \r\n      isLoading=\"{isLoading}\" \r\n      link=\"upcoming\"\r\n      value=\"{counts.upcoming}\" />\r\n    <InfoCard \r\n      width=\"25%\" \r\n      title=\"Completed Reviews\" \r\n      isLoading=\"{isLoading}\" \r\n      value=\"{counts.completed}\"\r\n      link=\"completed\"\r\n      color=\"$color-valid\" />\r\n  </FlowLayout>\r\n</Component>\r\n```\r\n\r\nWhen you click a dashboard item, the UI logic will take you to the corresponding contact list.\r\n\r\n## Recent Contacts\r\n\r\nIt would be great to see the recently added contacts on the dashboard.\r\nIn this section, you will add a table displaying the last five contacts added in descending order.\r\n\r\nUpdate the `Dashboard.xmlui` file by appending a new `Card` component after the last `InfoCard`:\r\n\r\n```xmlui copy {6-16} filename=\"Dashboard.xmlui\"\r\n<Component \r\n  name=\"Dashboard\" \r\n  var.counts=\"{$props.contactCountsSource.value}\"\r\n  var.isLoading=\"{$props.contactCountsSource.inProgress}\">\r\n      <!-- Unchanged -->\r\n      <Card width=\"50%\" height=\"350px\">\r\n        <H4>Recent Contacts</H4>\r\n        <Table data=\"/api/contacts-recent\" height=\"*\">\r\n          <Column header=\"Category\" width=\"80px\">\r\n            <Text>{$item.categoryId}</Text>\r\n          </Column>\r\n          <Column header=\"FullName\" width=\"*\">\r\n            <Text maxLines=\"1\">{$item.fullName}</Text>\r\n          </Column>\r\n        </Table>\r\n      </Card>\r\n    </FlowLayout>\r\n  </VStack>\r\n</Component>\r\n```\r\n\r\nThis code renders a `Card` (the same layout container type used within `InfoCard`) and a `Table` bound to the `GET /api/contacts-recent` endpoint.\r\nThe `Table` has two column definition items (`Column`) to name the columns to display in the table:\r\n\r\n<br/>\r\n<Image alt=\"Initial table\" src=\"/resources/images/get-started/initial-table.png\" />\r\n\r\nCategory IDs do not give you a hint about a particular category.\r\nIt would be great if the first column displayed the category's name with a color badge as in the contact list.\r\n\r\nCreate a new component, `CategoryBadge.xmlui` (within the `components` folder):\r\n\r\n```xmlui copy filename=\"CategoryBadge.xmlui\"\r\n<Component \r\n  name=\"CategoryBadge\"\r\n  var.categoryName=\"{getCategoryNameById($props.categoryId)}\">\r\n  <DataSource id=\"categories\" url=\"/api/categories\" />\r\n  <Badge when=\"{categoryName}\" value=\"{categoryName}\" colorMap=\"{categoriesColorMap}\"/>\r\n</Component>\r\n```\r\n\r\nAdd a code-behind file, `CategoryBadge.xmlui.xs`, to the new component using the similar technique you learned in the [Adding a Badge](./02-use-list/#categorizing-data) section:\r\n\r\n```js copy filename=\"CategoryBadge.xmlui.xs\"\r\n// Create a color map for all categories\r\nvar categoriesColorMap = toHashObject(categories.value, \"name\", \"color\");\r\n\r\n// Resolve category name by id\r\nfunction getCategoryNameById(categoryId) {\r\n  const category = findByField(categories.value, \"id\", categoryId);\r\n  return category ? category.name : \"\";\r\n}\r\n```\r\n\r\nChange the `Text` element within the first `Columnn` to the new `CategoryBadge` element and update the width of the Category column:\r\n\r\n```xmlui copy {10-12} filename=\"Dashboard.xmlui\"\r\n<Component name=\"Dashboard\">\r\n  <DataSource id=\"contactCounts\" url=\"/api/contactcounts\" />\r\n  <FlowLayout \r\n    var.counts=\"{contactCounts.value}\"\r\n    var.isLoading=\"{contactCounts.inProgress}\">\r\n    <!-- Unchanged -->\r\n    <Card width=\"50%\" height=\"350px\">\r\n        <H4>Recent Contacts</H4>\r\n        <Table data=\"/api/contacts-recent\" height=\"*\">\r\n          <Column header=\"Category\" width=\"200px\">\r\n            <CategoryBadge categoryId=\"{$item.categoryId}\" />\r\n          </Column>\r\n          <Column header=\"FullName\" width=\"*\">\r\n            <Text maxLines=\"1\">{$item.fullName}</Text>\r\n          </Column>\r\n        </Table>\r\n      </Card>      \r\n  </FlowLayout>\r\n</Component>\r\n```\r\n\r\n<br/>\r\n<Image alt=\"Table with badge\" src=\"/resources/images/get-started/table-with-badge.png\" />\r\n\r\nThe new `CategoryBadge` component can replace the previous markup to display the category in `Contact.xmlui`. Change `Badge` to `CategoryBadge`:\r\n\r\n```xmlui copy {3, 15} filename=\"Contact.xmlui\" /CategoryBadge/\r\n<Component name=\"Contacts\">\r\n  <ContactForm id=\"contactForm\" />\r\n  <DataSource id=\"categories\" url=\"/api/categories\" />\r\n  <VStack>\r\n    <HStack horizontalAlignment=\"end\">\r\n      <Button icon=\"plus\" onClick=\"contactForm.open()\">New Contact</Button>\r\n    </HStack>\r\n    <List data=\"{$props.data.map(extendWithSection)}\"\r\n      defaultGroups=\"{['Overdue', 'Today', 'Upcoming', 'No Due Date', 'Completed']}\"\r\n      groupBy=\"section\">\r\n      <!-- Unchanged -->\r\n      <Card var.categoryName=\"{getCategoryNameById($item.categoryId)}\">\r\n          <!-- Unchanged -->\r\n          <HStack verticalAlignment=\"center\" horizontalAlignment=\"end\">\r\n            <CategoryBadge categoryId=\"{$item.categoryId}\" />\r\n            <Text>{smartFormatDate($item.reviewDueDate)}</Text>\r\n          </HStack>\r\n          <!-- Unchanged -->\r\n      </Card>\r\n    </List>\r\n  </VStack>\r\n</Component>\r\n```\r\n\r\nYou do not need the `categories` DataSource in `Contacts`, as `ContactRow` no longer uses it.\r\nYou can remove it from `Contacts.xmlui`.\r\n\r\n## Conclusion\r\n\r\nThis concludes the step-by-step tutorial.\r\n\r\nSee the [How to](../howto.mdx) section for shorter, concise code snippets showcasing common UI building patterns.\r\nTo see the basic use case of different components found in XMLUI, see the [Basic Components](../create-apps/basic-components.mdx) article.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou can download the code of the completed tutorial from <DownloadLink href={CL_TUTORIAL_FINAL}>here</DownloadLink>. \r\n</Callout>\r\n",
  "component-devs":"import { Callout } from 'nextra/components'\r\n\r\n# Developing Custom Components\r\n\r\n<Callout type=\"warning\">\r\nThis page is under construction.\r\n</Callout>",
  "components-and-themes":"import { Callout } from 'nextra/components'\r\n\r\n# Components and Themes Overview\r\n\r\n<Callout type=\"warning\">\r\nThis page is under construction.\r\n</Callout>\r\n",
  "components":"# Component Reference\r\n\r\nThis section contains reference information about the components shipped with the framework. Select a particular component to learn more about its features, properties, events, APIs, and styling.\r\n\r\n## Components\r\n\r\n| Num | Component | Description | Status |\r\n| :---: | :---: | --- | :---: |\r\n| 1 | [APICall](./components/APICall.mdx) | `APICall` is used to mutate (create, update or delete) some data on the backend. It is similar in nature to the `DataSource` component which retrieves data from the backend. | stable |\r\n| 2 | [App](./components/App.mdx) | The `App` component provides a UI frame for XMLUI apps. According to predefined (and run-time configurable) structure templates, `App` allows you to display your preferred layout. | stable |\r\n| 3 | [AppHeader](./components/AppHeader.mdx) | `AppHeader` is a placeholder within `App` to define a custom application header. | experimental |\r\n| 4 | [AppState](./components/AppState.mdx) | AppState is a functional component (without a visible user interface) that helps store and manage the app's state. | stable |\r\n| 5 | [AutoComplete](./components/AutoComplete.mdx) | This component is a dropdown with a list of options. According to the `multi` property, the user can select one or more items. | experimental |\r\n| 6 | [Avatar](./components/Avatar.mdx) | The `Avatar` component represents a user, group (or other entity's) avatar with a small image or initials. | stable |\r\n| 7 | [Backdrop](./components/Backdrop.mdx) | The `Backdrop` component is a semi-transparent overlay that appears on top of its child component to obscure or highlight the content behind it. | stable |\r\n| 8 | [Badge](./components/Badge.mdx) | The `Badge` is a text label that accepts a color map to define its background color and, optionally, its label color. | stable |\r\n| 9 | [Bookmark](./components/Bookmark.mdx) | As its name suggests, this component places a bookmark into its parent component's view. The component has an `id` that you can use in links to navigate (scroll to) the bookmark's location. | stable |\r\n| 10 | [Breakout](./components/Breakout.mdx) | The `Breakout` component creates a breakout section. It allows its child to occupy the entire width of the UI even if the app or the parent container constrains the maximum content width. | stable |\r\n| 11 | [Button](./components/Button.mdx) | Button is an interactive element that triggers an action when clicked. | stable |\r\n| 12 | [Card](./components/Card.mdx) | The `Card` component is a container for cohesive elements, often rendered visually as a card. | stable |\r\n| 13 | [ChangeListener](./components/ChangeListener.mdx) | `ChangeListener` is a functional component (it renders no UI) to trigger an action when a particular value (component property, state, etc.) changes. | stable |\r\n| 14 | [Checkbox](./components/Checkbox.mdx) | The `Checkbox` component allows users to make binary choices, typically between checked or unchecked. It consists of a small box that can be toggled on or off by clicking on it. | stable |\r\n| 15 | [CHStack](./components/CHStack.mdx) | This component represents a stack that renders its contents horizontally and aligns that in the center along both axes. | stable |\r\n| 16 | [ColorPicker](./components/ColorPicker.mdx) | This component allows the user to select a color with the browser's default color picker control. | stable |\r\n| 17 | [Column](./components/Column.mdx) | The `Column` component can be used within a `Table` to define a particular table column's visual properties and data bindings. | stable |\r\n| 18 | [ContentSeparator](./components/ContentSeparator.mdx) | A `ContentSeparator` is a component that divides or separates content visually within a layout. It serves as a visual cue to distinguish between different sections or groups of content, helping to improve readability and organization. | stable |\r\n| 19 | [CVStack](./components/CVStack.mdx) | This component represents a stack that renders its contents vertically and aligns that in the center along both axes. | stable |\r\n| 20 | [DataSource](./components/DataSource.mdx) | The `DataSource` component manages fetching data from an API endpoint. This component automatically manages the complexity of the fetch operation and caching. To manipulate data on the backend, use the [`APICall`](./APICall.mdx) component. | stable |\r\n| 21 | [DatePicker](./components/DatePicker.mdx) | A datepicker component enables the selection of a date or a range of dates in a specified format from an interactive display. | experimental |\r\n| 22 | [DropdownMenu](./components/DropdownMenu.mdx) | This component represents a dropdown menu with a trigger. When the user clicks the trigger, the dropdown menu displays its items. | stable |\r\n| 23 | [EmojiSelector](./components/EmojiSelector.mdx) | The `EmojiSelector` component provides users with a graphical interface to browse, search and select emojis to insert into text fields, messages, or other forms of communication. | experimental |\r\n| 24 | [FileInput](./components/FileInput.mdx) | The `FileInput` is a user interface component that allows users to select files from their device's file system for upload (or processing its content otherwise). | experimental |\r\n| 25 | [FileUploadDropZone](./components/FileUploadDropZone.mdx) | The `FileUploadDropZone` component allows users to upload files to a web application by dragging and dropping files from their local file system onto a designated area within the UI. | stable |\r\n| 26 | [FlowLayout](./components/FlowLayout.mdx) | This layout component is used to position content in rows with an auto wrapping feature: if the length of the items exceed the available space the layout will wrap into a new line. | stable |\r\n| 27 | [Footer](./components/Footer.mdx) | The `Footer` is a component that acts as a placeholder within `App`. | stable |\r\n| 28 | [Form](./components/Form.mdx) | A `Form` is a fundamental component that displays user interfaces that allow users to input (or change) data and submit it to the app (a server) for further processing. | experimental |\r\n| 29 | [FormItem](./components/FormItem.mdx) | A `FormItem` component represents a single input element within a `Form`. The value within the `FormItem` may be associated with a particular property within the encapsulating `Form` component's data. | experimental |\r\n| 30 | [FormSection](./components/FormSection.mdx) | The `FormSection` is a component that groups cohesive elements together within a `Form`. This grouping is indicated visually: the child components of the `FormSection` are placed in a [`FlowLayout`](./FlowLayout.mdx) component. | experimental |\r\n| 31 | [Fragment](./components/Fragment.mdx) | The `Fragment` component encloses multiple child components into a single root component, so it can be used where only a single component definition is allowed. | stable |\r\n| 32 | [H1](./components/H1.mdx) | Represents a heading level 1 text | stable |\r\n| 33 | [H2](./components/H2.mdx) | Represents a heading level 2 text | stable |\r\n| 34 | [H3](./components/H3.mdx) | Represents a heading level 3 text | stable |\r\n| 35 | [H4](./components/H4.mdx) | Represents a heading level 4 text | stable |\r\n| 36 | [H5](./components/H5.mdx) | Represents a heading level 5 text | stable |\r\n| 37 | [H6](./components/H6.mdx) | Represents a heading level 6 text | stable |\r\n| 38 | [Heading](./components/Heading.mdx) | Represents a heading text | stable |\r\n| 39 | [HSplitter](./components/HSplitter.mdx) | The `Splitter` component divides a container (such as a window, panel, pane, etc.) into two resizable sections. | stable |\r\n| 40 | [HStack](./components/HStack.mdx) | This component represents a stack rendering its contents horizontally. | stable |\r\n| 41 | [Icon](./components/Icon.mdx) | This component is the representation of an icon. | experimental |\r\n| 42 | [Image](./components/Image.mdx) | The `Image` component represents or depicts an object, scene, idea, or other concept with a picture. | stable |\r\n| 43 | [Items](./components/Items.mdx) | The `Items` component maps sequential data items into component instances, representing each data item as a particular component. | stable |\r\n| 44 | [Link](./components/Link.mdx) | A `Link` component represents a navigation target within the app or a reference to an external web URL. | stable |\r\n| 45 | [List](./components/List.mdx) | The `List` component is a robust layout container that renders associated data items as a list of components. `List` is virtualized; it renders only items that are visible in the viewport. | experimental |\r\n| 46 | [Logo](./components/Logo.mdx) | The `Logo` component represents a logo or a brand symbol. Usually, you use this component in the [`AppHeader`](./AppHeader.mdx#logotemplate). | experimental |\r\n| 47 | [Markdown](./components/Markdown.mdx) | `Markdown` displays plain text styled using markdown syntax. | stable |\r\n| 48 | [MenuItem](./components/MenuItem.mdx) | This property represents a leaf item in a menu hierarchy. Clicking the item triggers an action. | stable |\r\n| 49 | [MenuSeparator](./components/MenuSeparator.mdx) | This component displays a separator line between menu items. | stable |\r\n| 50 | [ModalDialog](./components/ModalDialog.mdx) | The `ModalDialog` component defines a modal dialog UI element that can be displayed over the existing UI - triggered by some action. | stable |\r\n| 51 | [NavGroup](./components/NavGroup.mdx) | The `NavGroup` component is a container for grouping related navigation targets (`NavLink` components). It can be displayed as a submenu in the App's UI. | stable |\r\n| 52 | [NavLink](./components/NavLink.mdx) | The `NavLink` component defines a navigation target (app navigation menu item) within the app; it is associated with a particular in-app navigation target (or an external link). | stable |\r\n| 53 | [NavPanel](./components/NavPanel.mdx) | `NavPanel` is a placeholder within `App` to define the app's navigation (menu) structure. | stable |\r\n| 54 | [NoResult](./components/NoResult.mdx) | `NoResult` is a component that displays a visual indication that some data query (search) resulted in no (zero) items. | stable |\r\n| 55 | [NumberBox](./components/NumberBox.mdx) | A `NumberBox` component allows users to input numeric values: either integer or floating point numbers. It also accepts empty values, where the stored value will be of type `null`. | experimental |\r\n| 56 | [Option](./components/Option.mdx) | `Option` is a non-visual component describing a selection option. Other components (such as `Select`, `AutoComplete`, and others) may use nested `Option` instances from which the user can select. | stable |\r\n| 57 | [Page](./components/Page.mdx) | The `Page` component defines what content is displayed when the user navigates to a particular URL that is associated with the page. | stable |\r\n| 58 | [PageMetaTitle](./components/PageMetaTitle.mdx) | A PageMetaTitle component allows setting up (or changing) the app title to display with the current browser tab. | stable |\r\n| 59 | [Pages](./components/Pages.mdx) | The `Pages` component is used as a container for [`Page`](./Page.mdx) components within an [`App`](./App.mdx). | stable |\r\n| 60 | [PasswordInput](./components/PasswordInput.mdx) | The `Password` component is a specialized version of the `TextBox` component that allows users to input and edit passwords. | experimental |\r\n| 61 | [ProgressBar](./components/ProgressBar.mdx) | A `ProgressBar` component visually represents the progress of a task or process. | stable |\r\n| 62 | [Queue](./components/Queue.mdx) | The `Queue` component provides an API to enqueue elements and defines events to process queued elements in a FIFO order. | stable |\r\n| 63 | [RadioGroup](./components/RadioGroup.mdx) | The `RadioGroup` input component is a group of radio buttons ([`RadioGroupOption`](./RadioGroupOption.mdx) components) that allow users to select only one option from the group at a time. | stable |\r\n| 64 | [RealTimeAdapter](./components/RealTimeAdapter.mdx) | `RealTimeAdapter` is a non-visual component that listens to real-time events through long-polling. | experimental |\r\n| 65 | [Redirect](./components/Redirect.mdx) | `Redirect` is a component that immediately redirects the browser to the URL in its `to` property when it gets visible (its `when` property gets `true`). The redirection works only within the app. | stable |\r\n| 66 | [Select](./components/Select.mdx) | Provides a dropdown with a list of options to choose from. | experimental |\r\n| 67 | [SelectionStore](./components/SelectionStore.mdx) | The `SelectionStore` is a non-visual component that may wrap components (items) and manage their selection state to accommodate the usage of other actions. | experimental |\r\n| 68 | [Slider](./components/Slider.mdx) | The `Slider` component allows you to select a numeric value between a range specified by minimum and maximum values. | experimental |\r\n| 69 | [SpaceFiller](./components/SpaceFiller.mdx) | The `SpaceFiller` is a component that works well in layout containers to fill the remaining (unused) space. Its behavior depends on the layout container in which it is used. | stable |\r\n| 70 | [Spinner](./components/Spinner.mdx) | The `Spinner` component is an animated indicator that represents a particular action in progress without a deterministic progress value. | stable |\r\n| 71 | [Splitter](./components/Splitter.mdx) | The `Splitter` component divides a container (such as a window, panel, pane, etc.) into two resizable sections. | stable |\r\n| 72 | [Stack](./components/Stack.mdx) | `Stack` is a layout container displaying children in a horizontal or vertical stack. | stable |\r\n| 73 | [StickyBox](./components/StickyBox.mdx) | The `StickyBox` is a component that \"sticks\" or remains fixed at the top or bottom position on the screen as the user scrolls. | experimental |\r\n| 74 | [SubMenuItem](./components/SubMenuItem.mdx) | This component represents a nested menu item within another menu or menu item. | stable |\r\n| 75 | [Switch](./components/Switch.mdx) | The `Switch` component is a user interface element that allows users to toggle between two states: on and off. It consists of a small rectangular or circular button that can be moved left or right to change its state. | stable |\r\n| 76 | [TabItem](./components/TabItem.mdx) | `TabItem` is a non-visual component describing a tab. Tabs component may use nested TabItem instances from which the user can select. | stable |\r\n| 77 | [Table](./components/Table.mdx) | `Table` is a component that displays cells organized into rows and columns. The `Table` component is virtualized so it only renders visible cells. | stable |\r\n| 78 | [TableOfContents](./components/TableOfContents.mdx) | The `TableOfContents` component collects headings and bookmarks within the current page and displays them in a tree representing their hierarchy. When you select an item in this tree, the component navigates the page to the selected position. | experimental |\r\n| 79 | [Tabs](./components/Tabs.mdx) | The `Tabs` component provides a tabbed layout where each tab has a clickable label and content. | experimental |\r\n| 80 | [Text](./components/Text.mdx) | The `Text` component displays textual information in a number of optional styles and variants. | stable |\r\n| 81 | [TextArea](./components/TextArea.mdx) | `TextArea` is a component that provides a multiline text input area. | experimental |\r\n| 82 | [TextBox](./components/TextBox.mdx) | The `TextBox` is an input component that allows users to input and edit textual data. | experimental |\r\n| 83 | [Theme](./components/Theme.mdx) | The `Theme` component provides a way to define a particular theming context for its nested components. The XMLUI framework uses `Theme` to define the default theming context for all of its child components. Theme variables and theme settings only work in this context. | stable |\r\n| 84 | [ToneChangerButton](./components/ToneChangerButton.mdx) | The `ToneChangerButton` component is a component that allows the user to change the tone of the app. | experimental |\r\n| 85 | [VSplitter](./components/VSplitter.mdx) | The `Splitter` component divides a container (such as a window, panel, pane, etc.) into two resizable sections. | stable |\r\n| 86 | [VStack](./components/VStack.mdx) | This component represents a stack rendering its contents vertically. | stable |\r\n",
  "components/APICall":"import { Callout } from \"nextra/components\";\r\n\r\n# APICall [#component-apicall]\r\n\r\n`APICall` is used to mutate (create, update or delete) some data on the backend. It is similar in nature to the `DataSource` component which retrieves data from the backend.\r\n\r\nThe component provides context values with which you can access some internal properties:\r\n\r\n- `$param`: This value represents the first parameters passed to the `execute()` method to display the modal dialog.\r\n- `$params`: This value represents the array of parameters passed to the `execute()` method. You can use `$params[0]` to access the first and `$params[1]` to access the second (and so on) parameters. `$param` is the same as `$params[0]`.\r\n\r\n## Properties\r\n\r\n### `body`\r\n\r\nThis property sets the request body. The object you pass here will be serialized to JSON when sending the request. Use the `rawBody` property to send another request body using its native format. When you define `body` and `rawBody`, the latest one prevails.\r\n\r\n### `completedNotificationMessage`\r\n\r\nThis property defines the message to display automatically when the operation has been completed.\r\n\r\nThis property customizes the success message displayed in a toast after the finished API invocation. The `$result` context variable can refer to the response body. For example, you can use the following code snippet to display the first 100 characters in the completed operation's response body:\r\n\r\n```xmlui copy\r\n <APICall\r\n  id=\"ds\"\r\n  method=\"post\"\r\n  url=\"/api/shopping-list\" \r\n  completedNotificationMessage=\"Result: {JSON.stringify($result).substring(0, 100)}\" />\r\n```\r\n\r\n### `confirmButtonLabel`\r\n\r\nThis optional string property enables the customization of the submit button in the confirmation dialog that is displayed before the `APICall` is executed.\r\n\r\n### `confirmMessage`\r\n\r\nThis optional string sets the message in the confirmation dialog that is displayed before the `APICall` is executed.\r\n\r\n### `confirmTitle`\r\n\r\nThis optional string sets the title in the confirmation dialog that is displayed before the `APICall` is executed.\r\n\r\n### `errorNotificationMessage`\r\n\r\nThis property defines the message to display automatically when the operation results in an error.\r\n\r\nThis property customizes the message displayed in a toast when the API invocation results in an error. The `$error.statusCode` context variable can refer to the response's status code, while `$error. details` to the response body. For example, you can use the following code snippet to display the status code and the details:\r\n\r\n```xmlui copy\r\n <APICall\r\n  id=\"ds\"\r\n  method=\"post\"\r\n  url=\"/api/shopping-list\" \r\n  errorNotificationMessage=\"${error.statusCode}, {JSON.stringify($error.details)}\" />\r\n```\r\n\r\n### `headers`\r\n\r\nYou can define request header values as key and value pairs, where the key is the ID of the particular header and the value is that header's value.\r\n\r\n### `inProgressNotificationMessage`\r\n\r\nThis property customizes the message that is displayed in a toast while the API operation is in progress.\r\n\r\n### `method (default: \"get\")`\r\n\r\nThe method of data manipulation can be done via setting this property.\r\n\r\nAvailable values: `get` **(default)**, `post`, `put`, `delete`, `patch`, `head`, `options`, `trace`, `connect`\r\n\r\n### `queryParams`\r\n\r\nThis property sets the query parameters for the request. The object you pass here will be serialized to a query string and appended to the request URL. You can specify key and value pairs where the key is the name of a particular query parameter and the value is that parameter's value.\r\n\r\n### `rawBody`\r\n\r\nThis property sets the request body to the value provided here without any conversion. Use the * `body` property if you want the object sent in JSON. When you define `body` and `rawBody`, the latest one prevails.\r\n\r\n### `url (required)`\r\n\r\nUse this property to set the URL to send data to.\r\n\r\n## Events\r\n\r\n### `beforeRequest`\r\n\r\nThis event fires before the request is sent. Returning an explicit boolean`false` value will prevent the request from being sent.\r\n\r\n### `error`\r\n\r\nThis event fires when a request results in an error.\r\n\r\n### `success`\r\n\r\nThis event fires when a request results in a success.\r\n\r\n## Exposed Methods\r\n\r\n### `execute`\r\n\r\nThis method triggers the invocation of the API. You can pass an arbitrary number of parameters to the method. In the `APICall` instance, you can access those with the `$param` and `$params` context values.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/App":"import { Callout } from \"nextra/components\";\r\n\r\nimport horizontal from  \"../../component-samples/App/horizontal.xmlui\";\r\nimport horizontalSticky from  \"../../component-samples/App/horizontal-sticky.xmlui\";\r\nimport condensed from  \"../../component-samples/App/condensed.xmlui\";\r\nimport condensedSticky from  \"../../component-samples/App/condensed-sticky.xmlui\";\r\nimport vertical from  \"../../component-samples/App/vertical.xmlui\";\r\nimport verticalSticky from  \"../../component-samples/App/vertical-sticky.xmlui\";\r\nimport verticalFullHeader from  \"../../component-samples/App/vertical-full-header.xmlui\";\r\n\r\n# App [#component-app]\r\n\r\nThe `App` component provides a UI frame for XMLUI apps. According to predefined (and run-time configurable) structure templates, `App` allows you to display your preferred layout.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou can learn more details about using this component [here](../learning/using-components/app-component).\r\n</Callout>\r\n\r\n## Properties\r\n\r\n### `defaultTheme (default: \"xmlui\")`\r\n\r\nThis property sets the app's default theme.\r\n\r\n### `defaultTone (default: \"light\")`\r\n\r\nThis property sets the app's default tone (\"light\" or \"dark\").\r\n\r\nAvailable values: `light` **(default)**, `dark`\r\n\r\n### `layout`\r\n\r\nThis property sets the layout template of the app. This setting determines the position and size of the app parts (such as header, navigation bar, footer, etc.) and the app's scroll behavior.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `vertical` | This layout puts the navigation bar on the left side and displays its items vertically. The main content is aligned to the right (including the header and the footer), and its content is a single scroll container; every part of it moves as you scroll the page. This layout does not display the logo in the app header. |\r\n| `vertical-sticky` | Similar to `vertical`, the header and the navigation bar dock to the top of the main content's viewport, while the footer sticks to the bottom. This layout does not display the logo in the app header. |\r\n| `vertical-full-header` | Similar to `vertical-sticky`. However, the header and the navigation bar dock to the top of the app's window, while the footer sticks to the bottom. |\r\n| `condensed` | Similar to `horizontal`. However, the header and the navigation bar are in a single header block. (default) |\r\n| `condensed-sticky` | However, the header and the navigation bar are in a single header block. |\r\n| `horizontal` | This layout stacks the layout sections in a single column in this order: header, navigation bar, main content, and footer. The application is a single scroll container; every part moves as you scroll the page. |\r\n| `horizontal-sticky` | Similar to `horizontal`, the header and the navigation bar dock to the top of the viewport, while the footer sticks to the bottom. |\r\n\r\nHere are a few samples demonstrating the usage of the `layout` property. All samples use this markup, except the value of `App`'s layout and a few marked code snippets:\r\n\r\n```xmlui\r\n<App layout=\"(specific layout value)\">\r\n  <!-- AppHeader omitted for \"vertical\" and \"vertical-sticky\" -->\r\n  <AppHeader>\r\n    <property name=\"logoTemplate\">\r\n      <Heading level=\"h3\" value=\"Example App\"/>\r\n    </property>\r\n  </AppHeader>\r\n  <NavPanel>\r\n    <NavLink label=\"Home\" to=\"/\" icon=\"home\"/>\r\n    <NavLink label=\"Page 1\" to=\"/page1\"/>\r\n    <NavLink label=\"Page 2\" to=\"/page2\"/>\r\n  </NavPanel>\r\n  <Pages defaultRoute=\"/\">\r\n    <Page url=\"/\">\r\n      <List data=\"https://api.spacexdata.com/v3/history\">\r\n        <property name=\"itemTemplate\">\r\n          <Card title=\"{$item.title}\" subtitle=\"{$item.details}\"/>\r\n        </property>\r\n      </List>\r\n    </Page>\r\n    <Page url=\"/page1\">\r\n      <Text value=\"Page 1\" />\r\n    </Page>\r\n    <Page url=\"/page2\">\r\n      <Text value=\"Page 2\" />\r\n    </Page>\r\n  </Pages>\r\n  <Footer>Powered by XMLUI</Footer>\r\n</App>\r\n```\r\n\r\n#### `horizontal`\r\n\r\n<Playground name=\"Example: 'horizontal' layout\" height={350} app={horizontal} />\r\n\r\n#### `horizontal-sticky`\r\n\r\n<Playground name=\"Example: 'horizontal-sticky' layout\" height={350} app={horizontalSticky} />\r\n\r\n#### `condensed`\r\n\r\n<Playground name=\"Example: 'condensed' layout\" height={350} app={condensed} />\r\n\r\n#### `condensed-sticky`\r\n\r\n<Playground name=\"Example: 'condensed-sticky' layout\" height={350} app={condensedSticky} />\r\n\r\n#### `vertical`\r\n\r\n<Playground name=\"Example: 'vertical' layout\" horizontal={true} height={300} app={vertical} />\r\n\r\n#### `vertical-sticky`\r\n\r\n<Playground\r\n  name=\"Example: 'vertical-sticky' layout\"\r\n  horizontal={true}\r\n  height={300}\r\n  app={verticalSticky}\r\n/>\r\n\r\n#### `vertical-full-header`\r\n\r\n<Playground\r\n  name=\"Example: 'vertical-full-header' layout\"\r\n  horizontal={true}\r\n  height={300}\r\n  app={verticalFullHeader}\r\n/>\r\n\r\nFor a detailed list on the different kinds of layouts available see [this short guide](../learning/using-components/app-component.mdx).\r\n\r\n### `loggedInUser`\r\n\r\nStores information about the currently logged in user.\r\n\r\nStores information about the currently logged in user.\r\nCurrently, there is no restriction on what the user data must look like.\r\n\r\n```xmlui copy /loggedInUser=\"{{ name: 'Joe', token: '1234' }}\"/\r\n<App loggedInUser=\"{{ name: 'Joe', token: '1234' }}\">\r\n  <NavPanel>\r\n    <NavLink label=\"Home\" to=\"/\" icon=\"home\"/>\r\n  </NavPanel>\r\n  <Pages defaultRoute=\"/\">\r\n    <Page url=\"/\">\r\n      <Text value=\"User name: {loggedInUser.name}\" />\r\n      <Text value=\"User token: {loggedInUser.token}\" />\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  height={180}\r\n  name=\"Example: loggedInUser\"\r\n  horizontal\r\n  app={`\r\n  <App loggedInUser=\"{{ name: 'Joe', token: '1234' }}\">\r\n    <NavPanel>\r\n      <NavLink label=\"Home\" to=\"/\" icon=\"home\"/>\r\n    </NavPanel>\r\n    <Pages defaultRoute=\"/\">\r\n      <Page url=\"/\">\r\n        <Text value=\"User name: {loggedInUser.name}\" />\r\n        <Text value=\"User token: {loggedInUser.token}\" />\r\n      </Page>\r\n    </Pages>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `logo`\r\n\r\nOptional logo path\r\n\r\n### `logo-dark`\r\n\r\nOptional logo path in dark tone\r\n\r\n### `logo-light`\r\n\r\nOptional logo path in light tone\r\n\r\n### `logoTemplate`\r\n\r\nOptional template of the app logo\r\n\r\n### `name`\r\n\r\nOptional application name (visible in the browser tab)\r\n\r\n### `noScrollbarGutters (default: false)`\r\n\r\nThis boolean property specifies whether the scrollbar gutters should be hidden.\r\n\r\n### `scrollWholePage (default: true)`\r\n\r\nThis boolean property specifies whether the whole page should scroll (`true`) or just the content area (`false`). The default value is `true`.\r\n\r\nThis boolean property specifies whether the whole page should scroll (true) or just the content area (false).\r\nThe default value is `true`.\r\n\r\n```xmlui copy /scrollWholePage=\"false\"/\r\n<App scrollWholePage=\"false\">\r\n  <NavPanel>\r\n    <NavLink label=\"Home\" to=\"/\" icon=\"home\"/>\r\n  </NavPanel>\r\n  <Pages defaultRoute=\"/\">\r\n    <Page url=\"/\">\r\n      <Text>\r\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor \r\n        incididunt ut labore et dolore magna aliqua.  Ut enim ad minim veniam, quis \r\n        nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\r\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore \r\n        eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt \r\n        in culpa qui officia deserunt mollit anim id est laborum.\r\n      </Text>\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: scrollWholePage\"\r\n  horizontal\r\n  height={150}\r\n  app={`\r\n    <App scrollWholePage=\"false\">\r\n      <NavPanel>\r\n        <NavLink label=\"Home\" to=\"/\" icon=\"home\"/>\r\n      </NavPanel>\r\n      <Pages defaultRoute=\"/\">\r\n        <Page url=\"/\">\r\n          <Text>\r\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n            Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\r\n            Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\r\n            Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n          </Text>\r\n        </Page>\r\n      </Pages>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `ready`\r\n\r\nThis event fires when the `App` component finishes rendering on the page.\r\n\r\nThis event fires when the `App` component finishes rendering on the page.\r\nUse it as `onReady` when inlining it on the component.\r\n\r\n```xmlui copy /onReady=\"isAppReady = true\"/\r\n<App onReady=\"isAppReady = true\">\r\n  <variable name=\"isAppReady\" value=\"{false}\"/>\r\n  <Text value=\"{isAppReady ? 'App is ready' : 'Sadly, App is not ready'}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  height={100}\r\n  name=\"Example: ready\"\r\n  horizontal\r\n  app={`\r\n  <App onReady=\"isAppReady = true\">\r\n    <variable name=\"isAppReady\" value=\"{false}\"/>\r\n    <Text value=\"{isAppReady ? 'App is ready' : 'Sadly, App is not ready'}\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-content-App | $backgroundColor | $backgroundColor |\r\n| [borderBottom](../styles-and-themes/common-units/#border)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeft](../styles-and-themes/common-units/#border)-content-App | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-header-App | $boxShadow-spread | $boxShadow-spread |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-navPanel-App | $boxShadow-spread | $boxShadow-spread |\r\n| [maxWidth-content](../styles-and-themes/common-units/#size)-App | $maxWidth-content | $maxWidth-content |\r\n| [width](../styles-and-themes/common-units/#size)-navPanel-App | $space-64 | $space-64 |\r\n\r\n### Variable Explanations\r\n\r\n| Theme Variable | Description |\r\n| --- | --- |\r\n| **`maxWidth‑content‑App`** | This theme variable defines the maximum width of the main content. If the main content is broader, the engine adds margins to keep the expected maximum size. |\r\n| **`boxShadow‑header‑App`** | This theme variable sets the shadow of the app's header section. |\r\n| **`boxShadow‑navPanel‑App`** | This theme variable sets the shadow of the app's navigation panel section (visible only in vertical layouts). |\r\n| **`width‑navPanel‑App`** | This theme variable sets the width of the navigation panel when the app is displayed with one of the vertical layouts. |\r\n",
  "components/AppHeader":"import { Callout } from \"nextra/components\";\r\n\r\n# AppHeader [#component-appheader]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\n`AppHeader` is a placeholder within `App` to define a custom application header.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou can learn more details about using this component [here](../learning/using-components/app-component).\r\n</Callout>\r\n\r\n## Properties\r\n\r\n### `logoTemplate`\r\n\r\nThis property defines the template to use for the logo. With this property, you can construct your custom logo instead of using a single image.\r\n\r\nThis property defines the template to use for the logo.\r\nWith this property, you can construct your custom logo instead of using a single image.\r\n\r\n```xmlui copy {2-8}\r\n<App>\r\n  <AppHeader>\r\n    <property name=\"logoTemplate\">\r\n      <H3>\r\n        <Icon name=\"drive\" />\r\n        DriveDiag\r\n      </H3>\r\n    </property>\r\n  </AppHeader>\r\n  <NavPanel>\r\n    <NavLink label=\"Home\" to=\"/\" icon=\"home\"/>\r\n    <NavLink label=\"Page 1\" to=\"/page1\"/>\r\n  </NavPanel>\r\n  <Pages defaultRoute=\"/\">\r\n    <Page url=\"/\">\r\n      <Text value=\"Home\" />\r\n    </Page>\r\n    <Page url=\"/page1\">\r\n      <Text value=\"Page 1\" />\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: logoTemplate\"\r\n  horizontal\r\n  height={150}\r\n  app={`\r\n  <App>\r\n    <AppHeader>\r\n    <property name=\"logoTemplate\">\r\n        <H3>\r\n          <Icon name=\"drive\" />\r\n          DriveDiag\r\n        </H3>\r\n    </property>\r\n    </AppHeader>\r\n    <NavPanel>\r\n      <NavLink label=\"Home\" to=\"/\" icon=\"home\"/>\r\n      <NavLink label=\"Page 1\" to=\"/page1\"/>\r\n    </NavPanel>\r\n    <Pages defaultRoute=\"/\">\r\n      <Page url=\"/\">\r\n        <Text value=\"Home\" />\r\n      </Page>\r\n      <Page url=\"/page1\">\r\n        <Text value=\"Page 1\" />\r\n      </Page>\r\n    </Pages>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `profileMenuTemplate`\r\n\r\nThis property makes the profile menu slot of the `AppHeader` component customizable.\r\n\r\nThis property makes the profile menu slot of the `AppHeader` component customizable.\r\nIt accepts component definitions.\r\n\r\n```xmlui copy {3-9}\r\n<App>\r\n  <AppHeader>\r\n    <property name=\"profileMenuTemplate\">\r\n      <DropdownMenu>\r\n        <property name=\"triggerTemplate\">\r\n          <Avatar name=\"Joe\" size=\"xs\" borderRadius=\"50%\"/>\r\n        </property>\r\n      </DropdownMenu>\r\n    </property>\r\n  </AppHeader>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: profileMenuTemplate\"\r\n  horizontal\r\n  height={150}\r\n  app={`\r\n  <App>\r\n    <AppHeader>\r\n      <property name=\"profileMenuTemplate\">\r\n        <DropdownMenu>\r\n          <property name=\"triggerTemplate\">\r\n            <Avatar name=\"Joe\" size=\"xs\" borderRadius=\"50%\"/>\r\n          </property>\r\n        </DropdownMenu>\r\n      </property>\r\n    </AppHeader>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `showLogo (default: true)`\r\n\r\nShow the logo in the header\r\n\r\n### `title`\r\n\r\nTitle for the application logo\r\n\r\n### `titleTemplate`\r\n\r\nThis property defines the template to use for the title. With this property, you can construct your custom title instead of using a single image.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| align-content-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-AppHeader | $color-surface-raised | $color-surface-raised |\r\n| [border](../styles-and-themes/common-units/#border)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottom](../styles-and-themes/common-units/#border)-AppHeader | 1px solid $borderColor | 1px solid $borderColor |\r\n| [borderBottomColor](../styles-and-themes/common-units/#color)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomStyle](../styles-and-themes/common-units/#border-style)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomWidth](../styles-and-themes/common-units/#size)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndEndRadius-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndStartRadius-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalColor](../styles-and-themes/common-units/#color)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalStyle](../styles-and-themes/common-units/#border-style)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalWidth](../styles-and-themes/common-units/#size)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeft](../styles-and-themes/common-units/#border)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftStyle](../styles-and-themes/common-units/#border-style)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftWidth](../styles-and-themes/common-units/#size)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-AppHeader | 0px | 0px |\r\n| [borderRight](../styles-and-themes/common-units/#border)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightStyle](../styles-and-themes/common-units/#border-style)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightWidth](../styles-and-themes/common-units/#size)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartEndRadius-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartStartRadius-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTop](../styles-and-themes/common-units/#border)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopColor](../styles-and-themes/common-units/#color)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopStyle](../styles-and-themes/common-units/#border-style)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopWidth](../styles-and-themes/common-units/#size)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalColor](../styles-and-themes/common-units/#color)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalStyle](../styles-and-themes/common-units/#border-style)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalWidth](../styles-and-themes/common-units/#size)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [height](../styles-and-themes/common-units/#size)-AppHeader | $space-14 | $space-14 |\r\n| [maxWidth-content](../styles-and-themes/common-units/#size)-AppHeader | $maxWidth-content-App | $maxWidth-content-App |\r\n| [padding](../styles-and-themes/common-units/#size)-AppHeader | $paddingTop-AppHeader $paddingRight-AppHeader $paddingBottom-AppHeader $paddingLeft-AppHeader | $paddingTop-AppHeader $paddingRight-AppHeader $paddingBottom-AppHeader $paddingLeft-AppHeader |\r\n| [padding](../styles-and-themes/common-units/#size)-logo-AppHeader | $paddingTop-logo-AppHeader $paddingRight-logo-AppHeader $paddingBottom-logo-AppHeader $paddingLeft-logo-AppHeader | $paddingTop-logo-AppHeader $paddingRight-logo-AppHeader $paddingBottom-logo-AppHeader $paddingLeft-logo-AppHeader |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-AppHeader | $paddingVertical-AppHeader | $paddingVertical-AppHeader |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-logo-AppHeader | $paddingVertical-logo-AppHeader | $paddingVertical-logo-AppHeader |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-AppHeader | $space-4 | $space-4 |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-logo-AppHeader | $space-0 | $space-0 |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-AppHeader | $paddingHorizontal-AppHeader | $paddingHorizontal-AppHeader |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-logo-AppHeader | $paddingHorizontal-logo-AppHeader | $paddingHorizontal-logo-AppHeader |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-AppHeader | $paddingHorizontal-AppHeader | $paddingHorizontal-AppHeader |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-logo-AppHeader | $paddingHorizontal-logo-AppHeader | $paddingHorizontal-logo-AppHeader |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-AppHeader | $paddingVertical-AppHeader | $paddingVertical-AppHeader |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-logo-AppHeader | $paddingVertical-logo-AppHeader | $paddingVertical-logo-AppHeader |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-AppHeader | $space-0 | $space-0 |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-logo-AppHeader | $space-4 | $space-4 |\r\n| [width](../styles-and-themes/common-units/#size)-logo-AppHeader | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n\r\n### Variable Explanations\r\n\r\n| Theme Variable | Description |\r\n| --- | --- |\r\n| **`padding‑logo‑AppHeader`** | This theme variable sets the padding of the logo in the app header (including all `padding` variants, such as `paddingLeft-logo-AppHeader` and others). |\r\n| **`width‑logo‑AppHeader`** | Sets the width of the displayed logo |\r\n",
  "components/AppState":"import { Callout } from \"nextra/components\";\r\n\r\n# AppState [#component-appstate]\r\n\r\n<Callout>**Note**: This component does not show up on the UI; it merely helps implement UI logic.</Callout>\r\n\r\nAppState is a functional component (without a visible user interface) that helps store and manage the app's state.\r\n\r\n## Using AppState\r\n\r\nVariables in xmlui are a straightforward tool for managing states. However, a variable's scope is the app's main file or the particular component file in which it is declared. To access the variable's value (the stored state), you must pass its value to components wanting to leverage it.\r\n\r\n### Storing State in Variables\r\n\r\nIn the following example, the main file of the app declares a variable, `enhancedMode`, which is toggled with a checkbox:\r\n\r\n```xmlui copy filename=\"Main.xmlui\" /enhancedMode/\r\n<App var.enhancedMode=\"{false}\">\r\n  <VStack gap=\"$space-4\" padding=\"$space-4\">\r\n    <Checkbox\r\n      label=\"Enhanced mode\"\r\n      initialValue=\"{enhancedMode}\"\r\n      onDidChange=\"v => enhancedMode = v\" />\r\n    <Component1 enhancedMode=\"{enhancedMode}\" />\r\n    <Component2 enhancedMode=\"{enhancedMode}\" />\r\n  </VStack>\r\n</App>\r\n```\r\n\r\nTwo components, `Component1` and `Component2`, use the value of `enhancedMode`. Because of the aforementioned scoping issue, the app must explicitly pass the variable's value to those components so that they can use it. These components utilize the value to render their UI:\r\n\r\n```xmlui copy filename=\"Component1.xmlui\" /enhancedMode/\r\n<Component name=\"Component1\">\r\n  <H3 when=\"{$props.enhancedMode}\">I am in enhanced mode!</H3>\r\n  <Text when=\"{!$props.enhancedMode}\">Enhanced mode turned off.</Text>\r\n</Component>\r\n```\r\n\r\nWhen you define an `AppState`, you can set its `initialValue` property to initialize the state value.\r\n\r\n```xmlui copy filename=\"Component2.xmlui\" /enhancedMode/\r\n<Component name=\"Component2\">\r\n  <Button enabled=\"{$props.enhancedMode}\">Set enhanced options</Button>\r\n</Component>\r\n```\r\n\r\nYou can try how this app works:\r\n\r\n<Playground\r\n  height={200}\r\n  name=\"Example: AppState\"\r\n  components={[`\r\n    <Component name=\"Component1\">\r\n      <H3 when=\"{$props.enhancedMode}\">I am in enhanced mode!</H3>\r\n      <Text when=\"{!$props.enhancedMode}\">Enhanced mode turned off.</Text>\r\n    </Component>\r\n  `,\r\n  `\r\n    <Component name=\"Component2\">\r\n      <Button enabled=\"{$props.enhancedMode}\">Set enhanced options</Button>\r\n    </Component>\r\n  `\r\n  ]}\r\n  app={`\r\n    <App var.enhancedMode=\"{false}\">\r\n      <VStack gap=\"$space-4\" padding=\"$space-4\">\r\n        <Checkbox\r\n          label=\"Enhanced mode\"\r\n          initialValue=\"{enhancedMode}\"\r\n          onDidChange=\"v => enhancedMode = v\" />\r\n        <Component1 enhancedMode=\"{enhancedMode}\" />\r\n        <Component2 enhancedMode=\"{enhancedMode}\" />\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Storing State in AppState\r\n\r\nWhat if `Component1` and `Component2` had nested components using `enhancedMode`? You must also pass them to the nested components (via properties). What if you have not only one but a dozen of similar properties and a long chain of nested components? The \"use a variable\" pattern soon becomes a state management nightmare.\r\n\r\nIf the nested components want to change the state value, you must declare events and event handlers or component APIs to manage the state. It sounds pretty tedious!\r\n\r\nThis situation is where `AppState` comes into the picture. With an `AppState` instance, you can define a state object that automatically conveys between parent and nested child component chains implicitly.\r\n\r\nLet's turn the previous example into one using `AppState`! The following code shows how we change the main app file:\r\n\r\n```xmlui copy filename=\"Main.xmlui\" /appState.update/ /appState.value/\r\n<App>\r\n  <AppState id=\"appState\" initialValue=\"{{ enhancedMode: false }}\"/>\r\n  <VStack gap=\"$space-4\" padding=\"$space-4\">\r\n    <Checkbox\r\n      label=\"Enhanced mode\"\r\n      initialValue=\"{appState.value.enhancedMode}\"\r\n      onDidChange=\"v => appState.update({ enhancedMode: v})\" />\r\n    <Component1 />\r\n    <Component2 />\r\n  </VStack>\r\n</App>\r\n```\r\n\r\nWhen you define an `AppState`, you can set its `initialValue` property to initialize the state value. You must give an ID to the `AppState` instance to access it and use the `value` property to get the state. You must invoke the `AppState`'s `update` method when you intend to update the state.\r\n\r\nThe components may use their own `AppState` object to access the state value:\r\n\r\n```xmlui copy filename=\"Component1.xmlui\" /state.value.enhancedMode/\r\n<Component name=\"Component1\">\r\n  <AppState id=\"state\" />\r\n  <H3 when=\"{state.value.enhancedMode}\">I am in enhanced mode!</H3>\r\n  <Text when=\"{!state.value.enhancedMode}\">Enhanced mode turned off.</Text>\r\n</Component>\r\n```\r\n\r\n```xmlui copy filename=\"Component2.xmlui\" /state.value.enhancedMode/\r\n<Component name=\"Component2\">\r\n  <AppState id=\"state\" />\r\n  <Button enabled=\"{state.value.enhancedMode}\">Set enhanced options</Button>\r\n</Component>\r\n```\r\nThe modified app works the same way as the previous one (using variables):\r\n\r\n<Playground\r\n  height={200}\r\n  name=\"Example: AppState\"\r\n  components={[`\r\n    <Component name=\"Component1\">\r\n      <AppState id=\"state\" />\r\n      <H3 when=\"{state.value.enhancedMode}\">I am in enhanced mode!</H3>\r\n      <Text when=\"{!state.value.enhancedMode}\">Enhanced mode turned off.</Text>\r\n    </Component>\r\n  `,\r\n  `\r\n    <Component name=\"Component2\">\r\n      <AppState id=\"state\" />\r\n      <Button enabled=\"{state.value.enhancedMode}\">Set enhanced options</Button>\r\n    </Component>\r\n  `\r\n  ]}\r\n  app={`\r\n    <App var.enhancedMode=\"{false}\">\r\n      <AppState id=\"appState\" initialValue=\"{{ enhancedMode: false }}\"/>\r\n      <VStack gap=\"$space-4\" padding=\"$space-4\">\r\n        <Checkbox\r\n          label=\"Enhanced mode\"\r\n          initialValue=\"{enhancedMode}\"\r\n          onDidChange=\"v => appState.update({ enhancedMode: v})\" />\r\n        <Component1 />\r\n        <Component2 />\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### State Buckets\r\n\r\nWith the `AppState` component, you can use separate state objects. The `bucket` property of `AppState` is an identifier (using the \"default\" string by default). While multiple `AppState` objects use the same `bucket` property value, they refer to the same state object.\r\n\r\nIf you want to run the sample with explicit state buckets (for example, with the `settings` bucket id), you should change the `AppState` declarations accordingly:\r\n\r\n```xmlui /bucket=\"settings\"/\r\n<!-- Main.xmlui -->\r\n<AppState id=\"appState\" bucket=\"settings\" initialValue=\"{{ enhancedMode: false }}\"/>\r\n\r\n<!-- Component1 -->\r\n<AppState id=\"state\" bucket=\"settings\" />\r\n\r\n<!-- Component2 -->\r\n<AppState id=\"state\" bucket=\"settings\" />\r\n```\r\n\r\n## Properties\r\n\r\n### `bucket (default: \"default\")`\r\n\r\nThis property is the identifier of the bucket to which the `AppState` instance is bound. Multiple `AppState` instances with the same bucket will share the same state object: any of them updating the state will cause the other instances to view the new, updated state.\r\n\r\n### `initialValue`\r\n\r\nThis property contains the initial state value. Though you can use multiple `AppState`component instances for the same bucket with their `initialValue` set, it may result in faulty app logic. When xmlui instantiates an `AppState` with an explicit initial value, that value is immediately set. Multiple initial values may result in undesired initialization.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\n### `update`\r\n\r\nThis method updates the application state object bound to the `AppState` instance. The function's single argument is an object that specifies the new state value.\r\n\r\nIf the argument is a hash object, it will be merged with the previous state value. Let's assume the previous state value was the following:\r\n\r\n```json\r\n{\r\n  \"enhancedMode\": false,\r\n  \"showHeader\": true,\r\n  \"showFooter\": true,\r\n  \"theme\": \"light\"\r\n}\r\n```\r\n\r\nNow, update the state with this call:\r\n\r\n```js\r\nappState.update({ enhancedMode: true, theme: \"dark\" });\r\n```\r\n\r\nThe new state value will be:\r\n\r\n```json\r\n{\r\n  \"enhancedMode\": true,\r\n  \"showHeader\": true,\r\n  \"showFooter\": true,\r\n  \"theme\": \"dark\"\r\n}\r\n```\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/AutoComplete":"import { Callout } from \"nextra/components\";\r\n\r\n# AutoComplete [#component-autocomplete]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThis component is a dropdown with a list of options. According to the `multi` property, the user can select one or more items.\r\n\r\nThe component provides context values with which you can access some internal properties:\r\n\r\n- `$item`: This context value represents an item when you define an option item template. Use `$item.value` and `$item.label` to refer to the value and label of the particular option.\r\n\r\n## Using AutoComplete\r\n\r\n<Playground\r\n  height={200}\r\n  name=\"Example: Using AutoComplete\"\r\n  app={`\r\n    <App>\r\n      <AutoComplete>\r\n        <Option value=\"1\" label=\"Bruce Wayne\" />\r\n        <Option value=\"2\" label=\"Clark Kent\" enabled=\"false\" />\r\n        <Option value=\"3\" label=\"Diana Prince\" />\r\n      </AutoComplete>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\n### `autoFocus (default: false)`\r\n\r\nIf this property is set to `true`, the component gets the focus automatically when displayed.\r\n\r\n### `dropdownHeight`\r\n\r\nThis property sets the height of the dropdown list.\r\n\r\n### `emptyListTemplate`\r\n\r\nThis property defines the template to display when the list of options is empty.\r\n\r\n<Playground\r\n  height={200}\r\n  name=\"Example: emptyListTemplate\"\r\n  app={`\r\n    <App>\r\n      <AutoComplete>\r\n        <property name=\"emptyListTemplate\">\r\n          <Text>No options found</Text>\r\n        </property>\r\n      </AutoComplete>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `enabled (default: true)`\r\n\r\nThis boolean property value indicates whether the component responds to user events (`true`) or not (`false`).\r\n\r\n### `initialValue`\r\n\r\nThis property sets the component's initial value.\r\n\r\n### `maxLength`\r\n\r\nThis property sets the maximum length of the input it accepts.\r\n\r\n### `multi (default: false)`\r\n\r\nThe `true` value of the property indicates if the user can select multiple items.\r\n\r\n<Playground\r\n  height={300}\r\n  name=\"Example: multi\"\r\n  app={`\r\n    <App>\r\n      <AutoComplete multi=\"true\">\r\n        <Option value=\"1\" label=\"Bruce Wayne\" />\r\n        <Option value=\"2\" label=\"Clark Kent\" />\r\n        <Option value=\"3\" label=\"Diana Prince\" />\r\n        <Option value=\"4\" label=\"Barry Allen\" />\r\n        <Option value=\"5\" label=\"Hal Jordan\" />\r\n      </AutoComplete>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `optionTemplate`\r\n\r\nThis property enables the customization of list items. To access the attributes of a list item use the `$item` context variable.\r\n\r\n<Playground\r\n  height={300}\r\n  name=\"Example: optionTemplate\"\r\n  app={`\r\n    <App>\r\n      <AutoComplete multi=\"true\">\r\n        <property name=\"optionTemplate\">\r\n          <Text textAlign=\"center\" color=\"purple\">{console.log($item), $item.label}</Text>\r\n        </property>\r\n        <Option value=\"1\" label=\"Bruce Wayne\" />\r\n        <Option value=\"2\" label=\"Clark Kent\" />\r\n        <Option value=\"3\" label=\"Diana Prince\" />\r\n      </AutoComplete>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `placeholder`\r\n\r\nA placeholder text that is visible in the input field when its empty.\r\n\r\n### `readOnly (default: false)`\r\n\r\nSet this property to `true` to disallow changing the component value.\r\n\r\n### `required`\r\n\r\nSet this property to `true` to indicate it must have a value before submitting the containing form.\r\n\r\n### `validationStatus (default: \"none\")`\r\n\r\nThis property allows you to set the validation status of the input component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `valid` | Visual indicator for an input that is accepted |\r\n| `warning` | Visual indicator for an input that produced a warning |\r\n| `error` | Visual indicator for an input that produced an error |\r\n\r\n## Events\r\n\r\n### `didChange`\r\n\r\nThis event is triggered when value of AutoComplete has changed.\r\n\r\n### `gotFocus`\r\n\r\nThis event is triggered when the AutoComplete has received the focus.\r\n\r\n### `lostFocus`\r\n\r\nThis event is triggered when the AutoComplete has lost the focus.\r\n\r\n## Exposed Methods\r\n\r\n### `focus`\r\n\r\nThis method sets the focus on the AutoComplete.\r\n\r\n### `setValue`\r\n\r\nYou can use this method to set the component's current value programmatically (`true`: checked, `false`: unchecked).\r\n\r\n### `value`\r\n\r\nYou can query the component's value. If no value is set, it will retrieve `undefined`.\r\n\r\n## Styling\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-AutoComplete--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-AutoComplete-badge | $color-primary-500 | $color-primary-500 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-AutoComplete-badge | $color-primary-500 | $color-primary-500 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-AutoComplete-badge--active | $color-primary-500 | $color-primary-500 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-AutoComplete-badge--active | $color-primary-500 | $color-primary-500 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-AutoComplete-badge--hover | $color-primary-400 | $color-primary-400 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-AutoComplete-badge--hover | $color-primary-400 | $color-primary-400 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-AutoComplete-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-AutoComplete-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-AutoComplete-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-AutoComplete-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-AutoComplete-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-AutoComplete-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-AutoComplete-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-AutoComplete-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-item-AutoComplete | $backgroundColor-dropdown-item | $backgroundColor-dropdown-item |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-item-AutoComplete--active | $backgroundColor-dropdown-item--active | $backgroundColor-dropdown-item--active |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-item-AutoComplete--hover | $backgroundColor-dropdown-item--active | $backgroundColor-dropdown-item--active |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-menu-AutoComplete | $backgroundColor-primary | $backgroundColor-primary |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-menu-AutoComplete | $backgroundColor-primary | $backgroundColor-primary |\r\n| [border](../styles-and-themes/common-units/#border)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottom](../styles-and-themes/common-units/#border)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomColor](../styles-and-themes/common-units/#color)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomStyle](../styles-and-themes/common-units/#border-style)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomWidth](../styles-and-themes/common-units/#size)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-AutoComplete--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-AutoComplete-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-AutoComplete-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-AutoComplete-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-AutoComplete-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-AutoComplete-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-AutoComplete-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-AutoComplete-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-AutoComplete-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-menu-AutoComplete | $borderColor | $borderColor |\r\n| [border](../styles-and-themes/common-units/#border)EndEndRadius-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndStartRadius-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalColor](../styles-and-themes/common-units/#color)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalStyle](../styles-and-themes/common-units/#border-style)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalWidth](../styles-and-themes/common-units/#size)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeft](../styles-and-themes/common-units/#border)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftStyle](../styles-and-themes/common-units/#border-style)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftWidth](../styles-and-themes/common-units/#size)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-AutoComplete-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-AutoComplete-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-AutoComplete-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-AutoComplete-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-menu-AutoComplete | $borderRadius | $borderRadius |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-menu-AutoComplete | $borderRadius | $borderRadius |\r\n| [borderRight](../styles-and-themes/common-units/#border)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightStyle](../styles-and-themes/common-units/#border-style)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightWidth](../styles-and-themes/common-units/#size)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartEndRadius-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartStartRadius-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-AutoComplete-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-AutoComplete-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-AutoComplete-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-AutoComplete-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTop](../styles-and-themes/common-units/#border)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopColor](../styles-and-themes/common-units/#color)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopStyle](../styles-and-themes/common-units/#border-style)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopWidth](../styles-and-themes/common-units/#size)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalColor](../styles-and-themes/common-units/#color)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalStyle](../styles-and-themes/common-units/#border-style)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalWidth](../styles-and-themes/common-units/#size)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-AutoComplete-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-AutoComplete-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-AutoComplete-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-AutoComplete-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-menu-AutoComplete | 1px | 1px |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-AutoComplete-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-AutoComplete-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-AutoComplete-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-AutoComplete-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-AutoComplete-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-AutoComplete-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-AutoComplete-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-AutoComplete-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-menu-AutoComplete | $boxShadow-md | $boxShadow-md |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-menu-AutoComplete | $boxShadow-md | $boxShadow-md |\r\n| [fontSize](../styles-and-themes/common-units/#size)-AutoComplete-badge | $fontSize-small | $fontSize-small |\r\n| [fontSize](../styles-and-themes/common-units/#size)-AutoComplete-badge | $fontSize-small | $fontSize-small |\r\n| [fontSize](../styles-and-themes/common-units/#size)-AutoComplete-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-AutoComplete-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-AutoComplete-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-AutoComplete-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-AutoComplete--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-AutoComplete--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-AutoComplete--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-AutoComplete--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-AutoComplete-badge | $space-1 | $space-1 |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-AutoComplete-badge | $space-1 | $space-1 |\r\n| [textColor](../styles-and-themes/common-units/#color)-AutoComplete--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-AutoComplete-badge | $const-color-surface-50 | $const-color-surface-50 |\r\n| [textColor](../styles-and-themes/common-units/#color)-AutoComplete-badge | $const-color-surface-50 | $const-color-surface-50 |\r\n| [textColor](../styles-and-themes/common-units/#color)-AutoComplete-badge--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-AutoComplete-badge--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-AutoComplete-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-AutoComplete-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-AutoComplete-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-AutoComplete-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-AutoComplete-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-AutoComplete-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-AutoComplete-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-AutoComplete-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-item-AutoComplete--disabled | $color-surface-200 | $color-surface-200 |\r\n| [textColor](../styles-and-themes/common-units/#color)-placeholder-AutoComplete | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-placeholder-AutoComplete-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-placeholder-AutoComplete-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-placeholder-AutoComplete-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-placeholder-AutoComplete-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n\r\n### Variable Explanations\r\n\r\n| Theme Variable | Description |\r\n| --- | --- |\r\n",
  "components/Avatar":"import { Callout } from \"nextra/components\";\r\n\r\n# Avatar [#component-avatar]\r\n\r\nThe `Avatar` component represents a user, group (or other entity's) avatar with a small image or initials.\r\n\r\n## Properties\r\n\r\n### `name`\r\n\r\nThis property sets the name value the Avatar uses to display initials.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Avatar name=\"John, Doe\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: name\"\r\n  app={`\r\n    <App>\r\n      <Avatar name=\"John, Doe\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `size (default: \"sm\")`\r\n\r\nThis property defines the display size of the Avatar.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `xs` | Extra small button |\r\n| `sm` | Small button **(default)** |\r\n| `md` | Medium button |\r\n| `lg` | Large button |\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    <Avatar name=\"Dorothy Ellen Fuller\" />\r\n    <Avatar name=\"Xavier Schiller\" size=\"xs\" />\r\n    <Avatar name=\"Sebastien Moore\" size=\"sm\" />\r\n    <Avatar name=\"Molly Dough\" size=\"md\" />\r\n    <Avatar name=\"Lynn Gilbert\" size=\"lg\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: size\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Avatar name=\"Dorothy Ellen Fuller\" />\r\n        <Avatar name=\"Xavier Schiller\" size=\"xs\" />\r\n        <Avatar name=\"Sebastien Moore\" size=\"sm\" />\r\n        <Avatar name=\"Molly Dough\" size=\"md\" />\r\n        <Avatar name=\"Lynn Gilbert\" size=\"lg\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `url`\r\n\r\nThis property specifies the URL of the image to display in the Avatar.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Avatar url=\"https://i.pravatar.cc/100\" size=\"md\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: url\"\r\n  app={`\r\n    <App>\r\n      <Avatar url=\"https://i.pravatar.cc/100\" size=\"md\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `click`\r\n\r\nThis event is triggered when the avatar is clicked.\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack verticalAlignment=\"center\">\r\n    <Avatar name=\"Molly Dough\" size=\"md\" onClick=\"toast('Avatar clicked')\" />\r\n    Click the avatar!\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: click\"\r\n  app={`\r\n    <App>\r\n      <HStack verticalAlignment=\"center\">\r\n        <Avatar name=\"Molly Dough\" size=\"md\" onClick=\"toast('Avatar clicked')\" />\r\n        Click the avatar!\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `Avatar` component uses these theme variables to customize its appearance:\r\n\r\n- `backgroundColor`\r\n- `borderColor`\r\n- `color`\r\n- `fontWeight`\r\n- `borderRadius`\r\n- `boxShadow`\r\n- `borderStyle`\r\n- `borderWidth`\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Avatar | $color-surface-100 | $color-surface-100 |\r\n| [border](../styles-and-themes/common-units/#border)-Avatar | 0px solid $color-surface-400A80 | 0px solid $color-surface-400A80 |\r\n| [borderBottom](../styles-and-themes/common-units/#border)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomColor](../styles-and-themes/common-units/#color)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomStyle](../styles-and-themes/common-units/#border-style)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomWidth](../styles-and-themes/common-units/#size)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndEndRadius-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndStartRadius-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalColor](../styles-and-themes/common-units/#color)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalStyle](../styles-and-themes/common-units/#border-style)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalWidth](../styles-and-themes/common-units/#size)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeft](../styles-and-themes/common-units/#border)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftStyle](../styles-and-themes/common-units/#border-style)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftWidth](../styles-and-themes/common-units/#size)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Avatar | 4px | 4px |\r\n| [borderRight](../styles-and-themes/common-units/#border)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightStyle](../styles-and-themes/common-units/#border-style)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightWidth](../styles-and-themes/common-units/#size)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartEndRadius-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartStartRadius-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTop](../styles-and-themes/common-units/#border)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopColor](../styles-and-themes/common-units/#color)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopStyle](../styles-and-themes/common-units/#border-style)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopWidth](../styles-and-themes/common-units/#size)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalColor](../styles-and-themes/common-units/#color)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalStyle](../styles-and-themes/common-units/#border-style)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalWidth](../styles-and-themes/common-units/#size)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Avatar | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Avatar | inset 0 0 0 1px rgba(4,32,69,0.1) | inset 0 0 0 1px rgba(4,32,69,0.1) |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Avatar | $fontWeight-bold | $fontWeight-bold |\r\n| [textColor](../styles-and-themes/common-units/#color)-Avatar | $textColor-secondary | $textColor-secondary |\r\n",
  "components/Backdrop":"import { Callout } from \"nextra/components\";\r\n\r\n# Backdrop [#component-backdrop]\r\n\r\nThe `Backdrop` component is a semi-transparent overlay that appears on top of its child component to obscure or highlight the content behind it.\r\n\r\n```xmlui\r\n<App>\r\n  <Backdrop opacity=\"0.2\">\r\n    <Image \r\n      src=\"/resources/images/components/image/breakfast.jpg\" \r\n      fit=\"cover\" width=\"400px\" />\r\n    <property name=\"overlayTemplate\">\r\n      <VStack verticalAlignment=\"center\" height=\"100px\">\r\n        <H1 color=\"white\" textAlign=\"center\">Great breakfast!</H1>\r\n      </VStack>\r\n    </property>\r\n  </Backdrop>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: using Backdrop\"\r\n  app={`\r\n    <App>\r\n      <Backdrop opacity=\"0.2\">\r\n        <Image src=\"/resources/images/components/image/breakfast.jpg\" fit=\"cover\" width=\"400px\" />\r\n        <property name=\"overlayTemplate\">\r\n          <VStack verticalAlignment=\"center\" height=\"100px\">\r\n            <H1 color=\"white\" textAlign=\"center\">Great breakfast!</H1>\r\n          </VStack>\r\n        </property>\r\n      </Backdrop>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\n### `backgroundColor (default: \"black\")`\r\n\r\nThe background color of the backdrop.\r\n\r\n### `opacity (default: 0.1)`\r\n\r\nThe opacity of the backdrop.\r\n\r\n### `overlayTemplate`\r\n\r\nThis property defines the component template for an optional overlay to display over the component.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/Badge":"import { Callout } from \"nextra/components\";\r\n\r\n# Badge [#component-badge]\r\n\r\nThe `Badge` is a text label that accepts a color map to define its background color and, optionally, its label color.\r\n\r\n## Properties\r\n\r\n### `colorMap`\r\n\r\nThe `Badge` component supports the mapping of a list of colors using the `value` prop as the key. Provide the component with a list or key-value pairs in two ways:\r\n\r\n1. Only change the background color\r\n\r\n```xmlui copy {2}\r\n<App var.simpleColorMap=\"{{ important: 'red', regular: 'blue', unimportant: 'black' }}\">\r\n  <Badge value=\"important\" colorMap=\"{simpleColorMap}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: only background color\"\r\n  app={`\r\n    <App var.simpleColorMap=\"{{ important: 'red', regular: 'blue', unimportant: 'black' }}\">\r\n      <Badge value=\"important\" colorMap=\"{simpleColorMap}\" />\r\n    </App>\r\n`}\r\n/>\r\n\r\n2. Change the background and label color\r\n\r\n```xmlui copy {2-5}\r\n<App \r\n  var.simpleColorMap=\"{{ \r\n    important: { label: 'red', background: 'pink' }, \r\n    unimportant: { label: 'black', background: 'gray' }\r\n  }}\">\r\n  <Badge value=\"important\" colorMap=\"{simpleColorMap}\" />\r\n  <Badge value=\"unimportant\" colorMap=\"{simpleColorMap}\" />\r\n  <Badge value=\"other\" colorMap=\"{simpleColorMap}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: background and label color\"\r\n  app={`\r\n  <App \r\n    var.simpleColorMap=\"{{ \r\n      important: { label: 'red', background: 'pink' }, \r\n      unimportant: { label: 'black', background: 'gray' }\r\n    }}\">\r\n    <Badge value=\"important\" colorMap=\"{simpleColorMap}\" />\r\n    <Badge value=\"unimportant\" colorMap=\"{simpleColorMap}\" />\r\n    <Badge value=\"other\" colorMap=\"{simpleColorMap}\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `value (required)`\r\n\r\nThe text that the component displays\r\n\r\n```xmlui copy\r\n<App>\r\n  <Badge value=\"Example badge\" />\r\n</App>  \r\n```\r\n\r\n<Playground \r\n  name=\"Example: value\" \r\n  app={`\r\n    <App>\r\n      <Badge value=\"Example badge\" />\r\n    </App>  \r\n  `} />\r\n\r\n### `variant (default: \"badge\")`\r\n\r\nModifies the shape of the component. Comes in the regular `badge` variant or the `pill` variant with fully rounded corners.\r\n\r\nAvailable values: `badge` **(default)**, `pill`\r\n\r\n```xmlui copy\r\n<App>\r\n  <Badge value=\"Example badge\" variant=\"badge\" />\r\n  <Badge value=\"Example pill\" variant=\"pill\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: variant\"\r\n  app={`\r\n  <App>\r\n    <Badge value=\"Example badge\" variant=\"badge\" />\r\n    <Badge value=\"Example pill\" variant=\"pill\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `Badge` component uses these theme variables to customize its appearance:\r\n\r\n- `backgroundColor-Badge`\r\n- `textColor-Badge`\r\n\r\nThere are also variant specific styling options:\r\n\r\n### `badge`\r\n\r\n- `borderRadius-Badge`\r\n- `fontSize-Badge`\r\n- `fontWeight-Badge`\r\n- `padding-Badge`\r\n- `paddingHorizontal-Badge`\r\n- `paddingVertical-Badge`\r\n\r\n### `pill`\r\n\r\n- `fontSize-Badge-pill`\r\n- `fontWeight-Badge-pill`\r\n- `padding-Badge-pill`\r\n- `paddingHorizontal-Badge-pill`\r\n- `paddingVertical-Badge-pill`\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Badge | rgba($color-secondary-500-rgb, .6) | rgba($color-secondary-500-rgb, .6) |\r\n| [border](../styles-and-themes/common-units/#border)-Badge | 0px solid $borderColor | 0px solid $borderColor |\r\n| [border](../styles-and-themes/common-units/#border)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottom](../styles-and-themes/common-units/#border)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottom](../styles-and-themes/common-units/#border)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomColor](../styles-and-themes/common-units/#color)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomColor](../styles-and-themes/common-units/#color)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomStyle](../styles-and-themes/common-units/#border-style)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomStyle](../styles-and-themes/common-units/#border-style)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomWidth](../styles-and-themes/common-units/#size)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomWidth](../styles-and-themes/common-units/#size)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndEndRadius-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndEndRadius-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndStartRadius-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndStartRadius-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalColor](../styles-and-themes/common-units/#color)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalColor](../styles-and-themes/common-units/#color)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalStyle](../styles-and-themes/common-units/#border-style)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalStyle](../styles-and-themes/common-units/#border-style)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalWidth](../styles-and-themes/common-units/#size)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalWidth](../styles-and-themes/common-units/#size)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeft](../styles-and-themes/common-units/#border)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeft](../styles-and-themes/common-units/#border)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftStyle](../styles-and-themes/common-units/#border-style)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftStyle](../styles-and-themes/common-units/#border-style)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftWidth](../styles-and-themes/common-units/#size)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftWidth](../styles-and-themes/common-units/#size)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Badge | 4px | 4px |\r\n| [borderRight](../styles-and-themes/common-units/#border)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRight](../styles-and-themes/common-units/#border)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightStyle](../styles-and-themes/common-units/#border-style)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightStyle](../styles-and-themes/common-units/#border-style)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightWidth](../styles-and-themes/common-units/#size)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightWidth](../styles-and-themes/common-units/#size)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartEndRadius-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartEndRadius-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartStartRadius-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartStartRadius-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTop](../styles-and-themes/common-units/#border)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTop](../styles-and-themes/common-units/#border)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopColor](../styles-and-themes/common-units/#color)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopColor](../styles-and-themes/common-units/#color)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopStyle](../styles-and-themes/common-units/#border-style)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopStyle](../styles-and-themes/common-units/#border-style)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopWidth](../styles-and-themes/common-units/#size)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopWidth](../styles-and-themes/common-units/#size)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalColor](../styles-and-themes/common-units/#color)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalColor](../styles-and-themes/common-units/#color)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalStyle](../styles-and-themes/common-units/#border-style)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalStyle](../styles-and-themes/common-units/#border-style)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalWidth](../styles-and-themes/common-units/#size)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalWidth](../styles-and-themes/common-units/#size)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Badge | 0.8em | 0.8em |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Badge-pill | 0.8em | 0.8em |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-Badge | $space-0_5 $space-2 | $space-0_5 $space-2 |\r\n| [padding](../styles-and-themes/common-units/#size)-Badge-pill | $space-0_5 $space-2 | $space-0_5 $space-2 |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-Badge | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-Badge-pill | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Badge | $const-color-surface-0 | $const-color-surface-0 |\r\n",
  "components/Bookmark":"import { Callout } from \"nextra/components\";\r\n\r\n# Bookmark [#component-bookmark]\r\n\r\nAs its name suggests, this component places a bookmark into its parent component's view. The component has an `id` that you can use in links to navigate (scroll to) the bookmark's location.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nPop out the examples in this article to view them on full screen.\r\n</Callout>\r\n\r\n## Using Bookmark\r\n\r\nUse `Bookmark` as a standalone tag or wrap children with it.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nWe suggest using a standalone bookmark, which does not increase the nesting depth.\r\n</Callout>\r\n\r\n### Standalone\r\n\r\nAdd an `id` property to `Bookmark` instances and use the same identifiers in links with hash tags, as the following example shows:\r\n\r\n```xmlui copy /#red/ /#green/ /#blue/ /id=\"red\"/ /id=\"green\"/ /id=\"blue\"/\r\n<App layout=\"vertical-full-header\" scrollWholePage=\"false\">\r\n  <NavPanel>\r\n    <Link to=\"/#red\">Jump to red</Link>\r\n    <Link to=\"/#green\">Jump to green</Link>\r\n    <Link to=\"/#blue\">Jump to blue</Link>\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">\r\n      <Bookmark id=\"red\" />\r\n      <VStack height=\"200px\" backgroundColor=\"red\" />\r\n      <Bookmark id=\"green\" />\r\n      <VStack height=\"200px\" backgroundColor=\"green\" />\r\n      <Bookmark id=\"blue\" />\r\n      <VStack height=\"200px\" backgroundColor=\"blue\" />\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\nClicking a link scrolls the bookmarked component adjacent to the corresponding `Bookmark` tag into the view:\r\n\r\n<Playground\r\n  height={300}\r\n  name=\"Example: standalone Bookmark\"\r\n  app={`\r\n    <App layout=\"vertical-full-header\" scrollWholePage=\"false\">\r\n      <NavPanel>\r\n        <Link to=\"/#red\">Jump to red</Link>\r\n        <Link to=\"/#green\">Jump to green</Link>\r\n        <Link to=\"/#blue\">Jump to blue</Link>\r\n      </NavPanel>\r\n      <Pages>\r\n        <Page url=\"/\">\r\n          <Bookmark id=\"red\" />\r\n          <VStack height=\"200px\" backgroundColor=\"red\" />\r\n          <Bookmark id=\"green\" />\r\n          <VStack height=\"200px\" backgroundColor=\"green\" />\r\n          <Bookmark id=\"blue\" />\r\n          <VStack height=\"200px\" backgroundColor=\"blue\" />\r\n        </Page>\r\n      </Pages>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### With nested children\r\n\r\nAlternatively, you can nest components into `Bookmark`:\r\n\r\n```xmlui copy /#red/ /#green/ /#blue/ /id=\"red\"/ /id=\"green\"/ /id=\"blue\"/\r\n<App layout=\"vertical-full-header\" scrollWholePage=\"false\">\r\n  <NavPanel>\r\n    <Link to=\"/#red\">Jump to red</Link>\r\n    <Link to=\"/#green\">Jump to green</Link>\r\n    <Link to=\"/#blue\">Jump to blue</Link>\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">\r\n      <Bookmark id=\"red\">\r\n        <VStack height=\"200px\" backgroundColor=\"red\" />\r\n      </Bookmark>\r\n      <Bookmark id=\"green\">\r\n        <VStack height=\"200px\" backgroundColor=\"green\" />\r\n      </Bookmark>\r\n      <Bookmark id=\"blue\">\r\n        <VStack height=\"200px\" backgroundColor=\"blue\" />\r\n      </Bookmark>\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\nYou can try; this example works like the previous one:\r\n\r\n<Playground\r\n  height={300}\r\n  name=\"Example: Bookmark with nested children\"\r\n  app={`\r\n    <App layout=\"vertical-full-header\" scrollWholePage=\"false\">\r\n      <NavPanel>\r\n        <Link to=\"/#red1\">Jump to red</Link>\r\n        <Link to=\"/#green1\">Jump to green</Link>\r\n        <Link to=\"/#blue1\">Jump to blue</Link>\r\n      </NavPanel>\r\n      <Pages>\r\n        <Page url=\"/\">\r\n          <Bookmark id=\"red1\">\r\n            <VStack height=\"200px\" backgroundColor=\"red\" />\r\n          </Bookmark>\r\n          <Bookmark id=\"green1\">\r\n            <VStack height=\"200px\" backgroundColor=\"green\" />\r\n          </Bookmark>\r\n          <Bookmark id=\"blue1\">\r\n            <VStack height=\"200px\" backgroundColor=\"blue\" />\r\n          </Bookmark>\r\n        </Page>\r\n      </Pages>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\n### `level (default: 1)`\r\n\r\nThe level of the bookmark. The level is used to determine the bookmark's position in the table of contents.\r\n\r\n### `omitFromToc (default: false)`\r\n\r\nIf true, this bookmark will be excluded from the table of contents.\r\n\r\n### `title`\r\n\r\nDefines the text to display the bookmark in the table of contents. If this property is empty, the text falls back to the value of `id`.\r\n\r\n### `uid`\r\n\r\nThe unique identifier of the bookmark. You can use this identifier in links to navigate to this component's location.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/Breakout":"import { Callout } from \"nextra/components\";\r\n\r\n# Breakout [#component-breakout]\r\n\r\nThe `Breakout` component creates a breakout section. It allows its child to occupy the entire width of the UI even if the app or the parent container constrains the maximum content width.\r\n\r\n## Properties\r\n\r\nThis component does not have any properties.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/Button":"import { Callout } from \"nextra/components\";\r\n\r\n# Button [#component-button]\r\n\r\nButton is an interactive element that triggers an action when clicked.\r\n\r\nUse the `Button` component to trigger various actions.\r\n\r\n## Properties\r\n\r\n### `autoFocus (default: false)`\r\n\r\nIndicates if the button should receive focus when the page loads.\r\n\r\n### `contentPosition (default: \"center\")`\r\n\r\nThis optional value determines how the label and icon (or nested children) should be placedinside the Button component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `center` | Place the content in the middle **(default)** |\r\n| `start` | Justify the content to the left (to the right if in right-to-left) |\r\n| `end` | Justify the content to the right (to the left if in right-to-left) |\r\n\r\n```xmlui copy\r\n<App>\r\n  <Button width=\"200px\" icon=\"drive\" label=\"Button\" contentPosition=\"center\" />\r\n  <Button width=\"200px\" icon=\"drive\" label=\"Button\" contentPosition=\"start\" />\r\n  <Button width=\"200px\" icon=\"drive\" label=\"Button\" contentPosition=\"end\" />\r\n  <Button width=\"200px\" contentPosition=\"end\">\r\n    This is a nested text\r\n  </Button>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  height={270}\r\n  name=\"Example: content position\"\r\n  app={`\r\n    <App>\r\n      <Button width=\"200px\" icon=\"drive\" label=\"Button\" contentPosition=\"center\" />\r\n      <Button width=\"200px\" icon=\"drive\" label=\"Button\" contentPosition=\"start\" />\r\n      <Button width=\"200px\" icon=\"drive\" label=\"Button\" contentPosition=\"end\" />\r\n      <Button width=\"200px\" contentPosition=\"end\">\r\n        This is a nested text\r\n      </Button>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `contextualLabel`\r\n\r\nThis optional value is used to provide an accessible name for the Button in the context of its usage.\r\n\r\n### `enabled (default: true)`\r\n\r\nThe value of this property indicates whether the button accepts actions (`true`) or does not react to them (`false`).\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    <Button label=\"I am enabled (by default)\" />\r\n    <Button label=\"I am enabled explicitly\" enabled=\"true\" />\r\n    <Button label=\"I am not enabled\" enabled=\"false\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: enabled\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Button label=\"I am enabled (by default)\" />\r\n        <Button label=\"I am enabled explicitly\" enabled=\"true\" />\r\n        <Button label=\"I am not enabled\" enabled=\"false\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n  horizontal={true}\r\n  height={100}\r\n/>\r\n\r\n### `icon`\r\n\r\nThis string value denotes an icon name. The framework will render an icon if XMLUI recognizes the icon by its name. If no label is specified and an icon is set, the Button displays only that icon.\r\n\r\n```xmlui\r\n  <App>\r\n    <HStack>\r\n      <Button icon=\"drive\" label=\"Let there be drive\" />\r\n      <Button icon=\"drive\" />\r\n    </HStack>\r\n  </App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: icon\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Button icon=\"drive\" label=\"Let there be drive\" />\r\n        <Button icon=\"drive\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n  horizontal={true}\r\n  height={100}\r\n/>\r\n\r\n### `iconPosition (default: \"start\")`\r\n\r\nThis optional string determines the location of the icon in the Button.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `start` | The icon will appear at the start (left side when the left-to-right direction is set) **(default)** |\r\n| `end` | The icon will appear at the end (right side when the left-to-right direction is set) |\r\n\r\n```xmlui\r\n<App>\r\n  <HStack>\r\n    <Button icon=\"drive\" label=\"Left\" />\r\n    <Button icon=\"drive\" label=\"Right\" iconPosition=\"right\" />\r\n  </HStack>\r\n  <HStack>\r\n    <Button icon=\"drive\" label=\"Start\" iconPosition=\"start\" />\r\n    <Button icon=\"drive\" label=\"End\" iconPosition=\"end\" />\r\n  </HStack>\r\n  <HStack>\r\n    <Button icon=\"drive\" label=\"Start (right-to-left)\" iconPosition=\"start\" direction=\"rtl\" />\r\n    <Button icon=\"drive\" label=\"End (right-to-left)\" iconPosition=\"end\" direction=\"rtl\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: iconPosition\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Button icon=\"drive\" label=\"Left\" />\r\n        <Button icon=\"drive\" label=\"Right\" iconPosition=\"right\" />\r\n      </HStack>\r\n      <HStack>\r\n        <Button icon=\"drive\" label=\"Start\" iconPosition=\"start\" />\r\n        <Button icon=\"drive\" label=\"End\" iconPosition=\"end\" />\r\n      </HStack>\r\n      <HStack>\r\n        <Button icon=\"drive\" label=\"Start (right-to-left)\" iconPosition=\"start\" direction=\"rtl\" />\r\n        <Button icon=\"drive\" label=\"End (right-to-left)\" iconPosition=\"end\" direction=\"rtl\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n  horizontal={true}\r\n  height={220}\r\n/>\r\n\r\n### `label`\r\n\r\nThis property is an optional string to set a label for the Button. If no label is specified and an icon is set, the Button will modify its styling to look like a small icon button. When the Button has nested children, it will display them and ignore the value of the `label` prop.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Button label=\"I am the button label\" />\r\n  <Button />\r\n  <Button label=\"I am the button label\">\r\n    <Icon name=\"trash\" />\r\n    I am a text nested into Button\r\n  </Button>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Button label\"\r\n  app={`\r\n    <App>\r\n      <Button label=\"I am the button label\" />\r\n      <Button />\r\n      <Button label=\"I am the button label\">\r\n        <Icon name=\"trash\" />\r\n        I am a text nested into Button\r\n      </Button>\r\n    </App>\r\n  `}\r\n  horizontal={true}\r\n  height={200}\r\n/>\r\n\r\n### `orientation (default: \"horizontal\")`\r\n\r\nThis property sets the main axis along which the nested components are rendered.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `horizontal` | The component will fill the available space horizontally **(default)** |\r\n| `vertical` | The component will fill the available space vertically |\r\n\r\n### `size (default: \"sm\")`\r\n\r\nSets the size of the button.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `xs` | Extra small button |\r\n| `sm` | Small button **(default)** |\r\n| `md` | Medium button |\r\n| `lg` | Large button |\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    <Button icon=\"drive\" label=\"default\" />\r\n    <Button icon=\"drive\" label=\"extra-small\" size=\"xs\" />\r\n    <Button icon=\"drive\" label=\"small\" size=\"sm\" />\r\n    <Button icon=\"drive\" label=\"medium\" size=\"md\" />\r\n    <Button icon=\"drive\" label=\"large\" size=\"lg\" />\r\n  </HStack>\r\n  <HStack>\r\n    <Button label=\"default\" />\r\n    <Button label=\"extra-small\" size=\"xs\" />\r\n    <Button label=\"small\" size=\"sm\" />\r\n    <Button label=\"medium\" size=\"md\" />\r\n    <Button label=\"large\" size=\"lg\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  height={200}\r\n  name=\"Example: size\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Button icon=\"drive\" label=\"default\" />\r\n        <Button icon=\"drive\" label=\"extra-small\" size=\"xs\" />\r\n        <Button icon=\"drive\" label=\"small\" size=\"sm\" />\r\n        <Button icon=\"drive\" label=\"medium\" size=\"md\" />\r\n        <Button icon=\"drive\" label=\"large\" size=\"lg\" />\r\n      </HStack>\r\n      <HStack>\r\n        <Button label=\"default\" />\r\n        <Button label=\"extra-small\" size=\"xs\" />\r\n        <Button label=\"small\" size=\"sm\" />\r\n        <Button label=\"medium\" size=\"md\" />\r\n        <Button label=\"large\" size=\"lg\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `themeColor (default: \"primary\")`\r\n\r\nSets the button color scheme defined in the application theme.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `attention` | Attention state theme color |\r\n| `primary` | Primary theme color **(default)** |\r\n| `secondary` | Secondary theme color |\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    <Button label=\"Button\" themeColor=\"primary\" />\r\n    <Button label=\"Button\" themeColor=\"secondary\" />\r\n    <Button label=\"Button\" themeColor=\"attention\" />\r\n  </HStack>\r\n</App>  \r\n```\r\n\r\n<Playground\r\n  name=\"Example: theme colors\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Button label=\"Button\" themeColor=\"primary\" />\r\n        <Button label=\"Button\" themeColor=\"secondary\" />\r\n        <Button label=\"Button\" themeColor=\"attention\" />\r\n      </HStack>\r\n    </App>  \r\n  `}\r\n  height={100}\r\n/>\r\n\r\n### `type (default: \"button\")`\r\n\r\nThis optional string describes how the Button appears in an HTML context. You rarely need to set this property explicitly.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `button` | Regular behavior that only executes logic if explicitly determined. **(default)** |\r\n| `submit` | The button submits the form data to the server. This is the default for buttons in a Form or NativeForm component. |\r\n| `reset` | Resets all the controls to their initial values. Using it is ill advised for UX reasons. |\r\n\r\n### `variant (default: \"solid\")`\r\n\r\nThe button variant determines the level of emphasis the button should possess.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `solid` | A button with a border and a filled background. **(default)** |\r\n| `outlined` | The button is displayed with a border and a transparent background. |\r\n| `ghost` | A button with no border and fill. Only the label is visible; the background is colored when hovered or clicked. |\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    <Button label=\"default (solid)\" />\r\n    <Button label=\"solid\" variant=\"solid\" />\r\n    <Button label=\"outlined\" variant=\"outlined\" />\r\n    <Button label=\"ghost\" variant=\"ghost\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  height={100}\r\n  name=\"Example: variant\"\r\n  app={`\r\n  <App>\r\n    <HStack>\r\n      <Button label=\"default (solid)\" />\r\n      <Button label=\"solid\" variant=\"solid\" />\r\n      <Button label=\"outlined\" variant=\"outlined\" />\r\n      <Button label=\"ghost\" variant=\"ghost\" />\r\n    </HStack>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `click`\r\n\r\nThis event is triggered when the Button is clicked.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Button label=\"Click me!\" onClick=\"toast('Button clicked')\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: click\"\r\n  app={`\r\n    <App>\r\n      <Button label=\"Click me!\" onClick=\"toast('Button clicked')\" />\r\n    </App>\r\n  `}\r\n  height={160}\r\n/>\r\n\r\n### `gotFocus`\r\n\r\nThis event is triggered when the Button has received the focus.\r\n\r\n```xmlui copy\r\n<App var.text=\"No event\" >\r\n  <HStack verticalAlignment=\"center\" >\r\n    <Button label=\"First, click me!\" \r\n      onGotFocus=\"text = 'Focus received'\" \r\n      onLostFocus=\"text = 'Focus lost'\" />\r\n    <Text value=\"Then, me!\"/>\r\n  </HStack>\r\n  <Text value=\"{text}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: gotFocus/lostFocus\"\r\n    app={`\r\n    <App var.text=\"No event\" >\r\n      <HStack verticalAlignment=\"center\" >\r\n        <Button label=\"First, click me!\" onGotFocus=\"text = 'Focus received'\" onLostFocus=\"text = 'Focus lost'\" />\r\n        <Text value=\"Then, me!\"/>\r\n      </HStack>\r\n      <Text value=\"{text}\" />\r\n    </App>\r\n  `}\r\n    height={140}\r\n/>\r\n\r\n### `lostFocus`\r\n\r\nThis event is triggered when the Button has lost the focus.\r\n\r\n(See the example above)\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `Button` component uses these theme variables to customize its appearance:\r\n\r\n- `backgroundColor`\r\n- `borderColor`\r\n- `color`\r\n- `fontSize`\r\n- `fontWeight`\r\n- `borderRadius`\r\n- `borderStyle`\r\n- `borderWidth`\r\n- `boxShadow`\r\n\r\n`Button` provides are some unique behavior with styling:\r\n\r\nOutlined and ghost buttons have no background color unless active or hovered. As ghost buttons do not have a border, setting border-related theme variables does not affect ghost buttons.\r\n\r\nWhen you set a value for background-related variables, the `Button` component recalculates its background color tones toward the theme variable chain. Thus, using these variables may render different background colors than you expect with outlined and ghost buttons, as by default, they use background when they are active or hovered:\r\n\r\n```text\r\nbackgroundColor-Button-solid\r\nbackgroundColor-Button-outlined\r\nbackgroundColor-Button-ghost\r\nbackgroundColor-Button-primary-outlined\r\nbackgroundColor-Button-primary-ghost\r\nbackgroundColor-Button-secondary-outlined\r\nbackgroundColor-Button-secondary-ghost\r\nbackgroundColor-Button-attention-outlined\r\nbackgroundColor-Button-attention-ghost\r\n```\r\n\r\nThe `themeColor` and `variant` properties of `Button` are used within theme variables as traits; first the `themeColor`, and then the `variant` value. So, when setting theme variables, you can use these traits with `Button`:\r\n\r\n- `Button-solid`\r\n- `Button-outlined`,\r\n- `Button-ghost`,\r\n- `Button-primary`\r\n- `Button-secondary`,\r\n- `Button-attention`,\r\n- `Button-primary-solid`,\r\n- `Button-primary-outlined`,\r\n- `Button-primary-ghost`,\r\n- `Button-secondary-solid`,\r\n- `Button-secondary-outlined`,\r\n- `Button-secondary-ghost`,\r\n- `Button-attention-solid`,\r\n- `Button-attention-outlined`,\r\n- `Button-attention-ghost`,\r\n\r\nThe paddings of buttons can be themed through these theme variables according to the specified size (no separate theme variables for `themeColor` and `variant`):\r\n\r\n- `paddingHorizontal-xs-Button`\r\n- `paddingHorizontal-sm-Button`\r\n- `paddingHorizontal-md-Button`\r\n- `paddingHorizontal-lg-Button`\r\n- `paddingVertical-xs-Button`\r\n- `paddingVertical-sm-Button`\r\n- `paddingVertical-md-Button`\r\n- `paddingVertical-lg-Button`\r\n\r\nThe `Button` component handles these visual states:\r\n\r\n- `--active`\r\n- `--disabled`\r\n- `--focus`\r\n- `--hover`\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nUsing these states is restricted to color properties.\r\n</Callout>\r\n\r\n### Fixed width and height\r\n\r\nUsing a set of buttons with a fixed width or height is often helpful. So `Button` supports these theme variables:\r\n- `width-Button`\r\n- `height-Button`\r\n\r\nAvoid setting the `width-Button` and `height-Button` styles in the theme definition. Instead, wrap the affected button group into a `Theme` component as in the following example:\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    <Theme width-Button=\"120px\">\r\n      <Button label=\"Short\" />\r\n      <Button label=\"Longer\" />\r\n      <Button label=\"Longest\" />\r\n      <Button label=\"Disabled\" enabled=\"false\" />\r\n      <Button label=\"Outlined\" variant=\"outlined\" />\r\n    </Theme>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Buttons with fixed width\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Theme width-Button=\"120px\">\r\n          <Button label=\"Short\" />\r\n          <Button label=\"Longer\" />\r\n          <Button label=\"Longest\" />\r\n          <Button label=\"Disabled\" enabled=\"false\" />\r\n          <Button label=\"Outlined\" variant=\"outlined\" />\r\n        </Theme>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n  height={100}\r\n/>\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button--disabled | $backgroundColor--disabled | $backgroundColor--disabled |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-attention | $backgroundColor-attention | $backgroundColor-attention |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-attention--active | $color-danger-500 | $color-danger-500 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-attention--hover | $color-danger-400 | $color-danger-400 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-attention-ghost--active | $color-danger-100 | $color-danger-100 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-attention-ghost--hover | $color-danger-50 | $color-danger-50 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-attention-outlined--active | $color-danger-100 | $color-danger-100 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-attention-outlined--hover | $color-danger-50 | $color-danger-50 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-attention-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-attention-solid--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-attention-solid--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-primary | $color-primary-500 | $color-primary-500 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-primary--active | $color-primary-500 | $color-primary-500 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-primary--hover | $color-primary-400 | $color-primary-400 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-primary-ghost--active | $color-primary-100 | $color-primary-100 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-primary-ghost--hover | $color-primary-50 | $color-primary-50 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-primary-outlined--active | $color-primary-100 | $color-primary-100 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-primary-outlined--hover | $color-primary-50 | $color-primary-50 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-primary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-primary-solid--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-primary-solid--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-secondary | $color-secondary-500 | $color-secondary-500 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-secondary--active | $color-secondary-500 | $color-secondary-500 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-secondary--hover | $color-secondary-400 | $color-secondary-400 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-secondary-ghost--active | $color-secondary-100 | $color-secondary-100 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-secondary-ghost--hover | $color-secondary-100 | $color-secondary-100 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-secondary-outlined--active | $color-secondary-100 | $color-secondary-100 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-secondary-outlined--hover | $color-secondary-50 | $color-secondary-50 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-secondary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-secondary-solid--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Button-secondary-solid--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button--disabled | $borderColor--disabled | $borderColor--disabled |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-attention | $color-attention | $color-attention |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-attention-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-attention-outlined--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-attention-outlined--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-attention-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-attention-solid--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-attention-solid--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-primary | $color-primary-500 | $color-primary-500 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-primary-outlined | $color-primary-600 | $color-primary-600 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-primary-outlined--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-primary-outlined--hover | $color-primary-500 | $color-primary-500 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-primary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-primary-solid--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-primary-solid--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-secondary | $color-secondary-100 | $color-secondary-100 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-secondary-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-secondary-outlined--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-secondary-outlined--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-secondary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-secondary-solid--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Button-secondary-solid--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Button | $borderRadius | $borderRadius |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Button-attention-ghost | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Button-attention-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Button-attention-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Button-primary-ghost | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Button-primary-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Button-primary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Button-secondary-ghost | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Button-secondary-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Button-secondary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Button | solid | solid |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Button-attention-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Button-attention-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Button-primary-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Button-primary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Button-secondary-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Button-secondary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Button | 1px | 1px |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Button-attention-ghost | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Button-attention-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Button-attention-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Button-primary-ghost | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Button-primary-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Button-primary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Button-secondary-ghost | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Button-secondary-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Button-secondary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Button-attention-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Button-attention-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Button-attention-solid--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Button-primary-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Button-primary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Button-primary-solid--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Button-secondary-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Button-secondary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Button-secondary-solid--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Button-attention-ghost | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Button-attention-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Button-attention-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Button-primary-ghost | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Button-primary-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Button-primary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Button-secondary-ghost | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Button-secondary-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Button-secondary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Button | $fontSize-small | $fontSize-small |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Button-attention-ghost | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Button-attention-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Button-attention-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Button-primary-ghost | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Button-primary-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Button-primary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Button-secondary-ghost | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Button-secondary-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Button-secondary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Button | $fontWeight-medium | $fontWeight-medium |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Button-attention-ghost | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Button-attention-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Button-attention-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Button-primary-ghost | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Button-primary-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Button-primary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Button-secondary-ghost | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Button-secondary-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Button-secondary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [height](../styles-and-themes/common-units/#size)-Button | fit-content | fit-content |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Button--focus | $outlineColor--focus | $outlineColor--focus |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Button-attention-ghost--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Button-attention-outlined--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Button-attention-solid--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Button-primary-ghost--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Button-primary-outlined--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Button-primary-solid--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Button-secondary-ghost--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Button-secondary-outlined--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Button-secondary-solid--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Button--focus | $outlineOffset--focus | $outlineOffset--focus |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Button-attention-ghost--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Button-attention-outlined--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Button-attention-solid--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Button-primary-ghost--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Button-primary-outlined--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Button-primary-solid--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Button-secondary-ghost--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Button-secondary-outlined--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Button-secondary-solid--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Button--focus | $outlineStyle--focus | $outlineStyle--focus |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Button-attention-ghost--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Button-attention-outlined--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Button-attention-solid--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Button-primary-ghost--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Button-primary-outlined--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Button-primary-solid--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Button-secondary-ghost--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Button-secondary-outlined--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Button-secondary-solid--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Button--focus | $outlineWidth--focus | $outlineWidth--focus |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Button-attention-ghost--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Button-attention-outlined--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Button-attention-solid--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Button-primary-ghost--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Button-primary-outlined--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Button-primary-solid--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Button-secondary-ghost--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Button-secondary-outlined--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Button-secondary-solid--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-Button | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-Button-lg | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-Button-md | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-Button-sm | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-Button-xs | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-Button | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-Button-lg | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-Button-md | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-Button-sm | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-Button-xs | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-Button | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-Button-lg | $space-5 | $space-5 |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-Button-md | $space-4 | $space-4 |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-Button-sm | $space-4 | $space-4 |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-Button-xs | $space-1 | $space-1 |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-Button | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-Button-lg | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-Button-md | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-Button-sm | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-Button-xs | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-Button | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-Button-lg | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-Button-md | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-Button-sm | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-Button-xs | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-Button | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-Button-lg | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-Button-md | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-Button-sm | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-Button-xs | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-Button | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-Button-lg | $space-4 | $space-4 |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-Button-md | $space-3 | $space-3 |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-Button-sm | $space-2 | $space-2 |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-Button-xs | $space-0_5 | $space-0_5 |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button | $color-surface-950 | $color-surface-950 |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button--disabled | $textColor--disabled | $textColor--disabled |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-attention-ghost | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-attention-ghost--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-attention-ghost--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-attention-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-attention-outlined--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-attention-outlined--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-attention-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-attention-solid--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-attention-solid--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-primary-ghost | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-primary-ghost--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-primary-ghost--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-primary-outlined | $color-primary-900 | $color-primary-900 |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-primary-outlined--active | $color-primary-900 | $color-primary-900 |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-primary-outlined--hover | $color-primary-950 | $color-primary-950 |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-primary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-primary-solid--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-primary-solid--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-secondary-ghost | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-secondary-ghost--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-secondary-ghost--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-secondary-outlined | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-secondary-outlined--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-secondary-outlined--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-secondary-solid | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-secondary-solid--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-secondary-solid--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Button-solid | $const-color-surface-50 | $const-color-surface-50 |\r\n| [width](../styles-and-themes/common-units/#size)-Button | fit-content | fit-content |\r\n",
  "components/CHStack":"import { Callout } from \"nextra/components\";\r\n\r\n# CHStack [#component-chstack]\r\n\r\nThis component is inherited from <SmartLink href=\"/components/Stack\">Stack</SmartLink>\r\n\r\nSee also: <SmartLink href=\"/components/CVStack\">CVStack</SmartLink>, <SmartLink href=\"/components/HStack\">HStack</SmartLink>, <SmartLink href=\"/components/VStack\">VStack</SmartLink>\r\n\r\n`CHStack` is a specialized, shorthand version for the regular `Stack` component that has a horizontal orientation with its contents centered.\r\n\r\n```xmlui copy\r\n<App>\r\n  <CHStack backgroundColor=\"cyan\">\r\n    <Stack height=\"32px\" width=\"32px\" backgroundColor=\"red\" />\r\n    <Stack height=\"32px\" width=\"32px\" backgroundColor=\"blue\" />\r\n    <Stack height=\"32px\" width=\"32px\" backgroundColor=\"green\" />\r\n  </CHStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: CHStack\"\r\n  app={`\r\n    <App>\r\n      <CHStack backgroundColor=\"cyan\">\r\n        <Stack height=\"32px\" width=\"32px\" backgroundColor=\"red\" />\r\n        <Stack height=\"32px\" width=\"32px\" backgroundColor=\"blue\" />\r\n        <Stack height=\"32px\" width=\"32px\" backgroundColor=\"green\" />\r\n      </CHStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou cannot change the orientation of `CHStack` from horizontal to vertical by setting the `orientation` prop, as the engine ignores that setting.\r\n</Callout>\r\n\r\n\r\n",
  "components/CVStack":"import { Callout } from \"nextra/components\";\r\n\r\n# CVStack [#component-cvstack]\r\n\r\nThis component is inherited from <SmartLink href=\"/components/Stack\">Stack</SmartLink>\r\n\r\nSee also: <SmartLink href=\"/components/CHStack\">CHStack</SmartLink>, <SmartLink href=\"/components/HStack\">HStack</SmartLink>, <SmartLink href=\"/components/VStack\">VStack</SmartLink>\r\n\r\n`CVStack` is a specialized, shorthand version for the regular `Stack` component with a vertical orientation centered on its contents.\r\n\r\n```xmlui copy\r\n<App>\r\n  <CVStack width=\"33%\" backgroundColor=\"cyan\">\r\n    <Stack height=\"32px\" width=\"32px\" backgroundColor=\"red\" />\r\n    <Stack height=\"32px\" width=\"32px\" backgroundColor=\"blue\" />\r\n    <Stack height=\"32px\" width=\"32px\" backgroundColor=\"green\" />\r\n  </CVStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: CVStack\"\r\n  app={`\r\n    <App>\r\n      <CVStack width=\"33%\" backgroundColor=\"cyan\">\r\n        <Stack height=\"32px\" width=\"32px\" backgroundColor=\"red\" />\r\n        <Stack height=\"32px\" width=\"32px\" backgroundColor=\"blue\" />\r\n        <Stack height=\"32px\" width=\"32px\" backgroundColor=\"green\" />\r\n      </CVStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou cannot change the orientation of `CVStack` from vertical to horizontal by setting the `orientation` prop, as the engine ignores that setting.\r\n</Callout>\r\n\r\n\r\n",
  "components/Card":"import { Callout } from \"nextra/components\";\r\n\r\n# Card [#component-card]\r\n\r\nThe `Card` component is a container for cohesive elements, often rendered visually as a card.\r\n\r\n## Using Card\r\n\r\n`Card` is a container; it does not have any explicit properties.\r\nYou can nest the card's content into the `<Card>` tag:\r\n\r\n```xmlui copy\r\n<App>\r\n  <Card maxWidth=\"200px\">\r\n    <HStack verticalAlignment=\"center\">\r\n      <Icon name=\"info\" />\r\n      <Text value=\"Information\" variant=\"strong\" />\r\n    </HStack>\r\n    <Text value=\"This is an example text\" />\r\n  </Card>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: using Card\"\r\n  height=\"160\"\r\n  app={`\r\n    <App>\r\n      <Card maxWidth=\"200px\">\r\n        <HStack verticalAlignment=\"center\">\r\n          <Icon name=\"info\" />\r\n          <Text value=\"Information\" variant=\"strong\" />\r\n        </HStack>\r\n        <Text value=\"This is an example text\" />\r\n      </Card>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nThere are also prestyled properties one can make use of, detailed in the [Properties section](#properties).\r\nPrestyled elements always appear above other children.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Card\r\n    avatarUrl=\"https://i.pravatar.cc/100\"\r\n    title=\"Example Title\"\r\n    subtitle=\"Predefined subtitle\"\r\n    maxWidth=\"300px\">\r\n    <HStack verticalAlignment=\"center\">\r\n      <Icon name=\"info\"/>\r\n      This is a card\r\n    </HStack>\r\n  </Card>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: using Card with prestyled elements\"\r\n  app={`\r\n    <App>\r\n      <Card\r\n        avatarUrl=\"https://i.pravatar.cc/100\"\r\n        title=\"Example Title\"\r\n        subtitle=\"Predefined subtitle\"\r\n        maxWidth=\"300px\">\r\n        <HStack verticalAlignment=\"center\">\r\n          <Icon name=\"info\"/>\r\n          This is a card\r\n        </HStack>\r\n      </Card>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\n### `avatarSize`\r\n\r\nThis prop sets the size of the avatar. The default value is `sm`.\r\n\r\nAvailable values: `xs`, `sm`, `md`, `lg`\r\n\r\n### `avatarUrl`\r\n\r\nShow the avatar (`true`) or not (`false`). If not specified, the Card will show the first letters of the [`title`](#title).\r\n\r\n### `linkTo`\r\n\r\nThis property wraps the title in a `Link` component that is clickable to navigate.\r\n\r\n### `orientation (default: \"vertical\")`\r\n\r\nAn optional property that governs the Card's orientation (whether the Card lays out its children in a row or a column). If the orientation is set to `horizontal`, the Card will display its children in a row, except for its [`title`](#title) and [`subtitle`](#subtitle).\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `horizontal` | The component will fill the available space horizontally |\r\n| `vertical` | The component will fill the available space vertically **(default)** |\r\n\r\n```xmlui copy /orientation=\"horizontal\"/\r\n<App>\r\n  <Card title=\"Example Title\" subtitle=\"Example Subtitle\" orientation=\"horizontal\">\r\n    <SpaceFiller />\r\n    <Text>Text child #1</Text>\r\n    <Text>Text child #2</Text>\r\n    <Button label=\"Button Child\" />\r\n  </Card>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: orientation\"\r\n  app={`\r\n  <App>\r\n    <Card title=\"Example Title\" subtitle=\"Example Subtitle\" orientation=\"horizontal\">\r\n      <SpaceFiller />\r\n      <Text>Text child #1</Text>\r\n      <Text>Text child #2</Text>\r\n      <Button label=\"Button Child\" />\r\n    </Card>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `showAvatar (default: false)`\r\n\r\nIndicates whether the Card should be displayed\r\n\r\nNote that in the demo below if the `avatarUrl` is specified, `showAvatar` is automatically set to true but can still be hidden.\r\n\r\n```xmlui copy /showAvatar=\"true\"/\r\n<App>\r\n  <Card maxWidth=\"300px\" avatarUrl=\"https://i.pravatar.cc/100\" />\r\n  <Card maxWidth=\"300px\" showAvatar=\"true\" title=\"Example Card\" />\r\n  <Card maxWidth=\"300px\" showAvatar=\"true\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: showAvatar\"\r\n  height=\"200\"\r\n  app={`\r\n    <App>\r\n      <Card maxWidth=\"300px\" avatarUrl=\"https://i.pravatar.cc/100\" />\r\n      <Card maxWidth=\"300px\" showAvatar=\"true\" title=\"Example Card\" />\r\n      <Card maxWidth=\"300px\" showAvatar=\"true\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `subtitle`\r\n\r\nThis prop sets the prestyled subtitle.\r\n\r\nThis prop sets the prestyled subtitle.\r\n\r\n```xmlui copy /subtitle=\"Example Subtitle\"/\r\n<App>\r\n  <Card maxWidth=\"300px\" subtitle=\"Example Subtitle\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: subtitle\"\r\n  app={`\r\n    <App>\r\n      <Card maxWidth=\"300px\" subtitle=\"Example Subtitle\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `title`\r\n\r\nThis prop sets the prestyled title.\r\n\r\nThis prop sets the prestyled title.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Card maxWidth=\"300px\" title=\"Example Title\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: title\"\r\n  app={`\r\n    <App>\r\n      <Card maxWidth=\"300px\" title=\"Example Title\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `click`\r\n\r\nThis event is triggered when the Card is clicked.\r\n\r\nThis event is triggered when the `Card` is clicked.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Card maxWidth=\"300px\" onClick=\"toast('Clicked!')\">\r\n    <HStack verticalAlignment=\"center\">\r\n      <Icon name=\"info\" />\r\n      <Text value=\"Information\" variant=\"strong\" />\r\n    </HStack>\r\n    <Text value=\"This is an example text\" />\r\n  </Card>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: click\"\r\n  app={`\r\n    <App>\r\n      <Card maxWidth=\"300px\" onClick=\"toast('Clicked!')\">\r\n        <HStack verticalAlignment=\"center\">\r\n          <Icon name=\"info\" />\r\n          <Text value=\"Information\" variant=\"strong\" />\r\n        </HStack>\r\n        <Text value=\"This is an example text\" />\r\n      </Card>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `Card` component uses these theme variables to customize its appearance:\r\n\r\n- `border-Card`\r\n- `backgroundColor-Card`\r\n- `borderColor-Card`\r\n- `padding-Card`\r\n- `paddingHorizontal-Card`\r\n- `paddingVertical-Card`\r\n- `borderRadius-Card`\r\n- `boxShadow-Card`\r\n- `borderStyle-Card`\r\n- `borderWidth-Card`\r\n\r\nThe following theme definition changes the visual appearance of the card:\r\n\r\n```json\r\n{\r\n  \"id\": \"custom\",\r\n  \"name\": \"Custom Theme\",\r\n  \"themeVars\": {\r\n    \"backgroundColor-Card\": \"$color-surface-200\",\r\n    \"borderRadius-Card\": \"4px\",\r\n    \"borderColor-Card\": \"$color-surface-600\",\r\n    \"borderWidth-Card\": \"2px\",\r\n    \"paddingHorizontal-Card\": \"2rem\",\r\n    \"color\": \"black\"\r\n  }\r\n}\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling\"\r\n  defaultTheme=\"custom\"\r\n  themes={[{\r\n    id: \"custom\",\r\n    name: \"Custom Theme\",\r\n    themeVars: {\r\n      \"backgroundColor-Card\": \"$color-surface-200\",\r\n      \"borderRadius-Card\": \"4px\",\r\n      \"borderColor-Card\": \"$color-surface-600\",\r\n      \"borderWidth-Card\": \"2px\",\r\n      \"paddingHorizontal-Card\": \"2rem\",\r\n      \"color\": \"black\"\r\n    }\r\n  }]}\r\n  app={`\r\n    <App>\r\n      <Card maxWidth=\"240px\">\r\n        <HStack verticalAlignment=\"center\">\r\n          <Icon name=\"info\" />\r\n          <Text value=\"Information\" variant=\"strong\" />\r\n        </HStack>\r\n        <Text value=\"This is an example text\" />\r\n      </Card>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Card | $color-surface-raised | $color-surface-raised |\r\n| [border](../styles-and-themes/common-units/#border)-Card | 1px solid $borderColor | 1px solid $borderColor |\r\n| [borderBottom](../styles-and-themes/common-units/#border)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomColor](../styles-and-themes/common-units/#color)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomStyle](../styles-and-themes/common-units/#border-style)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomWidth](../styles-and-themes/common-units/#size)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndEndRadius-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndStartRadius-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalColor](../styles-and-themes/common-units/#color)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalStyle](../styles-and-themes/common-units/#border-style)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalWidth](../styles-and-themes/common-units/#size)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeft](../styles-and-themes/common-units/#border)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftStyle](../styles-and-themes/common-units/#border-style)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftWidth](../styles-and-themes/common-units/#size)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Card | $borderRadius | $borderRadius |\r\n| [borderRight](../styles-and-themes/common-units/#border)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightStyle](../styles-and-themes/common-units/#border-style)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightWidth](../styles-and-themes/common-units/#size)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartEndRadius-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartStartRadius-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTop](../styles-and-themes/common-units/#border)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopColor](../styles-and-themes/common-units/#color)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopStyle](../styles-and-themes/common-units/#border-style)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopWidth](../styles-and-themes/common-units/#size)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalColor](../styles-and-themes/common-units/#color)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalStyle](../styles-and-themes/common-units/#border-style)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalWidth](../styles-and-themes/common-units/#size)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Card | none | none |\r\n| [gap](../styles-and-themes/common-units/#size)-avatar-Card | $gap-normal | $gap-normal |\r\n| [gap](../styles-and-themes/common-units/#size)-Card | var(--stack-gap-default) | var(--stack-gap-default) |\r\n| [gap](../styles-and-themes/common-units/#size)-title-Card | $gap-normal | $gap-normal |\r\n| horizontalAlignment-title-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-Card | $space-4 | $space-4 |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-Card | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)ment-title-Card | center | center |\r\n\r\n### Variable Explanations\r\n\r\n| Theme Variable | Description |\r\n| --- | --- |\r\n| **`gap-Card`** | The gap between the component's children. |\r\n| **`gap-title-Card`** | The gap between the title and the subtitle |\r\n| **`gap-avatar-Card`** | The gap between the avatar and the title panel |\r\n| **`horizontalAlignment-title-Card`** | The horizontal alignment of panel with the title and subtitle |\r\n| **`verticalAlignment-title-Card`** | The vertical alignment of the title and subtitle to the avatar |\r\n",
  "components/ChangeListener":"import { Callout } from \"nextra/components\";\r\n\r\n# ChangeListener [#component-changelistener]\r\n\r\n`ChangeListener` is a functional component (it renders no UI) to trigger an action when a particular value (component property, state, etc.) changes.\r\n\r\n## Properties\r\n\r\n### `listenTo`\r\n\r\nValue to the changes of which this component listens.\r\n\r\nThe following sample demonstrates using this property. Every time the user clicks the button, a counter is incremented. The `ChangeListener` component watches the counter's value. Whenever it changes, the component fires the `didChange` event, which stores whether the new counter value is even into the `isEven` variable.\r\n\r\n```xmlui copy\r\n<App var.counter=\"{0}\" var.isEven=\"{false}\">\r\n  <Button label=\"Increment counter\" onClick=\"{counter++}\" />\r\n  <ChangeListener\r\n    listenTo=\"{counter}\"\r\n    onDidChange=\"isEven = counter % 2 == 0\" />\r\n  <Text>Counter is {counter} which {isEven? \"is\": \"isn't\"} even.</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: listenTo\"\r\n  app={`\r\n    <App var.counter=\"{0}\" var.isEven=\"{false}\">\r\n      <Button label=\"Increment counter\" onClick=\"{counter++}\" />\r\n      <ChangeListener\r\n        listenTo=\"{counter}\"\r\n        onDidChange=\"isEven = counter % 2 == 0\" />\r\n      <Text>Counter is {counter} which {isEven? \"is\": \"isn't\"} even.</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `throttleWaitInMs (default: 0)`\r\n\r\nThis variable sets a throttling time (in milliseconds) to apply when executing the `didChange` event handler. All changes within that throttling time will only fire the `didChange` event once.\r\n\r\nThe following example works like the previous one (in the `listen` prop's description). However, the user can reset or set the throttling time to 3 seconds. You can observe that while the throttling time is 3 seconds, the counter increments on every click, but `isEven` only refreshes once within 3 seconds.\r\n\r\n```xmlui copy\r\n<App var.counter=\"{0}\" var.isEven=\"{false}\" var.throttle=\"{0}\">\r\n  <HStack>\r\n    <Button label=\"Increment counter\" onClick=\"{counter++}\" />\r\n    <Button label=\"Set 3 sec throttling\" onClick=\"throttle = 3000\" />\r\n    <Button label=\"Reset throttling\" onClick=\"throttle = 0\" />\r\n  </HStack>\r\n\r\n  <ChangeListener\r\n    listenTo=\"{counter}\"\r\n    throttleWaitInMs=\"{throttle}\"\r\n    onDidChange=\"isEven = counter % 2 == 0\" />\r\n  <Text>Counter is {counter} which {isEven? \"is\": \"isn't\"} even.</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: listenTo\"\r\n    app={`\r\n    <App var.counter=\"{0}\" var.isEven=\"{false}\" var.throttle=\"{0}\">\r\n      <HStack>\r\n        <Button label=\"Increment counter\" onClick=\"{counter++}\" />\r\n        <Button label=\"Set 3 sec throttling\" onClick=\"throttle = 3000\" />\r\n        <Button label=\"Reset throttling\" onClick=\"throttle = 0\" />\r\n      </HStack>\r\n\r\n      <ChangeListener\r\n        listenTo=\"{counter}\"\r\n        throttleWaitInMs=\"{throttle}\"\r\n        onDidChange=\"isEven = counter % 2 == 0\" />\r\n      <Text>Counter is {counter} which {isEven? \"is\": \"isn't\"} even.</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `didChange`\r\n\r\nThis event is triggered when value of ChangeListener has changed.\r\n\r\nThis event is fired when the component observes a value change (within the specified throttling interval). Define the event handler that responds to that change (as the previous samples demonstrate).\r\n\r\nThe event argument is an object with `prevValue` and `newValue` properties that (as their name suggests) contain the previous and the new values.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/Checkbox":"import { Callout } from \"nextra/components\";\r\n\r\n# Checkbox [#component-checkbox]\r\n\r\nThe `Checkbox` component allows users to make binary choices, typically between checked or unchecked. It consists of a small box that can be toggled on or off by clicking on it.\r\n\r\nTo bind data to a \\`Checkbox\\`, use the XMLUI [Forms infrastructure](../learning/using-components/forms).\r\n\r\n## Use children as Content Template\r\n\r\nThe [inputTemplate](#inputtemplate) property can be replaced by setting the item template component directly as the Checkbox's child.\r\nIn the following example, the two Checkbox are functionally the same:\r\n\r\n```xmlui copy\r\n<App>\r\n  <!-- This is the same -->\r\n  <Checkbox>\r\n    <property name=\"inputTemplate\">\r\n      <Text>Template</Text>\r\n    </property>\r\n  </Checkbox>\r\n  <!-- As this -->\r\n  <Checkbox>\r\n    <Text>Template</Text>\r\n  </Checkbox>\r\n</App>\r\n```\r\n\r\n## Properties\r\n\r\n### `autoFocus (default: false)`\r\n\r\nIf this property is set to `true`, the component gets the focus automatically when displayed.\r\n\r\n### `enabled (default: true)`\r\n\r\nThis boolean property value indicates whether the component responds to user events (`true`) or not (`false`).\r\n\r\n```xmlui copy {4-5, 9-10}\r\n<App>\r\n  Enabled checkboxes:\r\n  <HStack>\r\n    <Checkbox initialValue=\"true\" enabled=\"true\" />\r\n    <Checkbox initialValue=\"false\" enabled=\"true\" />\r\n  </HStack>\r\n  Disabled checkboxes:\r\n  <HStack>\r\n    <Checkbox initialValue=\"true\" enabled=\"false\" />\r\n    <Checkbox initilaValue=\"false\" enabled=\"false\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: enabled\"\r\n  app={`\r\n    <App>\r\n      Enabled checkboxes:\r\n      <HStack>\r\n        <Checkbox initialValue=\"true\" enabled=\"true\" />\r\n        <Checkbox initialValue=\"false\" enabled=\"true\" />\r\n      </HStack>\r\n      Disabled checkboxes:\r\n      <HStack>\r\n        <Checkbox initialValue=\"true\" enabled=\"false\" />\r\n        <Checkbox initilaValue=\"false\" enabled=\"false\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `indeterminate (default: false)`\r\n\r\nThe `true` value of this property signals that the component is in an _intedeterminate state_.\r\n\r\nThis prop is commonly used if there are several other checkboxes linked to one checkbox and some items in that group of checkboxes are in a mixed state: at least one item has a different value compared to the rest.\r\n\r\nThe following sample binds the state of two checkboxes to one and updates the state of the top checkbox accordingly. When the states of the bound checkboxes are different, the top checkbox is set to indeterminate:\r\n\r\n```xmlui copy {4}\r\n<App var.indeterminate=\"{false}\">\r\n  <Checkbox\r\n    label=\"Indeterminate Checkbox\"\r\n    indeterminate=\"{indeterminate}\"\r\n    initialValue=\"{cb1.value}\"\r\n    readOnly=\"true\" />\r\n  <ChangeListener\r\n    listenTo=\"{ { v1: cb1.value, v2: cb2.value } }\"\r\n    onDidChange=\"indeterminate = cb1.value !== cb2.value\" />\r\n  Group of checkboxes:\r\n  <HStack>\r\n    <Checkbox label=\"Checkbox #1\" id=\"cb1\" initialValue=\"true\" />\r\n    <Checkbox label=\"Checkbox #2\" id=\"cb2\" initialValue=\"false\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\nTry this sample by clicking the bottom group of checkboxes.\r\n\r\n<Playground\r\n  name=\"Example: indeterminate\"\r\n  app={`\r\n    <App var.indeterminate=\"{false}\">\r\n      <Checkbox\r\n        label=\"Indeterminate Checkbox\"\r\n        indeterminate=\"{indeterminate}\"\r\n        initialValue=\"{cb1.value}\"\r\n        readOnly=\"true\" />\r\n      <ChangeListener\r\n        listenTo=\"{ { v1: cb1.value, v2: cb2.value } }\"\r\n        onDidChange=\"indeterminate = cb1.value !== cb2.value\" />\r\n      Group of checkboxes:\r\n      <HStack>\r\n        <Checkbox label=\"Checkbox #1\" id=\"cb1\" initialValue=\"true\" />\r\n        <Checkbox label=\"Checkbox #2\" id=\"cb2\" initialValue=\"false\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `initialValue (default: false)`\r\n\r\nThis property sets the component's initial value.\r\n\r\n### `inputTemplate`\r\n\r\nThis property is used to define a custom checkbox input template\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Checkbox label=\"Example label\" initialValue=\"true\" />\r\n  <Checkbox label=\"Another label\" intialValue=\"false\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: label\"\r\n  app={`\r\n    <App>\r\n      <Checkbox label=\"Example label\" initialValue=\"true\" />\r\n      <Checkbox label=\"Another label\" intialValue=\"false\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `labelBreak (default: false)`\r\n\r\nThis boolean value indicates if the `Checkbox` labels can be split into multiple lines if it would overflow the available label width.\r\n\r\n### `labelPosition (default: \"end\")`\r\n\r\nPlaces the label at the given position of the component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `start` | The left side of the input (left-to-right) or the right side of the input (right-to-left) |\r\n| `end` | The right side of the input (left-to-right) or the left side of the input (right-to-left) **(default)** |\r\n| `top` | The top of the input |\r\n| `bottom` | The bottom of the input |\r\n\r\n```xmlui copy\r\n<App>\r\n  <Checkbox label=\"Top label\" labelPosition=\"top\" initialValue=\"true\" />\r\n  <Checkbox label=\"End label\" labelPosition=\"end\" initialValue=\"true\" />\r\n  <Checkbox label=\"Bottom label\" labelPosition=\"bottom\" initialValue=\"true\" />\r\n  <Checkbox label=\"Start label\" labelPosition=\"start\" initialValue=\"true\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: labelPosition\"\r\n  app={`\r\n    <App>\r\n      <Checkbox label=\"Top label\" labelPosition=\"top\" initialValue=\"true\" />\r\n      <Checkbox label=\"End label\" labelPosition=\"end\" initialValue=\"true\" />\r\n      <Checkbox label=\"Bottom label\" labelPosition=\"bottom\" initialValue=\"true\" />\r\n      <Checkbox label=\"Start label\" labelPosition=\"start\" initialValue=\"true\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `labelWidth`\r\n\r\nThis property sets the width of the `Checkbox`.\r\n\r\n### `readOnly (default: false)`\r\n\r\nSet this property to `true` to disallow changing the component value.\r\n\r\n```xmlui copy {3}\r\n<App>\r\n  <Checkbox readOnly=\"true\" label=\"Checked\" initialValue=\"true\" />\r\n  <Checkbox readOnly=\"true\" label=\"Unchecked\" intialValue=\"false\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: readOnly\"\r\n  app={`\r\n    <App>\r\n      <Checkbox readOnly=\"true\" label=\"Checked\" initialValue=\"true\" />\r\n      <Checkbox readOnly=\"true\" label=\"Unchecked\" intialValue=\"false\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `required`\r\n\r\nSet this property to `true` to indicate it must have a value before submitting the containing form.\r\n\r\n### `validationStatus (default: \"none\")`\r\n\r\nThis property allows you to set the validation status of the input component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `valid` | Visual indicator for an input that is accepted |\r\n| `warning` | Visual indicator for an input that produced a warning |\r\n| `error` | Visual indicator for an input that produced an error |\r\n\r\n## Events\r\n\r\n### `didChange`\r\n\r\nThis event is triggered when value of Checkbox has changed.\r\n\r\n```xmlui copy\r\n<App verticalAlignment=\"center\" var.changes=\"\">\r\n  <Checkbox label=\"Changeable\" onDidChange=\"changes += '+'\" />\r\n  <Checkbox label=\"Readonly\" readOnly=\"true\" onDidChange=\"changes += '-'\" />\r\n  <Text value=\"Changes: {changes}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: didChange\"\r\n  app={`\r\n    <App verticalAlignment=\"center\" var.changes=\"\">\r\n      <Checkbox label=\"Changeable\" onDidChange=\"changes += '+'\" />\r\n      <Checkbox label=\"Readonly\" readOnly=\"true\" onDidChange=\"changes += '-'\" />\r\n      <Text value=\"Changes: {changes}\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `gotFocus`\r\n\r\nThis event is triggered when the Checkbox has received the focus.\r\n\r\nClick the `Checkbox` in the example demo to change the label text. Note how clicking elsewhere resets the text to the original.\r\n\r\n```xmlui copy {4,5}\r\n<App var.focused=\"{false}\" verticalAlignment=\"center\">\r\n  <Checkbox\r\n    value=\"true\"\r\n    onGotFocus=\"focused = true\"\r\n    onLostFocus=\"focused = false\"\r\n  />\r\n  <Text value=\"{focused === true ? 'I am focused!' : 'I have lost the focus!'}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: gotFocus/lostFocus\"\r\n  app={`\r\n    <App var.focused=\"{false}\" verticalAlignment=\"center\">\r\n      <Checkbox\r\n        value=\"true\"\r\n        onGotFocus=\"focused = true\"\r\n        onLostFocus=\"focused = false\"\r\n      />\r\n      <Text value=\"{focused === true ? 'I am focused!' : 'I have lost the focus!'}\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `lostFocus`\r\n\r\nThis event is triggered when the Checkbox has lost the focus.\r\n\r\n(See the example above)\r\n\r\n## Exposed Methods\r\n\r\n### `setValue`\r\n\r\nYou can use this method to set the component's current value programmatically (`true`: checked, `false`: unchecked).\r\n\r\nYou can use this method to set the checkbox's current value programmatically (`true`: checked, `false`: unchecked).\r\n\r\n```xmlui copy {10,13,15}\r\n<App var.changes=\"\">\r\n  <Checkbox\r\n    id=\"checkbox\"\r\n    readOnly=\"true\"\r\n    label=\"This checkbox can be set only programmatically\"\r\n    onDidChange=\"changes += '+'\" />\r\n  <HStack>\r\n    <Button\r\n      label=\"Check\"\r\n      onClick=\"checkbox.setValue(true)\" />\r\n    <Button\r\n      label=\"Uncheck\"\r\n      onClick=\"checkbox.setValue(false)\" />\r\n  </HStack>\r\n  <Text>The checkbox is {checkbox.value ? \"checked\" : \"unchecked\"}</Text>\r\n  <Text value=\"Changes: {changes}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: value and setValue\"\r\n  app={`\r\n    <App var.changes=\"\">\r\n      <Checkbox\r\n        id=\"checkbox\"\r\n        readOnly=\"true\"\r\n        label=\"This checkbox can be set only programmatically\"\r\n        onDidChange=\"changes += '+'\" />\r\n      <HStack>\r\n        <Button\r\n          label=\"Check\"\r\n          onClick=\"checkbox.setValue(true)\" />\r\n        <Button\r\n          label=\"Uncheck\"\r\n          onClick=\"checkbox.setValue(false)\" />\r\n      </HStack>\r\n      <Text>The checkbox is {checkbox.value ? \"checked\" : \"unchecked\"}</Text>\r\n      <Text value=\"Changes: {changes}\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `value`\r\n\r\nYou can query this read-only API property to query the component's current value (`true`: checked, `false`: unchecked).\r\n\r\nYou can query this read-only API property to query the checkbox's current value (`true`: checked, `false`: unchecked).\r\n\r\nSee an example in the `setValue` API method.\r\n\r\n## Styling\r\n\r\nThe `Checkbox` component uses these theme variables to customize its appearance:\r\n\r\n- `backgroundColor-Checkbox-default`\r\n- `borderColor-Checkbox-default`\r\n- `borderRadius-Checkbox-default`\r\n- `backgroundColor-Checkbox--disabled`\r\n- `backgroundColor-indicator-Checkbox`\r\n- `backgroundColor-checked-Checkbox`\r\n- `backgroundColor-checked-Checkbox-warning`\r\n- `backgroundColor-checked-Checkbox-success`\r\n- `backgroundColor-checked-Checkbox-error`\r\n- `borderColor-checked-Checkbox`\r\n- `borderColor-checked-Checkbox-warning`\r\n- `borderColor-checked-Checkbox-error`\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Checkbox--disabled | $color-surface-200 | $color-surface-200 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Checkbox--disabled | $color-surface-200 | $color-surface-200 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Checkbox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Checkbox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Checkbox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Checkbox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-Checkbox | $color-primary-500 | $color-primary-500 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-Checkbox | $color-primary-500 | $color-primary-500 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-Checkbox-error | $borderColor-Checkbox-error | $borderColor-Checkbox-error |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-Checkbox-error | $borderColor-Checkbox-error | $borderColor-Checkbox-error |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-Checkbox-success | $borderColor-Checkbox-success | $borderColor-Checkbox-success |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-Checkbox-success | $borderColor-Checkbox-success | $borderColor-Checkbox-success |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-Checkbox-warning | $borderColor-Checkbox-warning | $borderColor-Checkbox-warning |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-Checkbox-warning | $borderColor-Checkbox-warning | $borderColor-Checkbox-warning |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-indicator-Checkbox | $backgroundColor-primary | $backgroundColor-primary |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Checkbox--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Checkbox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Checkbox-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Checkbox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Checkbox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Checkbox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-checked-Checkbox | $color-primary-500 | $color-primary-500 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-checked-Checkbox | $color-primary-500 | $color-primary-500 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-checked-Checkbox-error | $borderColor-Checkbox-error | $borderColor-Checkbox-error |\r\n| [borderColor](../styles-and-themes/common-units/#color)-checked-Checkbox-error | $borderColor-Checkbox-error | $borderColor-Checkbox-error |\r\n| [borderColor](../styles-and-themes/common-units/#color)-checked-Checkbox-success | $borderColor-Checkbox-success | $borderColor-Checkbox-success |\r\n| [borderColor](../styles-and-themes/common-units/#color)-checked-Checkbox-success | $borderColor-Checkbox-success | $borderColor-Checkbox-success |\r\n| [borderColor](../styles-and-themes/common-units/#color)-checked-Checkbox-warning | $borderColor-Checkbox-warning | $borderColor-Checkbox-warning |\r\n| [borderColor](../styles-and-themes/common-units/#color)-checked-Checkbox-warning | $borderColor-Checkbox-warning | $borderColor-Checkbox-warning |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Checkbox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Checkbox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Checkbox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Checkbox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Checkbox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Checkbox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Checkbox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Checkbox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Checkbox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Checkbox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Checkbox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Checkbox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Checkbox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Checkbox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Checkbox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Checkbox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Checkbox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Checkbox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Checkbox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Checkbox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n",
  "components/ColorPicker":"import { Callout } from \"nextra/components\";\r\n\r\n# ColorPicker [#component-colorpicker]\r\n\r\nThis component allows the user to select a color with the browser's default color picker control.\r\n\r\n## Using `ColorPicker`\r\n\r\nThis component allows you to edit or select a color using RGB, HSL, or CSS HEX notation. It displays a popup over the UI and lets you use the mouse or keyboard to edit or select a color.\r\n\r\n```xmlui copy\r\n<App>\r\n  <ColorPicker id=\"colorPicker\" label=\"Select your favorite color\" />\r\n  <Text>Selected color: {colorPicker.value}</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: using ColorPicker\"\r\n  app={`\r\n  <App>\r\n    <ColorPicker id=\"colorPicker\" label=\"Select your favorite color\" />\r\n    <Text>Selected color: {colorPicker.value}</Text>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\n### `autoFocus (default: false)`\r\n\r\nIf this property is set to `true`, the component gets the focus automatically when displayed.\r\n\r\n### `enabled (default: true)`\r\n\r\nThis boolean property value indicates whether the component responds to user events (`true`) or not (`false`).\r\n\r\n### `initialValue`\r\n\r\nThis property sets the component's initial value.\r\n\r\n```xmlui copy /initialValue=\"#ff0080\"/\r\n<App>\r\n  <ColorPicker \r\n    id=\"colorPicker\" \r\n    label=\"Select your favorite color\" \r\n    initialValue=\"#ff0080\"\r\n    />\r\n  <Text>Selected color: {colorPicker.value}</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: using ColorPicker\"\r\n  app={`\r\n  <App>\r\n    <ColorPicker \r\n      id=\"colorPicker\" \r\n      label=\"Select your favorite color\" \r\n      initialValue=\"#ff0080\"\r\n      />\r\n    <Text>Selected color: {colorPicker.value}</Text>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\n### `labelBreak (default: false)`\r\n\r\nThis boolean value indicates if the `ColorPicker` labels can be split into multiple lines if it would overflow the available label width.\r\n\r\n### `labelPosition (default: \"top\")`\r\n\r\nPlaces the label at the given position of the component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `start` | The left side of the input (left-to-right) or the right side of the input (right-to-left) |\r\n| `end` | The right side of the input (left-to-right) or the left side of the input (right-to-left) |\r\n| `top` | The top of the input **(default)** |\r\n| `bottom` | The bottom of the input |\r\n\r\n### `labelWidth`\r\n\r\nThis property sets the width of the `ColorPicker`.\r\n\r\n### `readOnly (default: false)`\r\n\r\nSet this property to `true` to disallow changing the component value.\r\n\r\n```xmlui copy /initialValue=\"#ff0080\"/\r\n<App>\r\n  <ColorPicker initialValue=\"#ffff00\" label=\"Cannot be edited\" readOnly />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: readOnly\"\r\n  app={`\r\n  <App>\r\n    <ColorPicker initialValue=\"#ffff00\" label=\"Cannot be edited\" readOnly />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `required`\r\n\r\nSet this property to `true` to indicate it must have a value before submitting the containing form.\r\n\r\n### `validationStatus (default: \"none\")`\r\n\r\nThis property allows you to set the validation status of the input component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `valid` | Visual indicator for an input that is accepted |\r\n| `warning` | Visual indicator for an input that produced a warning |\r\n| `error` | Visual indicator for an input that produced an error |\r\n\r\n```xmlui copy /initialValue=\"#ff0080\"/\r\n<App>\r\n  <ColorPicker initialValue=\"#c0c0ff\" label=\"Valid\" validationStatus=\"valid\" />\r\n  <ColorPicker initialValue=\"#c0c0ff\" label=\"Warning\" validationStatus=\"warning\" />\r\n  <ColorPicker initialValue=\"#c0c0ff\" label=\"Error\" validationStatus=\"error\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: validationStatus\"\r\n  app={`\r\n  <App>\r\n    <ColorPicker initialValue=\"#c0c0ff\" label=\"Valid\" validationStatus=\"valid\" />\r\n    <ColorPicker initialValue=\"#c0c0ff\" label=\"Warning\" validationStatus=\"warning\" />\r\n    <ColorPicker initialValue=\"#c0c0ff\" label=\"Error\" validationStatus=\"error\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `didChange`\r\n\r\nThis event is triggered when value of ColorPicker has changed.\r\n\r\n### `gotFocus`\r\n\r\nThis event is triggered when the ColorPicker has received the focus.\r\n\r\n### `lostFocus`\r\n\r\nThis event is triggered when the ColorPicker has lost the focus.\r\n\r\n## Exposed Methods\r\n\r\n### `focus`\r\n\r\nThis method sets the focus on the ColorPicker.\r\n\r\n### `setValue`\r\n\r\nYou can use this method to set the component's current value programmatically (`true`: checked, `false`: unchecked).\r\n\r\n```xmlui copy /setValue/\r\n<App>\r\n  <App>\r\n    <ColorPicker id=\"colorPicker\" label=\"Select your favorite color\" initialValue=\"#808080\" />\r\n    <HStack>\r\n      <Button\r\n        label=\"Set to red\"\r\n        onClick=\"colorPicker.setValue('#ff0000')\" />\r\n      <Button\r\n        label=\"Set to green\"\r\n        onClick=\"colorPicker.setValue('#00c000')\" />\r\n      <Button\r\n        label=\"Set to blue\"\r\n        onClick=\"colorPicker.setValue('#0000ff')\" />\r\n    </HStack>\r\n  </App>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: setValue()\"\r\n    app={`\r\n    <App>\r\n      <ColorPicker id=\"colorPicker\" label=\"Select your favorite color\" initialValue=\"#808080\" />\r\n      <HStack>\r\n        <Button\r\n          label=\"Set to red\"\r\n          onClick=\"colorPicker.setValue('#ff0000')\" />\r\n        <Button\r\n          label=\"Set to green\"\r\n          onClick=\"colorPicker.setValue('#00c000')\" />\r\n        <Button\r\n          label=\"Set to blue\"\r\n          onClick=\"colorPicker.setValue('#0000ff')\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `value`\r\n\r\nYou can query the component's value. If no value is set, it will retrieve `undefined`.\r\n\r\n## Styling\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-ColorPicker | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-ColorPicker-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-ColorPicker-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-ColorPicker-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-ColorPicker-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-ColorPicker-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-ColorPicker-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-ColorPicker-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-ColorPicker-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-ColorPicker-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-ColorPicker-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-ColorPicker-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-ColorPicker-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-ColorPicker-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-ColorPicker-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-ColorPicker-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-ColorPicker-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-ColorPicker-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-ColorPicker-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-ColorPicker-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-ColorPicker-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-ColorPicker-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-ColorPicker-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-ColorPicker-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-ColorPicker-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-ColorPicker-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-ColorPicker-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-ColorPicker-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-ColorPicker-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-ColorPicker-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-ColorPicker-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-ColorPicker-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-ColorPicker-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-ColorPicker-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-ColorPicker-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-ColorPicker-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-ColorPicker-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n",
  "components/Column":"import { Callout } from \"nextra/components\";\r\n\r\nimport data from  \"../../component-samples/Column/list-component-data.js\";\r\n\r\n# Column [#component-column]\r\n\r\nThe `Column` component can be used within a `Table` to define a particular table column's visual properties and data bindings.\r\n\r\nThe component provides context values with which you can access some internal properties:\r\n\r\n- `$cell`: The value of the cell being rendered.\r\n- `$colIndex`: The index of the column being rendered.\r\n- `$item`: The data item being rendered.\r\n- `$itemIndex`: The index of the data item being rendered.\r\n- `$row`: The data item being rendered (the same as `$item`).\r\n- `$rowIndex`: The index of the data item being rendered (the same as `$itemIndex`).\r\n\r\nThrought this documentation page the data used is the same that is found in the [`Table` component documentation](./Table.mdx#properties).\r\n\r\n## Properties\r\n\r\n### `bindTo`\r\n\r\nIndicates what part of the data to lay out in the column.\r\n\r\n```xmlui copy {3}\r\n<App>\r\n  <Table data='{[...]}'>\r\n    <Column bindTo=\"name\" />\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: bindTo\"\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}'>\r\n        <Column bindTo=\"name\" />\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `canResize`\r\n\r\nThis property indicates whether the user can resize the column. If set to `true`, the column can be resized by dragging the column border. If set to `false`, the column cannot be resized. Double-clicking the column border resets to the original size.\r\n\r\n### `canSort`\r\n\r\nThis property sets whether the user can sort by a column by clicking on its header (`true`) or not (`false`).\r\n\r\nClick on either the `Name` or the `Quantity` column headers to order the data by that attribute.\r\n\r\n```xmlui copy /canSort/\r\n<App>\r\n  <Table data='{[...]}'>\r\n    <Column canSort=\"true\" bindTo=\"name\" />\r\n    <Column canSort=\"true\" bindTo=\"quantity\" />\r\n    <Column canSort=\"false\" bindTo=\"unit\" />\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: canSort\"\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}'>\r\n        <Column canSort=\"true\" bindTo=\"name\" />\r\n        <Column canSort=\"true\" bindTo=\"quantity\" />\r\n        <Column canSort=\"false\" bindTo=\"unit\" />\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `header`\r\n\r\nAdds a label for a particular column.\r\n\r\n```xmlui copy {3-4}\r\n<App>\r\n  <Table data='{[...]}'>\r\n    <Column header=\"Food Name\" bindTo=\"name\" />\r\n    <Column header=\"Food Quantity\" bindTo=\"quantity\" />\r\n    <Column bindTo=\"unit\" />\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: header\"\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}'>\r\n        <Column header=\"Food Name\" bindTo=\"name\" />\r\n        <Column header=\"Food Quantity\" bindTo=\"quantity\" />\r\n        <Column bindTo=\"unit\" />\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `maxWidth`\r\n\r\nIndicates the maximum width a particular column can have. Same rules apply as with [width](#width).\r\n\r\n### `minWidth`\r\n\r\nIndicates the minimum width a particular column can have. Same rules apply as with [width](#width).\r\n\r\n### `pinTo`\r\n\r\nThis property allows the column to be pinned to the `left` (left-to-right writing style) or `right` (left-to-right writing style) edge of the table. If the writing style is right-to-left, the locations are switched.\r\n\r\nAvailable values: `left`, `right`\r\n\r\n```xmlui copy /pinTo=\"left\"/ /pinTo=\"right\"/\r\n<App>\r\n  <Table data='{[...]}' height=\"100%\">\r\n    <Column bindTo=\"id\" width=\"50px\" pinTo=\"left\" />\r\n    <Column bindTo=\"name\" width=\"500px\" />\r\n    <Column bindTo=\"quantity\" width=\"300px\" />\r\n    <Column bindTo=\"unit\" width=\"300px\"/>\r\n    <Column bindTo=\"category\" width=\"100px\" pinTo=\"right\"/>\r\n  </Table>\r\n</App>\r\n```\r\nScroll the table contents horizontally to see how the pinned columns are displayed.\r\n\r\n<Playground\r\n  name=\"Example: pinTo\"\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}' height=\"100%\">\r\n        <Column bindTo=\"id\" width=\"50px\" pinTo=\"start\" />\r\n        <Column bindTo=\"name\" width=\"500px\" />\r\n        <Column bindTo=\"quantity\" width=\"300px\" />\r\n        <Column bindTo=\"unit\" width=\"300px\"/>\r\n        <Column bindTo=\"category\" width=\"100px\" pinTo=\"end\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `width`\r\n\r\nThis property defines the width of the column. You can use a numeric value, a pixel value (such as `100px`), or a star size value (such as `*`, `2*`, etc.). You will get an error if you use any other unit (or value).\r\n\r\nThe following example sets the second column to an absolute size (size pixels), while the first and third columns have star sizes:\r\n\r\n```xmlui copy {4}\r\n<App>\r\n  <Table data='{[...]}'>\r\n    <Column bindTo=\"name\" canResize=\"true\" width=\"3*\" />\r\n    <Column bindTo=\"quantity\" width=\"100px\" minWidth=\"50px\" maxWidth=\"500px\" />\r\n    <Column bindTo=\"unit\" width=\"*\" />\r\n  </Table>\r\n</App>\r\n```\r\n\r\nCheck what happens when you resize table columns:\r\n\r\n<Playground\r\n  name=\"Example: width\"\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}'>\r\n        <Column bindTo=\"name\" canResize=\"true\" width=\"3*\" />\r\n        <Column bindTo=\"quantity\" width=\"100px\" minWidth=\"50px\" maxWidth=\"500px\" />\r\n        <Column bindTo=\"unit\" width=\"*\" />\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nStyling is done via the [`Table` component](./Table.mdx).\r\n",
  "components/ContentSeparator":"import { Callout } from \"nextra/components\";\r\n\r\n# ContentSeparator [#component-contentseparator]\r\n\r\nA `ContentSeparator` is a component that divides or separates content visually within a layout. It serves as a visual cue to distinguish between different sections or groups of content, helping to improve readability and organization.\r\n\r\n## Properties\r\n\r\n### `orientation (default: \"horizontal\")`\r\n\r\nSets the main axis of the component\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `horizontal` | The component will fill the available space horizontally **(default)** |\r\n| `vertical` | The component will fill the available space vertically |\r\n\r\nSee the demo for an example under [`size`](#size).\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nThe component will not be displayed if the orientation is set to `vertical` but the height of the parent container is not explicitly set to a value other than 0 or percentage is used as the size unit (e.g. 20%).\r\nThis is true even if the `ContentSeparator` has siblings in the container.\r\nThe demo below illustrates this.\r\nNotice how the first `ContentSeparator` does not show up while the second does:\r\n</Callout>\r\n\r\n```xmlui copy /height=\"48px\"/\r\n<App>\r\n  <HStack horizontalAlignment=\"center\">\r\n    <ContentSeparator orientation=\"vertical\" size=\"8px\" backgroundColor=\"blue\" />\r\n  </HStack>\r\n  <HStack horizontalAlignment=\"center\" height=\"48px\">\r\n    <ContentSeparator orientation=\"vertical\" size=\"8px\" backgroundColor=\"red\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: no vertical space\"\r\n  app={`\r\n  <App>\r\n    <HStack horizontalAlignment=\"center\">\r\n      <ContentSeparator orientation=\"vertical\" size=\"8px\" backgroundColor=\"blue\" />\r\n    </HStack>\r\n    <HStack horizontalAlignment=\"center\" height=\"48px\">\r\n      <ContentSeparator orientation=\"vertical\" size=\"8px\" backgroundColor=\"red\" />\r\n    </HStack>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `size`\r\n\r\nThis property defines the component's height (if the `orientation` is horizontal) or the width (if the `orientation` is vertical).\r\n\r\n```xmlui copy\r\n<App>\r\n  <Heading level=\"h2\">\r\n    Lorem Ipsum\r\n  </Heading>\r\n  <ContentSeparator />\r\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit,\r\n  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi\r\n  ut aliquip ex ea commodo consequat.\r\n  <ContentSeparator size=\"4px\" />\r\n  <HStack height=\"120px\">\r\n    Duis aute irure dolor in reprehenderit in voluptate velit esse cillum\r\n    dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\r\n    non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n    <ContentSeparator orientation=\"vertical\" size=\"10px\" />\r\n    Sed ut perspiciatis unde omnis iste natus error sit voluptatem\r\n    accusantium doloremque laudantium, totam rem aperiam,\r\n    eaque ipsa quae ab illo inventore veritatis et quasi architecto\r\n    beatae vitae dicta sunt explicabo.\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: size & orientation\"\r\n  app={`\r\n    <App>\r\n      <Heading level=\"h2\">\r\n        Lorem Ipsum\r\n      </Heading>\r\n      <ContentSeparator />\r\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit,\r\n      sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi\r\n      ut aliquip ex ea commodo consequat.\r\n      <ContentSeparator size=\"4px\" />\r\n      <HStack height=\"120px\">\r\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum\r\n        dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\r\n        non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n        <ContentSeparator orientation=\"vertical\" size=\"10px\" />\r\n        Sed ut perspiciatis unde omnis iste natus error sit voluptatem\r\n        accusantium doloremque laudantium, totam rem aperiam,\r\n        eaque ipsa quae ab illo inventore veritatis et quasi architecto\r\n        beatae vitae dicta sunt explicabo.\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou can use the `width` and `height` layout properties to set the `ContentSeparator` dimensions.\r\nFor the horizontal separator, you can set the `height` property; the vertical separator offers the `width` property instead of `size`.\r\nNonetheless, we suggest you use the `size` property.\r\n</Callout>\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `ContentSeparator` component uses these theme variables to customize its appearance:\r\n\r\n- `backgroundColor-ContentSeparator`\r\n- `size-ContentSeparator`\r\n\r\n```json\r\n\"backgroundColor-ContentSeparator\": \"$color-primary-200\",\r\n\"size-ContentSeparator\": \"6px\"\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling\"\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"backgroundColor-ContentSeparator\": \"$color-primary-200\",\r\n        \"size-ContentSeparator\": \"6px\",\r\n      },\r\n    },\r\n  ]}\r\n  app={`\r\n  <App>\r\n    <HStack>\r\n      <ContentSeparator size=\"8px\" borderRadius=\"5px\"/>\r\n    </HStack>\r\n    <HStack height=\"48px\" horizontalAlignment=\"center\">\r\n      <ContentSeparator orientation=\"vertical\" size=\"8px\"/>\r\n    </HStack>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-ContentSeparator | $borderColor | $borderColor |\r\n| [size](../styles-and-themes/common-units/#size)-ContentSeparator | 1px | 1px |\r\n",
  "components/DataSource":"import { Callout } from \"nextra/components\";\r\n\r\n# DataSource [#component-datasource]\r\n\r\nThe `DataSource` component manages fetching data from an API endpoint. This component automatically manages the complexity of the fetch operation and caching. To manipulate data on the backend, use the [`APICall`](./APICall.mdx) component.\r\n\r\n## Properties\r\n\r\n### `body`\r\n\r\nSet the request body. The object you pass is serialized as a JSON string.\r\n\r\n### `completedNotificationMessage`\r\n\r\nSet the message to display when the data fetch completes.\r\n\r\nThis property customizes the success message displayed in a toast after the finished API invocation. The `$result` context variable can refer to the response body. For example, you can use the following code snippet to display the first 100 characters in the completed operation's response body:\r\n\r\n```xmlui copy\r\n <DataSource\r\n  id=\"ds\"\r\n  url=\"/api/shopping-list\"\r\n  completedNotificationMessage=\"Result: {JSON.stringify($result).substring(0, 100)}\" />\r\n```\r\n\r\n### `errorNotificationMessage`\r\n\r\nSet the message to display when the there is an error.\r\n\r\nThis property customizes the message displayed in a toast when the API invocation results in an error. The `$error.statusCode` context variable can refer to the response's status code, while `$error. details` to the response body. For example, you can use the following code snippet to display the status code and the details:\r\n\r\n```xmlui copy\r\n <DataSource\r\n  id=\"ds\"\r\n  method=\"post\"\r\n  url=\"/api/shopping-list\"\r\n  errorNotificationMessage=\"${error.statusCode}, {JSON.stringify($error.details)}\" />\r\n```\r\n\r\n### `headers`\r\n\r\nSet request headers. Pass an object whose keys are header names and values are header values.\r\n\r\n### `id (required)`\r\n\r\nSet the ID used by other components to access the retrieved data in the `value`property of a `DataSource`, or status info in the `loaded` and `error` properties.\r\n\r\n### `inProgressNotificationMessage`\r\n\r\nSet the message to display when the data fetch is in progress.\r\n\r\n### `method (default: \"get\")`\r\n\r\nSet the HTTP method.\r\n\r\nAvailable values: `get` **(default)**, `post`, `put`, `delete`, `patch`, `head`, `options`, `trace`, `connect`\r\n\r\n### `nextPageSelector`\r\n\r\nWhen using `DataSource` with paging, the response may contain information about the previous and next page. This property defines the selector that extracts the next page information from the response deserialized to an object.\r\n\r\n### `pollIntervalInSeconds`\r\n\r\nSet the interval for periodic data fetching. If the data changes on refresh, XMLUI will re-render components that refer directly or indirectly to the `DataSource`. \r\n\r\n### `prevPageSelector`\r\n\r\nWhen using `DataSource` with paging, the response may contain information about the previous and next page. This property defines the selector that extracts the previous page information from the response deserialized to an object.\r\n\r\n### `queryParams`\r\n\r\nAppend key/value pairs to the URL.\r\n\r\n### `rawBody`\r\n\r\nSet the request body with no serialization. Use it to send a payload  that has already been serialized to a JSON string.\r\n\r\n### `resultSelector`\r\n\r\nSet an object key to extract a subset of the response data.\r\n\r\nThe selector can be a simple dot notation path (e.g., `value.results`) or a JavaScript expression that processes the data (e.g., `results.filter(item => item.type === 'active')`). The selector has access to standard JavaScript functions like `map` and `filter`, and operates on the full response body.\r\n\r\nHere is a sample response from the HubSpot API.\r\n\r\n```json\r\n{\r\n    \"results\": [\r\n        {\r\n            \"id\": \"88903258744\",\r\n            \"properties\": {\r\n                \"company\": \"HubSpot\",\r\n                \"createdate\": \"2025-01-03T23:38:47.449Z\",\r\n                \"custom_notes\": \"Nice guy!\",\r\n                \"email\": \"bh@hubspot.com\",\r\n                \"firstname\": \"Brian\",\r\n                \"hs_object_id\": \"88903258744\",\r\n                \"lastmodifieddate\": \"2025-02-18T23:13:34.759Z\",\r\n                \"lastname\": \"Halligan (Sample Contact)\"\r\n            },\r\n            \"createdAt\": \"2025-01-03T23:38:47.449Z\",\r\n            \"updatedAt\": \"2025-02-18T23:13:34.759Z\",\r\n            \"archived\": false\r\n        },\r\n        {\r\n            \"id\": \"88918034480\",\r\n            \"properties\": {\r\n                \"company\": \"HubSpot\",\r\n                \"createdate\": \"2025-01-03T23:38:47.008Z\",\r\n                \"custom_notes\": null,\r\n                \"email\": \"emailmaria@hubspot.com\",\r\n                \"firstname\": \"Maria\",\r\n                \"hs_object_id\": \"88918034480\",\r\n                \"lastmodifieddate\": \"2025-01-03T23:38:59.001Z\",\r\n                \"lastname\": \"Johnson (Sample Contact)\"\r\n            },\r\n            \"createdAt\": \"2025-01-03T23:38:47.008Z\",\r\n            \"updatedAt\": \"2025-01-03T23:38:59.001Z\",\r\n            \"archived\": false\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nThis `resultSelector` builds an array of the `properties` objects.\r\n\r\n```xmlui copy\r\n<DataSource\r\n  id=\"contacts\"\r\n  url=\"http:///{DOMAIN}/{CORS_PROXY}/api.hubapi.com/crm/v3/objects/contacts?properties=firstname,lastname,email,company,custom_notes\"\r\n  resultSelector=\"results.map(item => item.properties )\"\r\n  headers='{{\"Authorization\":\"Bearer not-a-real-token\"}}'\r\n```\r\n\r\nThis `List` uses the array.\r\n\r\n```xmlui copy\r\n<List data=\"{contacts}\" title=\"Hubspot Contacts\">\r\n  <Card gap=\"0\" width=\"20em\">\r\n    <Text fontWeight=\"bold\">\r\n      {$item.firstname} {$item.lastname}\r\n    </Text>\r\n    <Text>\r\n      {$item.company}\r\n    </Text>\r\n    <Text>\r\n      {$item.email}\r\n    </Text>\r\n    <Text>\r\n      {$item.custom_notes}\r\n    </Text>\r\n  </Card>\r\n</List>\r\n```\r\n\r\nThis `resultSelector` filters the array of the `properties` objects to include only contacts with non-null `custom_notes`.\r\n\r\n```xmlui copy\r\n<DataSource\r\n  id=\"contacts\"\r\n  resultSelector=\"results.filter(contact => contact.properties.custom_notes !== null).map(contact => contact.properties)\"\r\n  url=\"http:///{DOMAIN}/{CORS_PROXY}/api.hubapi.com/crm/v3/objects/contacts?properties=firstname,lastname,email,company,custom_notes\"\r\n  headers='{{\"Authorization\":\"Bearer not-a-real-token\"}}'\r\n  />\r\n````\r\n\r\nThis `Table` uses the filtered array.\r\n\r\n```xmlui copy\r\n<Table title=\"HubSpot contacts\" data=\"{contacts}\">\r\n  <Column bindTo=\"firstname\" />\r\n  <Column bindTo=\"lastname\" />\r\n  <Column bindTo=\"company\" />\r\n  <Column bindTo=\"email\" />\r\n  <Column bindTo=\"custom_notes\" />\r\n</Table>\r\n```\r\n\r\n### `transformResult`\r\n\r\nSet a function to perform a final transformation of the response data.\r\n\r\n### `url (required)`\r\n\r\nSet the URL.\r\n\r\n## Events\r\n\r\n### `error`\r\n\r\nThis event fires when a request results in an error.\r\n\r\n### `loaded`\r\n\r\nThe component triggers this event when the fetch operation has been completed and the data is loaded. The event has two arguments. The first is the data loaded; the second indicates if the event is a result of a refetch.\r\n\r\n## Exposed Methods\r\n\r\n### `inProgress`\r\n\r\nThis property indicates if the data is being fetched.\r\n\r\n### `isRefetching`\r\n\r\nThis property indicates if the data is being re-fetched.\r\n\r\n### `loaded`\r\n\r\nThis property indicates if the data has been loaded.\r\n\r\n### `refetch`\r\n\r\nThis method requests the re-fetch of the data.\r\n\r\n### `value`\r\n\r\nThis property retrieves the data queried from the source after optional transformations.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/DatePicker":"import { Callout } from \"nextra/components\";\r\n\r\n# DatePicker [#component-datepicker]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nA datepicker component enables the selection of a date or a range of dates in a specified format from an interactive display.\r\n\r\n## Properties\r\n\r\n### `autoFocus (default: false)`\r\n\r\nIf this property is set to `true`, the component gets the focus automatically when displayed.\r\n\r\n### `dateFormat (default: \"MM/dd/yyyy\")`\r\n\r\nThe format of the date displayed in the input field\r\n\r\nAvailable values: `MM/dd/yyyy` **(default)**, `MM-dd-yyyy`, `yyyy/MM/dd`, `yyyy-MM-dd`, `dd/MM/yyyy`, `dd-MM-yyyy`, `yyyyMMdd`, `MMddyyyy`\r\n\r\nFormats handle years (`y`), months (`m` or `M`), days of the month (`d`).\r\nProviding multiple placeholder letters changes the display of the date.\r\n\r\nThe table below shows the available date formats:\r\n\r\n| Format     | Example    |\r\n| :--------- | :--------- |\r\n| MM/dd/yyyy | 05/25/2024 |\r\n| MM-dd-yyyy | 05-25-2024 |\r\n| yyyy/MM/dd | 2024/05/25 |\r\n| yyyy-MM-dd | 2024-05-25 |\r\n| dd/MM/yyyy | 25/05/2024 |\r\n| dd-MM-yyyy | 25-05-2024 |\r\n| yyyyMMdd   | 20240525   |\r\n| MMddyyyy   | 05252024   |\r\n\r\n```xmlui copy /dateFormat=\"dd-MM-yyyy\"/\r\n<App>\r\n  <DatePicker dateFormat=\"dd-MM-yyyy\" initialValue=\"05/25/2024\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  height={120}\r\n  name=\"Example: dateFormat\"\r\n  app={`\r\n    <App>\r\n      <DatePicker dateFormat=\"dd-MM-yyyy\" initialValue=\"05/25/2024\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `disabledDates`\r\n\r\nAn array of dates that are disabled\r\n\r\n```xmlui copy\r\n<App>\r\n  <DatePicker disabledDates=\"{['05/26/2024', '05/27/2024']}\" initialValue=\"05/25/2024\" />\r\n</App>  \r\n```\r\n\r\n<Playground\r\n  height={120}\r\n  name=\"Example: disabledDates\"\r\n  app={`\r\n    <App>\r\n      <DatePicker disabledDates=\"{['05/26/2024', '05/27/2024']}\" initialValue=\"05/25/2024\" />\r\n    </App>  \r\n  `}\r\n/>\r\n\r\n### `enabled (default: true)`\r\n\r\nThis boolean property value indicates whether the component responds to user events (`true`) or not (`false`).\r\n\r\n```xmlui copy\r\n<App>\r\n  <DatePicker enabled=\"false\" />\r\n</App>  \r\n```\r\n\r\n<Playground\r\n  height={120}\r\n  name=\"Example: enabled\"\r\n  app={`\r\n    <App>\r\n      <DatePicker enabled=\"false\" />\r\n    </App>  \r\n  `}\r\n/>\r\n\r\n### `endIcon`\r\n\r\nThis property sets an icon to appear on the end (right side when the left-to-right direction is set) of the input.\r\n\r\n### `endText`\r\n\r\nThis property sets a text to appear on the end (right side when the left-to-right direction is set) of the input.\r\n\r\n### `fromDate`\r\n\r\nThe start date of the range of selectable dates\r\n\r\n```xmlui copy\r\n<App>\r\n  <DatePicker fromDate=\"05/24/2024\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  height={120}\r\n  name=\"Example: fromDate\"\r\n  app={`\r\n    <App>\r\n      <DatePicker fromDate=\"05/24/2024\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `initialValue`\r\n\r\nThis property sets the component's initial value.\r\n\r\n```xmlui copy\r\n<App>\r\n  <DatePicker initialValue=\"05/25/2024\" />\r\n</App>  \r\n```\r\n\r\n<Playground\r\n  height={120}\r\n  name=\"Example: initialValue\"\r\n  app={`\r\n    <App>\r\n      <DatePicker initialValue=\"05/25/2024\" />\r\n    </App>  \r\n  `}\r\n/>\r\n\r\n### `inline (default: false)`\r\n\r\nWhether to display the datepicker inline\r\n\r\n### `mode (default: \"single\")`\r\n\r\nThe mode of the datepicker (single or range)\r\n\r\nAvailable values: `single` **(default)**, `range`\r\n\r\n```xmlui copy {2-3}\r\n<App>\r\n  <DatePicker mode=\"single\" />\r\n  <DatePicker mode=\"range\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  height={240}\r\n  name=\"Example: mode\"\r\n  app={`\r\n  <App>\r\n    <DatePicker mode=\"single\" />\r\n    <DatePicker mode=\"range\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `placeholder`\r\n\r\nA placeholder text that is visible in the input field when its empty.\r\n\r\n```xmlui copy\r\n<App>\r\n  <DatePicker placeholder=\"This is a placeholder\" />\r\n</App>  \r\n```\r\n\r\n<Playground\r\n  height={120}\r\n  name=\"Example: placeholder\"\r\n  app={`\r\n    <App>\r\n      <DatePicker placeholder=\"This is a placeholder\" />\r\n    </App>  \r\n  `}\r\n/>\r\n\r\n### `readOnly (default: false)`\r\n\r\nSet this property to `true` to disallow changing the component value.\r\n\r\n### `showWeekNumber (default: false)`\r\n\r\nWhether to show the week number in the calendar\r\n\r\n```xmlui copy\r\n<App>\r\n  <DatePicker showWeekNumber=\"true\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  height={120}\r\n  name=\"Example: showWeekNumber\"\r\n  app={`\r\n    <App>\r\n      <DatePicker showWeekNumber=\"true\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `startIcon`\r\n\r\nThis property sets an icon to appear at the start (left side when the left-to-right direction is set) of the input.\r\n\r\n### `startText`\r\n\r\nThis property sets a text to appear at the start (left side when the left-to-right direction is set) of the input.\r\n\r\n### `toDate`\r\n\r\nThe end date of the range of selectable dates\r\n\r\n```xmlui copy\r\n<App>\r\n  <DatePicker toDate=\"05/26/2024\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  height={120}\r\n  name=\"Example: toDate\"\r\n  app={`\r\n    <App>\r\n      <DatePicker toDate=\"05/26/2024\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `validationStatus (default: \"none\")`\r\n\r\nThis property allows you to set the validation status of the input component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `valid` | Visual indicator for an input that is accepted |\r\n| `warning` | Visual indicator for an input that produced a warning |\r\n| `error` | Visual indicator for an input that produced an error |\r\n\r\n| Value     | Description                                           |\r\n| :-------- | :---------------------------------------------------- |\r\n| `valid`   | Visual indicator for an input that is accepted        |\r\n| `warning` | Visual indicator for an input that produced a warning |\r\n| `error`   | Visual indicator for an input that produced an error  |\r\n\r\n```xmlui copy\r\n<App>\r\n  <DatePicker />\r\n  <DatePicker validationStatus=\"valid\" />\r\n  <DatePicker validationStatus=\"warning\" />\r\n  <DatePicker validationStatus=\"error\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: validationStatus\"\r\n  height={300}\r\n  app={`\r\n    <App>\r\n      <DatePicker />\r\n      <DatePicker validationStatus=\"valid\" />\r\n      <DatePicker validationStatus=\"warning\" />\r\n      <DatePicker validationStatus=\"error\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `weekStartsOn (default: 0)`\r\n\r\nThe first day of the week. 0 is Sunday, 1 is Monday, etc.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `0` | Sunday **(default)** |\r\n| `1` | Monday |\r\n| `2` | Tuesday |\r\n| `3` | Wednesday |\r\n| `4` | Thursday |\r\n| `5` | Friday |\r\n| `6` | Saturday |\r\n\r\n| Day       | Number |\r\n| :-------- | :----- |\r\n| Sunday    | 0      |\r\n| Monday    | 1      |\r\n| Tuesday   | 2      |\r\n| Wednesday | 3      |\r\n| Thursday  | 4      |\r\n| Friday    | 5      |\r\n| Saturday  | 6      |\r\n\r\n```xmlui copy\r\n<App>\r\n  <DatePicker weekStartsOn=\"1\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: weekStartsOn\"\r\n  height={120}\r\n  app={`\r\n    <App>\r\n      <DatePicker weekStartsOn=\"1\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `didChange`\r\n\r\nThis event is triggered when value of DatePicker has changed.\r\n\r\nWrite in the input field and see how the `Text` underneath it is updated in parallel.\r\n\r\n```xmlui copy {2}\r\n<App var.field=\"\">\r\n  <DatePicker initialValue=\"{field}\" onDidChange=\"(val) => field = val\" />\r\n  <Text value=\"{field}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  height={120}\r\n  name=\"Example: didChange\"\r\n  app={`\r\n    <App var.field=\"\">\r\n      <DatePicker initialValue=\"{field}\" onDidChange=\"(val) => field = val\" />\r\n      <Text value=\"{field}\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `gotFocus`\r\n\r\nThis event is triggered when the DatePicker has received the focus.\r\n\r\nClicking on the `DatePicker` in the example demo changes the label text.\r\nNote how clicking elsewhere resets the text to the original.\r\n\r\n```xmlui copy {4-5}\r\n<App var.isFocused=\"false\">\r\n  <Text value=\"{isFocused === true ? 'DatePicker focused' : 'DatePicker lost focus'}\" />\r\n  <DatePicker\r\n    onGotFocus=\"isFocused = true\"\r\n    onLostFocus=\"isFocused = false\"\r\n  />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  height={160}\r\n  name=\"Example: gotFocus/lostFocus\"\r\n  app={`\r\n    <App var.isFocused=\"false\">\r\n      <Text value=\"{isFocused === true ? 'DatePicker focused' : 'DatePicker lost focus'}\" />\r\n      <DatePicker\r\n        onGotFocus=\"isFocused = true\"\r\n        onLostFocus=\"isFocused = false\"\r\n      />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `lostFocus`\r\n\r\nThis event is triggered when the DatePicker has lost the focus.\r\n\r\n## Exposed Methods\r\n\r\n### `focus`\r\n\r\nThis method sets the focus on the DatePicker.\r\n\r\n### `setValue`\r\n\r\nYou can use this method to set the component's current value programmatically (`true`: checked, `false`: unchecked).\r\n\r\n```xmlui copy {3, 9, 12}\r\n<App>\r\n  <DatePicker\r\n    id=\"picker\"\r\n    readOnly=\"true\"\r\n  />\r\n  <HStack\">\r\n    <Button\r\n      label=\"Add Text\"\r\n      onClick=\"picker.setValue('05/25/2024')\" />\r\n    <Button\r\n      label=\"Remove Text\"\r\n      onClick=\"picker.setValue('')\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: value and setValue\"\r\n  app={`\r\n    <App>\r\n      <DatePicker\r\n        id=\"picker\"\r\n        readOnly=\"true\"\r\n      />\r\n      <HStack>\r\n        <Button\r\n          label=\"Add Text\"\r\n          onClick=\"picker.setValue('05/25/2024')\" />\r\n        <Button\r\n          label=\"Remove Text\"\r\n          onClick=\"picker.setValue('')\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `value`\r\n\r\nYou can query the component's value. If no value is set, it will retrieve `undefined`.\r\n\r\n## Styling\r\n\r\nThe `DatePicker` component provides these theme variables to customize its appearance:\r\n\r\n- `borderRadius-DatePicker`\r\n- `textColor-DatePicker`\r\n- `backgroundColor-DatePicker--disabled`\r\n- `borderWidth-DatePicker`\r\n- `borderStyle-DatePicker`\r\n- `borderColor-DatePicker--disabled`\r\n- `backgroundColor-DatePicker--disabled`\r\n- `textColor-DatePicker--disabled`\r\n- `textColor-value-DatePicker`\r\n- `borderColor-DatePicker-default`\r\n- `borderColor-DatePicker-error`\r\n- `borderColor-DatePicker-warning`\r\n- `borderColor-DatePicker-success`\r\n- `color-placeholder-DatePicker`\r\n- `backgroundColor-menu-DatePicker`\r\n- `boxShadow-menu-DatePicker`\r\n- `borderRadius-menu-DatePicker`\r\n- `backgroundColor-item-DatePicker--hover`\r\n- `backgroundColor-item-DatePicker--active`\r\n\r\n```json\r\n{\r\n  \"borderRadius-DatePicker\": \"30px\",\r\n  \"borderWidth-DatePicker\": \"4px\",\r\n  \"borderRadius-menu-DatePicker\": \"30px\",\r\n  \"textColor-DatePicker\": \"black\",\r\n  \"backgroundColor-menu-DatePicker\": \"#f5f5dc\"\r\n}\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling\"\r\n  height={120}\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"borderRadius-DatePicker\": \"30px\",\r\n        \"borderWidth-DatePicker\": \"4px\",\r\n        \"borderRadius-menu-DatePicker\": \"30px\",\r\n        \"textColor-DatePicker\": \"black\",\r\n        \"backgroundColor-menu-DatePicker\": \"#f5f5dc\"\r\n      },\r\n    },\r\n  ]}\r\n  app={`\r\n    <App>\r\n      <DatePicker />\r\n    </App>  \r\n  `}\r\n/>\r\n\r\nTo style all input controls not just this component, use `Input` instead of the `DatePicker` segment:\r\n\r\n```\r\ntextColor-Input: \"#0033FF\"\r\n```\r\n\r\n`Input` affects the following controls:\r\n\r\n- [`Checkbox`](./Checkbox.mdx)\r\n- [`NumberBox`](./NumberBox.mdx)\r\n- [`RadioGroupOption`](./RadioGroupOption.mdx)\r\n- [`Select`](./Select.mdx)\r\n- [`Switch`](./Switch.mdx)\r\n- [`TextArea`](./TextArea.mdx)\r\n\r\nSee [custom themes](../learning/themes/overview.mdx) for styling details.\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-DatePicker--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-DatePicker-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-DatePicker-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-DatePicker-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-DatePicker-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-DatePicker-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-DatePicker-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-DatePicker-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-DatePicker-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-item-DatePicker--active | $color-surface-200 | $color-surface-200 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-item-DatePicker--active | $color-surface-200 | $color-surface-200 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-item-DatePicker--hover | $color-surface-100 | $color-surface-100 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-item-DatePicker--hover | $color-surface-100 | $color-surface-100 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-menu-DatePicker | $color-surface-50 | $color-surface-50 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-menu-DatePicker | $color-surface-50 | $color-surface-50 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-DatePicker--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-DatePicker-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-DatePicker-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-DatePicker-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-DatePicker-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-DatePicker-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-DatePicker-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-DatePicker-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-DatePicker-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-DatePicker-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-DatePicker-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-DatePicker-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-DatePicker-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-menu-DatePicker | $borderRadius | $borderRadius |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-menu-DatePicker | $borderRadius | $borderRadius |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-DatePicker-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-DatePicker-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-DatePicker-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-DatePicker-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-DatePicker-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-DatePicker-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-DatePicker-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-DatePicker-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-DatePicker-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-DatePicker-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-DatePicker-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-DatePicker-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-DatePicker-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-DatePicker-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-DatePicker-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-DatePicker-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-menu-DatePicker | $boxShadow-md | $boxShadow-md |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-menu-DatePicker | $boxShadow-md | $boxShadow-md |\r\n| [fontSize](../styles-and-themes/common-units/#size)-DatePicker | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [minHeight](../styles-and-themes/common-units/#size)-DatePicker | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-DatePicker-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-DatePicker-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-DatePicker-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-DatePicker-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-DatePicker-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-DatePicker-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-DatePicker-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-DatePicker-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-DatePicker-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-DatePicker-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-DatePicker-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-DatePicker-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-DatePicker-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-DatePicker-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-DatePicker-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-DatePicker-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-DatePicker-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-DatePicker-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-DatePicker-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-DatePicker-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-adornment-DatePicker-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-adornment-DatePicker-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-adornment-DatePicker-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-adornment-DatePicker-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-DatePicker--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-DatePicker-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-DatePicker-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-DatePicker-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-DatePicker-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-DatePicker-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-DatePicker-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-DatePicker-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-DatePicker-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-placeholder-DatePicker-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-placeholder-DatePicker-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-placeholder-DatePicker-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-placeholder-DatePicker-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-value-DatePicker | $textColor-primary | $textColor-primary |\r\n| [textColor](../styles-and-themes/common-units/#color)-value-DatePicker | $textColor-primary | $textColor-primary |\r\n",
  "components/DropdownMenu":"import { Callout } from \"nextra/components\";\r\n\r\n# DropdownMenu [#component-dropdownmenu]\r\n\r\nThis component represents a dropdown menu with a trigger. When the user clicks the trigger, the dropdown menu displays its items.\r\n\r\nYou can nest `MenuItem`, `MenuSeparator`, and `SubMenuItem` components into `DropdownMenu` to define a menu hierarchy. The component provides a trigger to display the menu items:\r\n\r\n```xmlui copy\r\n<App>\r\n  <DropdownMenu label=\"DropdownMenu\">\r\n    <MenuItem>Item 1</MenuItem>\r\n    <MenuItem>Item 2</MenuItem>\r\n    <MenuSeparator />\r\n    <SubMenuItem label=\"Submenu\">\r\n      <MenuItem>Submenu Item 1</MenuItem>\r\n      <MenuItem>Submenu Item 2</MenuItem>\r\n    </SubMenuItem>\r\n  </DropdownMenu>\r\n</App>\r\n```\r\n\r\nTry this dropdown menu:\r\n\r\n<Playground\r\n  name=\"Example: Using DropdownMenu\"\r\n  height={240}\r\n  app={`\r\n    <App>\r\n      <DropdownMenu label=\"DropdownMenu\">\r\n        <MenuItem>Item 1</MenuItem>\r\n        <MenuItem>Item 2</MenuItem>\r\n        <MenuSeparator />\r\n        <SubMenuItem label=\"Submenu\">\r\n          <MenuItem>Submenu Item 1</MenuItem>\r\n          <MenuItem>Submenu Item 2</MenuItem>\r\n        </SubMenuItem>\r\n      </DropdownMenu>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\n### `alignment (default: \"start\")`\r\n\r\nThis property allows you to determine the alignment of the dropdown panel with the displayed menu items.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `center` | Place the content in the middle |\r\n| `start` | Justify the content to the left (to the right if in right-to-left) **(default)** |\r\n| `end` | Justify the content to the right (to the left if in right-to-left) |\r\n\r\nAvailable values are:\r\n- `start`: Menu items are aligned to the start of the trigger component (default).\r\n- `end`: Menu items are aligned to the end of the trigger component.\r\n\r\n```xmlui copy {8}\r\n<App>\r\n  <HStack>\r\n    <DropdownMenu label=\"Start-aligned menu (open it!)\">\r\n      <MenuItem>Item 1</MenuItem>\r\n      <MenuItem>Item 2</MenuItem>\r\n      <MenuItem>Item 3</MenuItem>\r\n    </DropdownMenu>\r\n    <DropdownMenu label=\"End-aligned menu (open it!)\" alignment=\"end\">\r\n      <MenuItem>Item 1</MenuItem>\r\n      <MenuItem>Item 2</MenuItem>\r\n      <MenuItem>Item 3</MenuItem>\r\n    </DropdownMenu>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: alignment\"\r\n  height={240}\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <DropdownMenu label=\"Start-aligned menu (open it!)\">\r\n          <MenuItem>Item 1</MenuItem>\r\n          <MenuItem>Item 2</MenuItem>\r\n          <MenuItem>Item 3</MenuItem>\r\n        </DropdownMenu>\r\n        <DropdownMenu label=\"End-aligned menu (open it!)\" alignment=\"end\">\r\n          <MenuItem>Item 1</MenuItem>\r\n          <MenuItem>Item 2</MenuItem>\r\n          <MenuItem>Item 3</MenuItem>\r\n        </DropdownMenu>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `enabled (default: true)`\r\n\r\nThis boolean property value indicates whether the component responds to user events (`true`) or not (`false`).\r\n\r\n```xmlui copy {4, 11}\r\n<App>\r\n  <HStack>\r\n    <DropdownMenu\r\n      enabled=\"true\"\r\n      label=\"Enabled Dropdown\">\r\n      <MenuItem>Item 1</MenuItem>\r\n      <MenuItem>Item 2</MenuItem>\r\n      <MenuItem>Item 3</MenuItem>\r\n    </DropdownMenu>\r\n    <DropdownMenu\r\n      enabled=\"false\"\r\n      label=\"Disabled Dropdown\">\r\n      <MenuItem>Item 1</MenuItem>\r\n      <MenuItem>Item 2</MenuItem>\r\n      <MenuItem>Item 3</MenuItem>\r\n    </DropdownMenu>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: enabled\"\r\n  height={240}\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <DropdownMenu\r\n          enabled=\"true\"\r\n          label=\"Enabled Dropdown\">\r\n          <MenuItem>Item 1</MenuItem>\r\n          <MenuItem>Item 2</MenuItem>\r\n          <MenuItem>Item 3</MenuItem>\r\n        </DropdownMenu>\r\n        <DropdownMenu\r\n          enabled=\"false\"\r\n          label=\"Disabled Dropdown\">\r\n          <MenuItem>Item 1</MenuItem>\r\n          <MenuItem>Item 2</MenuItem>\r\n          <MenuItem>Item 3</MenuItem>\r\n        </DropdownMenu>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\n### `triggerButtonIcon (default: \"chevrondown\")`\r\n\r\nThis property defines the icon to display on the trigger button.\r\n\r\n### `triggerButtonIconPosition (default: \"end\")`\r\n\r\nThis property defines the position of the icon on the trigger button.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `start` | The icon will appear at the start (left side when the left-to-right direction is set) |\r\n| `end` | The icon will appear at the end (right side when the left-to-right direction is set) **(default)** |\r\n\r\n### `triggerButtonThemeColor (default: \"primary\")`\r\n\r\nThis property defines the theme color of the `Button` as the dropdown menu's trigger. It has no effect when a custom trigger is defined with `triggerTemplate`.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `attention` | Attention state theme color |\r\n| `primary` | Primary theme color **(default)** |\r\n| `secondary` | Secondary theme color |\r\n\r\n### `triggerButtonVariant (default: \"ghost\")`\r\n\r\nThis property defines the theme variant of the `Button` as the dropdown menu's trigger. It has no effect when a custom trigger is defined with `triggerTemplate`.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `solid` | A button with a border and a filled background. |\r\n| `outlined` | The button is displayed with a border and a transparent background. |\r\n| `ghost` | A button with no border and fill. Only the label is visible; the background is colored when hovered or clicked. **(default)** |\r\n\r\n### `triggerTemplate`\r\n\r\nThis property allows you to define a custom trigger instead of the default one provided by `DropdownMenu`.\r\n\r\n```xmlui copy {3-5}\r\n<App>\r\n  <DropdownMenu label=\"(ignored)\">\r\n    <property name=\"triggerTemplate\">\r\n      <Button label=\"Custom trigger\" icon=\"chevrondown\" iconPosition=\"end\"/>\r\n    </property>\r\n    <MenuItem>Item 1</MenuItem>\r\n    <MenuItem>Item 2</MenuItem>\r\n    <MenuItem>Item 3</MenuItem>\r\n  </DropdownMenu>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: triggerTemplate\"\r\n  height={240}\r\n  app={`\r\n    <App>\r\n      <DropdownMenu label=\"(ignored)\">\r\n        <property name=\"triggerTemplate\">\r\n          <Button label=\"Custom trigger\" icon=\"chevrondown\" iconPosition=\"end\"/>\r\n        </property>\r\n        <MenuItem>Item 1</MenuItem>\r\n        <MenuItem>Item 2</MenuItem>\r\n        <MenuItem>Item 3</MenuItem>\r\n      </DropdownMenu>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `willOpen`\r\n\r\nThis event fires when the `DropdownMenu` component is opened.\r\n\r\n```xmlui copy {6}\r\n<App>\r\n  <variable name=\"counter\" value=\"{0}\" />\r\n  <Text value=\"Number of times the dropdown was opened: {counter}\" />\r\n  <DropdownMenu\r\n    label=\"Dropdown\"\r\n    onWillOpen=\"counter += 1\">\r\n    <MenuItem>Item 1</MenuItem>\r\n    <MenuItem>Item 2</MenuItem>\r\n    <MenuItem>Item 3</MenuItem>\r\n  </DropdownMenu>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: willOpen\"\r\n  height={240}\r\n  app={`\r\n    <App>\r\n      <variable name=\"counter\" value=\"{0}\" />\r\n      <Text value=\"Number of times the dropdown was opened: {counter}\" />\r\n      <DropdownMenu\r\n        label=\"Dropdown\"\r\n        onWillOpen=\"counter += 1\">\r\n        <MenuItem>Item 1</MenuItem>\r\n        <MenuItem>Item 2</MenuItem>\r\n        <MenuItem>Item 3</MenuItem>\r\n      </DropdownMenu>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Exposed Methods\r\n\r\n### `close`\r\n\r\nThis method command closes the dropdown.\r\n\r\n```xmlui copy {4}\r\n<App>\r\n  <DropdownMenu id=\"emojiDropDown\" label=\"Emoji Dropdown\">\r\n    <EmojiSelector\r\n      onSelect=\"(reaction) => { emojiDropDown.close(); }\"\r\n      autoFocus=\"true\"\r\n    />\r\n  </DropdownMenu>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: close\"\r\n  height={240}\r\n  app={`\r\n    <App>\r\n      <DropdownMenu id=\"emojiDropDown\" label=\"Emoji Dropdown\">\r\n        <EmojiSelector\r\n          onSelect=\"(reaction) => { emojiDropDown.close(); }\"\r\n          autoFocus=\"true\"\r\n        />\r\n      </DropdownMenu>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Styling\r\n\r\nThe `DropdownMenu` component uses these theme variables to customize its appearance:\r\n\r\n- `backgroundColor-DropdownMenu`\r\n- `borderColor-DropdownMenu-content`\r\n- `minWidth-DropdownMenu`\r\n- `borderRadius-DropdownMenu`\r\n- `boxShadow-DropdownMenu`\r\n- `borderStyle-DropdownMenu-content`\r\n- `borderWidth-DropdownMenu-content`\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-DropdownMenu | $color-surface-raised | $color-surface-raised |\r\n| [borderColor](../styles-and-themes/common-units/#color)-DropdownMenu-content | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-DropdownMenu | $borderRadius | $borderRadius |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-DropdownMenu-content | solid | solid |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-DropdownMenu-content | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-DropdownMenu | $boxShadow-xl | $boxShadow-xl |\r\n| [minWidth](../styles-and-themes/common-units/#size)-DropdownMenu | 160px | 160px |\r\n",
  "components/EmojiSelector":"import { Callout } from \"nextra/components\";\r\n\r\n# EmojiSelector [#component-emojiselector]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `EmojiSelector` component provides users with a graphical interface to browse, search and select emojis to insert into text fields, messages, or other forms of communication.\r\n\r\n## Properties\r\n\r\n### `autoFocus (default: false)`\r\n\r\nIf this property is set to `true`, the component gets the focus automatically when displayed.\r\n\r\n```xmlui copy\r\n<App>\r\n  <EmojiSelector autoFocus=\"true\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: autoFocus\"\r\n  height={420}\r\n  app={`\r\n  <App>\r\n    <EmojiSelector autoFocus=\"true\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `select`\r\n\r\nThis event is fired when the user selects an emoticon from this component.\r\n\r\n```xmlui copy /onSelect=\"(emoji) => { selected = emoji }\"/\r\n<App>\r\n  <HStack var.selected=\"\">\r\n    <EmojiSelector onSelect=\"(emoji) => { selected = emoji }\" />\r\n    <Text value=\"Selected emoji: {selected}\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: select\"\r\n  height={420}\r\n  app={`\r\n    <App>\r\n      <HStack var.selected=\"\">\r\n        <EmojiSelector onSelect=\"(emoji) => { selected = emoji }\" />\r\n        <Text value=\"Selected emoji: {selected}\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/FileInput":"import { Callout } from \"nextra/components\";\r\n\r\n# FileInput [#component-fileinput]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `FileInput` is a user interface component that allows users to select files from their device's file system for upload (or processing its content otherwise).\r\n\r\nThere are two ways to add a file to the input field:\r\n- Clicking on the `Browse` button and selecting the file in the file browser\r\n- Dragging files from a file browser to the input field.\r\n\r\nThe text box of the input field is read only.\r\n\r\n## Properties\r\n\r\n### `acceptsFileType`\r\n\r\nA list of file types the input controls accepts provided as a string array.\r\n\r\n```xmlui\r\n<App>\r\n  <FileInput acceptsFileType=\"{['.txt', '.jpg']}\" />\r\n</App>  \r\n```\r\n\r\n<Playground\r\n  name=\"Example: acceptsFileType\"\r\n  app={`\r\n    <App>\r\n      <FileInput acceptsFileType=\"{['.txt', '.jpg']}\" />\r\n    </App>  \r\n  `}\r\n/>\r\n\r\n### `autoFocus (default: false)`\r\n\r\nIf this property is set to `true`, the component gets the focus automatically when displayed.\r\n\r\n### `buttonIcon`\r\n\r\nThe ID of the icon to display in the button\r\n\r\n```xmlui\r\n<App>\r\n  <FileInput buttonIcon=\"drive\" buttonLabel=\"Let there be drive\" />\r\n  <FileInput buttonIcon=\"drive\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: buttonIcon\"\r\n  app={`\r\n    <App>\r\n      <FileInput buttonIcon=\"drive\" buttonLabel=\"Let there be drive\" />\r\n      <FileInput buttonIcon=\"drive\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `buttonIconPosition`\r\n\r\nThis optional string determines the location of the button icon.\r\n\r\nAvailable values: `start`, `end`\r\n\r\n```xmlui\r\n<App>\r\n  <FileInput buttonIcon=\"drive\" buttonLabel=\"End\" buttonIconPosition=\"end\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: buttonIconPosition\"\r\n  app={`\r\n    <App>\r\n      <FileInput buttonIcon=\"drive\" buttonLabel=\"End\" buttonIconPosition=\"end\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nDetails on different icon positions can be found in the [`Button` icon positions section](./Button.mdx#iconposition).\r\n\r\n### `buttonLabel`\r\n\r\nThis property is an optional string to set a label for the button part.\r\n\r\nIf no label is specified and an icon is set, the button will modify its styling to look like an icon button.\r\nBy default the label reads `Browse`.\r\n\r\n```xmlui copy\r\n<App >\r\n  <FileInput />\r\n  <FileInput buttonLabel=\"I am the button label\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: label\"\r\n  app={`\r\n    <App >\r\n      <FileInput />\r\n      <FileInput buttonLabel=\"I am the button label\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `buttonPosition`\r\n\r\nThis property determines the position of the button relative to the input field. The default is \"end\".\r\n\r\nAvailable values: `start`, `end`\r\n\r\n### `buttonSize`\r\n\r\nThe size of the button (small, medium, large)\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `xs` | Extra small button |\r\n| `sm` | Small button |\r\n| `md` | Medium button |\r\n| `lg` | Large button |\r\n\r\n```xmlui copy\r\n<App>\r\n  <FileInput buttonSize=\"lg\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: buttonSize\"\r\n  app={`\r\n    <App>\r\n      <FileInput buttonSize=\"lg\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nDetails on different sizes can be found in the [`Button` sizes section](./Button.mdx#size).\r\n\r\n### `buttonThemeColor`\r\n\r\nThe button color scheme (primary, secondary, attention)\r\n\r\nAvailable values: `attention`, `primary`, `secondary`\r\n\r\n```xmlui copy\r\n<App>\r\n  <FileInput buttonThemeColor=\"secondary\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: buttonThemeColor\"\r\n  app={`\r\n    <App>\r\n      <FileInput buttonThemeColor=\"secondary\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nDetails on different theme colors can be found in the [`Button` theme colors section](./Button.mdx#themecolor).\r\n\r\n### `buttonVariant`\r\n\r\nThe button variant to use\r\n\r\nAvailable values: `solid`, `outlined`, `ghost`\r\n\r\n```xmlui copy\r\n<App>\r\n  <FileInput buttonLabel=\"outlined\" buttonVariant=\"outlined\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: buttonVariant\"\r\n  app={`\r\n    <App>\r\n      <FileInput buttonLabel=\"outlined\" buttonVariant=\"outlined\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nDetails on different button variants can be found in the [`Button` variants section](./Button.mdx#variant).\r\n\r\n### `directory (default: false)`\r\n\r\nThis boolean property indicates whether the component allows selecting directories (`true`) or files only (`false`).\r\n\r\n```xmlui copy\r\n<App>\r\n  <FileInput directory=\"true\" />\r\n</App>  \r\n```\r\n\r\n<Playground\r\n  name=\"Example: directory\"\r\n  app={`\r\n    <App>\r\n      <FileInput directory=\"true\" />\r\n    </App>  \r\n  `}\r\n/>\r\n\r\n### `enabled (default: true)`\r\n\r\nThis boolean property value indicates whether the component responds to user events (`true`) or not (`false`).\r\n\r\n```xmlui copy\r\n<App>\r\n  <FileInput enabled=\"false\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: enabled\"\r\n  app={`\r\n    <App>\r\n      <FileInput enabled=\"false\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `initialValue`\r\n\r\nThis property sets the component's initial value.\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\n### `labelBreak (default: false)`\r\n\r\nThis boolean value indicates if the `FileInput` labels can be split into multiple lines if it would overflow the available label width.\r\n\r\n### `labelPosition (default: \"top\")`\r\n\r\nPlaces the label at the given position of the component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `start` | The left side of the input (left-to-right) or the right side of the input (right-to-left) |\r\n| `end` | The right side of the input (left-to-right) or the left side of the input (right-to-left) |\r\n| `top` | The top of the input **(default)** |\r\n| `bottom` | The bottom of the input |\r\n\r\n### `labelWidth`\r\n\r\nThis property sets the width of the `FileInput`.\r\n\r\n### `multiple (default: false)`\r\n\r\nThis boolean property enables to add not just one (`false`), but multiple files to the field (`true`). This is done either by dragging onto the field or by selecting multiple files in the browser menu after clicking the input field button.\r\n\r\n```xmlui copy\r\n<App>\r\n  <FileInput multiple=\"false\" />\r\n  <FileInput multiple=\"true\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: multiple\"\r\n  app={`\r\n    <App>\r\n      <FileInput multiple=\"false\" />\r\n      <FileInput multiple=\"true\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `placeholder`\r\n\r\nA placeholder text that is visible in the input field when its empty.\r\n\r\n### `readOnly (default: false)`\r\n\r\nSet this property to `true` to disallow changing the component value.\r\n\r\n### `required`\r\n\r\nSet this property to `true` to indicate it must have a value before submitting the containing form.\r\n\r\n### `validationStatus (default: \"none\")`\r\n\r\nThis property allows you to set the validation status of the input component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `valid` | Visual indicator for an input that is accepted |\r\n| `warning` | Visual indicator for an input that produced a warning |\r\n| `error` | Visual indicator for an input that produced an error |\r\n\r\n| Value     | Description                                           |\r\n| :-------- | :---------------------------------------------------- |\r\n| `valid`   | Visual indicator for an input that is accepted        |\r\n| `warning` | Visual indicator for an input that produced a warning |\r\n| `error`   | Visual indicator for an input that produced an error  |\r\n\r\n```xmlui copy\r\n<App>\r\n  <FileInput />\r\n  <FileInput validationStatus=\"valid\" />\r\n  <FileInput validationStatus=\"warning\" />\r\n  <FileInput validationStatus=\"error\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: validationStatus\"\r\n  app={`\r\n    <App>\r\n      <FileInput />\r\n      <FileInput validationStatus=\"valid\" />\r\n      <FileInput validationStatus=\"warning\" />\r\n      <FileInput validationStatus=\"error\" />\r\n    </App>\r\n`}\r\n/>\r\n\r\n## Events\r\n\r\n### `didChange`\r\n\r\nThis event is triggered when value of FileInput has changed.\r\n\r\nWrite in the input field and see how the `Text` underneath it is updated in accordingly.\r\n\r\n```xmlui copy {2}\r\n<App var.field=\"\">\r\n  <FileInput onDidChange=\"(file) => field = file[0]?.name\" />\r\n  <Text value=\"{field}\" />\r\n</App>`\r\n```\r\n\r\n<Playground\r\n  name=\"Example: didChange\"\r\n  app={`\r\n    <App var.field=\"\">\r\n      <FileInput onDidChange=\"(file) => field = file[0]?.name\" />\r\n      <Text value=\"{field}\" />\r\n    </App>`\r\n  }\r\n/>\r\n\r\n### `gotFocus`\r\n\r\nThis event is triggered when the FileInput has received the focus.\r\n\r\nClicking on the `FileInput` in the example demo changes the label text.\r\nNote how clicking elsewhere resets the text to the original.\r\n\r\n```xmlui copy {3-4}\r\n<App>\r\n  <FileInput\r\n    buttonLabel=\"{focused === true ? 'I got focused!' : 'I lost focus...'}\"\r\n    onGotFocus=\"focused = true\"\r\n    onLostFocus=\"focused = false\"\r\n    var.focused=\"{false}\"\r\n  />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: gotFocus/lostFocus\"\r\n  app={`\r\n    <App>\r\n      <FileInput\r\n        buttonLabel=\"{focused === true ? 'I got focused!' : 'I lost focus...'}\"\r\n        onGotFocus=\"focused = true\"\r\n        onLostFocus=\"focused = false\"\r\n        var.focused=\"{false}\"\r\n      />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `lostFocus`\r\n\r\nThis event is triggered when the FileInput has lost the focus.\r\n\r\n(See the example above)\r\n\r\n## Exposed Methods\r\n\r\n### `focus`\r\n\r\nThis method sets the focus on the FileInput.\r\n\r\n```xmlui copy {2-3}\r\n<App>\r\n  <HStack>\r\n    <Button label=\"Focus FileInput\" onClick=\"fileInputComponent.focus()\" />\r\n    <FileInput id=\"fileInputComponent\" />\r\n  </HStack>\r\n</App>  \r\n```\r\n\r\n<Playground\r\n  name=\"Example: focus\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Button label=\"Focus FileInput\" onClick=\"fileInputComponent.focus()\" />\r\n        <FileInput id=\"fileInputComponent\" />\r\n      </HStack>\r\n    </App>  \r\n  `}\r\n/>\r\n\r\n### `open`\r\n\r\nThis API command triggers the file browsing dialog to open.\r\n\r\n```xmlui copy {3-4}\r\n<App>\r\n  <HStack>\r\n    <Button label=\"Open FileInput\" onClick=\"fileInputComponent.open()\" />\r\n    <FileInput id=\"fileInputComponent\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: open\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Button label=\"Open FileInput\" onClick=\"fileInputComponent.open()\" />\r\n        <FileInput id=\"fileInputComponent\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `setValue`\r\n\r\n(**NOT IMPLEMENTED YET**) You can use this method to set the component's current value programmatically.\r\n\r\n### `value`\r\n\r\nBy setting an ID for the component, you can refer to the value of the field if set. If no value is set, the value will be undefined.\r\n\r\nIn the example below, select a file using the file browser of the `FileInput` component\r\nand note how the `Text` component displays the selected file's name:\r\n\r\n```xmlui copy {2-3}\r\n<App>\r\n  <HStack>\r\n    <Text value=\"Selected file name: {fileInputComponent.value}\" />\r\n    <FileInput id=\"fileInputComponent\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: value\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Text value=\"Selected file name: {fileInputComponent.value}\" />\r\n        <FileInput id=\"fileInputComponent\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Styling\r\n\r\nThe `FileInput` component does not theme variables directly.\r\nHowever, it uses the [`Button`](./Button.mdx) and [`TextBox`](./TextBox.mdx) components under the hood.\r\nThus, modifying the styles of both of these components affects the `FileInput`.\r\n\r\nSee [Button styling](./Button.mdx#styling) and [TextBox styling](./TextBox.mdx#styling).\r\n",
  "components/FileUploadDropZone":"import { Callout } from \"nextra/components\";\r\n\r\n# FileUploadDropZone [#component-fileuploaddropzone]\r\n\r\nThe `FileUploadDropZone` component allows users to upload files to a web application by dragging and dropping files from their local file system onto a designated area within the UI.\r\n\r\n## Using `FileUploadDropZone`\r\n\r\nThe component provides a surface on which you can drag files or paste files from the clipboard. The following example demonstrates how to use the component.\r\n\r\n```xmlui copy {}\r\n<App>\r\n  <H3>The cyan area below is a FileUploadDropZone</H3>\r\n  <FileUploadDropZone backgroundColor=\"cyan\" height=\"100px\"\r\n    onUpload=\"\r\n      (files) => {\r\n        console.log(files); \r\n        files.map(file => toast('file ' + file.path + ' uploaded'))}\" />\r\n</App>\r\n```\r\n\r\nYou can try it by dragging one or more files to the cyan surface. When you drop the file(s), the app triggers the `upload` event and displays a dialog for each file.\r\n\r\nYou can also paste files from the clipboard: click the drop zone (cyan area) and then use the keyboard shortcut set on your OS.\r\n\r\n<Playground\r\n  name=\"Example: using FileUploadDropZone\"\r\n  height={200}\r\n  app={`\r\n    <App>\r\n      <H3>The cyan area below is a FileUploadDropZone</H3>\r\n      <FileUploadDropZone backgroundColor=\"cyan\" height=\"100px\"\r\n        onUpload=\"\r\n          (files) => {\r\n            console.log(files); \r\n            files.map(file => toast('file ' + file.path + ' uploaded'))}\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\n### `allowPaste (default: true)`\r\n\r\nThis property indicates if the drop zone accepts files pasted from the clipboard (`true`) or only dragged files (`false`).\r\n\r\nThis property indicates if the drop zone accepts files pasted from the clipboard (`true`) or only dragged files (`false`).\r\n\r\nThe following example sets this property to `false` and, thus, it turns off pasting files:\r\n\r\n```xmlui copy\r\n<App>\r\n  <H3>You cannot paste files from the clipboard</H3>\r\n  <FileUploadDropZone backgroundColor=\"cyan\" height=\"100px\"\r\n    allowPaste=\"false\"\r\n    onUpload=\"(files) => files.map(file => toast('file ' + file.path + ' uploaded'))\" />\r\n</App>\r\n```\r\n\r\nTry it! When you copy a file to a clipboard, you cannot paste it with the keyboard shortcut of your OS.\r\n\r\n<Playground\r\n  name=\"Example: allowPaste\"\r\n  height={200}\r\n  app={`\r\n    <App>\r\n      <H3>You cannot paste files from the clipboard</H3>\r\n      <FileUploadDropZone backgroundColor=\"cyan\" height=\"100px\"\r\n        allowPaste=\"false\"\r\n        onUpload=\"(files) => files.map(file => toast('file ' + file.path + ' uploaded'))\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `enabled (default: true)`\r\n\r\nIf set to `false`, the drop zone will be disabled and users will not be able to upload files.\r\n\r\n### `text (default: \"Drop files here\")`\r\n\r\nWith this property, you can change the default text to display when files are dragged over the drop zone.\r\n\r\n## Events\r\n\r\n### `upload`\r\n\r\nThis component accepts files for upload but does not perform the actual operation. It fires the `upload` event and passes the list files to upload in the method's argument. You can use the passed file information to implement the upload (according to the protocol your backend supports).\r\n\r\nEach item passed in the event argument is an instance of [File](https://developer.mozilla.org/en-US/docs/Web/API/File).\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nYou can use these properties to change the styling of the `FileUpoadDropZone` component:\r\n\r\n- `backgroundColor-FileUploadDropZone`\r\n- `textColor-FileUploadDropZone`\r\n- `backgroundColor-dropping-FileUploadDropZone`\r\n- `opacity-dropping-FileUploadDropZone`\r\n\r\nThe theme variables with the `dropping` tag set the background color attributes of the drop zone when you drag files over it.\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-dropping-FileUploadDropZone | $backgroundColor--selected | $backgroundColor--selected |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-FileUploadDropZone | $backgroundColor | $backgroundColor |\r\n| [opacity](../styles-and-themes/common-units/#opacity)-dropping-FileUploadDropZone | 0.5 | 0.5 |\r\n| [textColor](../styles-and-themes/common-units/#color)-FileUploadDropZone | $textColor | $textColor |\r\n",
  "components/FlowLayout":"import { Callout } from \"nextra/components\";\r\n\r\n# FlowLayout [#component-flowlayout]\r\n\r\nThis layout component is used to position content in rows with an auto wrapping feature: if the length of the items exceed the available space the layout will wrap into a new line.\r\n\r\nFor details on how to work with \\`FlowLayout\\` (like sizing children), see [this guide](../learning/using-components/layout-components.mdx#flowlayout).\r\n\r\n## Using `SpaceFiller` with `FlowLayout`\r\n\r\nThe `SpaceFiller` component can be used as a line break.\r\nSee the [reference docs](./SpaceFiller.mdx) for details.\r\n\r\n## Properties\r\n\r\n### `columnGap (default: \"$gap-normal\")`\r\n\r\nThe `columnGap` property specifies the space between items in a single row; it overrides the `gap` value.\r\n\r\nThe `columnGap` property specifies the space between items in a single row; it overrides the `gap` value.\r\n\r\n```xmlui copy\r\n<App>\r\n  <FlowLayout columnGap=\"$space-8\">\r\n  <Stack width=\"25%\" height=\"32px\" backgroundColor=\"red\" />\r\n  <Stack width=\"25%\" height=\"32px\" backgroundColor=\"blue\" />\r\n  <Stack width=\"25%\" height=\"32px\" backgroundColor=\"green\" />\r\n  <Stack width=\"25%\" height=\"32px\" backgroundColor=\"yellow\" />\r\n  <Stack width=\"25%\" height=\"32px\" backgroundColor=\"maroon\" />\r\n  <Stack width=\"25%\" height=\"32px\" backgroundColor=\"teal\" />\r\n  <Stack width=\"25%\" height=\"32px\" backgroundColor=\"seagreen\" />\r\n  <Stack width=\"25%\" height=\"32px\" backgroundColor=\"olive\" />\r\n  </FlowLayout>\r\n</App>\r\n```\r\nYou can observe no gap between the rows of the `FlowLayout`, as `columnGap` keeps the space between rows intact:\r\n\r\n<Playground\r\n  name=\"Example: columnGap\"\r\n  app={`\r\n    <App>\r\n      <FlowLayout columnGap=\"$space-8\">\r\n      <Stack width=\"25%\" height=\"32px\" backgroundColor=\"red\" />\r\n      <Stack width=\"25%\" height=\"32px\" backgroundColor=\"blue\" />\r\n      <Stack width=\"25%\" height=\"32px\" backgroundColor=\"green\" />\r\n      <Stack width=\"25%\" height=\"32px\" backgroundColor=\"yellow\" />\r\n      <Stack width=\"25%\" height=\"32px\" backgroundColor=\"maroon\" />\r\n      <Stack width=\"25%\" height=\"32px\" backgroundColor=\"teal\" />\r\n      <Stack width=\"25%\" height=\"32px\" backgroundColor=\"seagreen\" />\r\n      <Stack width=\"25%\" height=\"32px\" backgroundColor=\"olive\" />\r\n      </FlowLayout>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `gap (default: \"$gap-normal\")`\r\n\r\nThis property defines the gap between items in the same row and between rows. The FlowLayout component creates a new row when an item is about to overflow the current row.\r\n\r\nThe `gap` property defines the gap between items in the same row and between rows. The `FlowLayout` component creates a new row when an item is about to overflow the current row.\r\n\r\n```xmlui copy\r\n<App>\r\n  <FlowLayout gap=\"$space-12\">\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"red\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"blue\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"green\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"yellow\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"maroon\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"teal\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"seagreen\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"olive\" />\r\n  </FlowLayout>\r\n</App>\r\n```\r\n\r\nIn this markup, only four items fit in a single row. The `gap` property sets the same gaps within and between rows.\r\n\r\n<Playground\r\n  name=\"Example: gap\"\r\n  app={`\r\n    <App>\r\n      <FlowLayout gap=\"$space-12\">\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"red\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"blue\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"green\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"yellow\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"maroon\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"teal\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"seagreen\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"olive\" />\r\n      </FlowLayout>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nThis markup demonstrates different `gap` values:\r\n\r\n```xmlui copy\r\n<App>\r\n  <FlowLayout>\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"red\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"blue\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"green\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"yellow\" />\r\n  </FlowLayout>\r\n  <FlowLayout gap=\"10px\">\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"red\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"blue\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"green\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"yellow\" />\r\n  </FlowLayout>\r\n  <FlowLayout gap=\"1rem\">\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"red\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"blue\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"green\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"yellow\" />\r\n  </FlowLayout>\r\n  <FlowLayout gap=\"4ch\">\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"red\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"blue\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"green\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"yellow\" />\r\n  </FlowLayout>\r\n</App>\r\n```\r\n\r\nAll items within a `FlowLayout` instance fit in a single row, so `gap` affects only the space between items. The space between rows comes from the outermost `Stack`.\r\n\r\n<Playground\r\n  name=\"Example: different size units\"\r\n  app={`\r\n    <App>\r\n      <FlowLayout>\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"red\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"blue\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"green\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"yellow\" />\r\n      </FlowLayout>\r\n      <FlowLayout gap=\"10px\">\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"red\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"blue\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"green\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"yellow\" />\r\n      </FlowLayout>\r\n      <FlowLayout gap=\"1rem\">\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"red\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"blue\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"green\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"yellow\" />\r\n      </FlowLayout>\r\n      <FlowLayout gap=\"4ch\">\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"red\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"blue\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"green\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"yellow\" />\r\n      </FlowLayout>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `rowGap (default: \"$gap-normal\")`\r\n\r\nThe `rowGap` property specifies the space between the FlowLayout rows; it overrides the `gap` value.\r\n\r\nThe `rowGap` property specifies the space between the `FlowLayout` rows; it overrides the `gap` value.\r\n\r\n```xmlui copy\r\n<App>\r\n  <FlowLayout rowGap=\"2px\">\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"red\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"blue\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"green\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"yellow\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"maroon\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"teal\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"seagreen\" />\r\n    <Stack width=\"25%\" height=\"32px\" backgroundColor=\"olive\" />\r\n  </FlowLayout>\r\n</App>\r\n```\r\n\r\nYou can observe no gap between the items in a single row of the `FlowLayout`, as `rowGap` keeps the gap within a row  intact:\r\n\r\n<Playground\r\n  name=\"Example: rowGap\"\r\n  app={`\r\n    <App>\r\n      <FlowLayout rowGap=\"2px\">\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"red\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"blue\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"green\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"yellow\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"maroon\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"teal\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"seagreen\" />\r\n        <Stack width=\"25%\" height=\"32px\" backgroundColor=\"olive\" />\r\n      </FlowLayout>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/Footer":"import { Callout } from \"nextra/components\";\r\n\r\n# Footer [#component-footer]\r\n\r\nThe `Footer` is a component that acts as a placeholder within `App`.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nLearn more about using this component [here](../learning/app-component).\r\n</Callout>\r\n\r\n## Properties\r\n\r\nThis component does not have any properties.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `Footer` component uses these theme variables to customize its appearance:\r\n\r\n- `backgroundColor`\r\n- `fontSize`\r\n- `height`\r\n- `maxWidth-content`\r\n- `horizontal-padding`\r\n- `vertical-padding`\r\n- `vertical-alignment`\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Footer | $backgroundColor-AppHeader | $backgroundColor-AppHeader |\r\n| [border](../styles-and-themes/common-units/#border)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottom](../styles-and-themes/common-units/#border)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomColor](../styles-and-themes/common-units/#color)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomStyle](../styles-and-themes/common-units/#border-style)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomWidth](../styles-and-themes/common-units/#size)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndEndRadius-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndStartRadius-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalColor](../styles-and-themes/common-units/#color)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalStyle](../styles-and-themes/common-units/#border-style)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalWidth](../styles-and-themes/common-units/#size)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeft](../styles-and-themes/common-units/#border)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftStyle](../styles-and-themes/common-units/#border-style)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftWidth](../styles-and-themes/common-units/#size)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRight](../styles-and-themes/common-units/#border)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightStyle](../styles-and-themes/common-units/#border-style)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightWidth](../styles-and-themes/common-units/#size)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartEndRadius-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartStartRadius-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTop](../styles-and-themes/common-units/#border)-Footer | 1px solid $borderColor | 1px solid $borderColor |\r\n| [borderTopColor](../styles-and-themes/common-units/#color)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopStyle](../styles-and-themes/common-units/#border-style)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopWidth](../styles-and-themes/common-units/#size)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalColor](../styles-and-themes/common-units/#color)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalStyle](../styles-and-themes/common-units/#border-style)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalWidth](../styles-and-themes/common-units/#size)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Footer | $fontSize-small | $fontSize-small |\r\n| [height](../styles-and-themes/common-units/#size)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [maxWidth-content](../styles-and-themes/common-units/#size)-Footer | $maxWidth-content | $maxWidth-content |\r\n| [padding](../styles-and-themes/common-units/#size)-Footer | $space-2 $space-4 | $space-2 $space-4 |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-Footer | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Footer | $textColor-secondary | $textColor-secondary |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Footer | center | center |\r\n",
  "components/Form":"import { Callout } from \"nextra/components\";\r\n\r\n# Form [#component-form]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nA `Form` is a fundamental component that displays user interfaces that allow users to input (or change) data and submit it to the app (a server) for further processing.\r\n\r\nThe component provides context values with which you can access some internal properties:\r\n\r\n- `$data`: This property represents the value of the form data. You can access the fields of the form using the IDs in the `bindTo` property of nested `FormItem` instances. `$data` also provides an `update` method as a shortcut to the Form's exposed `update` method.\r\n\r\nYou can learn more about this component in the [Using Forms](/learning/using-components/forms/) article.\r\n\r\n## Properties\r\n\r\n### `buttonRowTemplate`\r\n\r\nThis property allows defining a custom component to display the buttons at the bottom of the form.\r\n\r\nThe following example demonstrates using it:\r\n\r\n```xmlui copy {10-19}\r\n<App>\r\n  <Form id=\"searchForm\" padding=\"0.5rem\"\r\n    data=\"{{ search: 'Seattle', caseSensitive: false }}\"\r\n    onSubmit=\"() => {isSearching = true; delay(1000); isSearching = false; }\"\r\n    saveLabel=\"Search\"\r\n    var.isSearching=\"{false}\">\r\n      <Text>Please specify the name to include in the search:</Text>\r\n      <FormItem bindTo=\"search\" width=\"280px\" />\r\n      <FormItem type=\"checkbox\" label=\"Case sensitive?\" bindTo=\"caseSensitive\" />\r\n      <property name=\"buttonRowTemplate\">\r\n        <HStack gap=\"0.5rem\" borderTop=\"1px solid #ddd\" paddingVertical=\"1rem\">\r\n          <Button label=\"Test Search Server\" type=\"button\"\r\n            themeColor=\"secondary\" variant=\"outlined\"\r\n            onClick=\"toast('Search server is ok.')\"/>\r\n          <SpaceFiller/>\r\n          <Button type=\"submit\" enabled=\"{!isSearching}\" icon=\"search\"\r\n            label=\"{isSearching ? 'Searching...' : 'Search'}\"/>\r\n        </HStack>\r\n      </property>\r\n  </Form>\r\n</App>  \r\n```\r\n\r\nThis example mimics a one-second search and turns off the submit button during the operation. Also, it adds a Test Search Server button:\r\n\r\n<Playground\r\n  name=\"Example: buttonRowTemplate\"\r\n  app={`\r\n    <App>\r\n      <Form id=\"searchForm\" padding=\"0.5rem\"\r\n        data=\"{{ search: 'Seattle', caseSensitive: false }}\"\r\n        onSubmit=\"() => {isSearching = true; delay(1000); isSearching = false; }\"\r\n        saveLabel=\"Search\"\r\n        var.isSearching=\"{false}\">\r\n          <Text>Please specify the name to include in the search:</Text>\r\n          <FormItem bindTo=\"search\" width=\"280px\" />\r\n          <FormItem type=\"checkbox\" label=\"Case sensitive?\" bindTo=\"caseSensitive\" />\r\n          <property name=\"buttonRowTemplate\">\r\n            <HStack gap=\"0.5rem\" borderTop=\"1px solid #ddd\" paddingVertical=\"1rem\">\r\n              <Button label=\"Test Search Server\" type=\"button\"\r\n                themeColor=\"secondary\" variant=\"outlined\"\r\n                onClick=\"toast('Search server is ok.')\"/>\r\n              <SpaceFiller/>\r\n              <Button type=\"submit\" enabled=\"{!isSearching}\" icon=\"search\"\r\n                label=\"{isSearching ? 'Searching...' : 'Search'}\"/>\r\n            </HStack>\r\n          </property>\r\n      </Form>\r\n    </App>  \r\n  `}\r\n/>\r\n\r\n### `cancelLabel (default: \"Cancel\")`\r\n\r\nThis property defines the label of the Cancel button.\r\n\r\n### `data`\r\n\r\nThis property sets the initial value of the form's data structure. The form infrastructure uses this value to set the initial state of form items within the form.\r\n\r\n### `enabled`\r\n\r\nWhether the form is enabled or not. The default value is `true`.\r\n\r\n### `itemLabelBreak (default: true)`\r\n\r\nThis boolean value indicates if form item labels can be split into multiple lines if it would overflow the available label width. Individual `FormItem` instances can override this property.\r\n\r\n### `itemLabelPosition (default: \"top\")`\r\n\r\nThis property sets the position of the item labels within the form.Individual `FormItem` instances can override this property.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `start` | The left side of the input (left-to-right) or the right side of the input (right-to-left) |\r\n| `end` | The right side of the input (left-to-right) or the left side of the input (right-to-left) |\r\n| `top` | The top of the input **(default)** |\r\n| `bottom` | The bottom of the input |\r\n\r\n### `itemLabelWidth`\r\n\r\nThis property sets the width of the item labels within the form. Individual `FormItem` instances can override this property.\r\n\r\n### `keepModalOpenOnSubmit (default: false)`\r\n\r\nThis property prevents the modal from closing when the form is submitted.\r\n\r\n### `saveInProgressLabel (default: \"Saving...\")`\r\n\r\nThis property defines the label of the Save button to display during the form data submit (save) operation.\r\n\r\n### `saveLabel (default: \"Save\")`\r\n\r\nThis property defines the label of the Save button.\r\n\r\n### `submitMethod`\r\n\r\nThis property sets the HTTP method to use when submitting the form data. If not defined, `put` is used when the form has initial data; otherwise, `post`.\r\n\r\n### `submitUrl`\r\n\r\nURL to submit the form data.\r\n\r\n### `swapCancelAndSave`\r\n\r\nBy default, the Cancel button is to the left of the Save button. Set this property to `true` to swap them or `false` to keep their original location.\r\n\r\n## Events\r\n\r\n### `cancel`\r\n\r\nThe form infrastructure fires this event when the form is canceled.\r\n\r\n### `reset`\r\n\r\nThe form infrastructure fires this event when the form is reset.\r\n\r\n### `submit`\r\n\r\nThe form infrastructure fires this event when the form is submitted. The event argument is the current `data` value to save.\r\n\r\n```xmlui copy {4}\r\n<App>\r\n  <Form padding=\"0.5rem\"\r\n    data=\"{{ name: 'Joe', age: 43 }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FlowLayout columnGap=\"12px\" paddingBottom=\"6px\">\r\n      <FormItem bindTo=\"name\" label=\"Customer name\" width=\"50%\" />\r\n      <FormItem bindTo=\"age\" label=\"Age\" type=\"integer\" width=\"50%\"\r\n        zeroOrPositive=\"true\" />\r\n    </FlowLayout>\r\n  </Form>\r\n</App>  \r\n```\r\n\r\n<Playground\r\n  name=\"Example: submit\"\r\n  app={`\r\n    <App>\r\n      <Form padding=\"0.5rem\"\r\n        data=\"{{ name: 'Joe', age: 43 }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FlowLayout columnGap=\"12px\" paddingBottom=\"6px\">\r\n          <FormItem bindTo=\"name\" label=\"Customer name\" width=\"50%\" />\r\n          <FormItem bindTo=\"age\" label=\"Age\" type=\"integer\" width=\"50%\"\r\n            zeroOrPositive=\"true\" />\r\n        </FlowLayout>\r\n      </Form>\r\n    </App>  \r\n  `}\r\n/>\r\n\r\n## Exposed Methods\r\n\r\n### `reset`\r\n\r\nCall this event to reset the form to its initial state.\r\n\r\n### `update`\r\n\r\nYou can pass a data object to update the form data. The properties in the passed data object are updated to their values accordingly. Other form properties remain intact.\r\n\r\nThis method updates the form data with the change passed in its parameter. The parameter is a hash object, and this method updates the Form's properties accordingly. \r\n\r\n```xmlui copy\r\n<App>\r\n  <Form id=\"myForm\" padding=\"0.5rem\"\r\n    data=\"{{ name: 'Joe', age: 43, $update: 123 }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FlowLayout columnGap=\"12px\" paddingBottom=\"6px\">\r\n      <FormItem bindTo=\"name\" label=\"Customer name\" width=\"50%\" />\r\n      <FormItem bindTo=\"age\" label=\"Age\" type=\"integer\" width=\"50%\"\r\n        zeroOrPositive=\"true\" />\r\n    </FlowLayout>\r\n    <Button onClick=\"() => $data.update({age: $data.age + 1})\" >\r\n      Increment age (1)\r\n    </Button>\r\n    <Button onClick=\"() => myForm.update({age: $data.age + 1})\" >\r\n      Increment age (2)\r\n    </Button>\r\n    <Button onClick=\"() => myForm.update({name: $data.name + '!', age: $data.age + 1})\" >\r\n      Update name and age\r\n    </Button>\r\n  </Form>\r\n</App>  \r\n```\r\n\r\n<Playground\r\n  name=\"Example: update\"\r\n  app={`\r\n    <App>\r\n      <Form id=\"myForm\" padding=\"0.5rem\"\r\n        data=\"{{ name: 'Joe', age: 43, $update: 123 }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FlowLayout columnGap=\"12px\" paddingBottom=\"6px\">\r\n          <FormItem bindTo=\"name\" label=\"Customer name\" width=\"50%\" />\r\n          <FormItem bindTo=\"age\" label=\"Age\" type=\"integer\" width=\"50%\"\r\n            zeroOrPositive=\"true\" />\r\n        </FlowLayout>\r\n        <Button onClick=\"() => $data.update({age: $data.age + 1})\" >\r\n          Increment age (1)\r\n        </Button>\r\n        <Button onClick=\"() => myForm.update({age: $data.age + 1})\" >\r\n          Increment age (2)\r\n        </Button>\r\n        <Button onClick=\"() => myForm.update({name: $data.name + '!', age: $data.age + 1})\" >\r\n          Update name and age\r\n        </Button>\r\n      </Form>\r\n    </App>    \r\n  `}\r\n/>\r\n\r\n## Styling\r\n\r\nYou can use these theme variables to style a `Form` component:\r\n\r\n- `gap-Form`: the gap between the components directly nested into a form.\r\n- `gap-buttonRow-Form`: the gap between the Cancel and Save buttons in the button row of a form.\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [gap](../styles-and-themes/common-units/#size)-buttonRow-Form | $space-4 | $space-4 |\r\n| [gap](../styles-and-themes/common-units/#size)-Form | $space-4 | $space-4 |\r\n",
  "components/FormItem":"import { Callout } from \"nextra/components\";\r\n\r\n# FormItem [#component-formitem]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nA `FormItem` component represents a single input element within a `Form`. The value within the `FormItem` may be associated with a particular property within the encapsulating `Form` component's data.\r\n\r\nThe component provides context values with which you can access some internal properties:\r\n\r\n- `$setValue`: This function can be invoked to set the `FormItem` instance's value. The function has a single argument, the new value to set.\r\n- `$validationResult`: This variable represents the result of the latest validation of the `FormItem` instance.\r\n- `$value`: The context variable represents the current value of the `FormItem`. It can be used in expressions and code snippets within the `FormItem` instance.\r\n\r\nYou can learn more about this component in the [Forms](../../create-apps/forms.mdx) article.\r\n\r\n## Properties\r\n\r\n### `autoFocus (default: false)`\r\n\r\nIf this property is set to `true`, the component gets the focus automatically when displayed.\r\n\r\n### `bindTo`\r\n\r\nThis property binds a particular input field to one of the attributes of the `Form` data. It names the property of the form's `data` data to get the input's initial value.When the field is saved, its value will be stored in the `data` property with this name.\r\n\r\nTry to enter some kind of text in the input field labelled `Lastname` and submit the form. Note how the submitted data looks like compared to the one set in `data`.\r\n\r\n```xmlui copy /bindTo=\"firstname\"/\r\n<App>\r\n  <Form\r\n    data=\"{{ firstname: 'James', lastname: 'Clewell' }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem label=\"Firstname\" bindTo=\"firstname\" />\r\n    <FormItem label=\"Lastname\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: bindTo\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ firstname: 'James', lastname: 'Clewell' }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem label=\"Firstname\" bindTo=\"firstname\" />\r\n        <FormItem label=\"Lastname\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `customValidationsDebounce (default: 0)`\r\n\r\nThis optional number prop determines the time interval between two runs of a custom validation.\r\n\r\nNote how changing the input in the demo below will result in a slight delay of input checks noted by the appearance of a new \"I\" character.\r\n\r\n```xmlui copy /customValidationsDebounce=\"3000\"/\r\n<App>\r\n  <Form\r\n    var.validations=\"Validations: \"\r\n    data=\"{{ name: 'Joe' }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem\r\n      customValidationsDebounce=\"3000\"\r\n      onValidate=\"(value) => { validations += '| '; return value === value.toUpperCase(); }\"\r\n      bindTo=\"name\" />\r\n    <Text value=\"{validations}\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: customValidationsDebounce\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        var.validations=\"Validations: \"\r\n        data=\"{{ name: 'Joe' }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem\r\n          customValidationsDebounce=\"3000\"\r\n          onValidate=\"(value) => { validations += '| '; return value === value.toUpperCase(); }\"\r\n          bindTo=\"name\" />\r\n        <Text value=\"{validations}\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `enabled (default: true)`\r\n\r\nThis boolean property value indicates whether the component responds to user events (`true`) or not (`false`).\r\n\r\n```xmlui copy {3-4}\r\n<App>\r\n  <Form>\r\n    <FormItem label=\"Firstname\" enabled=\"true\" />\r\n    <FormItem label=\"Lastname\" enabled=\"false\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: enabled\"\r\n  app={`\r\n    <App>\r\n      <Form>\r\n        <FormItem label=\"Firstname\" enabled=\"true\" />\r\n        <FormItem label=\"Lastname\" enabled=\"false\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `initialValue`\r\n\r\nThis property sets the component's initial value.\r\n\r\n```xmlui copy {3} /initialValue/\r\n<App>\r\n  <Form data=\"{{ firstname: 'Michael', lastname: undefined }}\">\r\n    <FormItem label=\"Firstname\" bindTo=\"firstname\" initialValue=\"James\" />\r\n    <FormItem label=\"Lastname\" bindTo=\"lastname\" initialValue=\"Jordan\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: initialValue\"\r\n  app={`\r\n    <App>\r\n      <Form data=\"{{ firstname: 'Michael', lastname: undefined }}\">\r\n        <FormItem label=\"Firstname\" bindTo=\"firstname\" initialValue=\"James\" />\r\n        <FormItem label=\"Lastname\" bindTo=\"lastname\" initialValue=\"Jordan\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `inputTemplate`\r\n\r\nThis property is used to define a custom input template.\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\n```xmlui copy /label=\"Firstname\"/\r\n<App>\r\n  <Form>\r\n    <FormItem label=\"Firstname\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: label\"\r\n  app={`\r\n    <App>\r\n      <Form>\r\n        <FormItem label=\"Firstname\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `labelBreak (default: true)`\r\n\r\nThis boolean value indicates if the label can be split into multiple lines if it would overflow the available label width.\r\n\r\n### `labelPosition (default: \"top\")`\r\n\r\nPlaces the label at the given position of the component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `start` | The left side of the input (left-to-right) or the right side of the input (right-to-left) |\r\n| `end` | The right side of the input (left-to-right) or the left side of the input (right-to-left) |\r\n| `top` | The top of the input **(default)** |\r\n| `bottom` | The bottom of the input |\r\n\r\nDifferent input components have different layout methods\r\n(i.e. `TextBox` labels are positioned at the top, `Checkbox` labels are on the right side).\r\n\r\n```xmlui copy /label=\"Firstname\"/\r\n<App>\r\n  <Form>\r\n    <FormItem label=\"Start Label\" labelPosition=\"start\" />\r\n    <FormItem label=\"Top Label\" labelPosition=\"top\" />\r\n    <FormItem label=\"End Label\" labelPosition=\"end\" />\r\n    <FormItem label=\"Bottom Label\" labelPosition=\"bottom\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: labelPosition\"\r\n  app={`\r\n    <App>\r\n      <Form>\r\n        <FormItem label=\"Start Label\" labelPosition=\"start\" />\r\n        <FormItem label=\"Top Label\" labelPosition=\"top\" />\r\n        <FormItem label=\"End Label\" labelPosition=\"end\" />\r\n        <FormItem label=\"Bottom Label\" labelPosition=\"bottom\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `labelWidth`\r\n\r\nThis property sets the width of the item label.\r\n\r\n### `lengthInvalidMessage`\r\n\r\nThis optional string property is used to customize the message that is displayed on a failed length check: [minLength](#minlength) or [maxLength](#maxlength).\r\n\r\nIn the app, type a name longer than four characters in both fields, then leave the edited field. The two fields will display different error messages; the second uses the customized one.\r\n\r\n```xmlui copy /lengthInvalidMessage=\"Name is too long!\"/\r\n<App>\r\n  <Form\r\n    data=\"{{ firstname: 'James', lastname: 'Clewell' }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem maxLength=\"4\" bindTo=\"firstname\" />\r\n    <FormItem lengthInvalidMessage=\"Name is too long!\" maxLength=\"4\" bindTo=\"lastname\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: lengthInvalidMessage\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ firstname: 'James', lastname: 'Clewell' }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem maxLength=\"4\" bindTo=\"firstname\" />\r\n        <FormItem lengthInvalidMessage=\"Name is too long!\" maxLength=\"4\" bindTo=\"lastname\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `lengthInvalidSeverity (default: \"error\")`\r\n\r\nThis property sets the severity level of the length validation.\r\n\r\nAvailable values: `error` **(default)**, `warning`, `valid`\r\n\r\nIn the app, type a name longer than four characters in both fields, then leave the edited field. The two fields will display different error messages; the second uses a warning instead of an error.\r\n\r\n```xmlui copy /lengthInvalidSeverity=\"warning\"/\r\n<App>\r\n  <Form\r\n    data=\"{{ firstname: 'James', lastname: 'Clewell' }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem maxLength=\"4\" bindTo=\"firstname\" />\r\n    <FormItem lengthInvalidSeverity=\"warning\" maxLength=\"4\" bindTo=\"lastname\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: lengthInvalidSeverity\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ firstname: 'James', lastname: 'Clewell' }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem maxLength=\"4\" bindTo=\"firstname\" />\r\n        <FormItem lengthInvalidSeverity=\"warning\" maxLength=\"4\" bindTo=\"lastname\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `maxLength`\r\n\r\nChecks whether the input has a maximum length of a specified value.\r\n\r\nNote that it is not possible for the user to enter a string larger than the value of the `maxLength`,\r\nbut setting such a value programmatically still results in a validation check.\r\n\r\nIn the demo below, try to enter an input longer than 4 characters or submit the form as is.\r\n\r\n```xmlui copy /maxLength=\"4\"/\r\n<App>\r\n  <Form\r\n    data=\"{{ firstname: 'James' }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem maxLength=\"4\" bindTo=\"firstname\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: maxLength\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ firstname: 'James' }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem maxLength=\"4\" bindTo=\"firstname\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `maxTextLength`\r\n\r\nThe maximum length of the text in the input field\r\n\r\n### `maxValue`\r\n\r\nChecks whether the input has the maximum specified value.\r\n\r\nNote that it is not possible for the user to enter a number larger than the value of the `maxValue`,\r\nbut setting such a value programmatically still results in a validation check.\r\n\r\nIn the demo below, enter an input greater than 99 or just submit the form as is.\r\n\r\n```xmlui copy /maxValue=\"99\"/\r\n<App>\r\n  <Form\r\n    data=\"{{ age: 100 }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem maxValue=\"99\" bindTo=\"age\" type=\"integer\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: maxValue\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ age: 100 }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem maxValue=\"99\" bindTo=\"age\" type=\"integer\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `minLength`\r\n\r\nChecks whether the input has a minimum length of a specified value.\r\n\r\nIn the demo below, enter an input shorter than 4 characters or just submit the form as is.\r\n\r\n```xmlui copy /minLength=\"4\"/\r\n<App>\r\n  <Form\r\n    data=\"{{ firstname: '' }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem minLength=\"4\" bindTo=\"firstname\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: minLength\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ firstname: '' }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem minLength=\"4\" bindTo=\"firstname\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `minValue`\r\n\r\nChecks whether the input has the minimum specified value.\r\n\r\nNote that it is not possible for the user to enter a number smaller than the value of the `minValue`,\r\nbut setting such a value programmatically still results in a validation check.\r\n\r\nIn the demo below, enter an input smaller than 18 or just submit the form as is.\r\n\r\n```xmlui copy /minValue=\"18\"/\r\n<App>\r\n  <Form\r\n    data=\"{{ age: 0 }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem minValue=\"18\" bindTo=\"age\" type=\"integer\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: minValue\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ age: 0 }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem minValue=\"18\" bindTo=\"age\" type=\"integer\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `pattern`\r\n\r\nChecks whether the input fits a predefined regular expression.\r\n\r\n| Value   | Description                                                                                                                                                |\r\n| :------ | :--------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `email` | Accepts the `[username]@[second level domain].[top level domain]` format                                                                                     |\r\n| `phone` | Accepts a wide range of characters: numbers, upper- and lowercase letters and the following symbols: `#`, `*`, `)`, `(`, `+`, `.`, `\\`, `-`, `_`, `&`, `'` |\r\n| `url`   | Accepts URLs and URIs starting with either `http` or `https`                                                                                               |\r\n\r\n> **Note:** To define custom patterns and regular expressions, see the [regex section](#regex).\r\n\r\nIn the demo below, enter an input that is not solely one lowercase string or just submit the form as is.\r\n\r\n```xmlui copy /pattern=\"email\"/\r\n<App>\r\n  <Form\r\n    data=\"{{ userEmail: 'mailto' }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem pattern=\"email\" bindTo=\"userEmail\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: regex\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ userEmail: 'mailto' }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem pattern=\"email\" bindTo=\"userEmail\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `patternInvalidMessage`\r\n\r\nThis optional string property is used to customize the message that is displayed on a failed pattern test.\r\n\r\nIn the demo below, enter anything that does not look like an email and click outside to see the regular and custom message.\r\n\r\n```xmlui copy /patternInvalidMessage=\"This does not look like an email\"/\r\n<App>\r\n  <Form\r\n    data=\"{{ oldEmail: 'mailto', newEmail: 'mailto' }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem pattern=\"email\" bindTo=\"oldEmail\" />\r\n    <FormItem\r\n      patternInvalidMessage=\"This does not look like an email\"\r\n      pattern=\"email\" bindTo=\"newEmail\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: patternInvalidMessage\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ oldEmail: 'mailto', newEmail: 'mailto' }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem pattern=\"email\" bindTo=\"oldEmail\" />\r\n        <FormItem\r\n          patternInvalidMessage=\"This does not look like an email\"\r\n          pattern=\"email\" bindTo=\"newEmail\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `patternInvalidSeverity (default: \"error\")`\r\n\r\nThis property sets the severity level of the pattern validation.\r\n\r\nAvailable values: `error` **(default)**, `warning`, `valid`\r\n\r\nIn the demo below, enter a string of characters that does not look like an email to see the difference in feedback.\r\n\r\n```xmlui copy /patternInvalidSeverity=\"warning\"/\r\n<App>\r\n  <Form\r\n    data=\"{{ oldEmail: 'mailto', newEmail: 'mailto' }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem pattern=\"email\" bindTo=\"oldEmail\" />\r\n    <FormItem patternInvalidSeverity=\"warning\" pattern=\"email\" bindTo=\"newEmail\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: patternInvalidSeverity\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ oldEmail: 'mailto', newEmail: 'mailto' }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem pattern=\"email\" bindTo=\"oldEmail\" />\r\n        <FormItem patternInvalidSeverity=\"warning\" pattern=\"email\" bindTo=\"newEmail\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `rangeInvalidMessage`\r\n\r\nThis optional string property is used to customize the message that is displayed when a value is out of range.\r\n\r\nIn the demo below, enter any value that is out of range in the input fields and click outside to see the regular and custom message.\r\nJust submitting the form as is also produces the same error.\r\n\r\n```xmlui copy /rangeInvalidMessage=\"Out of range!\"/\r\n<App>\r\n  <Form\r\n    data=\"{{ age: 100, customAge: 100 }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem minValue=\"0\" maxValue=\"99\" bindTo=\"age\" type=\"integer\" />\r\n    <FormItem\r\n      minValue=\"0\"\r\n      maxValue=\"99\"\r\n      rangeInvalidMessage=\"Out of range!\"\r\n      bindTo=\"customAge\"\r\n      type=\"integer\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: rangeInvalidMessage\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ age: 100, customAge: 100 }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem minValue=\"0\" maxValue=\"99\" bindTo=\"age\" type=\"integer\" />\r\n        <FormItem\r\n          minValue=\"0\"\r\n          maxValue=\"99\"\r\n          rangeInvalidMessage=\"Out of range!\"\r\n          bindTo=\"customAge\"\r\n          type=\"integer\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `rangeInvalidSeverity (default: \"error\")`\r\n\r\nThis property sets the severity level of the value range validation.\r\n\r\nAvailable values: `error` **(default)**, `warning`, `valid`\r\n\r\nIn the demo below, enter any value that is out of range in the input fields and click outside to see the regular and custom message.\r\nJust submitting the form as is also produces the same error.\r\n\r\n```xmlui copy /rangeInvalidSeverity=\"warning\"/\r\n<App>\r\n  <Form\r\n    data=\"{{ age: 100, customAge: 100 }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem minValue=\"0\" maxValue=\"99\" bindTo=\"age\" type=\"integer\" />\r\n    <FormItem\r\n      minValue=\"0\" maxValue=\"99\"\r\n      rangeInvalidSeverity=\"warning\"\r\n      bindTo=\"customAge\"\r\n      type=\"integer\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: rangeInvalidSeverity\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ age: 100, customAge: 100 }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem minValue=\"0\" maxValue=\"99\" bindTo=\"age\" type=\"integer\" />\r\n        <FormItem\r\n          minValue=\"0\"\r\n          maxValue=\"99\"\r\n          rangeInvalidSeverity=\"warning\"\r\n          bindTo=\"customAge\"\r\n          type=\"integer\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `regex`\r\n\r\nChecks whether the input fits the provided regular expression.\r\n\r\nIn the demo below, enter an input that is not solely one lowercase string or just submit the form as is.\r\n\r\n```xmlui copy /regex=\"^[a-z]+$\"/\r\n<App>\r\n  <Form\r\n    data=\"{{ password: 'PASSWORD123' }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem regex=\"^[a-z]+$\" bindTo=\"password\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: regex\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ password: 'PASSWORD123' }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem regex=\"^[a-z]+$\" bindTo=\"password\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `regexInvalidMessage`\r\n\r\nThis optional string property is used to customize the message that is displayed on a failed regular expression test.\r\n\r\nIn the demo below, enter a password that is not a lowercase string and click outside to see the regular and custom message.\r\n\r\n```xmlui copy /regexInvalidMessage=\"Password must be all lowercase\"/\r\n<App>\r\n  <Form\r\n    data=\"{{ oldPassword: 'PASSWORD123', newPassword: 'PASSWORD123' }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem regex=\"^[a-z]+$\" bindTo=\"oldPassword\" />\r\n    <FormItem\r\n      regexInvalidMessage=\"Password must be all lowercase\"\r\n      regex=\"^[a-z]+$\" bindTo=\"newPassword\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: regexInvalidMessage\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ oldPassword: 'PASSWORD123', newPassword: 'PASSWORD123' }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem regex=\"^[a-z]+$\" bindTo=\"oldPassword\" />\r\n        <FormItem\r\n          regexInvalidMessage=\"Password must be all lowercase\"\r\n          regex=\"^[a-z]+$\" bindTo=\"newPassword\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `regexInvalidSeverity (default: \"error\")`\r\n\r\nThis property sets the severity level of regular expression validation.\r\n\r\nAvailable values: `error` **(default)**, `warning`, `valid`\r\n\r\nIn the demo below, enter a password that is not a lowercase string and click outside to see the regular and custom message.\r\nJust submitting the form as is also produces the same error.\r\n\r\n```xmlui copy /regexInvalidSeverity=\"warning\"/\r\n<App>\r\n  <Form\r\n    data=\"{{ oldPassword: 'PASSWORD123', newPassword: 'PASSWORD123' }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem regex=\"^[a-z]+$\" bindTo=\"oldPassword\" />\r\n    <FormItem regexInvalidSeverity=\"warning\" regex=\"^[a-z]+$\" bindTo=\"newPassword\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: regexInvalidSeverity\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ oldPassword: 'PASSWORD123', newPassword: 'PASSWORD123' }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem regex=\"^[a-z]+$\" bindTo=\"oldPassword\" />\r\n        <FormItem regexInvalidSeverity=\"warning\" regex=\"^[a-z]+$\" bindTo=\"newPassword\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `required`\r\n\r\nSet this property to `true` to indicate it must have a value before submitting the containing form.\r\n\r\n```xmlui copy /required=\"true\"/\r\n<App>\r\n  <Form\r\n    data=\"{{ name: undefined }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem required=\"true\" label=\"Name\" bindTo=\"name\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: required\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ name: undefined }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem required=\"true\" label=\"Name\" bindTo=\"name\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `requiredInvalidMessage`\r\n\r\nThis optional string property is used to customize the message that is displayed if the field is not filled in.\r\n\r\nIn the demo below, leave the field empty and click outside to see the regular and custom message.\r\n\r\n```xmlui copy /requiredInvalidMessage=\"Lastname is required!\"/\r\n<App>\r\n  <Form\r\n    data=\"{{ firstname: undefined, lastname: undefined }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem required=\"true\" label=\"First Name\" bindTo=\"firstname\" />\r\n    <FormItem\r\n      requiredInvalidMessage=\"Last Name is required!\"\r\n      required=\"true\"\r\n      label=\"Last Name\"\r\n      bindTo=\"lastname\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: requiredInvalidMessage\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ firstname: undefined, lastname: undefined }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem required=\"true\" label=\"First Name\" bindTo=\"firstname\" />\r\n        <FormItem\r\n          requiredInvalidMessage=\"Last Name is required!\"\r\n          required=\"true\"\r\n          label=\"Last Name\"\r\n          bindTo=\"lastname\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `type (default: \"text\")`\r\n\r\nThis property is used to determine the specific input control the FormItem will wrap around. Note that the control names start with a lowercase letter and map to input components found in XMLUI.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `text` | Renders TextBox **(default)** |\r\n| `password` | Renders TextBox with `password` type |\r\n| `textarea` | Renders Textarea |\r\n| `checkbox` | Renders Checkbox |\r\n| `number` | Renders NumberBox |\r\n| `integer` | Renders NumberBox with `integersOnly` set to true |\r\n| `file` | Renders FileInput |\r\n| `datePicker` | Renders DatePicker |\r\n| `radioGroup` | Renders RadioGroup |\r\n| `switch` | Renders Switch |\r\n| `select` | Renders Select |\r\n| `autocomplete` | Renders AutoComplete |\r\n| `slider` | Renders Slider |\r\n| `colorpicker` | Renders ColorPicker |\r\n| `custom` | Custom control specified in children |\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nFor custom controls, there is no need to explicitly set the `type` to `custom`.\r\nOmitting the type and providing child components implicitly sets it to custom.\r\n</Callout>\r\n\r\n### `validationMode (default: \"errorLate\")`\r\n\r\nThis property sets what kind of validation mode or strategy to employ for a particular input field.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `errorLate` | Display the error when the field loses focus.If an error is already displayed, continue for every keystroke until input is accepted. **(default)** |\r\n| `onChanged` | Display error (if present) for every keystroke. |\r\n| `onLostFocus` | Show/hide error (if present) only if the field loses focus. |\r\n\r\n## Events\r\n\r\n### `validate`\r\n\r\nThis event is used to define a custom validation function.\r\n\r\nIn the demo below, leave the field as is and submit the form or enter an input that is not all capital letters.\r\n\r\n```xmlui copy {7}\r\n<App>\r\n  <Form\r\n    data=\"{{ name: 'James' }}\"\r\n    onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n    <FormItem\r\n      bindTo=\"name\"\r\n      onValidate=\"(value) => value === value.toUpperCase()\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: validate\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ name: 'James' }}\"\r\n        onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\">\r\n        <FormItem\r\n          bindTo=\"name\"\r\n          onValidate=\"(value) => value === value.toUpperCase()\" />\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\n`FormItem` supports the styling of labels through these theme variables:\r\n\r\n- `textColor-FormItemLabel`\r\n- `fontSize-FormItemLabel`\r\n- `fontWeight-FormItemLabel`\r\n- `fontStyle-FormItemLabel`\r\n- `textTransform-FormItemLabel`\r\n- `textColor-FormItemLabel-required`\r\n- `fontSize-FormItemLabel-required`\r\n- `fontWeight-FormItemLabel-required`\r\n- `fontStyle-FormItemLabel-required`\r\n- `textTransform-FormItemLabel-required`\r\n- `textColor-FormItemLabel-requiredMark`\r\n\r\nThis component displays other input components and binds them with the form's logic. You can style the individual form components; see the [`type` property](#type) to check what components are used beyond a particular form item.\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-FormItemLabel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-FormItemLabel | $fontSize-small | $fontSize-small |\r\n| [fontSize](../styles-and-themes/common-units/#size)-FormItemLabel-required | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-FormItemLabel | normal | normal |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-FormItemLabel-required | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-FormItemLabel | $fontWeight-medium | $fontWeight-medium |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-FormItemLabel-required | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-FormItemLabel | $textColor-primary | $textColor-primary |\r\n| [textColor](../styles-and-themes/common-units/#color)-FormItemLabel-required | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-FormItemLabel-requiredMark | $color-danger-400 | $color-danger-400 |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-FormItemLabel | none | none |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-FormItemLabel-required | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n",
  "components/FormSection":"import { Callout } from \"nextra/components\";\r\n\r\n# FormSection [#component-formsection]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `FormSection` is a component that groups cohesive elements together within a `Form`. This grouping is indicated visually: the child components of the `FormSection` are placed in a [`FlowLayout`](./FlowLayout.mdx) component.\r\n\r\nSee the \\`FlowLayout\\` reference documentation for details on sizing children.\r\n\r\n## Properties\r\n\r\nThis component does not have any properties.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/Fragment":"import { Callout } from \"nextra/components\";\r\n\r\n# Fragment [#component-fragment]\r\n\r\nThe `Fragment` component encloses multiple child components into a single root component, so it can be used where only a single component definition is allowed.\r\n\r\n## Properties\r\n\r\nThis component does not have any properties.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/H1":"import { Callout } from \"nextra/components\";\r\n\r\n# H1 [#component-h1]\r\n\r\nThis component is inherited from <SmartLink href=\"/components/Heading\">Heading</SmartLink>\r\n\r\nSee also: <SmartLink href=\"/components/H2\">H2</SmartLink>, <SmartLink href=\"/components/H3\">H3</SmartLink>, <SmartLink href=\"/components/H4\">H4</SmartLink>, <SmartLink href=\"/components/H5\">H5</SmartLink>, <SmartLink href=\"/components/H6\">H6</SmartLink>\r\n\r\nThe `H1` component is a shorthand version of the `Heading` element with its `level` property set to \"h1\".\r\n\r\n```xmlui copy\r\n<App>\r\n  <H1 value=\"This is a H1 text\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"H1 example\"\r\n  app={`\r\n  <App>\r\n    <H1 value=\"This is a H1 text\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Styling\r\n\r\nThe `H1` component inherits its visual style from the `Heading` component.\r\nUsing the `H1` component specifier, you can override the inherited theme variable values.\r\nFor example, the `textColor-H1` theme variable sets the text color of `H1` while keeping the color of all other headings.\r\n\r\n\r\n",
  "components/H2":"import { Callout } from \"nextra/components\";\r\n\r\n# H2 [#component-h2]\r\n\r\nThis component is inherited from <SmartLink href=\"/components/Heading\">Heading</SmartLink>\r\n\r\nSee also: <SmartLink href=\"/components/H1\">H1</SmartLink>, <SmartLink href=\"/components/H3\">H3</SmartLink>, <SmartLink href=\"/components/H4\">H4</SmartLink>, <SmartLink href=\"/components/H5\">H5</SmartLink>, <SmartLink href=\"/components/H6\">H6</SmartLink>\r\n\r\nThe `H2` component is a shorthand version of the `Heading` element with its `level` property set to \"h2\".\r\n\r\n```xmlui copy\r\n<App>\r\n  <H2 value=\"This is a H2 text\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"H2 example\"\r\n  app={`\r\n  <App>\r\n    <H2 value=\"This is a H2 text\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Styling\r\n\r\nThe `H2` component inherits its visual style from the `Heading` component.\r\nUsing the `H2` component specifier, you can override the inherited theme variable values.\r\nFor example, the `textColor-H2` theme variable sets the text color of `H2` while keeping the color of all other headings.\r\n\r\n\r\n",
  "components/H3":"import { Callout } from \"nextra/components\";\r\n\r\n# H3 [#component-h3]\r\n\r\nThis component is inherited from <SmartLink href=\"/components/Heading\">Heading</SmartLink>\r\n\r\nSee also: <SmartLink href=\"/components/H1\">H1</SmartLink>, <SmartLink href=\"/components/H2\">H2</SmartLink>, <SmartLink href=\"/components/H4\">H4</SmartLink>, <SmartLink href=\"/components/H5\">H5</SmartLink>, <SmartLink href=\"/components/H6\">H6</SmartLink>\r\n\r\nThe `H3` component is a shorthand version of the `Heading` element with its `level` property set to \"h3\".\r\n\r\n```xmlui copy\r\n<App>\r\n  <H3 value=\"This is a H3 text\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"H3 example\"\r\n  app={`\r\n  <App>\r\n    <H3 value=\"This is a H3 text\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Styling\r\n\r\nThe `H3` component inherits its visual style from the `Heading` component.\r\nUsing the `H3` component specifier, you can override the inherited theme variable values.\r\nFor example, the `textColor-H3` theme variable sets the text color of `H3` while keeping the color of all other headings.\r\n\r\n\r\n",
  "components/H4":"import { Callout } from \"nextra/components\";\r\n\r\n# H4 [#component-h4]\r\n\r\nThis component is inherited from <SmartLink href=\"/components/Heading\">Heading</SmartLink>\r\n\r\nSee also: <SmartLink href=\"/components/H1\">H1</SmartLink>, <SmartLink href=\"/components/H2\">H2</SmartLink>, <SmartLink href=\"/components/H3\">H3</SmartLink>, <SmartLink href=\"/components/H5\">H5</SmartLink>, <SmartLink href=\"/components/H6\">H6</SmartLink>\r\n\r\nThe `H4` component is a shorthand version of the `Heading` element with its `level` property set to \"h4\".\r\n\r\n```xmlui copy\r\n<App>\r\n  <H4 value=\"This is a H4 text\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"H4 example\"\r\n  app={`\r\n  <App>\r\n    <H4 value=\"This is a H4 text\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Styling\r\n\r\nThe `H4` component inherits its visual style from the `Heading` component.\r\nUsing the `H4` component specifier, you can override the inherited theme variable values.\r\nFor example, the `textColor-H4` theme variable sets the text color of `H4` while keeping the color of all other headings.\r\n\r\n\r\n",
  "components/H5":"import { Callout } from \"nextra/components\";\r\n\r\n# H5 [#component-h5]\r\n\r\nThis component is inherited from <SmartLink href=\"/components/Heading\">Heading</SmartLink>\r\n\r\nSee also: <SmartLink href=\"/components/H1\">H1</SmartLink>, <SmartLink href=\"/components/H2\">H2</SmartLink>, <SmartLink href=\"/components/H3\">H3</SmartLink>, <SmartLink href=\"/components/H4\">H4</SmartLink>, <SmartLink href=\"/components/H6\">H6</SmartLink>\r\n\r\nThe `H5` component is a shorthand version of the `Heading` element with its `level` property set to \"h5\".\r\n\r\n```xmlui copy\r\n<App>\r\n  <H5 value=\"This is a H5 text\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"H5 example\"\r\n  app={`\r\n  <App>\r\n    <H5 value=\"This is a H5 text\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Styling\r\n\r\nThe `H5` component inherits its visual style from the `Heading` component.\r\nUsing the `H5` component specifier, you can override the inherited theme variable values.\r\nFor example, the `textColor-H5` theme variable sets the text color of `H5` while keeping the color of all other headings.\r\n\r\n\r\n",
  "components/H6":"import { Callout } from \"nextra/components\";\r\n\r\n# H6 [#component-h6]\r\n\r\nThis component is inherited from <SmartLink href=\"/components/Heading\">Heading</SmartLink>\r\n\r\nSee also: <SmartLink href=\"/components/H1\">H1</SmartLink>, <SmartLink href=\"/components/H2\">H2</SmartLink>, <SmartLink href=\"/components/H3\">H3</SmartLink>, <SmartLink href=\"/components/H4\">H4</SmartLink>, <SmartLink href=\"/components/H5\">H5</SmartLink>\r\n\r\nThe `H6` component is a shorthand version of the `Heading` element with its `level` property set to \"h6\".\r\n\r\n```xmlui copy\r\n<App>\r\n  <H6 value=\"This is a H6 text\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"H6 example\"\r\n  app={`\r\n  <App>\r\n    <H6 value=\"This is a H6 text\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Styling\r\n\r\nThe `H6` component inherits its visual style from the `Heading` component.\r\nUsing the `H6` component specifier, you can override the inherited theme variable values.\r\nFor example, the `textColor-H6` theme variable sets the text color of `H6` while keeping the color of all other headings.\r\n\r\n\r\n",
  "components/HSplitter":"import { Callout } from \"nextra/components\";\r\n\r\n# HSplitter [#component-hsplitter]\r\n\r\nThis component is inherited from <SmartLink href=\"/components/Splitter\">Splitter</SmartLink>\r\n\r\nSee also: <SmartLink href=\"/components/VSplitter\">VSplitter</SmartLink>\r\n\r\n`HSplitter` is a specialized, shorthand version for the regular `Splitter` component with a vertical orientation.\r\n\r\n```xmlui copy\r\n<App >\r\n  <HSplitter height=\"200px\">\r\n    <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n    <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n  </HSplitter>\r\n</App>\r\n```\r\n\r\n## Examples\r\n\r\n<Playground\r\n  name=\"Example: HSplitter\"\r\n  app={`\r\n    <App >\r\n      <HSplitter height=\"200px\">\r\n        <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n        <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n      </HSplitter>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou cannot change the orientation of `HSplitter` from vertical to horizontal by setting the `orientation` prop, as the engine ignores that setting.\r\n</Callout>\r\n\r\n\r\n",
  "components/HStack":"import { Callout } from \"nextra/components\";\r\n\r\n# HStack [#component-hstack]\r\n\r\nThis component is inherited from <SmartLink href=\"/components/Stack\">Stack</SmartLink>\r\n\r\nSee also: <SmartLink href=\"/components/CHStack\">CHStack</SmartLink>, <SmartLink href=\"/components/CVStack\">CVStack</SmartLink>, <SmartLink href=\"/components/VStack\">VStack</SmartLink>\r\n\r\n`HStack` is a specialized, shorthand version for the regular `Stack` component with a horizontal orientation.\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    <Stack height=\"32px\" width=\"32px\" backgroundColor=\"red\" />\r\n    <Stack height=\"32px\" width=\"32px\" backgroundColor=\"blue\" />\r\n    <Stack height=\"32px\" width=\"32px\" backgroundColor=\"green\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: HStack\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Stack height=\"32px\" width=\"32px\" backgroundColor=\"red\" />\r\n        <Stack height=\"32px\" width=\"32px\" backgroundColor=\"blue\" />\r\n        <Stack height=\"32px\" width=\"32px\" backgroundColor=\"green\" />\r\n      </HStack>\r\n    </App>\r\n `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou cannot change the orientation of `HStack` from horizontal to vertical by setting the `orientation` prop, as the engine ignores that setting.\r\n</Callout>\r\n\r\n\r\n",
  "components/Heading":"import { Callout } from \"nextra/components\";\r\n\r\n# Heading [#component-heading]\r\n\r\nRepresents a heading text\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n`Heading` follows the basic rules of the HTML heading elements (`<h1>`, ..., `<h6>`).\r\n</Callout>\r\n\r\nFor the shorthand versions see their reference page: [H1](./H1), [H2](./H2), [H3](./H3), [H4](./H4), [H5](./H5), [H6](./H6).\r\n\r\n<Playground\r\n  name=\"Example: Headings with levels\"\r\n  app={`\r\n    <App>\r\n      <Heading level=\"h1\" value=\"Heading Level 1\" />\r\n      <Text>Text following H1</Text>\r\n      <Heading level=\"h2\" value=\"Heading Level 2\" />\r\n      <Text>Text following H2</Text>\r\n      <Heading level=\"h3\" value=\"Heading Level 3\" />\r\n      <Text>Text following H3</Text>\r\n      <Heading level=\"h4\" value=\"Heading Level 4\" />\r\n      <Text>Text following H4</Text>\r\n      <Heading level=\"h5\" value=\"Heading Level 5\" />\r\n      <Text>Text following H5</Text>\r\n      <Heading level=\"h6\" value=\"Heading Level 6\" />\r\n      <Text>Text following H6</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\n### `ellipses (default: true)`\r\n\r\nThis property indicates whether ellipses should be displayed (`true`) when the heading text is cropped or not (`false`).\r\n\r\n```xmlui copy {4}\r\n<App>\r\n  <VStack width=\"200px\">\r\n    <H3\r\n      backgroundColor=\"cyan\"\r\n      maxLines=\"1\"\r\n      ellipses=\"false\">\r\n      Though this long text does is about to crop!\r\n    </H3>\r\n    <H3\r\n      backgroundColor=\"cyan\"\r\n      maxLines=\"1\">\r\n      Though this long text does is about to crop!\r\n    </H3>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: ellipses\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <VStack width=\"200px\">\r\n        <H3\r\n          backgroundColor=\"cyan\"\r\n          maxLines=\"1\"\r\n          ellipses=\"false\">\r\n          Though this long text does is about to crop!\r\n        </H3>\r\n        <H3\r\n          backgroundColor=\"cyan\"\r\n          maxLines=\"1\">\r\n          Though this long text does is about to crop!\r\n        </H3>\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `level (default: \"h1\")`\r\n\r\nThis property sets the visual significance (level) of the heading.\r\n\r\nAvailable values: `h1` **(default)**, `h2`, `h3`, `h4`, `h5`, `h6`\r\n\r\n| Value | Description                                           |\r\n| :---- | :---------------------------------------------------- |\r\n| `h1`  | **(default)** Equivalent to the `<h1 />` HTML element |\r\n| `h2`  | Equivalent to the `<h2 />` HTML element               |\r\n| `h3`  | Equivalent to the `<h3 />` HTML element               |\r\n| `h4`  | Equivalent to the `<h4 />` HTML element               |\r\n| `h5`  | Equivalent to the `<h5 />` HTML element               |\r\n| `h6`  | Equivalent to the `<h6 />` HTML element               |\r\n\r\nFor a visual example, see the component description.\r\n\r\n### `maxLines`\r\n\r\nThis property determines the maximum number of lines the component can wrap to. If there is not enough space for all of the text, the component wraps the text up to as many lines as specified.\r\n\r\n```xmlui copy\r\n<App>\r\n  <H2\r\n    maxWidth=\"160px\"\r\n    backgroundColor=\"cyan\"\r\n    value=\"A long heading text that will likely overflow\" maxLines=\"2\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: maxLines\"\r\n  app={`\r\n    <App>\r\n      <H2\r\n        maxWidth=\"160px\"\r\n        backgroundColor=\"cyan\"\r\n        value=\"A long heading text that will likely overflow\" maxLines=\"2\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `omitFromToc (default: false)`\r\n\r\nIf true, this heading will be excluded from the table of contents.\r\n\r\n### `preserveLinebreaks`\r\n\r\nThis property indicates whether linebreaks should be preserved when displaying text.\r\n\r\n```xmlui copy {5}\r\n<App>\r\n  <HStack>\r\n    <H3\r\n      width=\"200px\"\r\n      backgroundColor=\"cyan\"\r\n      preserveLinebreaks=\"true\"\r\n      value=\"(preserve) This long text\r\n  with several line breaks\r\n          does not fit into a viewport with a 200-pixel width.\" />\r\n    <H3\r\n      width=\"200px\"\r\n      backgroundColor=\"cyan\"\r\n      value=\"(do not preserve) This long text\r\n  with several line breaks\r\n          does not fit into a viewport with a 200-pixel width.\" />\r\n  </HStack>\r\n</App>\r\n```\r\nYou can observe the effect of using `preserveLinebreaks`:\r\n\r\n<Playground\r\n  name=\"Example: preserveLinebreaks\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <H3\r\n          width=\"200px\"\r\n          backgroundColor=\"cyan\"\r\n          preserveLinebreaks=\"true\"\r\n          value=\"(preserve) This long text\r\n      with several line breaks\r\n              does not fit into a viewport with a 200-pixel width.\" />\r\n        <H3\r\n          width=\"200px\"\r\n          backgroundColor=\"cyan\"\r\n          value=\"(do not preserve) This long text\r\n      with several line breaks\r\n              does not fit into a viewport with a 200-pixel width.\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nRemember to use the `value` property of `Heading`.\r\nLinebreaks are converted to spaces when nesting the text in the `Heading` component.\r\n</Callout>\r\n\r\n### `value`\r\n\r\nThis property determines the text displayed in the heading. `Heading` also accepts nested text instead of specifying the `value`. If both `value` and a nested text are used, the `value` will be displayed.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Heading value=\"This is level 3 (value)\" level=\"h3\" />\r\n  <Heading level=\"h3\">This is level 3 (child)</Heading>\r\n  <Heading value=\"Value\" level=\"h3\"><Icon name=\"trash\" /></Heading>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: value\"\r\n  app={`\r\n    <App>\r\n      <Heading value=\"This is level 3 (value)\" level=\"h3\" />\r\n      <Heading level=\"h3\">This is level 3 (child)</Heading>\r\n      <Heading value=\"Value\" level=\"h3\"><Icon name=\"trash\" /></Heading>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-H1 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-H2 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-H3 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-H4 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-H5 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-H6 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Heading | $fontFamily | $fontFamily |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-H1 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-H2 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-H3 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-H4 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-H5 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-H6 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Heading | $fontWeight-bold | $fontWeight-bold |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-H1 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-H2 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-H3 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-H4 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-H5 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-H6 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Heading  | 0 | 0 |\r\n| [textColor](../styles-and-themes/common-units/#color)-H1 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-H2 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-H3 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-H4 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-H5 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-H6 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Heading | inherit | inherit |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-H1 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-H2 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-H3 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-H4 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-H5 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-H6 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-H1 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-H2 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-H3 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-H4 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-H5 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-H6 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-H1 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-H2 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-H3 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-H4 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-H5 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-H6 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-H1 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-H2 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-H3 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-H4 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-H5 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-H6 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-H1 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-H2 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-H3 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-H4 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-H5 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-H6 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n",
  "components/Icon":"import { Callout } from \"nextra/components\";\r\n\r\n# Icon [#component-icon]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThis component is the representation of an icon.\r\n\r\nIt is a small visual element, which is used to graphically represent functions, features, or types of content within a user interface.\r\n\r\n## Properties\r\n\r\n### `fallback`\r\n\r\nThis optional property provides a way to handle situations when the provided [icon name](#name) is not found in the registry.\r\n\r\n```xmlui copy /fallback=\"trash\"/\r\n<App>\r\n  <Icon name=\"noicon\" fallback=\"trash\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: fallback\"\r\n  app={`\r\n    <App>\r\n      <Icon name=\"noicon\" fallback=\"trash\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `name`\r\n\r\nThis string property specifies the name of the icon to display. All icons have unique names and identifying the name is case-sensitive.\r\n\r\nThe engine looks up the icon in its [registry]() and determines which icon is associated with the name that the component will show.\r\nNothing is displayed if the icon name is not found in the registry.\r\n\r\n```xmlui copy /name/\r\n<App>\r\n  <HStack>\r\n    <Icon name=\"message\" />\r\n    <Icon name=\"note\" />\r\n    <Icon name=\"cog\" />\r\n    <Icon name=\"start\" />\r\n    <Icon name=\"some-non-existing-icon\" />\r\n    <Icon name=\"some-non-existing-icon-with fallback\" fallback=\"trash\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: name\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Icon name=\"message\" />\r\n        <Icon name=\"note\" />\r\n        <Icon name=\"cog\" />\r\n        <Icon name=\"start\" />\r\n        <Icon name=\"some-non-existing-icon\" />\r\n        <Icon name=\"some-non-existing-icon-with fallback\" fallback=\"trash\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `size`\r\n\r\nThis property defines the size of the `Icon`. Note that setting the `height` and/or the `width` of the component will override this property.\r\n\r\nAvailable values: `xs`, `sm`, `md`, `lg`\r\n\r\n```xmlui copy /size/\r\n<App>\r\n  <HStack>\r\n    <Icon name=\"like\" />\r\n    <Icon name=\"like\" size=\"xs\" />\r\n    <Icon name=\"like\" size=\"sm\" />\r\n    <Icon name=\"like\" size=\"md\" />\r\n    <Icon name=\"like\" size=\"lg\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: size\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Icon name=\"like\" />\r\n        <Icon name=\"like\" size=\"xs\" />\r\n        <Icon name=\"like\" size=\"sm\" />\r\n        <Icon name=\"like\" size=\"md\" />\r\n        <Icon name=\"like\" size=\"lg\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `Icon` component uses these theme variables:\r\n\r\n- `size-Icon`\r\n- `thickness-stroke-Icon`:\r\n\r\n```json\r\n\"size-Icon\": \"4rem\",\r\n\"thickness-stroke-Icon\": \"10px\"\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling\"\r\n  defaultTheme=\"custom\"\r\n  themes={[{\r\n    id: \"custom\",\r\n    name: \"Custom Theme\",\r\n    themeVars: {\r\n      \"size-Icon\": \"4rem\",\r\n      \"thickness-stroke-Icon\": \"5px\",\r\n    },\r\n  }]}\r\n  app={`\r\n    <App>\r\n      <Icon name=\"like\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [size](../styles-and-themes/common-units/#size)-Icon | 1.25em | 1.25em |\r\n| [thickness](../styles-and-themes/common-units/#size)-stroke-Icon | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n",
  "components/Image":"import { Callout } from \"nextra/components\";\r\n\r\n# Image [#component-image]\r\n\r\nThe `Image` component represents or depicts an object, scene, idea, or other concept with a picture.\r\n\r\n## Properties\r\n\r\n### `alt`\r\n\r\nThis property specifies an alternate text for the image.\r\n\r\nThis is useful in two cases:\r\n1. Accessibility: screen readers read the prop value to users so they know what the image is about.\r\n2. The text is also displayed when the image can't be loaded for some reason (network errors, content blocking, etc.).\r\n\r\n```xmlui copy\r\n<App>\r\n  <Image src=\"cantFindIt.jpg\" alt=\"This image depicts a wonderful scene not for human eyes\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: alt\"\r\n  app={`\r\n    <App>\r\n      <Image src=\"cantFindIt.jpg\" alt=\"This image depicts a wonderful scene not for human eyes\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `animation`\r\n\r\nThe animation object to be applied to the component\r\n\r\n### `aspectRatio`\r\n\r\nThis property sets a preferred aspect ratio for the image, which will be used in the calculation of auto sizes and some other layout functions.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Image \r\n    src=\"/resources/images/components/image/breakfast.jpg\" \r\n    aspectRatio=\"200 / 150\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: aspectRatio\"\r\n  app={`\r\n    <App>\r\n      <Image src=\"/resources/images/components/image/breakfast.jpg\" aspectRatio=\"200 / 150\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `fit (default: \"contain\")`\r\n\r\nThis property sets how the image content should be resized to fit its container.\r\n\r\n| Name      | Value |\r\n| --------- | ----- |\r\n| `contain` | The replaced content is scaled to maintain its aspect ratio while fitting within the image's container. The entire image is made to fill the container. |\r\n| `cover`   | The image is sized to maintain its aspect ratio while filling the element's entire content box. If the image's aspect ratio does not match the aspect ratio of its container, then the image will be clipped to fit. |\r\n\r\n```xmlui copy /fit/\r\n<App>\r\n  <HStack padding=\"1rem\" height=\"280px\" gap=\"1rem\">\r\n    <Image \r\n      src=\"/resources/images/components/image/breakfast.jpg\" \r\n      fit=\"contain\" \r\n      width=\"240px\" />\r\n    <Image \r\n      src=\"/resources/images/components/image/breakfast.jpg\" \r\n      fit=\"cover\" \r\n      width=\"240px\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: fit\"\r\n  app={`\r\n    <App>\r\n      <HStack padding=\"1rem\" height=\"280px\" gap=\"1rem\">\r\n        <Image src=\"/resources/images/components/image/breakfast.jpg\" fit=\"contain\" width=\"240px\" />\r\n        <Image src=\"/resources/images/components/image/breakfast.jpg\" fit=\"cover\" width=\"240px\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `lazyLoad`\r\n\r\nLazy loading instructs the browser to load the image only when it is imminently needed (e.g. user scrolls to it). The default value is eager (`false`).\r\n\r\nLazy loading instructs the browser to load the image only when it is imminently needed (e.g. user scrolls to it).\r\nThe default value is eager (\\`false\\`).\r\n\r\n### `src`\r\n\r\nThis property is used to indicate the source (path) of the image to display.\r\n\r\n## Events\r\n\r\n### `click`\r\n\r\nThis event is triggered when the Image is clicked.\r\n\r\nThis event is triggered when the image is clicked.\r\n\r\n```xmlui copy {5}\r\n<App>\r\n  <Stack height=\"280px\" width=\"400px\">\r\n    <Image\r\n      src=\"/resources/images/components/image/breakfast.jpg\"\r\n      fit=\"cover\"\r\n      onClick=\"toast('Image clicked')\"\r\n    />\r\n  </Stack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: click\"\r\n  app={`\r\n    <App>\r\n      <Stack height=\"280px\" width=\"400px\">\r\n        <Image\r\n          src=\"/resources/images/components/image/breakfast.jpg\"\r\n          fit=\"cover\"\r\n          onClick=\"toast('Image clicked')\"\r\n        />\r\n      </Stack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `Image` component does not support styling.\r\nNonetheless, you can use layout properties and theme variables.\r\nThe following markup uses the `borderRadius` layout property to set rounded borders:\r\n\r\n```xmlui copy {6}\r\n<App>\r\n  <Stack height=\"280px\" width=\"400px\" >\r\n    <Image \r\n      src=\"/resources/images/components/image/breakfast.jpg\" \r\n      fit=\"cover\" \r\n      borderRadius=\"400px\" \r\n      border=\"$border-MyImage\" />\r\n  </Stack>\r\n</App>\r\n```\r\n\r\nThe `border` layout property refers to a theme variable, `$border-MyImage`,\r\nwhich is defined in the custom theme set in the App Manifest:\r\n\r\n```json copy\r\n\"border-MyImage\": \"4px solid purple\"\r\n```\r\n\r\nThis example shows the result:\r\n\r\n<Playground\r\n  name=\"Example: styling with layout properties\"\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"border-MyImage\": \"4px solid purple\"\r\n      },\r\n    },\r\n  ]}\r\n  app={`\r\n    <App>\r\n      <Stack height=\"280px\" width=\"400px\" >\r\n        <Image \r\n          src=\"/resources/images/components/image/breakfast.jpg\" \r\n          fit=\"cover\" \r\n          borderRadius=\"400px\" \r\n          border=\"$border-MyImage\" />\r\n      </Stack>\r\n    </App>\r\n  `}\r\n/>\r\n",
  "components/Items":"import { Callout } from \"nextra/components\";\r\n\r\n# Items [#component-items]\r\n\r\nThe `Items` component maps sequential data items into component instances, representing each data item as a particular component.\r\n\r\nThe component provides context values with which you can access some internal properties:\r\n\r\n- `$isFirst`: This boolean value indicates if the component renders its first item.\r\n- `$isLast`: This boolean value indicates if the component renders its last item.\r\n- `$item`: This value represents the current iteration item while the component renders its children.\r\n- `$itemIndex`: This integer value represents the current iteration index (zero-based) while rendering children.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n`Items` is not a container! It does not wrap its items into a container; it merely renders its children.\r\n</Callout>\r\n\r\nThe `Items` component does not use virtualization; it maps each data item into a component.\r\nThus, passing many items to a component instance will use many resources and slow down your app.\r\nIf you plan to work with many items (more than a few dozen), use the [`List`](./List) and [`Table`](./Table) components instead.\r\n\r\n### Inline Data\r\n\r\nYou can set the list of data to be rendered via the `data` property, as the following sample shows.\r\nThe nested child component describes a template to display each data entry in `Items`.\r\nIn the template, you can refer to a particular entry with the [`$item`](#&item) identifier:\r\n\r\n```xmlui copy {8}\r\n<App>\r\n  <VStack>\r\n    <Items data=\"{[\r\n      { idx: 1, value: 'One lion' },\r\n      { idx: 2, value: 'Two monkeys' },\r\n      { idx: 3, value: 'Three rabbits' },\r\n    ]}\">\r\n      <Text>{$item.idx} - {$item.value}</Text>\r\n    </Items>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: inline data\"\r\n  app={`\r\n    <App>\r\n      <VStack>\r\n        <Items data=\"{[\r\n          { idx: 1, value: 'One lion' },\r\n          { idx: 2, value: 'Two monkeys' },\r\n          { idx: 3, value: 'Three rabbits' },\r\n        ]}\">\r\n          <Text>{$item.idx} - {$item.value}</Text>\r\n        </Items>\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Data Binding\r\n\r\nYou can use also API bindings to display data:\r\n\r\n```xmlui copy {4-6}\r\n<App>\r\n  <VStack>\r\n    <Items>\r\n      <property name=\"data\">\r\n        <DataSource url=\"https://api.spacexdata.com/v3/rockets\"/>\r\n      </property>\r\n      <Image height=\"80px\" width=\"110px\" fit=\"cover\" src=\"{$item.flickr_images[0]}\"/>\r\n    </Items>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: data binding\"\r\n  app={`\r\n    <App>\r\n      <VStack>\r\n        <Items>\r\n          <property name=\"data\">\r\n            <DataSource url=\"https://api.spacexdata.com/v3/rockets\"/>\r\n          </property>\r\n          <Image height=\"80px\" width=\"110px\" fit=\"cover\" src=\"{$item.flickr_images[0]}\"/>\r\n        </Items>\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Use children as Content Template\r\n\r\nThe [itemTemplate](#itemtemplate) property can be replaced by setting the item template component directly as the Items's child.\r\nIn the following example, the two Items are functionally the same:\r\n\r\n```xmlui copy\r\n<App>\r\n  <!-- This is the same -->\r\n  <Items>\r\n    <property name=\"itemTemplate\">\r\n      <Text>Template</Text>\r\n    </property>\r\n  </Items>\r\n  <!-- As this -->\r\n  <Items>\r\n    <Text>Template</Text>\r\n  </Items>\r\n</App>\r\n```\r\n\r\n## Properties\r\n\r\n### `data`\r\n\r\nThis property contains the list of data items (obtained from a data source) this component renders.\r\n\r\n### `itemTemplate`\r\n\r\nThe component template to display a single item\r\n\r\n### `reverse`\r\n\r\nThis property reverses the order in which data is mapped to template components.\r\n\r\n```xmlui copy {4}\r\n<App>\r\n  <VStack>\r\n    <Items\r\n      reverse=\"true\"\r\n      data=\"{[\r\n        { idx: 1, value: 'One lion' },\r\n        { idx: 2, value: 'Two monkeys' },\r\n        { idx: 3, value: 'Three rabbits' },\r\n      ]}\">\r\n      <Text>{$item.idx} - {$item.value}</Text>\r\n    </Items>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: reverse\"\r\n  app={`\r\n    <App>\r\n      <VStack>\r\n        <Items\r\n          reverse=\"true\"\r\n          data=\"{[\r\n            { idx: 1, value: 'One lion' },\r\n            { idx: 2, value: 'Two monkeys' },\r\n            { idx: 3, value: 'Three rabbits' },\r\n          ]}\">\r\n          <Text>{$item.idx} - {$item.value}</Text>\r\n        </Items>\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `Items` component does not support styling.\r\nYou should style the container component that wraps `Items`.\r\nYou can also style the individual items via specifying a template component.\r\n",
  "components/Link":"import { Callout } from \"nextra/components\";\r\n\r\n# Link [#component-link]\r\n\r\nA `Link` component represents a navigation target within the app or a reference to an external web URL.\r\n\r\n## Using Link\r\n\r\n### `Link` Appearance\r\n\r\nYou can use the `label` and `icon` properties of a `Link` to set its text and icon to display. If you want a custom appearance, you can nest your visual representation into `Link`:\r\n\r\n```xmlui copy {1,6}\r\n<App>\r\n  <Link to=\"https://ncrm.azurewebsites.net/\" target=\"_blank\">\r\n    <HStackverticalAlignment=\"center\">\r\n      <Stack width=\"16px\" height=\"16px\" backgroundColor=\"purple\" />\r\n      XMLUI introduction\r\n    </HStack>\r\n  </Link>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: custom Link content\"\r\n  app={`\r\n    <App>\r\n      <Link to=\"https://ncrm.azurewebsites.net/\" target=\"_blank\">\r\n        <HStack verticalAlignment=\"center\">\r\n          <Stack width=\"16px\" height=\"16px\" backgroundColor=\"purple\" />\r\n          XMLUI introduction\r\n        </HStack>\r\n      </Link>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\n### `active (default: false)`\r\n\r\nIndicates whether this link is active or not. If so, it will have a distinct visual appearance.\r\n\r\n```xmlui copy /active=\"true\"/ /active=\"false\"/\r\n<App>\r\n  <Link>I'm an inactive link (by default)</Link>\r\n  <Link active=\"true\">I'm an active link</Link>\r\n  <Link active=\"false\">I'm an inactive link (explicit setting)</Link>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: active\"\r\n  app={`\r\n    <App>\r\n      <Link>I'm an inactive link (by default)</Link>\r\n      <Link active=\"true\">I'm an active link</Link>\r\n      <Link active=\"false\">I'm an inactive link (explicit setting)</Link>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `enabled (default: true)`\r\n\r\nThis boolean property value indicates whether the component responds to user events (`true`) or not (`false`).\r\n\r\n```xmlui copy /enabled=\"true\"/ /enabled=\"false\"/\r\n<App>\r\n  <Link>I'm an enabled link (by default)</Link>\r\n  <Link enabled=\"false\">I'm a disabled link</Link>\r\n  <Link enabled=\"true\">I'm an enabled link (explicit setting)</Link>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: active\"\r\n  app={`\r\n    <App>\r\n      <Link>I'm an enabled link (by default)</Link>\r\n      <Link enabled=\"false\">I'm a disabled link</Link>\r\n      <Link enabled=\"true\">I'm an enabled link (explicit setting)</Link>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `icon`\r\n\r\nThis property allows you to add an icon (specify the icon's name) to the link.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Link icon=\"home\" label=\"Home\" />\r\n  <Link icon=\"drive\">Drives</Link>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: icon\"\r\n  app={`\r\n    <App>\r\n      <Link icon=\"home\" label=\"Home\" />\r\n      <Link icon=\"drive\">Drives</Link>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nIf you want to specify paddings and gaps or put the icon to the right of the link text, use your custom link template (nest it into `Link`).\r\n</Callout>\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\n### `target (default: \"_self\")`\r\n\r\nThis property specifies where to open the link represented by the `Link`. This property accepts the following values (in accordance with the HTML standard):\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `_self` | The link will open in the same frame as it was clicked. **(default)** |\r\n| `_blank` | The link will open in a new window or tab. |\r\n| `_parent` | The link will open in the parent frame. If no parent, behaves as _self. |\r\n| `_top` | The topmost browsing context. The link will open in the full body of the window. If no ancestors, behaves as _self. |\r\n| `_unfencedTop` | Allows embedded fenced frames to navigate the top-level frame, i.e. traversing beyond the root of the fenced frame. |\r\n\r\nThe following sample opens its link in a new tab:\r\n\r\n```xmlui copy\r\n<App>\r\n  <Link to=\"https://docs.xmlui.com/\" target=\"_blank\">\r\n    Open XMLUI overview in a new tab\r\n  </Link>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: target\"\r\n  app={`\r\n    <App>\r\n      <Link to=\"https://docs.xmlui.com/\" target=\"_blank\">\r\n        Open XMLUI overview in a new tab\r\n      </Link>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `to`\r\n\r\nThis property defines the URL of the link.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `Link` component uses these theme variables to customize its appearance:\r\n\r\n- `textDecorationColor`\r\n- `color`\r\n- `fontWeight`\r\n- `textDecorationLine`\r\n- `textUnderlineOffset`\r\n- `textDecorationStyle`\r\n- `textDecorationThickness`\r\n\r\nThe following sample theme sets a few visual properties of `Link`:\r\n\r\n```json\r\n{\r\n  \"id\": \"custom\",\r\n  \"name\": \"Custom Theme\",\r\n  \"themeVars\": {\r\n    \"textColor-Link--hover\": \"orangered\",\r\n    \"textDecorationColor-Link\": \"purple\",\r\n    \"textDecorationThickness-Link\": \"4px\",\r\n    \"textDecorationStyle-Link\": \"dotted\"\r\n  }\r\n}\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling\"\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"textColor-Link--hover\": \"orangered\",\r\n        \"textDecorationColor-Link\": \"purple\",\r\n        \"textDecorationThickness-Link\": \"4px\",\r\n        \"textDecorationStyle-Link\": \"dotted\",\r\n      },\r\n    },\r\n  ]}\r\n  app={`\r\n    <App>\r\n      <Link>I have a fancy style when you hover me!</Link>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [border](../styles-and-themes/common-units/#border)-Link | 0px solid $borderColor | 0px solid $borderColor |\r\n| [borderBottom](../styles-and-themes/common-units/#border)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomColor](../styles-and-themes/common-units/#color)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomStyle](../styles-and-themes/common-units/#border-style)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomWidth](../styles-and-themes/common-units/#size)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndEndRadius-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndStartRadius-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalColor](../styles-and-themes/common-units/#color)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalStyle](../styles-and-themes/common-units/#border-style)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalWidth](../styles-and-themes/common-units/#size)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeft](../styles-and-themes/common-units/#border)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftStyle](../styles-and-themes/common-units/#border-style)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftWidth](../styles-and-themes/common-units/#size)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRight](../styles-and-themes/common-units/#border)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightStyle](../styles-and-themes/common-units/#border-style)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightWidth](../styles-and-themes/common-units/#size)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartEndRadius-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartStartRadius-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTop](../styles-and-themes/common-units/#border)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopColor](../styles-and-themes/common-units/#color)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopStyle](../styles-and-themes/common-units/#border-style)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopWidth](../styles-and-themes/common-units/#size)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalColor](../styles-and-themes/common-units/#color)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalStyle](../styles-and-themes/common-units/#border-style)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalWidth](../styles-and-themes/common-units/#size)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Link | inherit | inherit |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Link--active | $fontWeight-bold | $fontWeight-bold |\r\n| [gap](../styles-and-themes/common-units/#size)-icon-Link | $gap-tight | $gap-tight |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Link--focus | $outlineColor--focus | $outlineColor--focus |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Link--focus | $outlineOffset--focus | $outlineOffset--focus |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Link--focus | $outlineStyle--focus | $outlineStyle--focus |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Link--focus | $outlineWidth--focus | $outlineWidth--focus |\r\n| [padding](../styles-and-themes/common-units/#size)-icon-Link | $space-0_5 | $space-0_5 |\r\n| [padding](../styles-and-themes/common-units/#size)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-icon-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-icon-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-icon-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-icon-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-icon-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-icon-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-Link | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Link | $color-primary-500 | $color-primary-500 |\r\n| [textColor](../styles-and-themes/common-units/#color)-Link--active | $color-primary-500 | $color-primary-500 |\r\n| [textColor](../styles-and-themes/common-units/#color)-Link--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Link--hover--active | $textColor-Link--active | $textColor-Link--active |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Link | $color-surface-400 | $color-surface-400 |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Link--active | $color-surface200 | $color-surface200 |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Link--hover | $color-surface-400A80 | $color-surface-400A80 |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Link | underline | underline |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Link | dashed | dashed |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Link | $space-0_5 | $space-0_5 |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Link | $space-1 | $space-1 |\r\n\r\n### Variable Explanations\r\n\r\n| Theme Variable | Description |\r\n| --- | --- |\r\n| **`gap-icon-Link`** | This property defines the size of the gap between the icon and the label. |\r\n",
  "components/List":"import { Callout } from \"nextra/components\";\r\n\r\nimport data from  \"../../component-samples/List/list-component-data.js\";\r\n\r\n# List [#component-list]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `List` component is a robust layout container that renders associated data items as a list of components. `List` is virtualized; it renders only items that are visible in the viewport.\r\n\r\nThe component provides context values with which you can access some internal properties:\r\n\r\n- `$item`: This property represents the value of an item in the data list.\r\n\r\nIn the following examples all use the same list of data which looks like so:\r\n\r\n| Id   | Name    | Quantity | Unit   | Category   | Key  |\r\n| :--- | :------ | :------- | :----- | :--------- | :--- |\r\n| 0    | Apples  | 5        | pieces | fruits     | 5    |\r\n| 1    | Bananas | 6        | pieces | fruits     | 4    |\r\n| 2    | Carrots | 100      | grams  | vegetables | 3    |\r\n| 3    | Spinach | 1        | bunch  | vegetables | 2    |\r\n| 4    | Milk    | 10       | liter  | diary      | 1    |\r\n| 5    | Cheese  | 200      | grams  | diary      | 0    |\r\n\r\nThe data is provided as JSON.\r\n\r\n## Use children as Content Template\r\n\r\nThe [itemTemplate](#itemtemplate) property can be replaced by setting the item template component directly as the List's child.\r\nIn the following example, the two List are functionally the same:\r\n\r\n```xmlui copy\r\n<App>\r\n  <!-- This is the same -->\r\n  <List>\r\n    <property name=\"itemTemplate\">\r\n      <Text>Template</Text>\r\n    </property>\r\n  </List>\r\n  <!-- As this -->\r\n  <List>\r\n    <Text>Template</Text>\r\n  </List>\r\n</App>\r\n```\r\n\r\n## Properties\r\n\r\n### `availableGroups`\r\n\r\nThis property is an array of group names that the `List` will display.\r\n\r\n```xmlui {5}\r\n<App>\r\n  <List\r\n    data=\"{[...]}\"\r\n    groupBy=\"category\"\r\n    availableGroups=\"{['fruits', 'vegetables']}\">\r\n    <property name=\"groupHeaderTemplate\">\r\n      <Stack>\r\n        <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n      </Stack>\r\n    </property>  \r\n  </List>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: availableGroups\"\r\n  height={400}\r\n  app={`\r\n    <App>\r\n      <List availableGroups=\"{['fruits', 'vegetables']}\" groupBy=\"category\" data='{${JSON.stringify(data, null, 2)}}'>\r\n        <property name=\"groupHeaderTemplate\">\r\n          <Stack>\r\n            <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n          </Stack>\r\n        </property>  \r\n      </List>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `borderCollapse (default: true)`\r\n\r\nCollapse items borders\r\n\r\nNote how the `List` on the right has different borders:\r\n\r\n```xmlui /borderCollapse/\r\n<App>\r\n  <HStack>\r\n    <List data=\"{[...]}\" groupBy=\"category\" borderCollapse=\"false\" width=\"$space-48\">\r\n      <property name=\"groupHeaderTemplate\">\r\n        <Stack>\r\n          <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n        </Stack>\r\n      </property>\r\n    </List>\r\n    <List data=\"{[...]}\" groupBy=\"category\" borderCollapse=\"true\" width=\"$space-48\">\r\n      <property name=\"groupHeaderTemplate\">\r\n        <Stack>\r\n          <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n        </Stack>\r\n      </property>\r\n    </List>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: borderCollapse\"\r\n  height={400}\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <List data='{${JSON.stringify(data, null, 2)}}' groupBy=\"category\" borderCollapse=\"false\" width=\"$space-48\">\r\n        <property name=\"groupHeaderTemplate\">\r\n            <Stack>\r\n              <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n            </Stack>\r\n          </property>\r\n        </List>\r\n        <List data='{${JSON.stringify(data, null, 2)}}' groupBy=\"category\" borderCollapse=\"true\" width=\"$space-48\">\r\n          <property name=\"groupHeaderTemplate\">\r\n            <Stack>\r\n              <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n            </Stack>\r\n          </property>\r\n        </List>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `data`\r\n\r\nThe component receives data via this property. The `data` property is a list of items that the `List` can display.\r\n\r\nNote how the `List` infers the given data and provides a simple layout for it.\r\nTo tweak what data and how it is displayed, see the [`itemTemplate` section](#itemtemplate).\r\n\r\n```xmlui copy\r\n<App>\r\n  <List data='{[...]}' />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: data\"\r\n  height={400}\r\n  app={`\r\n    <App>\r\n      <List data='{${JSON.stringify(data, null, 2)}}' />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nYou can also provide the `List` with data directly from an API via this property.\r\n\r\nIn the example below, the `List` also uses the `itemTemplate` property to access the data attributes as well.\r\nSee the [itemTemplate section](#itemtemplate).\r\n\r\n```xmlui copy {2}\r\n<App>\r\n  <List data='https://api.spacexdata.com/v3/rockets'>\r\n    <property name=\"itemTemplate\">\r\n      <Card>\r\n        <Image height=\"100px\" fit=\"cover\" src=\"{$item.flickr_images[0]}\"/>\r\n        <Text value=\"{$item.country}\" />\r\n        <Text value=\"{$item.company}\" variant=\"strong\" />\r\n      </Card>\r\n    </property>\r\n  </List>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: data API Call\"\r\n  height={400}\r\n  app={`\r\n  <App>\r\n    <List data='https://api.spacexdata.com/v3/rockets'>\r\n      <property name=\"itemTemplate\">\r\n        <Card>\r\n          <Image height=\"100px\" fit=\"cover\" src=\"{$item.flickr_images[0]}\"/>\r\n          <Text value=\"{$item.country}\" />\r\n          <Text value=\"{$item.company}\" variant=\"strong\" />\r\n        </Card>\r\n      </property>\r\n    </List>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `defaultGroups`\r\n\r\nThis property adds a list of default groups for the `List` and displays the group headers in the specified order. If the data contains group headers not in this list, those headers are also displayed (after the ones in this list); however, their order is not deterministic.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nFor the `defaultGroups` property to work, the data must be sectioned using the [`groupBy`](#groupBy) property,\r\nand either a [`groupHeaderTemplate`](#groupHeaderTemplate) or a [`groupFooterTemplate`](#groupFooterTemplate) needs to be provided.\r\n</Callout>\r\n\r\n```xmlui copy {4}\r\n<App>\r\n  <List\r\n    data='{[...]}'\r\n    defaultGroups=\"{['dairy', 'meat', 'vegetables']}\"\r\n    groupBy=\"category\" >\r\n    <property name=\"groupHeaderTemplate\">\r\n      <VStack>\r\n        <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n      </VStack>\r\n    </property>\r\n  </List>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: defaultGroups\"\r\n  height={400}\r\n  app={`\r\n    <App>\r\n      <List\r\n        data='{${JSON.stringify(data, null, 2)}}'\r\n        defaultGroups=\"{['dairy', 'meat', 'vegetables']}\"\r\n        groupBy=\"category\">\r\n        <property name=\"groupHeaderTemplate\">\r\n          <VStack>\r\n            <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n          </VStack>\r\n        </property>\r\n      </List>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `emptyListTemplate`\r\n\r\nThis property defines the template to display when the list is empty.\r\n\r\n```xmlui copy\r\n<App>\r\n  <List>\r\n    <property name=\"emptyListTemplate\">\r\n      <VStack horizontalAlignment=\"center\">\r\n        <Text variant=\"strong\" value=\"Empty...\" />\r\n      </VStack>\r\n    </property>\r\n  </List>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: emptyListTemplate\"\r\n  height={140}\r\n  app={`\r\n    <App>\r\n      <List>\r\n        <property name=\"emptyListTemplate\">\r\n          <VStack horizontalAlignment=\"center\">\r\n            <Text variant=\"strong\" value=\"Empty...\" />\r\n          </VStack>\r\n        </property>\r\n      </List>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `groupBy`\r\n\r\nThis property sets which attribute of the data is used to group the list items. If the attribute does not appear in the data, it will be ignored.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nFor the `groupBy` property to work, either a [`groupHeaderTemplate`](#groupHeaderTemplate)\r\nor a [`groupFooterTemplate`](#groupFooterTemplate) needs to be provided.\r\n</Callout>\r\n\r\n```xmlui copy {3}\r\n<App>\r\n  <List\r\n    data='{[...]}'\r\n    groupBy=\"category\">\r\n    <property name=\"groupHeaderTemplate\">\r\n      <VStack>\r\n        <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n      </VStack>\r\n    </property>\r\n  </List>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: groupBy\"\r\n  height={400}\r\n  app={`\r\n    <App>\r\n      <List\r\n        data='{${JSON.stringify(data, null, 2)}}'\r\n        groupBy=\"category\">\r\n        <property name=\"groupHeaderTemplate\">\r\n          <VStack>\r\n            <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n          </VStack>\r\n        </property>\r\n      </List>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `groupFooterTemplate`\r\n\r\nEnables the customization of how the the footer of each group is displayed. Combine with [`groupHeaderTemplate`](#groupHeaderTemplate) to customize sections. You can use the `$item` context variable to access an item group and map its individual attributes.\r\n\r\nThe structure of `$group` in a `groupFooterTemplate` is the following:\r\n\r\n| Attribute | Description                                                                                                   |\r\n| --------- | ------------------------------------------------------------------------------------------------------------- |\r\n| id        | Unique identifier for the section. It is commonly generated from the attribute name provided via `groupBy`.   |\r\n| items     | The items filtered from the original data list that fall into this section.                                   |\r\n| key       | The attribute name to section by provided via `groupBy`                                                       |\r\n\r\nThis example displays a separator line in the groups' footer:\r\n\r\n```xmlui copy {8-12}\r\n<App>\r\n  <List data='{${JSON.stringify(data, null, 2)}}' groupBy=\"category\">\r\n    <property name=\"groupHeaderTemplate\">\r\n      <VStack>\r\n        <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n      </VStack>\r\n    </property>\r\n    <property name=\"groupFooterTemplate\">\r\n      <VStack paddingVertical=\"$space-normal\">\r\n        <ContentSeparator/>\r\n      </VStack>\r\n    </property>\r\n  </List>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: groupFooterTemplate\"\r\n  height={400}\r\n  app={`\r\n    <App>\r\n      <List data='{${JSON.stringify(data, null, 2)}}' groupBy=\"category\">\r\n        <property name=\"groupHeaderTemplate\">\r\n          <VStack>\r\n            <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n          </VStack>\r\n        </property>\r\n        <property name=\"groupFooterTemplate\">\r\n          <VStack paddingVertical=\"$space-normal\">\r\n            <ContentSeparator/>\r\n          </VStack>\r\n        </property>\r\n      </List>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `groupHeaderTemplate`\r\n\r\nEnables the customization of how the groups are displayed, similarly to the [`itemTemplate`](#itemtemplate). You can use the `$item` context variable to access an item group and map its individual attributes.\r\n\r\nThe structure of `$group` in a `groupHeaderTemplate` is the following:\r\n\r\n| Attribute | Description                                                                                                   |\r\n| --------- | ------------------------------------------------------------------------------------------------------------- |\r\n| id        | Unique identifier for the section. It is commonly generated from the attribute name provided via `groupBy`.   |\r\n| items     | The items filtered from the original data list that fall into this section.                                   |\r\n| key       | The attribute name to section by provided via `groupBy`                                                       |\r\n\r\n```xmlui copy {3-7}\r\n<App>\r\n  <List data='{[...]}' groupBy=\"category\">\r\n    <property name=\"groupHeaderTemplate\">\r\n      <Stack padding=\"$space-2\">\r\n        <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n      </Stack>\r\n    </property>\r\n  </List>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: groupHeaderTemplate\"\r\n  height={400}\r\n  app={`\r\n    <App>\r\n      <List data='{${JSON.stringify(data, null, 2)}}' groupBy=\"category\">\r\n        <property name=\"groupHeaderTemplate\">\r\n          <Stack padding=\"$space-2\">\r\n            <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n          </Stack>\r\n        </property>\r\n      </List>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `groupsInitiallyExpanded`\r\n\r\nThis Boolean property defines whether the list groups are initially expanded.\r\n\r\nNote how the groups in the right `List` are expanded by default:\r\n\r\n```xmlui {3, 10}\r\n<App>\r\n  <HStack gap=\"$space-2\">\r\n    <List data=\"{[...]}\" groupBy=\"category\" groupsInitiallyExpanded=\"false\" width=\"$space-48\">\r\n      <property name=\"groupHeaderTemplate\">\r\n        <Stack>\r\n          <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n        </Stack>\r\n      </property>\r\n    </List>\r\n    <List data=\"{[...]}\" groupBy=\"category\" groupsInitiallyExpanded=\"true\" width=\"$space-48\">\r\n      <property name=\"groupHeaderTemplate\">\r\n        <Stack>\r\n          <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n        </Stack>\r\n      </property>\r\n    </List>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: groupsInitiallyExpanded\"\r\n  height={400}\r\n  app={`\r\n    <App>\r\n      <HStack gap=\"$space-2\"> \r\n        <List data='{${JSON.stringify(data, null, 2)}}' groupBy=\"category\" groupsInitiallyExpanded=\"false\" width=\"$space-48\">\r\n          <property name=\"groupHeaderTemplate\">\r\n            <Stack>\r\n              <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n            </Stack>\r\n          </property>\r\n        </List>\r\n        <List data='{${JSON.stringify(data, null, 2)}}' groupBy=\"category\" groupsInitiallyExpanded=\"true\" width=\"$space-48\">\r\n          <property name=\"groupHeaderTemplate\">\r\n            <Stack>\r\n              <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n            </Stack>\r\n          </property>\r\n        </List>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `hideEmptyGroups (default: true)`\r\n\r\nThis boolean property indicates if empty groups should be hidden (no header and footer are displayed).\r\n\r\nNote how the `meats` category is not displayed in the right `List`:\r\n\r\n```xmlui {7, 19}\r\n<App>\r\n  <HStack gap=\"$space-2\">\r\n    <List\r\n      data=\"{[...]}\"\r\n      defaultGroups=\"{['meats']}\"\r\n      groupBy=\"category\"\r\n      hideEmptyGroups=\"false\"\r\n      width=\"$space-48\">\r\n      <property name=\"groupHeaderTemplate\">\r\n        <Stack>\r\n          <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n        </Stack>\r\n      </property>\r\n    </List>\r\n    <List\r\n      data=\"{[...]}\"\r\n      defaultGroups=\"{['meats']}\"\r\n      groupBy=\"category\"\r\n      hideEmptyGroups=\"true\"\r\n      width=\"$space-48\">\r\n      <property name=\"groupHeaderTemplate\">\r\n        <Stack>\r\n          <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n        </Stack>\r\n      </property>\r\n    </List>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: hideEmptyGroups\"\r\n  height={400}\r\n  app={`\r\n    <App>\r\n      <HStack gap=\"$space-2\">\r\n        <List data='{${JSON.stringify(data, null, 2)}}' defaultGroups=\"{['meats']}\" groupBy=\"category\" hideEmptyGroups=\"false\" width=\"$space-48\">\r\n          <property name=\"groupHeaderTemplate\">\r\n            <Stack>\r\n              <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n            </Stack>\r\n          </property>\r\n        </List>\r\n        <List data='{${JSON.stringify(data, null, 2)}}' defaultGroups=\"{['meats']}\" groupBy=\"category\" hideEmptyGroups=\"true\" width=\"$space-48\">\r\n          <property name=\"groupHeaderTemplate\">\r\n            <Stack>\r\n              <Text variant=\"subtitle\" value=\"{$group.key}\" />\r\n            </Stack>\r\n          </property>\r\n        </List>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `idKey (default: \"id\")`\r\n\r\nDenotes which attribute of an item acts as the ID or key of the item\r\n\r\n```xmlui /idKey=\"key\"/\r\n<App>\r\n  <List idKey=\"key\" data='{[...]}' />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: idKey\"\r\n  height={400}\r\n  app={`\r\n    <App>\r\n      <List idKey=\"key\" data='{${JSON.stringify(data, null, 2)}}' />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `itemTemplate`\r\n\r\nThis property allows the customization of mapping data items to components. You can use the `$item` context variable to access an item and map its individual attributes.\r\n\r\nNote how in the example below the `$item` is used to access the `name`, `quantity` and `unit` attributes.\r\n\r\n```xmlui copy {3-14}\r\n<App>\r\n  <List data='{[...]}'>\r\n    <property name=\"itemTemplate\">\r\n      <Card>\r\n        <HStack verticalAlignment=\"center\">\r\n          <Icon name=\"info\" />\r\n          <Text value=\"{$item.name}\" variant=\"strong\" />\r\n        </HStack>\r\n        <HStack>\r\n          <Text value=\"{$item.quantity}\" />\r\n          <Text value=\"{$item.unit}\" variant=\"em\" />\r\n        </HStack>\r\n      </Card>\r\n    </property>\r\n  </List>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: itemTemplate\"\r\n  height={400}\r\n  app={`\r\n    <App>\r\n      <List data='{${JSON.stringify(data, null, 2)}}'>\r\n        <property name=\"itemTemplate\">\r\n          <Card>\r\n            <HStack verticalAlignment=\"center\">\r\n              <Icon name=\"info\" />\r\n              <Text value=\"{$item.name}\" variant=\"strong\" />\r\n            </HStack>\r\n            <HStack>\r\n              <Text value=\"{$item.quantity}\" />\r\n              <Text value=\"{$item.unit}\" variant=\"em\" />\r\n            </HStack>\r\n          </Card>\r\n        </property>\r\n      </List>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `limit`\r\n\r\nThis property limits the number of items displayed in the `List`.\r\n\r\n```xmlui /limit=\"4\"/\r\n<App>\r\n  <List limit=\"4\" data='{[...]}' />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: limit\"\r\n  height={400}\r\n  app={`\r\n    <App>\r\n      <List limit=\"4\" data='{${JSON.stringify(data, null, 2)}}' />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `loading`\r\n\r\nThis property delays the rendering of children until it is set to `false`, or the component receives usable list items via the [`data`](#data) property.\r\n\r\n```xmlui copy\r\n<App>\r\n  <List loading=\"true\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: loading\"\r\n  height={120}\r\n  app={`\r\n    <App>\r\n      <List loading=\"true\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `orderBy`\r\n\r\nThis property enables the ordering of list items by specifying an attribute in the data.\r\n\r\n```xmlui /orderBy=\"{{ field: 'quantity', direction: 'desc' }}\"/\r\n<App>\r\n  <List orderBy=\"{{ field: 'quantity', direction: 'desc' }}\" data='{[...]}' />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: orderBy\"\r\n  height={400}\r\n  app={`\r\n    <App>\r\n      <List \r\n        orderBy=\"{{ field: 'quantity', direction: 'desc' }}\" \r\n        data='{${JSON.stringify(data, null, 2)}}' />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `pageInfo`\r\n\r\nThis property contains the current page information. Setting this property also enures the `List` uses pagination.\r\n\r\nIt contains the following boolean attributes:\r\n\r\n| Attribute            | Description                          |\r\n| :------------------- | :------------------------------------|\r\n| `hasPrevPage`        | Does the list have a previous page   |\r\n| `hasNextPage`        | Does the list have a next page       |\r\n| `isFetchingPrevPage` | _TBD_                                |\r\n| `isFetchingNextPage` | _TBD_                                |\r\n\r\n### `scrollAnchor (default: \"top\")`\r\n\r\nThis property pins the scroll position to a specified location of the list. Available values are shown below.\r\n\r\nAvailable values: `top` **(default)**, `bottom`\r\n\r\n```xmlui /scrollAnchor=\"bottom\"/\r\n<App>\r\n  <List scrollAnchor=\"bottom\" data='{${JSON.stringify(data, null, 2)}}' />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: scrollAnchor\"\r\n  height={400}\r\n  app={`\r\n    <App>\r\n      <List scrollAnchor=\"bottom\" data='{${JSON.stringify(data, null, 2)}}' />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\n### `scrollToBottom`\r\n\r\nThis method scrolls the list to the bottom.\r\n\r\nThe following example demonstrates `scrollToBottom` and all the other scroll methods:\r\n\r\n```xmlui copy /scrollToBottom/ /scrollToTop/ /scrollToIndex/ /scrollToId/\r\n<App layout=\"condensed-sticky\">\r\n  <AppHeader>\r\n    <HStack>\r\n      <Button onClick=\"myList.scrollToBottom()\">Scroll to Bottom</Button>\r\n      <Button onClick=\"myList.scrollToTop()\">Scroll to Top</Button>\r\n      <Button onClick=\"myList.scrollToIndex(25)\">Scroll to #25</Button>\r\n      <Button onClick=\"myList.scrollToId('item-40')\">Scroll to ID 'item-40'</Button>\r\n    </HStack>\r\n  </AppHeader>\r\n  <List \r\n    id=\"myList\" \r\n    data=\"{Array.from({ length: 100 }).map((_, i) => ({id: 'item-' + i, value: 'Item #' + i}))}\">\r\n    <property name=\"itemTemplate\">\r\n      <Card>\r\n        <Text value=\"{$item.value}\" />\r\n      </Card>\r\n    </property>\r\n  </List>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: data API Call\"\r\n  height={400}\r\n  app={`\r\n  <App layout=\"condensed-sticky\">\r\n    <AppHeader>\r\n      <HStack>\r\n        <Button onClick=\"myList.scrollToBottom()\">Scroll to Bottom</Button>\r\n        <Button onClick=\"myList.scrollToTop()\">Scroll to Top</Button>\r\n        <Button onClick=\"myList.scrollToIndex(25)\">Scroll to #25</Button>\r\n        <Button onClick=\"myList.scrollToId('item-40')\">Scroll to ID 'item-40'</Button>\r\n      </HStack>\r\n    </AppHeader>\r\n    <List \r\n      id=\"myList\" \r\n      data=\"{Array.from({ length: 100 }).map((_, i) => ({id: 'item-' + i, value: 'Item #' + i}))}\">\r\n      <property name=\"itemTemplate\">\r\n        <Card>\r\n          <Text value=\"{$item.value}\" />\r\n        </Card>\r\n      </property>\r\n    </List>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `scrollToId`\r\n\r\nThis method scrolls the list to a specific item. The method accepts an item ID as a parameter.\r\n\r\nSee the [`scrollToBottom`](#scrolltobottom) example.\r\n\r\n### `scrollToIndex`\r\n\r\nThis method scrolls the list to a specific index. The method accepts an index as a parameter.\r\n\r\nSee the [`scrollToBottom`](#scrolltobottom) example.\r\n\r\n### `scrollToTop`\r\n\r\nThis method scrolls the list to the top.\r\n\r\nSee the [`scrollToBottom`](#scrolltobottom) example.\r\n\r\n## Styling\r\n\r\n`List` is a layout container; its purpose is to render nested child components.\r\n`List` has no theme variables to change its visual appearance.\r\n",
  "components/Logo":"import { Callout } from \"nextra/components\";\r\n\r\nimport xmluiLogo from  \"../../component-samples/Logo/xmlui-logo.svg\";\r\n\r\n# Logo [#component-logo]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `Logo` component represents a logo or a brand symbol. Usually, you use this component in the [`AppHeader`](./AppHeader.mdx#logotemplate).\r\n\r\nYou can learn more about using logos in application layouts in the [App Component](/learning/using-components/app-component/) article.\r\n\r\n## Using Logo\r\n\r\nThe framework checks the application manifest for a logo resource (SVG file).\r\nIf found, it loads and displays it in the Logo component.\r\n\r\nThis is a sample manifest that shows a logo definition:\r\n\r\n```json copy {5}\r\n{\r\n  \"name\": \"Tutorial\",\r\n  \"version\": \"0.0.1\",\r\n  \"resources\": {\r\n    \"logo\": \"resources/xmlui-logo.svg\",\r\n    \"favicon\": \"resources/favicon.ico\"\r\n  }\r\n}\r\n```\r\n\r\nIn the following example, you can see a custom logo definition in the `AppHeader` via templating.\r\nThere is a `Heading` with the title text \"MyApp\" before the logo.\r\nIt also uses the `Logo` component within the template definition:\r\n\r\n```xmlui copy {6}\r\n<App layout=\"horizontal\">\r\n  <AppHeader>\r\n    <property name=\"logoTemplate\">\r\n       <Fragment>\r\n         <Heading level=\"h2\" value=\"MyApp\"/>\r\n         <Logo/>\r\n       </Fragment>\r\n    </property>\r\n  </AppHeader>\r\n  <NavPanel>\r\n    <NavLink label=\"Home\" to=\"/\" icon=\"home\"/>\r\n  </NavPanel>\r\n  <Pages defaultRoute=\"/\">\r\n    <Page url=\"/\">\r\n      <CHStack>\r\n        (Sample content)\r\n      </CHStack>\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\nThe markup displays the app's logo:\r\n\r\n<Playground\r\n  name=\"Example: using Logo\"\r\n  height={200}\r\n  resources={{ logo: xmluiLogo }}\r\n  app={`\r\n    <App layout=\"horizontal\">\r\n      <AppHeader>\r\n        <property name=\"logoTemplate\">\r\n           <Fragment>\r\n             <Heading level=\"h2\" value=\"MyApp\"/>\r\n             <Logo/>\r\n           </Fragment>\r\n        </property>\r\n      </AppHeader>\r\n      <NavPanel>\r\n          <NavLink label=\"Home\" to=\"/\" icon=\"home\"/>\r\n      </NavPanel>\r\n      <Pages defaultRoute=\"/\">\r\n          <Page url=\"/\">\r\n            <CHStack>\r\n              (Sample content)\r\n            </CHStack>\r\n          </Page>\r\n      </Pages>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\nThis component does not have any properties.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/Markdown":"import { Callout } from \"nextra/components\";\r\n\r\n# Markdown [#component-markdown]\r\n\r\n`Markdown` displays plain text styled using markdown syntax.\r\n\r\n## Using Markdown\r\n\r\nThe `Markdown` component allows you to specify its textual content in two ways:\r\n- You can leverage the `content` property. Use this property when the text you provide is not static but a result of calculations (you assemble the text or get it from other components).\r\n- You declare nested text.\r\n\r\nAs whitespaces (such as spaces and line breaks) have significance in Markdown, you should wrap the text between the `<![CDATA[` and `]]>` XMLUI tags, which preserve all whitespaces.\r\n\r\nIndentation is also essential in Markdown. Start the markdown text in the first column as the following sample shows:\r\n\r\n```xmlui copy\r\n<App layout=\"horizontal-sticky\">\r\n  <Markdown>\r\n    <![CDATA[\r\n# My Adventure in Markdown Land\r\n\r\n## The Beginning\r\n\r\nIn the bustling city of Markdownville, I embarked on a journey to discover the \r\nsecrets of Markdown. My adventure started in the heart of the city, where the \r\nfirst rule of Markdown was inscribed in stone:\r\n\r\n\"To create a heading, add number signs (#) in front of a word or phrase.\r\nThe number of number signs you use should correspond to the heading level.\"\r\n\r\nHeadings give hierarchy to text but sometimes **emphasizing something with bold \r\nis just enough**.\r\n\r\nIf not bold, then simply *italic letters give visual diversity*.\r\n\r\n## Exploring Blockquotes\r\n\r\nAs I journeyed further, I encountered blockquotes that spoke of the beauty of \r\nsimplicity:\r\n\r\n> Blockquotes can contain multiple paragraphs. Add a > on the blank lines between \r\n> the paragraphs.\r\n> > Like so\r\n\r\n## The Power of Lists\r\n\r\nI also discovered the power of lists, which were as versatile as the inhabitants \r\nof Markdownville:\r\n\r\n- This is the first list item.\r\n- Here's the second list item.\r\n    - A subsection here would look great below the second list item.\r\n- And here's the third list item.\r\n\r\nI found that I can create ordered lists as well:\r\n\r\n1. The first item.\r\n2. The second item.\r\n3. Third item.\r\n\r\n## The Image\r\n\r\nText is not the only thing I found through my journey. The power of images \r\nmaterialized in front of me:\r\n\r\n![Colors image](/resources/images/components/markdown/colors.png)\r\n\r\n## Navigating with Hyperlinks\r\n\r\nHyperlinks, like signposts, marked other paths that branched off from the road \r\nI was treading:\r\n- [Source of all truth](https://github.com/xmlui-com/xmlui)\r\n- [Back to where we started](https://ncrm.azurewebsites.net/)\r\n\r\n## The Horizontal Rule\r\n\r\nIn the quiet corners of Markdownville, I found the Horizontal Rule, a line that \r\nsymbolizes the end of a section:\r\n\r\n***\r\n    ]]>\r\n  </Markdown>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  height={500}\r\n  horizontal={true}\r\n  name=\"Example: setting text\"\r\n  app={`\r\n<App layout=\"horizontal-sticky\">\r\n  <Markdown>\r\n    <![CDATA[\r\n# My Adventure in Markdown Land\r\n\r\n## The Beginning\r\n\r\nIn the bustling city of Markdownville, I embarked on a journey to discover the secrets of Markdown.\r\nMy adventure started in the heart of the city, where the first rule of Markdown was inscribed in stone:\r\n\r\n\"To create a heading, add number signs (#) in front of a word or phrase.\r\nThe number of number signs you use should correspond to the heading level.\"\r\n\r\nHeadings give hierarchy to text but sometimes **emphasizing something with bold is just enough**.\r\n\r\nIf not bold, then simply *italic letters give visual diversity*.\r\n\r\n## Exploring Blockquotes\r\n\r\nAs I journeyed further, I encountered blockquotes that spoke of the beauty of simplicity:\r\n\r\n> Blockquotes can contain multiple paragraphs. Add a > on the blank lines between the paragraphs.\r\n> > Like so\r\n\r\n## The Power of Lists\r\n\r\nI also discovered the power of lists, which were as versatile as the inhabitants of Markdownville:\r\n\r\n- This is the first list item.\r\n- Here's the second list item.\r\n    - A subsection here would look great below the second list item.\r\n- And here's the third list item.\r\n\r\nI found that I can create ordered lists as well:\r\n\r\n1. The first item.\r\n2. The second item.\r\n3. Third item.\r\n\r\n## The Image\r\n\r\nText is not the only thing I found through my journey. The power of images materialized in front of me:\r\n\r\n![Colors image](/resources/images/components/markdown/colors.png)\r\n\r\n## Navigating with Hyperlinks\r\n\r\nHyperlinks, like signposts, marked other paths that branched off from the road I was treading:\r\n- [Source of all truth](https://github.com/xmlui-com/xmlui)\r\n- [Back to where we started](https://ncrm.azurewebsites.net/)\r\n\r\n## The Horizontal Rule\r\n\r\nIn the quiet corners of Markdownville, I found the Horizontal Rule, a line that symbolizes the end of a section:\r\n\r\n***\r\n    ]]>\r\n  </Markdown>\r\n</App>\r\n  `}\r\n/>\r\n\r\nThe `Markdown` component supports these syntax elements:\r\n- Heading\r\n- Bold\r\n- Italic\r\n- Strikethrough\r\n- Blockquote\r\n- Ordered List\r\n- Unordered List\r\n- Code\r\n- Horizontal Rule\r\n- Link\r\n- Image\r\n\r\nWIP elements:\r\n- Table (GFM syntax)\r\n- Tasklist (GFM syntax)\r\n- Footnote (GFM syntax)\r\n\r\n> **GFM** stands for Github Flavored Markdown\r\n\r\nThese are also found in the **Basic Syntax** table of [this markdown guide](https://www.markdownguide.org/cheat-sheet/).\r\nNote that further components may be added later,\r\nlike elements from the [Github Flavored Markdown or GFM syntax](https://github.github.com/gfm/).\r\n\r\n## Binding Expressions\r\n\r\nOur `Markdown` component is capable of evaluating binding expressions just as other XMLUI components.\r\nUse the `${}` syntax to wrap expressions that need to be evaluated.\r\n\r\nEmpty `${}` expressions are removed.\r\nObjects, functions and arrays will be stringified if you place them in `Markdown`.\r\nFunction calls are executed and their return values inlined as strings into markdown.\r\n\r\n```xmlui copy {5-9}\r\n<App>\r\n  <variable name=\"x\" value=\"{() => { return 'testing' }}\" />\r\n  <Markdown>\r\n    <![CDATA[\r\n  Empty elements are removed: ${}\r\n\r\n  Nested objects and functions are handled: ${ { a: 1, b: () => {} } }\r\n\r\n  Function calls are executed: ${x()}\r\n    ]]>\r\n  </Markdown>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: binding expressions syntax\"\r\n  app={`\r\n  <App>\r\n    <variable name=\"x\" value=\"{() => { return 'testing' }}\" />\r\n    <Markdown>\r\n      <![CDATA[\r\n    Empty elements are removed: \\${}\r\n\r\n    Nested objects and functions are handled: \\${ { a: 1, b: () => {} } }\r\n\r\n    Function calls are executed: \\${x()}\r\n      ]]>\r\n    </Markdown>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\n### `content`\r\n\r\nThis property sets the markdown content to display.\r\n\r\nUse this property when the text you provide is not static but a result of calculations (you assemble the text or get it from other components).\r\n\r\n```xmlui copy\r\n<App>\r\n  <VStack>\r\n    <Items data=\"{[\r\n      {id: 123, name: 'Peter Parker'},\r\n      {id: 234, name: 'Clark Kent'},\r\n      {id: 345, name: 'Bruce Wayne'}\r\n    ]}\">\r\n      <Markdown content=\"{'## ' + $item.id + '\\\\n*' + $item.name + '*' }\"/>\r\n    </Items>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: content property\"\r\n  app={`\r\n    <App>\r\n      <VStack>\r\n        <Items data=\"{[\r\n          {id: 123, name: 'Peter Parker'},\r\n          {id: 234, name: 'Clark Kent'},\r\n          {id: 345, name: 'Bruce Wayne'}\r\n        ]}\">\r\n          <Markdown content=\"{'## ' + $item.id + '\\\\n*' + $item.name + '*' }\"/>\r\n        </Items>\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `removeIndents (default: true)`\r\n\r\nThis boolean property specifies whether leading indents should be removed from the markdown content. If set to `true`, the shortest indent found at the start of the content lines is removed from the beginning of every line.\r\n\r\n```xmlui copy /removeIndents=\"true\"/\r\n<App layout=\"horizontal-sticky\" padding=\"1rem\">\r\n  <Markdown removeIndents=\"true\">\r\n    <![CDATA[\r\n      # My Adventure in Markdown Land\r\n\r\n      ## The Beginning\r\n\r\n      In the bustling city of Markdownville, I embarked on a journey to \r\n      discover the secrets of Markdown. My adventure started in the heart \r\n      of the city, where the first rule of Markdown was inscribed in stone.\r\n    ]]>\r\n  </Markdown>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  horizontal={true}\r\n  name=\"Example: removeIndents property\"\r\n  app={`\r\n<App layout=\"horizontal-sticky\" padding=\"1rem\">\r\n  <Markdown removeIndents=\"true\">\r\n    <![CDATA[\r\n      # My Adventure in Markdown Land\r\n\r\n      ## The Beginning\r\n\r\n      In the bustling city of Markdownville, I embarked on a journey to discover the secrets of Markdown.\r\n      My adventure started in the heart of the city, where the first rule of Markdown was inscribed in stone:\r\n    ]]>\r\n  </Markdown>\r\n</App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe component itself cannot be styled.\r\n\r\nHowever, the components that are used render the final text, have customizable style variables.\r\n\r\nThe components used to render the final styled text are either used as regular XMLUI components.\r\nSee the links for styling details:\r\n[`Text`](./Text.mdx#styling)\r\n[`Heading`](./Heading.mdx#styling)\r\n[`Link`](./Link.mdx#styling)\r\n[`Image`](./Image.mdx#styling)\r\n[`Checkbox`](./Checkbox.mdx#styling)\r\n\r\nOr they are components specifically created and used in the Markdown component.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nComponents falling into this latter case are only available under the `Markdown` component.\r\nThey cannot be instantiated in regular XMLUI.\r\n</Callout>\r\n\r\nThese markdown-specific components are the following:\r\n\r\n### Blockquote\r\n\r\nA blockquote is a sentence or paragraph specially formatted to draw attention to the reader. You can use the following theme variables with blockquotes:\r\n\r\n- `accent-Blockquote`: sets the color of the strip running down on the left side of the block\r\n- `backgroundColor-Blockquote`: sets the background color\r\n- `margin-Blockquote`: sets the margin\r\n- `padding-Blockquote`: sets the padding\r\n- `borderRadius-Blockquote`: sets the radius of the border for the block\r\n- `boxShadow-Blockquote`: specifies the x offset, y offset, blur radius and color for the block shadow\r\n\r\nUse a theme that sets these theme variable values:\r\n\r\n```json copy\r\n{\r\n  \"id\": \"custom\",\r\n  \"name\": \"Custom Theme\",\r\n  \"themeVars\": {\r\n    \"accent-Blockquote\": \"transparent\",\r\n    \"backgroundColor-Blockquote\": \"rgba(27, 195, 50, 0.3)\",\r\n    \"margin-Blockquote\": \"8px\",\r\n    \"padding-Blockquote\": \"16px\",\r\n    \"borderRadius-Blockquote\": \"8px\",\r\n    \"boxShadow-Blockquote\": \"5px 10px 5px green\"\r\n  }\r\n}\r\n```\r\n\r\n```xmlui copy\r\n<App>\r\n  <Markdown>\r\n    <![CDATA[\r\n> This text is in a blockquote.\r\n> > This one has an even bigger emphasis, since it is nested.\r\n> > > This one is nested even deeper.\r\n> Continue the original block.\r\n    ]]>\r\n  </Markdown>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling a horizontal rule\"\r\n  height={260}\r\n  app={`\r\n<App>\r\n  <Markdown>\r\n    <![CDATA[\r\n> This text is in a blockquote.\r\n> > This one has an even bigger emphasis, since it is nested.\r\n> > > This one is nested even deeper.\r\n> Continue the original block.\r\n    ]]>\r\n  </Markdown>\r\n</App>\r\n  `}\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"accent-Blockquote\": \"transparent\",\r\n        \"backgroundColor-Blockquote\": \"rgba(27, 195, 50, 0.3)\",\r\n        \"margin-Blockquote\": \"8px\",\r\n        \"padding-Blockquote\": \"16px\",\r\n        \"borderRadius-Blockquote\": \"8px\",\r\n        \"boxShadow-Blockquote\": \"5px 10px 5px green\"\r\n      },\r\n    },\r\n  ]}\r\n/>\r\n\r\n### HorizontalRule\r\n\r\nThis element visually separates content. The following theme variables influence how the rule looks like:\r\n\r\n- `borderColor-HorizontalRule`: changes the color\r\n- `borderStyle-HorizontalRule`: changes the border style to any [CSS border style](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style), default is `solid`\r\n- `borderWidth-HorizontalRule`: changes how tall the rule should be, default is 1px\r\n\r\nCheck this sample:\r\n\r\n```json copy\r\n{\r\n  \"id\": \"custom\",\r\n  \"name\": \"Custom Theme\",\r\n  \"themeVars\": {\r\n    \"borderColor-HorizontalRule\": \"red\",\r\n    \"borderWidth-HorizontalRule\": \"8px\",\r\n    \"borderStyle-HorizontalRule\": \"dotted\"\r\n  }\r\n}\r\n```\r\n\r\n```xmlui copy\r\n<App>\r\n  <Markdown>\r\n    <![CDATA[\r\nSection 1\r\n\r\n---\r\n\r\nSection 2\r\n    ]]>\r\n  </Markdown>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling a horizontal rule\"\r\n  app={`\r\n<App>\r\n  <Markdown>\r\n    <![CDATA[\r\nSection 1\r\n\r\n---\r\n\r\nSection 2\r\n    ]]>\r\n  </Markdown>\r\n</App>\r\n  `}\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"borderColor-HorizontalRule\": \"red\",\r\n        \"borderWidth-HorizontalRule\": \"8px\",\r\n        \"borderStyle-HorizontalRule\": \"dotted\"\r\n      },\r\n    },\r\n  ]}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nThe `HorizontalRule` component looks similar to the `ContentSeparator` component.\r\nThey are not the same and are styled separately.\r\n</Callout>\r\n\r\n### ListItem\r\n\r\nThese are the supported theme variables in an ordered or unordered list:\r\n\r\n- `paddingLeft-ListItem`: determines how big the gap should be between the list item contents and the item marker\r\n\r\nHere is a sample:\r\n\r\n```json copy\r\n{\r\n  \"id\": \"custom\",\r\n  \"name\": \"Custom Theme\",\r\n  \"themeVars\": {\r\n    \"paddingLeft-ListItem\": \"40px\"\r\n  }\r\n}\r\n```\r\n\r\n```xmlui copy\r\n<App>  \r\n  <Markdown>\r\n    <![CDATA[\r\n1. Get in the driver's seat and buckle up\r\n2. Insert the key into the ignition\r\n3. Put the gearstick in either the \"P\" or \"N\" position\r\n4. Twist the ignition key to start the car\r\n    ]]>\r\n  </Markdown>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling a list item\"\r\n  app={`\r\n<App>  \r\n  <Markdown>\r\n    <![CDATA[\r\n1. Get in the driver's seat and buckle up\r\n2. Insert the key into the ignition\r\n3. Put the gearstick in either the \"P\" or \"N\" position\r\n4. Twist the ignition key to start the car\r\n    ]]>\r\n  </Markdown>\r\n</App>\r\n  `}\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"paddingLeft-ListItem\": \"40px\"\r\n      },\r\n    },\r\n  ]}\r\n/>\r\n\r\n### OrderedList\r\n\r\nThis element represents an ordered list with Arabic numbers as markers.\r\nLists can be nested into one another; the counter will start anew if nested. Ordered lists support these theme variables:\r\n\r\n- `paddingLeft-OrderedList`: determines how much space the list should have from the left\r\n\r\nCheck this sample:\r\n\r\n```json copy\r\n{\r\n  \"id\": \"custom\",\r\n  \"name\": \"Custom Theme\",\r\n  \"themeVars\": {\r\n    \"paddingLeft-OrderedList\": \"80px\"\r\n  }\r\n}\r\n```\r\n\r\n```xmlui copy\r\n<App>\r\n  <Markdown>\r\n    <![CDATA[\r\n1. Get in the driver's seat and buckle up\r\n2. Insert the key into the ignition\r\n3. Put the gearstick in either the \"P\" or \"N\" position\r\n4. Twist the ignition key to start the car\r\n    ]]>\r\n  </Markdown>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling an ordered list\"\r\n  app={`\r\n<App>\r\n  <Markdown>\r\n    <![CDATA[\r\n1. Get in the driver's seat and buckle up\r\n2. Insert the key into the ignition\r\n3. Put the gearstick in either the \"P\" or \"N\" position\r\n4. Twist the ignition key to start the car\r\n    ]]>\r\n  </Markdown>\r\n</App>\r\n  `}\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"paddingLeft-OrderedList\": \"80px\"\r\n      },\r\n    },\r\n  ]}\r\n/>\r\n\r\n### UnorderedList\r\n\r\nThis element represents an unordered list with marker symbols. Lists can be nested into one another; different levels of nested lists will have different markers. These are the theme variables unordered lists support:\r\n\r\n- `paddingLeft-UnorderedList`: determines how much space the list should have from the left\r\n\r\nLook at this example:\r\n\r\n```json copy\r\n{\r\n  \"id\": \"custom\",\r\n  \"name\": \"Custom Theme\",\r\n  \"themeVars\": {\r\n    \"paddingLeft-UnorderedList\": \"80px\"\r\n  }\r\n}\r\n```\r\n\r\n```xmlui copy\r\n<App>\r\n  <Markdown>\r\n    <![CDATA[\r\n- Get in the driver's seat and buckle up\r\n- Insert the key into the ignition\r\n- Put the gearstick in either the \"P\" or \"N\" position\r\n- Twist the ignition key to start the car\r\n- Know that cars may refuse to start for any number of reasons\r\n    - Consult your car's manual\r\n    - Take your car to a mechanic\r\n        - If all else fails, troubleshoot the car yourself\r\n    ]]>\r\n  </Markdown>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling an unordered list\"\r\n  app={`\r\n<App>\r\n  <Markdown>\r\n    <![CDATA[\r\n- Get in the driver's seat and buckle up\r\n- Insert the key into the ignition\r\n- Put the gearstick in either the \"P\" or \"N\" position\r\n- Twist the ignition key to start the car\r\n- Know that cars may refuse to start for any number of reasons\r\n    - Consult your car's manual\r\n    - Take your car to a mechanic\r\n        - If all else fails, troubleshoot the car yourself\r\n    ]]>\r\n  </Markdown>\r\n</App>\r\n  `}\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"paddingLeft-UnorderedList\": \"80px\"\r\n      },\r\n    },\r\n  ]}\r\n/>\r\n",
  "components/MenuItem":"import { Callout } from \"nextra/components\";\r\n\r\n# MenuItem [#component-menuitem]\r\n\r\nThis property represents a leaf item in a menu hierarchy. Clicking the item triggers an action.\r\n\r\nSee the [`DropdownMenu` component](./DropdownMenu) for using this component in menus.\r\n\r\n## Properties\r\n\r\n### `active (default: false)`\r\n\r\nThis property indicates if the specified menu item is active.\r\n\r\n```xmlui copy /active=\"true\"/\r\n<App>\r\n  <DropdownMenu label=\"DropdownMenu\">\r\n    <MenuItem icon=\"drive\" active=\"true\">Item 1</MenuItem>\r\n    <MenuItem icon=\"trash\">Item 2</MenuItem>\r\n    <MenuItem icon=\"email\">Item 3</MenuItem>\r\n  </DropdownMenu>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: icon\"\r\n  height={200}\r\n  app={`\r\n    <App>\r\n      <DropdownMenu label=\"DropdownMenu\">\r\n        <MenuItem icon=\"drive\" active=\"true\">Item 1</MenuItem>\r\n        <MenuItem icon=\"trash\">Item 2</MenuItem>\r\n        <MenuItem icon=\"email\">Item 3</MenuItem>\r\n      </DropdownMenu>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `icon`\r\n\r\nThis property names an optional icon to display with the menu item.\r\n\r\n```xmlui copy /icon/\r\n<App>\r\n  <DropdownMenu label=\"DropdownMenu\">\r\n    <MenuItem icon=\"drive\">Item 1</MenuItem>\r\n    <MenuItem icon=\"trash\">Item 2</MenuItem>\r\n    <MenuItem icon=\"email\">Item 3</MenuItem>\r\n  </DropdownMenu>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: icon\"\r\n  height={200}\r\n  app={`\r\n    <App>\r\n      <DropdownMenu label=\"DropdownMenu\">\r\n        <MenuItem icon=\"drive\">Item 1</MenuItem>\r\n        <MenuItem icon=\"trash\">Item 2</MenuItem>\r\n        <MenuItem icon=\"email\">Item 3</MenuItem>\r\n      </DropdownMenu>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `iconPosition (default: \"start\")`\r\n\r\nThis property allows you to determine the position of the icon displayed in the menu item.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `start` | The icon will appear at the start (left side when the left-to-right direction is set) **(default)** |\r\n| `end` | The icon will appear at the end (right side when the left-to-right direction is set) |\r\n\r\n```xmlui copy /iconPosition/\r\n<App>\r\n  <DropdownMenu label=\"DropdownMenu\">\r\n    <MenuItem icon=\"drive\" iconPosition=\"start\">Item 1</MenuItem>\r\n    <MenuItem icon=\"trash\" iconPosition=\"end\">Item 2</MenuItem>\r\n    <MenuItem icon=\"email\">Item 3</MenuItem>\r\n  </DropdownMenu>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: iconPosition\"\r\n  height={200}\r\n  app={`\r\n<App>\r\n  <DropdownMenu label=\"DropdownMenu\">\r\n    <MenuItem icon=\"drive\" iconPosition=\"start\">Item 1</MenuItem>\r\n    <MenuItem icon=\"trash\" iconPosition=\"end\">Item 2</MenuItem>\r\n    <MenuItem icon=\"email\">Item 3</MenuItem>\r\n  </DropdownMenu>\r\n</App>\r\n  `}\r\n/>\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\n### `to`\r\n\r\nThis property defines the URL of the menu item. If this property is defined (and the `click` event does not have an event handler), clicking the menu item navigates to this link.\r\n\r\n## Events\r\n\r\n### `click`\r\n\r\nThis event is triggered when the MenuItem is clicked.\r\n\r\nThis event is fired when the user clicks the menu item. With an event handler, you can define how to respond to the user's click. If this event does not have an associated event handler but the `to` property has a value, clicking the component navigates the URL set in `to`.\r\n\r\nIf both properties are defined, `click` takes precedence.\r\n\r\n```xmlui copy /onClick/\r\n<DropdownMenu label=\"DropdownMenu\">\r\n  <MenuItem onClick=\"toast('Item 1 clicked')\">Item 1</MenuItem>\r\n  <MenuItem onClick=\"toast('Item 2 clicked')\">Item 2</MenuItem>\r\n  <MenuItem onClick=\"toast('Item 3 clicked')\">Item 3</MenuItem>\r\n</DropdownMenu>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: iconPosition\"\r\n  height={200}\r\n  app={`\r\n<App>\r\n  <DropdownMenu label=\"DropdownMenu\">\r\n    <MenuItem onClick=\"toast('Item 1 clicked')\">Item 1</MenuItem>\r\n    <MenuItem onClick=\"toast('Item 2 clicked')\">Item 2</MenuItem>\r\n    <MenuItem onClick=\"toast('Item 3 clicked')\">Item 3</MenuItem>\r\n  </DropdownMenu>\r\n</App>\r\n  `}\r\n/>\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `MenuItem` component uses these theme variables to customize its appearance:\r\n- `color`\r\n- `backgroundColor`\r\n- `fontFamily`\r\n- `fontSize`\r\n- `gap`: The gap between the item label and icon\r\n- `paddingHorizontal`\r\n- `paddingVertical`\r\n\r\nThe `color` and `backgroundColor` theme variables have variants for the `--hover` state.\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-MenuItem | $backgroundColor-dropdown-item | $backgroundColor-dropdown-item |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-MenuItem--active | $backgroundColor-dropdown-item--active | $backgroundColor-dropdown-item--active |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-MenuItem--active--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-MenuItem--hover | $backgroundColor-dropdown-item--hover | $backgroundColor-dropdown-item--hover |\r\n| [color](../styles-and-themes/common-units/#color)-MenuItem | $textColor-primary | $textColor-primary |\r\n| [color](../styles-and-themes/common-units/#color)-MenuItem--active | $color-primary | $color-primary |\r\n| [color](../styles-and-themes/common-units/#color)-MenuItem--active--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-MenuItem--hover | inherit | inherit |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-MenuItem | $fontFamily | $fontFamily |\r\n| [fontSize](../styles-and-themes/common-units/#size)-MenuItem | $fontSize-small | $fontSize-small |\r\n| [gap](../styles-and-themes/common-units/#size)-MenuItem | $space-2 | $space-2 |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-MenuItem | $space-3 | $space-3 |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-MenuItem | $space-2 | $space-2 |\r\n",
  "components/MenuSeparator":"import { Callout } from \"nextra/components\";\r\n\r\n# MenuSeparator [#component-menuseparator]\r\n\r\nThis component displays a separator line between menu items.\r\n\r\n## Properties\r\n\r\nThis component does not have any properties.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [color](../styles-and-themes/common-units/#color)-MenuSeparator | $borderColor-dropdown-item | $borderColor-dropdown-item |\r\n| [height](../styles-and-themes/common-units/#size)-MenuSeparator | 1px | 1px |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-MenuSeparator | $space-1 | $space-1 |\r\n| [margin](../styles-and-themes/common-units/#size)Horizontal-MenuSeparator | 12px | 12px |\r\n| [marginTop](../styles-and-themes/common-units/#size)-MenuSeparator | $space-1 | $space-1 |\r\n| [width](../styles-and-themes/common-units/#size)-MenuSeparator | 100% | 100% |\r\n",
  "components/ModalDialog":"import { Callout } from \"nextra/components\";\r\n\r\n# ModalDialog [#component-modaldialog]\r\n\r\nThe `ModalDialog` component defines a modal dialog UI element that can be displayed over the existing UI - triggered by some action.\r\n\r\nThe component provides context values with which you can access some internal properties:\r\n\r\n- `$param`: This value represents the first parameters passed to the `open()` method to display the modal dialog.\r\n- `$params`: This value represents the array of parameters passed to the `open()` method. You can use `$params[0]` to access the first and `$params[1]` to access the second (and so on) parameters. `$param` is the same as `$params[0]`.\r\n\r\n## Using the Component\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nWhen using the examples in this article, pop them out to the full screen to check how they work.\r\n</Callout>\r\n\r\nOpening and closing the modal dialog can be done in two ways depending on circumstances.\r\n\r\n### With Imperative API\r\n\r\nEvent-driven display of the `ModalDialog` dialog is also possible using imperative API.\r\n\r\nThis method is a good way to toggle the display of the `ModalDialog` if no deep linking is necessary.\r\nIt also lends to itself that these events can be triggered programmatically from codebehind.\r\n\r\nNote the `id` property of the `ModalDialog` in the example below and how it is used to call the [`open`](#open-api) and [`close`](#close-api)\r\noperations of the component in the `onClick` event handlers.\r\n\r\n```xmlui copy\r\n<App height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n  <Button label=\"Open Dialog\" onClick=\"dialog.open()\" />\r\n  <ModalDialog id=\"dialog\" title=\"Example Dialog\">\r\n    <Button label=\"Close Dialog\" onClick=\"dialog.close()\" />\r\n  </ModalDialog>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: imperative API\"\r\n  height={120}\r\n  app={`\r\n  <App height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n    <Button label=\"Open Dialog\" onClick=\"dialog.open()\" />\r\n    <ModalDialog id=\"dialog\" title=\"Example Dialog\">\r\n      <Button label=\"Close Dialog\" onClick=\"dialog.close()\" />\r\n    </ModalDialog>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nThe imperative approach is perhaps the most intuitive way to display and hide modal dialogs.\r\n</Callout>\r\n\r\n### With `when`\r\n\r\nThe `when` property accepts a primitive boolean or a binding expression resolving to a boolean value to toggle the display of a component.\r\n\r\nUsing the `when` property in a `ModalDialog` dialog component is commonly used with deep linking:\r\nshowing the modal in conjunction with an updated URL so that the opened state of the modal dialog is referable.\r\n\r\n```xmlui copy /when=\"{isDialogShown}\"/\r\n<App height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n  <variable name=\"isDialogShown\" value=\"{false}\"/>\r\n  <Button label=\"Open Dialog\" onClick=\"isDialogShown = true\" />\r\n  <ModalDialog \r\n    when=\"{isDialogShown}\" \r\n    title=\"Example Dialog\" \r\n    onClose=\"isDialogShown = false\" />\r\n</App>\r\n```\r\n\r\nClick on the button in the demo below to open the modal dialog. Click anywhere outside the opened dialog or the close button to close it.\r\n\r\n<Playground\r\n  name=\"Example: when\"\r\n  height={120}\r\n  app={`\r\n  <App height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n    <variable name=\"isDialogShown\" value=\"{false}\"/>\r\n    <Button label=\"Open Dialog\" onClick=\"isDialogShown = true\" />\r\n    <ModalDialog when=\"{isDialogShown}\" title=\"Example Dialog\" onClose=\"isDialogShown = false\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\nSetting the `when` property is the most straightforward way for deep-linked modals. If you use deep links with query parameters to show a particular dialog, you can set the `when` property to show or hide the dialog according to parameter values.\r\n\r\n### The `ModalDialog` as a Container\r\n\r\nThe `ModalDialog` component is also a container such as the [`Card`](./Card.mdx), that it also accepts child components.\r\n\r\n```xmlui copy {3-8}\r\n<App height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n  <Button label=\"Open Dialog\" onClick=\"dialog.open()\" />\r\n  <ModalDialog id=\"dialog\" title=\"Example Dialog\">\r\n    <Form data=\"{{ firstName: 'Billy', lastName: 'Bob' }}\">\r\n      <FormItem bindTo=\"firstName\" required=\"true\" />\r\n      <FormItem bindTo=\"lastName\" required=\"true\" />\r\n    </Form>\r\n  </ModalDialog>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: children\"\r\n  height={120}\r\n  app={`\r\n  <App height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n    <Button label=\"Open Dialog\" onClick=\"dialog.open()\" />\r\n    <ModalDialog id=\"dialog\" title=\"Example Dialog\">\r\n      <Form data=\"{{ firstName: 'Billy', lastName: 'Bob' }}\">\r\n        <FormItem bindTo=\"firstName\" required=\"true\" />\r\n        <FormItem bindTo=\"lastName\" required=\"true\" />\r\n      </Form>\r\n    </ModalDialog>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nWhen a form is nested into a modal dialog, closing the form (canceling it or completing its submit action) automatically closes the dialog.\r\n</Callout>\r\n\r\n## Properties\r\n\r\n### `closeButtonVisible (default: true)`\r\n\r\nShows (`true`) or hides (`false`) the visibility of the close button on the dialog.\r\n\r\n```xmlui copy /closeButtonVisible=\"false\"/\r\n<App height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n  <Button label=\"Open Dialog\" onClick=\"dialog.open()\" />\r\n  <ModalDialog id=\"dialog\" closeButtonVisible=\"false\" title=\"Example Dialog\" />\r\n</App>\r\n```\r\n\r\nClick outside the dialog to close it.\r\n\r\n<Playground\r\n  name=\"Example: closeButtonVisible\"\r\n  height={120}\r\n  app={`\r\n  <App height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n    <Button label=\"Open Dialog\" onClick=\"dialog.open()\" />\r\n    <ModalDialog id=\"dialog\" closeButtonVisible=\"false\" title=\"Example Dialog\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `fullScreen (default: false)`\r\n\r\nToggles whether the dialog encompasses the whole UI (`true`) or not and has a minimum width and height (`false`).\r\n\r\n```xmlui copy /fullScreen=\"true\"/\r\n<App height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n  <Button label=\"Open Dialog\" onClick=\"dialog.open()\" />\r\n  <ModalDialog id=\"dialog\" fullScreen=\"true\" title=\"Example Dialog\" />\r\n</App>\r\n```\r\n\r\nClick the button to display a full-screen dialog. The icon at the top-right corner of the dialog allows you to close it.\r\n\r\n<Playground\r\n  name=\"Example: fullScreen\"\r\n  height={120}\r\n  app={`\r\n  <App height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n    <Button label=\"Open Dialog\" onClick=\"dialog.open()\" />\r\n    <ModalDialog id=\"dialog\" fullScreen=\"true\" title=\"Example Dialog\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `title`\r\n\r\nProvides a prestyled heading to display the intent of the dialog.\r\n\r\n```xmlui copy {3}\r\n<App height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n  <Button label=\"Open Dialog\" onClick=\"dialog.open()\" />\r\n  <ModalDialog id=\"dialog\" title=\"Example Title\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: title\"\r\n  height={120}\r\n  app={`\r\n  <App height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n    <Button label=\"Open Dialog\" onClick=\"dialog.open()\" />\r\n    <ModalDialog id=\"dialog\" title=\"Example Title\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `close`\r\n\r\nThis event is fired when the close button is pressed or the user clicks outside the `ModalDialog`.\r\n\r\nIn this example, the `close` event counts how many times you closed the dialog:\r\n\r\n```xmlui copy {6-8}\r\n<App height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n  <Button label=\"Open Dialog\" onClick=\"myDialog.open()\" />\r\n  <ModalDialog\r\n    id=\"myDialog\"\r\n    title=\"Example Dialog\"\r\n    var.counter=\"{0}\"\r\n    onClose=\"counter++\">\r\n    <Text value=\"Dialog closed {counter} number of times.\" />\r\n  </ModalDialog>\r\n</App>\r\n```\r\n\r\nOpen and close the dialog several times to test that it changes the counter.\r\n\r\n<Playground\r\n  name=\"Example: open/close events\"\r\n  height={120}\r\n  app={`\r\n  <App height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n    <Button label=\"Open Dialog\" onClick=\"myDialog.open()\" />\r\n    <ModalDialog\r\n      id=\"myDialog\"\r\n      title=\"Example Dialog\"\r\n      var.counter=\"{0}\"\r\n      onClose=\"counter++\">\r\n      <Text value=\"Dialog closed {counter} number of times.\" />\r\n    </ModalDialog>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `open`\r\n\r\nThis event is fired when the `ModalDialog` is opened either via a `when` or an imperative API call (`open()`).\r\n\r\nIn this example, the `open` event counts how many times you opened the dialog:\r\n\r\n```xmlui copy {6-8}\r\n<App height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n  <Button label=\"Open Dialog\" onClick=\"myDialog.open()\" />\r\n  <ModalDialog\r\n    id=\"myDialog\"\r\n    title=\"Example Dialog\"\r\n    var.counter=\"{0}\"\r\n    onOpen=\"counter++\">\r\n    <Text value=\"Dialog opened {counter} number of times.\" />\r\n  </ModalDialog>\r\n</App>\r\n```\r\n\r\nOpen and close the dialog several times to test that it changes the counter.\r\n\r\n<Playground\r\n  name=\"Example: open/close events\"\r\n  height={120}\r\n  app={`\r\n  <App height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n    <Button label=\"Open Dialog\" onClick=\"myDialog.open()\" />\r\n    <ModalDialog\r\n      id=\"myDialog\"\r\n      title=\"Example Dialog\"\r\n      var.counter=\"{0}\"\r\n      onOpen=\"counter++\">\r\n      <Text value=\"Dialog opened {counter} number of times.\" />\r\n    </ModalDialog>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Exposed Methods\r\n\r\n### `close`\r\n\r\nThis method is used to close the `ModalDialog`. Invoke it using `modalId.close()` where `modalId` refers to a `ModalDialog` component.\r\n\r\nSee the [\\`With Imperative API\\`](#with-imperative-api) subsection for an example.\r\n\r\n### `open`\r\n\r\nThis method imperatively opens the modal dialog. You can pass an arbitrary number of parameters to the method. In the `ModalDialog` instance, you can access those with the `$paramq` and `$params` context values.\r\n\r\nSee the [\\`With Imperative API\\`](#with-imperative-api) subsection for an example.\r\n\r\n## Styling\r\n\r\nThe `ModalDialog` component uses these theme variables to customize its appearance:\r\n\r\n- `backgroundColor`\r\n- `backgroundColor-overlay`\r\n- `color`\r\n- `fontFamily`\r\n- `height`\r\n- `marginBottom-title`\r\n- `marginTop`,\r\n- `maxWidth`\r\n- `minWidth`\r\n- `padding` (including all `padding` variants, such as `paddingLeft` and others)\r\n- `padding-overlay` (including all `padding` variants, such as `paddingLeft` and others)\r\n- `borderRadius`\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-ModalDialog | $backgroundColor-primary | $backgroundColor-primary |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-ModalDialog | $backgroundColor-primary | $backgroundColor-primary |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-overlay-ModalDialog | $backgroundColor-overlay | $backgroundColor-overlay |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-overlay-ModalDialog | $backgroundColor-overlay | $backgroundColor-overlay |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-ModalDialog | $borderRadius | $borderRadius |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-ModalDialog | $borderRadius | $borderRadius |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-ModalDialog | $fontFamily | $fontFamily |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-ModalDialog | $fontFamily | $fontFamily |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-title-ModalDialog | 0 | 0 |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-title-ModalDialog | 0 | 0 |\r\n| [maxWidth](../styles-and-themes/common-units/#size)-ModalDialog | 450px | 450px |\r\n| [maxWidth](../styles-and-themes/common-units/#size)-ModalDialog | 450px | 450px |\r\n| [minWidth](../styles-and-themes/common-units/#size)-ModalDialog | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-ModalDialog | $space-7 | $space-7 |\r\n| [padding](../styles-and-themes/common-units/#size)-overlay-ModalDialog | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-ModalDialog | $paddingVertical-ModalDialog | $paddingVertical-ModalDialog |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-overlay-ModalDialog | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-ModalDialog | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-overlay-ModalDialog | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-ModalDialog | $paddingHorizontal-ModalDialog | $paddingHorizontal-ModalDialog |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-overlay-ModalDialog | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-ModalDialog | $paddingHorizontal-ModalDialog | $paddingHorizontal-ModalDialog |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-overlay-ModalDialog | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-ModalDialog | $paddingVertical-ModalDialog | $paddingVertical-ModalDialog |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-overlay-ModalDialog | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-ModalDialog | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-overlay-ModalDialog | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-ModalDialog | $textColor-primary | $textColor-primary |\r\n| [textColor](../styles-and-themes/common-units/#color)-ModalDialog | $textColor-primary | $textColor-primary |\r\n",
  "components/NavGroup":"import { Callout } from \"nextra/components\";\r\n\r\n# NavGroup [#component-navgroup]\r\n\r\nThe `NavGroup` component is a container for grouping related navigation targets (`NavLink` components). It can be displayed as a submenu in the App's UI.\r\n\r\n## Using `NavGroup`\r\n\r\nThe primary use of a `NavGroup` is to create an application menu with submenus, as the following example shows:\r\n\r\n```xmlui copy {4,6,10,13}\r\n<App layout=\"condensed\">\r\n  <NavPanel>\r\n    <NavLink label=\"Home\" to=\"/\" icon=\"home\"/>\r\n    <NavGroup label=\"Pages\">\r\n      <NavLink label=\"Page 1\" to=\"/page/1\"/>\r\n      <NavGroup label=\"Page 2-4\">\r\n        <NavLink label=\"Page 2\" to=\"/page/2\"/>\r\n        <NavLink label=\"Page 3\" to=\"/page/3\"/>\r\n        <NavLink label=\"Page 4\" to=\"/page/4\"/>\r\n      </NavGroup>\r\n      <NavLink label=\"Page 5\" to=\"/page/5\"/>\r\n      <NavLink label=\"Page Other\" to=\"/page/Other\"/>\r\n    </NavGroup>\r\n  </NavPanel>\r\n  <Pages defaultRoute=\"/\">\r\n    <Page url=\"/\">\r\n      Home\r\n    </Page>\r\n    <Page url=\"/page/:id\">\r\n      <Text value=\"Page {$routeParams.id}\" />\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\nHere, the highlighted `NavGroup` element nests other `NavLink` and `NavGroup` elements to create a hierarchical menu:\r\n\r\n<Playground\r\n  name=\"Example: NavGroup in App\"\r\n  height={200}\r\n  app={`\r\n    <App layout=\"condensed\">\r\n      <NavPanel>\r\n        <NavLink label=\"Home\" to=\"/\" icon=\"home\"/>\r\n        <NavGroup label=\"Pages\">\r\n          <NavLink label=\"Page 1\" to=\"/page/1\"/>\r\n          <NavGroup label=\"Page 2-4\">\r\n            <NavLink label=\"Page 2\" to=\"/page/2\"/>\r\n            <NavLink label=\"Page 3\" to=\"/page/3\"/>\r\n            <NavLink label=\"Page 4\" to=\"/page/4\"/>\r\n          </NavGroup>\r\n          <NavLink label=\"Page 5\" to=\"/page/5\"/>\r\n          <NavLink label=\"Page Other\" to=\"/page/Other\"/>\r\n        </NavGroup>\r\n      </NavPanel>\r\n      <Pages defaultRoute=\"/\">\r\n        <Page url=\"/\">\r\n          Home\r\n        </Page>\r\n        <Page url=\"/page/:id\">\r\n          <Text value=\"Page {$routeParams.id}\" />\r\n        </Page>\r\n      </Pages>\r\n    </App>\r\n`}\r\n/>\r\n\r\nYou do not have to use `NavGroup` within `NavPanel`; you can nest it into other components to represent a menu, like in the following example:\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack verticalAlignment=\"center\">\r\n    <Text>Use this menu:</Text>\r\n    <NavGroup label=\"Pages\">\r\n      <NavLink label=\"Page 1\" />\r\n      <NavGroup label=\"Page 2-4\">\r\n        <NavLink label=\"Page 2\" />\r\n        <NavLink label=\"Page 3\" />\r\n        <NavLink label=\"Page 4\" />\r\n      </NavGroup>\r\n      <NavLink label=\"Page 5\" />\r\n      <NavLink label=\"Page Other\" />\r\n    </NavGroup>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: NavGroup in a Stack\"\r\n  height={220}\r\n  app={`\r\n    <App>\r\n      <HStack verticalAlignment=\"center\">\r\n        <Text>Use this menu:</Text>\r\n        <NavGroup label=\"Pages\">\r\n          <NavLink label=\"Page 1\" />\r\n          <NavGroup label=\"Page 2-4\">\r\n            <NavLink label=\"Page 2\" />\r\n            <NavLink label=\"Page 3\" />\r\n            <NavLink label=\"Page 4\" />\r\n          </NavGroup>\r\n          <NavLink label=\"Page 5\" />\r\n          <NavLink label=\"Page Other\" />\r\n        </NavGroup>\r\n      </HStack>\r\n    </App>\r\n`}\r\n/>\r\n\r\n### Custom Icons\r\n\r\nYou can also provide custom icons for a specific NavGroup component via it's respective property:\r\n- [iconHorizontalCollapsed](#iconHorizontalCollapsed)\r\n- [iconHorizontalExpanded](#iconHorizontalExpanded)\r\n- [iconVerticalCollapsed](#iconVerticalCollapsed)\r\n- [iconVerticalExpanded](#iconVerticalExpanded)\r\n\r\nSee the following for an example of all variants:\r\n\r\n```xmlui copy /layout=\"horizontal\"/ {3, 5}\r\n<App layout=\"horizontal\">\r\n  <NavGroup icon=\"email\" label=\"Send To\"\r\n    iconVerticalExpanded=\"arrowup\" iconVerticalCollapsed=\"arrowbottom\">\r\n    <NavLink icon=\"arrowup\" label=\"Boss\" />\r\n    <NavGroup icon=\"users\" label=\"Team\"\r\n      iconHorizontalExpanded=\"arrowleft\" iconHorizontalCollapsed=\"arrowright\">\r\n      <NavLink label=\"Jane\" />\r\n      <NavLink label=\"Will\" />\r\n    </NavGroup>\r\n    <NavLink icon=\"cube\" label=\"Support\" />\r\n  </NavGroup>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: custom icons in horizontal layout\"\r\n  height={220}\r\n  app={`\r\n    <App layout=\"horizontal\">\r\n      <NavGroup icon=\"email\" label=\"Send To\"\r\n        iconVerticalExpanded=\"arrowup\" iconVerticalCollapsed=\"arrowbottom\">\r\n        <NavLink icon=\"arrowup\" label=\"Boss\" />\r\n        <NavGroup icon=\"users\" label=\"Team\"\r\n          iconHorizontalExpanded=\"arrowleft\" iconHorizontalCollapsed=\"arrowright\">\r\n          <NavLink label=\"Jane\" />\r\n          <NavLink label=\"Will\" />\r\n        </NavGroup>\r\n        <NavLink icon=\"cube\" label=\"Support\" />\r\n      </NavGroup>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\n### `icon`\r\n\r\nThis property defines an optional icon to display along with the `NavGroup` label.\r\n\r\nThis property defines an optional icon to display along with the `NavGroup` label.\r\n\r\nLook at this example:\r\n\r\n```xmlui copy {3, 5}\r\n<App>\r\n  <HStack verticalAlignment=\"center\">\r\n    <NavGroup icon=\"email\" label=\"Send To\" >\r\n      <NavLink icon=\"arrowup\" label=\"Boss\" />\r\n      <NavGroup icon=\"users\" label=\"Team\">\r\n        <NavLink label=\"Jane\" />\r\n        <NavLink label=\"Will\" />\r\n        <NavLink label=\"Sandra\" />\r\n      </NavGroup>\r\n      <NavLink icon=\"cube\" label=\"Support\" />\r\n    </NavGroup>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: label and icon\"\r\n  height={220}\r\n  app={`\r\n    <App>\r\n      <HStack verticalAlignment=\"center\">\r\n        <NavGroup icon=\"email\" label=\"Send To\" >\r\n          <NavLink icon=\"arrowup\" label=\"Boss\" />\r\n          <NavGroup icon=\"users\" label=\"Team\">\r\n            <NavLink label=\"Jane\" />\r\n            <NavLink label=\"Will\" />\r\n            <NavLink label=\"Sandra\" />\r\n          </NavGroup>\r\n          <NavLink icon=\"cube\" label=\"Support\" />\r\n        </NavGroup>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `iconHorizontalCollapsed (default: \"chevronright\")`\r\n\r\nSet a custom icon to display when the navigation menu is collapsed, is in a **horizontal** app layout, and is in a navigation submenu.\r\n\r\nFor an example, see the [Custom Icons section](#custom-icons).\r\n\r\n### `iconHorizontalExpanded (default: \"chevronleft\")`\r\n\r\nSet a custom icon to display when the navigation menu is expanded, is in a **horizontal** app layout, and is in a navigation submenu.\r\n\r\nFor an example, see the [Custom Icons section](#custom-icons).\r\n\r\n### `iconVerticalCollapsed (default: \"chevrondown\")`\r\n\r\nSet a custom icon to display when the navigation menu is collapsed, is in a **vertical** app layout, or is in a **horizontal** layout and is the top-level navigation item in the menu.\r\n\r\nFor an example, see the [Custom Icons section](#custom-icons).\r\n\r\n### `iconVerticalExpanded (default: \"chevronup\")`\r\n\r\nSet a custom icon to display when the navigation menu is expanded, is in a **vertical** app layout, or is in a **horizontal** layout and is the top-level navigation item in the menu.\r\n\r\nFor an example, see the [Custom Icons section](#custom-icons).\r\n\r\n### `initiallyExpanded`\r\n\r\nThis property defines whether the group is initially expanded or collapsed.\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\nThis property sets the text displayed as the name of the `NavGroup`.\r\n\r\nFor an example, see the [section on the icon property](#icon).\r\n\r\n### `to`\r\n\r\nThis property defines an optional navigation link.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nYou can use these properties to change the styling of the `NavGroup` component:\r\n\r\n- `backgroundColor-dropdown-NavGroup`\r\n- `boxShadow-dropdown-NavGroup`\r\n- `borderRadius-dropdown-NavGroup`\r\n\r\nThe following sample demonstrates using these theme variables and the `Theme` component:\r\n\r\n```xmlui copy\r\n<App>\r\n  <Theme\r\n    backgroundColor-dropdown-NavGroup=\"cyan\"\r\n    boxShadow-dropdown-NavGroup=\"$boxShadow-xxl\"\r\n    borderRadius-dropdown-NavGroup=\"4px\">\r\n    <HStack verticalAlignment=\"center\">\r\n      <NavGroup icon=\"email\" label=\"Send To\" >\r\n        <NavLink icon=\"arrowup\" label=\"Boss\" />\r\n        <NavGroup icon=\"users\" label=\"Team\">\r\n          <NavLink label=\"Jane\" />\r\n          <NavLink label=\"Will\" />\r\n          <NavLink label=\"Sandra\" />\r\n        </NavGroup>\r\n        <NavLink icon=\"cube\" label=\"Support\" />\r\n      </NavGroup>\r\n    </HStack>\r\n  </Theme>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling\"\r\n  height={220}\r\n  app={`\r\n    <App>\r\n      <Theme\r\n        backgroundColor-dropdown-NavGroup=\"cyan\"\r\n        boxShadow-dropdown-NavGroup=\"$boxShadow-xxl\"\r\n        borderRadius-dropdown-NavGroup=\"4px\">\r\n        <HStack verticalAlignment=\"center\">\r\n          <NavGroup icon=\"email\" label=\"Send To\" >\r\n            <NavLink icon=\"arrowup\" label=\"Boss\" />\r\n            <NavGroup icon=\"users\" label=\"Team\">\r\n              <NavLink label=\"Jane\" />\r\n              <NavLink label=\"Will\" />\r\n              <NavLink label=\"Sandra\" />\r\n            </NavGroup>\r\n            <NavLink icon=\"cube\" label=\"Support\" />\r\n          </NavGroup>\r\n        </HStack>\r\n      </Theme>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-dropdown-NavGroup | $backgroundColor-primary | $backgroundColor-primary |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-dropdown-NavGroup | $borderRadius | $borderRadius |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-dropdown-NavGroup | $boxShadow-spread | $boxShadow-spread |\r\n",
  "components/NavLink":"import { Callout } from \"nextra/components\";\r\n\r\n# NavLink [#component-navlink]\r\n\r\nThe `NavLink` component defines a navigation target (app navigation menu item) within the app; it is associated with a particular in-app navigation target (or an external link).\r\n\r\n## Using NavLink\r\n\r\n### `NavLink` Appearance\r\n\r\nYou can use the `label` and `icon` properties of a `NavLink` to set its text and icon to display.\r\nIf you want a custom appearance, you can nest define custom visuals for the `NavLink` by nesting:\r\n\r\n```xmlui copy {6-14}\r\n<App layout=\"horizontal\">\r\n  <AppHeader>\r\n    <H1>MyApp</H1>\r\n  </AppHeader>\r\n  <NavPanel>\r\n    <NavLink to=\"/\">\r\n       <Stack width=\"16px\" height=\"16px\" backgroundColor=\"purple\" />\r\n       Home\r\n    </NavLink>\r\n    <NavLink to=\"/about\">\r\n       <Stack width=\"16px\" height=\"16px\" backgroundColor=\"green\" />\r\n       About\r\n    </NavLink>\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">Home</Page>\r\n    <Page url=\"/about\">About</Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: custom NavLink content\"\r\n  height={250}\r\n  app={`\r\n  <App layout=\"horizontal\">\r\n    <AppHeader>\r\n      <H1>MyApp</H1>\r\n    </AppHeader>\r\n    <NavPanel>\r\n      <NavLink to=\"/\">\r\n        <Stack width=\"16px\" height=\"16px\" backgroundColor=\"purple\" />\r\n        Home\r\n      </NavLink>\r\n      <NavLink to=\"/about\">\r\n        <Stack width=\"16px\" height=\"16px\" backgroundColor=\"green\" />\r\n        About\r\n      </NavLink>\r\n    </NavPanel>\r\n    <Pages>\r\n      <Page url=\"/\">Home</Page>\r\n      <Page url=\"/about\">About</Page>\r\n    </Pages>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### Actions\r\n\r\nBy default, activating (clicking) a link navigates to the target URL.\r\nHowever, you can create a link that executes an explicit action responding to the `click` event instead of the default navigation:\r\n\r\n```xmlui copy {7}\r\n<App layout=\"horizontal\">\r\n  <AppHeader>\r\n    <H1>MyApp</H1>\r\n  </AppHeader>\r\n  <NavPanel>\r\n    <NavLink to=\"/\" label=\"Home\" />\r\n    <NavLink label=\"Danger!\" onClick=\"toast('Be careful with this action!')\" />\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">Home</Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: custom NavLink action\"\r\n  height={250}\r\n  app={`\r\n    <App layout=\"horizontal\">\r\n      <AppHeader>\r\n        <H1>MyApp</H1>\r\n      </AppHeader>\r\n      <NavPanel>\r\n        <NavLink to=\"/\" label=\"Home\" />\r\n        <NavLink label=\"Danger!\" onClick=\"toast('Be careful with this action!')\" />\r\n      </NavPanel>\r\n      <Pages>\r\n        <Page url=\"/\">Home</Page>\r\n      </Pages>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\n### `active (default: false)`\r\n\r\nThis property indicates if the particular navigation is an active link. An active link has a particular visual appearance, provided its [`displayActive`](#displayactive) property is set to `true`.\r\n\r\n### `displayActive (default: true)`\r\n\r\nThis Boolean property indicates if the active state of a link should have a visual indication. Setting it to `false` removes the visual indication of an active link.\r\n\r\n```xmlui copy /displayActive=\"false\"/\r\n<App layout=\"horizontal\">\r\n  <NavPanel>\r\n    <NavLink to=\"/\" label=\"Home\" displayActive=\"false\" />\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">Home</Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: displayActive\"\r\n  height={250}\r\n  app={`\r\n  <App layout=\"horizontal\">\r\n    <NavPanel>\r\n      <NavLink to=\"/\" label=\"Home\" displayActive=\"false\" />\r\n    </NavPanel>\r\n    <Pages>\r\n      <Page url=\"/\">Home</Page>\r\n    </Pages>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `enabled (default: true)`\r\n\r\nThis boolean property value indicates whether the component responds to user events (`true`) or not (`false`).\r\n\r\nIn the following app, the \"Hotels\" link is disabled:\r\n\r\n```xmlui copy {8}\r\n<App layout=\"horizontal\">\r\n  <AppHeader>\r\n    <H1>MyTravel App</H1>\r\n  </AppHeader>\r\n  <NavPanel>\r\n    <NavLink label=\"Home\" to=\"/\" />\r\n    <NavLink label=\"Flights\" to=\"/flights\" />\r\n    <NavLink label=\"Hotels\" to=\"/hotels\" enabled=\"false\" />\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">Home</Page>\r\n    <Page url=\"/flights\">Flights Page</Page>\r\n    <Page url=\"/hotels\">Hotels Page</Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: enabled\"\r\n  height={250}\r\n  app={`\r\n  <App layout=\"horizontal\">\r\n    <AppHeader>\r\n      <H1>MyTravel App</H1>\r\n    </AppHeader>\r\n    <NavPanel>\r\n      <NavLink label=\"Home\" to=\"/\" />\r\n      <NavLink label=\"Flights\" to=\"/flights\" />\r\n      <NavLink label=\"Hotels\" to=\"/hotels\" enabled=\"false\" />\r\n    </NavPanel>\r\n    <Pages>\r\n      <Page url=\"/\">Home</Page>\r\n      <Page url=\"/flights\">Flights Page</Page>\r\n      <Page url=\"/hotels\">Hotels Page</Page>\r\n    </Pages>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `icon`\r\n\r\nThis property allows you to add an icon (specify the icon's name) to the navigation link.\r\n\r\n```xmlui copy {6-7}\r\n<App layout=\"horizontal\">\r\n  <AppHeader>\r\n    <H1>MyApp</H1>\r\n  </AppHeader>\r\n  <NavPanel>\r\n    <NavLink label=\"Home\" to=\"/\" icon=\"home\" />\r\n    <NavLink label=\"Drives\" to=\"/drives\" icon=\"drive\" />\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">Home</Page>\r\n    <Page url=\"/drives\">Drives Page</Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: icon\"\r\n  height={250}\r\n  app={`\r\n  <App layout=\"horizontal\">\r\n    <AppHeader>\r\n      <H1>MyApp</H1>\r\n    </AppHeader>\r\n    <NavPanel>\r\n      <NavLink label=\"Home\" to=\"/\" icon=\"home\" />\r\n      <NavLink label=\"Drives\" to=\"/drives\" icon=\"drive\" />\r\n    </NavPanel>\r\n    <Pages>\r\n      <Page url=\"/\">Home</Page>\r\n      <Page url=\"/drives\">Drives Page</Page>\r\n    </Pages>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\n```xmlui copy /label=\"Home\"/\r\n<App layout=\"horizontal\">\r\n  <NavPanel>\r\n    <NavLink to=\"/\" label=\"Home\" />\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">Home</Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: label\"\r\n  height={250}\r\n  app={`\r\n  <App layout=\"horizontal\">\r\n    <NavPanel>\r\n      <NavLink to=\"/\" label=\"Home\" />\r\n    </NavPanel>\r\n    <Pages>\r\n      <Page url=\"/\">Home</Page>\r\n    </Pages>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `target (default: \"_self\")`\r\n\r\nThis property specifies how to open the clicked link.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `_self` | The link will open in the same frame as it was clicked. **(default)** |\r\n| `_blank` | The link will open in a new window or tab. |\r\n| `_parent` | The link will open in the parent frame. If no parent, behaves as _self. |\r\n| `_top` | The topmost browsing context. The link will open in the full body of the window. If no ancestors, behaves as _self. |\r\n| `_unfencedTop` | Allows embedded fenced frames to navigate the top-level frame, i.e. traversing beyond the root of the fenced frame. |\r\n\r\nThe following example opens the \"About XMLUI\" link in a new tab:\r\n\r\n```xmlui copy {7}\r\n<App layout=\"horizontal\">\r\n  <AppHeader>\r\n    <H1>MyApp</H1>\r\n  </AppHeader>\r\n  <NavPanel>\r\n    <NavLink label=\"Home\" to=\"/\" />\r\n    <NavLink label=\"About XMLUI\" to=\"https://docs.xmlui.com/\" target=\"_blank\" />\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">Home</Page>\r\n    <Page url=\"/drives\">Drives Page</Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: target\"\r\n  height={250}\r\n  app={`\r\n    <App layout=\"horizontal\">\r\n      <AppHeader>\r\n        <H1>MyApp</H1>\r\n      </AppHeader>\r\n      <NavPanel>\r\n        <NavLink label=\"Home\" to=\"/\" />\r\n        <NavLink label=\"About XMLUI\" to=\"https://docs.xmlui.com/\" target=\"_blank\" />\r\n      </NavPanel>\r\n      <Pages>\r\n        <Page url=\"/\">Home</Page>\r\n        <Page url=\"/drives\">Drives Page</Page>\r\n      </Pages>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `to`\r\n\r\nThis property defines the URL of the link.\r\n\r\n### `vertical (default: false)`\r\n\r\nThis property sets how the active status is displayed on the `NavLink` component. If set to true, the indicator is displayed on the side which lends itself to a vertically aligned navigation menu.\r\n\r\nUsually, you do not need to use this property.\r\nHowever, if you create a custom navigation menu component that runs vertically,\r\nyou need to manually set this property for the active state to be displayed properly.\r\n\r\nThe default value for this property is `false`.\r\n\r\n```xmlui copy /vertical=\"true\"/\r\n<App layout=\"horizontal\">\r\n  <NavPanel>\r\n    <NavLink to=\"/\" label=\"Home\" vertical=\"true\" />\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">Home</Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: vertical\"\r\n  height={250}\r\n  app={`\r\n  <App layout=\"horizontal\">\r\n    <NavPanel>\r\n      <NavLink to=\"/\" label=\"Home\" vertical=\"true\" />\r\n    </NavPanel>\r\n    <Pages>\r\n      <Page url=\"/\">Home</Page>\r\n    </Pages>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `click`\r\n\r\nThis event is triggered when the NavLink is clicked.\r\n\r\nThe following example shows a message and navigates to the \"/status\" link after closing the message window:\r\n\r\n<Playground\r\n  name=\"Example: click\"\r\n  height={250}\r\n  app={`\r\n  <App layout=\"horizontal\">\r\n    <AppHeader>\r\n      <H1>MyApp</H1>\r\n    </AppHeader>\r\n    <NavPanel>\r\n      <NavLink to=\"/\" label=\"Home\" />\r\n      <NavLink label=\"Check my status\" onClick=\"\r\n          toast('You will be redirected');\r\n          Actions.navigate('/status');\r\n      \" />\r\n    </NavPanel>\r\n    <Pages>\r\n      <Page url=\"/\">Home</Page>\r\n      <Page url=\"/status\">My Status</Page>\r\n    </Pages>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `Navlink` component uses these theme variables to customize its appearance:\r\n\r\n- `backgroundColor`: (with these states: `--hover`, `--hover--active`, `--active`, `--pressed`, `--pressed-active`)\r\n- `color-indicator`: (with these states: `--hover`, `--active`, `--pressed`)\r\n- `textColor`: (with these states: `--hover`, `--hover--active`, `--active`, `--pressed`, `--pressed-active`)\r\n- `color-icon`\r\n- `fontSize`\r\n- `fontWeight`: (with these states: `--active`, `--pressed`)\r\n- `paddingHorizontal`\r\n- `paddingVertical`\r\n- `borderRadius`\r\n- `borderRadius-indicator`\r\n- `thickness-indicator`\r\n\r\nThe theme variables ending with `indicator` set the indicator's visual properties that sign the link's active state.\r\n\r\nThe following sample theme sets a few visual properties of `NavLink`. It changes the background color to show the hovered state and modifies the indicator's visual appearance. The theme displays the link with an extra bold font:\r\n\r\n```json\r\n{\r\n  \"id\": \"custom\",\r\n  \"name\": \"Custom Theme\",\r\n  \"themeVars\": {\r\n    \"backgroundColor-NavLink--hover\": \"deepskyblue\",\r\n    \"backgroundColor-NavLink--pressed\": \"steelblue\",\r\n    \"backgroundColor-NavLink--active\": \"lightblue\",\r\n    \"backgroundColor-NavLink--hover--active\": \"deepskyblue\",\r\n    \"color-indicator-NavLink--active\": \"purple\",\r\n    \"thickness-indicator-NavLink\": \"4px\",\r\n    \"fontWeight-NavLink\": \"900\"\r\n  }\r\n}\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling\"\r\n  height={250}\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"backgroundColor-NavLink--hover\": \"deepskyblue\",\r\n        \"backgroundColor-NavLink--pressed\": \"steelblue\",\r\n        \"backgroundColor-NavLink--active\": \"lightblue\",\r\n        \"backgroundColor-NavLink--hover--active\": \"deepskyblue\",\r\n        \"color-indicator-NavLink--active\": \"purple\",\r\n        \"thickness-indicator-NavLink\": \"4px\",\r\n        \"fontWeight-NavLink\": \"900\",\r\n      },\r\n    },\r\n  ]}\r\n  app={`\r\n    <App  layout=\"horizontal\">\r\n      <AppHeader>\r\n        <H1>SuperDrive App</H1>\r\n      </AppHeader>\r\n      <NavPanel>\r\n        <NavLink label=\"Home\" to=\"/\" icon=\"home\" />\r\n        <NavLink label=\"Drives\" to=\"/drives\" icon=\"drive\" />\r\n      </NavPanel>\r\n      <Pages>\r\n        <Page url=\"/\">Home</Page>\r\n        <Page url=\"/drives\">Drives Page</Page>\r\n      </Pages>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NavLink | transparent | transparent |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NavLink--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NavLink--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NavLink--hover--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NavLink--pressed | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NavLink--pressed--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)-NavLink | 0px solid $borderColor | 0px solid $borderColor |\r\n| [borderBottom](../styles-and-themes/common-units/#border)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomColor](../styles-and-themes/common-units/#color)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomStyle](../styles-and-themes/common-units/#border-style)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomWidth](../styles-and-themes/common-units/#size)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndEndRadius-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndStartRadius-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalColor](../styles-and-themes/common-units/#color)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalStyle](../styles-and-themes/common-units/#border-style)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalWidth](../styles-and-themes/common-units/#size)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeft](../styles-and-themes/common-units/#border)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftStyle](../styles-and-themes/common-units/#border-style)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftWidth](../styles-and-themes/common-units/#size)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-indicator-NavLink | $borderRadius | $borderRadius |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-NavLink | $borderRadius | $borderRadius |\r\n| [borderRight](../styles-and-themes/common-units/#border)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightStyle](../styles-and-themes/common-units/#border-style)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightWidth](../styles-and-themes/common-units/#size)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartEndRadius-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartStartRadius-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTop](../styles-and-themes/common-units/#border)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopColor](../styles-and-themes/common-units/#color)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopStyle](../styles-and-themes/common-units/#border-style)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopWidth](../styles-and-themes/common-units/#size)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalColor](../styles-and-themes/common-units/#color)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalStyle](../styles-and-themes/common-units/#border-style)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalWidth](../styles-and-themes/common-units/#size)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-icon-NavLink | $color-surface-500 | $color-surface-500 |\r\n| [color](../styles-and-themes/common-units/#color)-indicator-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-indicator-NavLink--active | $color-primary-500 | $color-primary-500 |\r\n| [color](../styles-and-themes/common-units/#color)-indicator-NavLink--hover | $color-primary-600 | $color-primary-600 |\r\n| [color](../styles-and-themes/common-units/#color)-indicator-NavLink--pressed | $color-primary-500 | $color-primary-500 |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-NavLink | $fontFamily | $fontFamily |\r\n| [fontSize](../styles-and-themes/common-units/#size)-NavLink | $fontSize-small | $fontSize-small |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-NavLink | $fontWeight-normal | $fontWeight-normal |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-NavLink--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-NavLink--pressed | $fontWeight-normal | $fontWeight-normal |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-NavLink--focus | $outlineColor--focus | $outlineColor--focus |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-NavLink--focus | -1px | -1px |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-NavLink--focus | $outlineStyle--focus | $outlineStyle--focus |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-NavLink--focus | $outlineWidth--focus | $outlineWidth--focus |\r\n| [padding](../styles-and-themes/common-units/#size)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-NavLink | $space-4 | $space-4 |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-NavLink | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-NavLink | $space-2 | $space-2 |\r\n| [textColor](../styles-and-themes/common-units/#color)-NavLink | $textColor-primary | $textColor-primary |\r\n| [textColor](../styles-and-themes/common-units/#color)-NavLink--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-NavLink--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-NavLink--hover--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-NavLink--pressed | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-NavLink--pressed--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [thickness](../styles-and-themes/common-units/#size)-indicator-NavLink | $space-0_5 | $space-0_5 |\r\n\r\n### Variable Explanations\r\n\r\n| Theme Variable | Description |\r\n| --- | --- |\r\n| **`color-indicator-NavLink`** | Provides the following states: `--hover`, `--active`, `--pressed` |\r\n",
  "components/NavPanel":"import { Callout } from \"nextra/components\";\r\n\r\n# NavPanel [#component-navpanel]\r\n\r\n`NavPanel` is a placeholder within `App` to define the app's navigation (menu) structure.\r\n\r\n## Properties\r\n\r\n### `logoTemplate`\r\n\r\nThis property defines the logo template to display in the navigation panel with the `vertical` and `vertical-sticky` layout.\r\n\r\n```xmlui copy {3-8}\r\n<App layout=\"vertical\">\r\n  <NavPanel>\r\n    <property name=\"logoTemplate\">\r\n       <H3>\r\n         <Icon name=\"drive\" />\r\n         DriveDiag (Nav)\r\n       </H3>\r\n    </property>\r\n    <NavLink label=\"Home\" to=\"/\" icon=\"home\"/>\r\n    <NavLink label=\"Page 1\" to=\"/page1\"/>\r\n  </NavPanel>\r\n  <Pages defaultRoute=\"/\">\r\n    <Page url=\"/\">\r\n      <Text value=\"Home\" />\r\n    </Page>\r\n    <Page url=\"/page1\">\r\n      <Text value=\"Page 1\" />\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: logoTemplate\"\r\n  horizontal={true}\r\n  height={200}\r\n  app={`\r\n    <App layout=\"vertical\">\r\n      <NavPanel>\r\n        <property name=\"logoTemplate\">\r\n           <H3>\r\n             <Icon name=\"drive\" />\r\n             DriveDiag (Nav)\r\n           </H3>\r\n        </property>\r\n        <NavLink label=\"Home\" to=\"/\" icon=\"home\"/>\r\n        <NavLink label=\"Page 1\" to=\"/page1\"/>\r\n      </NavPanel>\r\n      <Pages defaultRoute=\"/\">\r\n        <Page url=\"/\">\r\n          <Text value=\"Home\" />\r\n        </Page>\r\n        <Page url=\"/page1\">\r\n          <Text value=\"Page 1\" />\r\n        </Page>\r\n      </Pages>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `NavPanel` component uses these theme variables to customize its appearance:\r\n\r\n- `backgroundColor`\r\n- `boxShadow`\r\n- `paddingHorizontal`\r\n- `paddingHorizontal-logo-NavPanel`\r\n- `paddingVertical-logo-NavPanel`\r\n- `marginBottom-logo-NavPanel`\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NavPanel | $backgroundColor | $backgroundColor |\r\n| [border](../styles-and-themes/common-units/#border)-NavPanel | 0px solid $borderColor | 0px solid $borderColor |\r\n| [borderBottom](../styles-and-themes/common-units/#border)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomColor](../styles-and-themes/common-units/#color)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomStyle](../styles-and-themes/common-units/#border-style)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomWidth](../styles-and-themes/common-units/#size)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndEndRadius-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndStartRadius-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalColor](../styles-and-themes/common-units/#color)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalStyle](../styles-and-themes/common-units/#border-style)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalWidth](../styles-and-themes/common-units/#size)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeft](../styles-and-themes/common-units/#border)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftStyle](../styles-and-themes/common-units/#border-style)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftWidth](../styles-and-themes/common-units/#size)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRight](../styles-and-themes/common-units/#border)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightStyle](../styles-and-themes/common-units/#border-style)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightWidth](../styles-and-themes/common-units/#size)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartEndRadius-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartStartRadius-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTop](../styles-and-themes/common-units/#border)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopColor](../styles-and-themes/common-units/#color)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopStyle](../styles-and-themes/common-units/#border-style)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopWidth](../styles-and-themes/common-units/#size)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalColor](../styles-and-themes/common-units/#color)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalStyle](../styles-and-themes/common-units/#border-style)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalWidth](../styles-and-themes/common-units/#size)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-NavPanel-vertical | 4px 0 4px 0 rgb(0 0 0 / 10%) | 4px 0 4px 0 rgb(0 0 0 / 10%) |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-logo-NavPanel | $space-4 | $space-4 |\r\n| [padding](../styles-and-themes/common-units/#size)-logo-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-logo-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-logo-NavPanel | $space-4 | $space-4 |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-NavPanel | 0 | 0 |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-logo-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-logo-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-logo-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-logo-NavPanel | $space-4 | $space-4 |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-NavPanel | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n",
  "components/NoResult":"import { Callout } from \"nextra/components\";\r\n\r\n# NoResult [#component-noresult]\r\n\r\n`NoResult` is a component that displays a visual indication that some data query (search) resulted in no (zero) items.\r\n\r\n## Properties\r\n\r\n### `hideIcon (default: \"false\")`\r\n\r\nThis boolean property indicates if the icon should be hidden.\r\n\r\n```xmlui copy\r\n<App>\r\n  <FlowLayout>\r\n    <NoResult hideIcon=\"true\" width=\"50%\" />\r\n    <NoResult hideIcon=\"false\" width=\"50%\" />\r\n  </FlowLayout>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: hideIcon\"\r\n  app={`\r\n    <App>\r\n      <FlowLayout>\r\n        <NoResult hideIcon=\"true\" width=\"50%\" />\r\n        <NoResult hideIcon=\"false\" width=\"50%\" />\r\n      </FlowLayout>\r\n    </App>\r\n`}\r\n/>\r\n\r\n### `icon`\r\n\r\nThis property defines the icon to display with the component.\r\n\r\nThis property defines the icon to display with the component. For a list of of available icons consult [`Icon` documentation](./Icon.mdx).\r\n\r\n```xmlui copy\r\n<App>\r\n  <NoResult icon=\"error\" height=\"100%\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: icon\"\r\n  app={`\r\n    <App>\r\n      <NoResult icon=\"error\" height=\"100%\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\nCustomize the displayed text using this property. Leave empty to omit it.\r\n\r\n```xmlui copy\r\n<App>\r\n  <NoResult label=\"Sorry, found nothing!\" height=\"100%\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: label\"\r\n  app={`\r\n    <App>\r\n      <NoResult label=\"Sorry, found nothing!\" height=\"100%\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `NoResult` component uses these theme variables to customize its appearance:\r\n\r\n- `paddingVertical-NoResult`\r\n- `gap-icon-NoResult`\r\n- `size-icon-NoResult`\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [border](../styles-and-themes/common-units/#border)-NoResult | 0px solid $borderColor | 0px solid $borderColor |\r\n| [borderBottom](../styles-and-themes/common-units/#border)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomColor](../styles-and-themes/common-units/#color)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomStyle](../styles-and-themes/common-units/#border-style)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomWidth](../styles-and-themes/common-units/#size)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndEndRadius-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndStartRadius-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalColor](../styles-and-themes/common-units/#color)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalStyle](../styles-and-themes/common-units/#border-style)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalWidth](../styles-and-themes/common-units/#size)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeft](../styles-and-themes/common-units/#border)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftStyle](../styles-and-themes/common-units/#border-style)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftWidth](../styles-and-themes/common-units/#size)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRight](../styles-and-themes/common-units/#border)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightStyle](../styles-and-themes/common-units/#border-style)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightWidth](../styles-and-themes/common-units/#size)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartEndRadius-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartStartRadius-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTop](../styles-and-themes/common-units/#border)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopColor](../styles-and-themes/common-units/#color)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopStyle](../styles-and-themes/common-units/#border-style)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopWidth](../styles-and-themes/common-units/#size)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalColor](../styles-and-themes/common-units/#color)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalStyle](../styles-and-themes/common-units/#border-style)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalWidth](../styles-and-themes/common-units/#size)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [gap](../styles-and-themes/common-units/#size)-icon-NoResult | $space-2 | $space-2 |\r\n| [padding](../styles-and-themes/common-units/#size)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-NoResult | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-NoResult | $space-2 | $space-2 |\r\n| [size](../styles-and-themes/common-units/#size)-icon-NoResult | $space-8 | $space-8 |\r\n",
  "components/NumberBox":"import { Callout } from \"nextra/components\";\r\n\r\n# NumberBox [#component-numberbox]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nA `NumberBox` component allows users to input numeric values: either integer or floating point numbers. It also accepts empty values, where the stored value will be of type `null`.\r\n\r\nThe `NumberBox` is an input control component and is often used in forms. See the [Using Forms](/learning/using-components/forms/) guide for details.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou can paste characters copied to the clipboard into a `NumberBox` only if the content with the pasted character results in a valid integer of float number (according to the `integersOnly` value). Otherwise, the paste operation is ignored.\r\n</Callout>\r\n\r\n## Properties\r\n\r\n### `autoFocus (default: false)`\r\n\r\nIf this property is set to `true`, the component gets the focus automatically when displayed.\r\n\r\nIf this boolean prop is set to true, the `NumberBox` input will be focused when appearing on the UI.\r\n\r\n### `enabled (default: true)`\r\n\r\nThis boolean property value indicates whether the component responds to user events (`true`) or not (`false`).\r\n\r\nControls whether the input field is enabled (`true`) or disabled (`false`).\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox enabled=\"false\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: enabled\"\r\n  app={`\r\n    <App>\r\n      <NumberBox enabled=\"false\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `endIcon`\r\n\r\nThis property sets an icon to appear on the end (right side when the left-to-right direction is set) of the input.\r\n\r\nThis string prop enables the display of an icon on the right side (left-to-right display) of the input field by providing a valid [icon name]().\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox endIcon=\"email\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: endIcon\"\r\n  app={`\r\n    <App>\r\n      <NumberBox endIcon=\"email\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nIt is possible to set the other adornments as well: [`endText`](#endtext), [`startIcon`](#starticon) and [`startText`](#starttext).\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox startIcon=\"hyperlink\" startText=\"www.\" endIcon=\"email\" endText=\".com\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: all adornments\"\r\n  app={`\r\n    <App>\r\n      <NumberBox startIcon=\"hyperlink\" startText=\"www.\" endIcon=\"email\" endText=\".com\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `endText`\r\n\r\nThis property sets a text to appear on the end (right side when the left-to-right direction is set) of the input.\r\n\r\nThis string prop enables the display of a custom string on the right side (left-to-right display) of the input field.\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox endText=\".com\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: endText\"\r\n  app={`\r\n    <App>\r\n      <NumberBox endText=\".com\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nIt is possible to set the other adornments as well: [`endIcon`](#endicon), [`startIcon`](#starticon) and [`startText`](#starttext).\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox startIcon=\"hyperlink\" startText=\"www.\" endIcon=\"email\" endText=\".com\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: all adornments\"\r\n  app={`\r\n    <App>\r\n      <NumberBox startIcon=\"hyperlink\" startText=\"www.\" endIcon=\"email\" endText=\".com\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `hasSpinBox (default: true)`\r\n\r\nThis boolean prop shows (`true`) or hides (`false`) the spinner buttons for the input field.\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox hasSpinBox=\"true\" initialValue=\"3\" />\r\n  <NumberBox hasSpinBox=\"false\" initialValue=\"34\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: hasSpinBox\"\r\n  app={`\r\n    <App>\r\n      <NumberBox hasSpinBox=\"true\" initialValue=\"3\" />\r\n      <NumberBox hasSpinBox=\"false\" initialValue=\"34\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `initialValue`\r\n\r\nThis property sets the component's initial value.\r\n\r\nThe initial value displayed in the input field.\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox initialValue=\"123\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: initialValue\"\r\n  app={`\r\n    <App>\r\n      <NumberBox initialValue=\"123\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `integersOnly (default: false)`\r\n\r\nThis boolean property signs whether the input field accepts integers only (`true`) or not (`false`).\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox integersOnly=\"true\" initialValue=\"42\" />\r\n  <NumberBox integersOnly=\"false\" initialValue=\"{Math.PI}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: integersOnly\"\r\n  app={`\r\n    <App>\r\n      <NumberBox integersOnly=\"true\" initialValue=\"42\" />\r\n      <NumberBox integersOnly=\"false\" initialValue=\"{Math.PI}\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\n### `labelBreak (default: false)`\r\n\r\nThis boolean value indicates if the `NumberBox` labels can be split into multiple lines if it would overflow the available label width.\r\n\r\n### `labelPosition (default: \"top\")`\r\n\r\nPlaces the label at the given position of the component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `start` | The left side of the input (left-to-right) or the right side of the input (right-to-left) |\r\n| `end` | The right side of the input (left-to-right) or the left side of the input (right-to-left) |\r\n| `top` | The top of the input **(default)** |\r\n| `bottom` | The bottom of the input |\r\n\r\n### `labelWidth`\r\n\r\nThis property sets the width of the `NumberBox`.\r\n\r\n### `maxLength`\r\n\r\nThis property sets the maximum length of the input it accepts.\r\n\r\n### `maxValue`\r\n\r\nThe maximum value the input field allows. Can be a float or an integer if [`integersOnly`](#integersonly) is set to `false`, otherwise it can only be an integer.\r\n\r\nThe maximum value the input field allows.\r\nCan be a float or an integer if [`integersOnly`](#integersonly) is set to `false`,\r\notherwise it can only be an integer.\r\n\r\nTry to enter a bigger value into the input field below than the maximum allowed.\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox maxValue=\"100\" initialValue=\"99\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: maxValue\"\r\n  app={`\r\n    <App>\r\n      <NumberBox maxValue=\"100\" initialValue=\"99\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `minValue`\r\n\r\nThe minimum value the input field allows. Can be a float or an integer if [`integersOnly`](#integersonly) is set to `false`, otherwise it can only be an integer.\r\n\r\nTry to enter a bigger value into the input field below than the minimum allowed.\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox minValue=\"-100\" initialValue=\"-99\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: minValue\"\r\n  app={`\r\n    <App>\r\n      <NumberBox minValue=\"-100\" initialValue=\"-99\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `placeholder`\r\n\r\nA placeholder text that is visible in the input field when its empty.\r\n\r\nA placeholder text that is visible in the input field when its empty.\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox placeholder=\"This is a placeholder\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: placeholder\"\r\n  app={`\r\n    <App>\r\n      <NumberBox placeholder=\"This is a placeholder\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `readOnly (default: false)`\r\n\r\nSet this property to `true` to disallow changing the component value.\r\n\r\nIf true, the component's value cannot be modified with user interactions.\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox initialValue=\"123\" readOnly=\"true\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: readOnly\"\r\n  app={`\r\n    <App>\r\n      <NumberBox initialValue=\"123\" readOnly=\"true\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `required`\r\n\r\nSet this property to `true` to indicate it must have a value before submitting the containing form.\r\n\r\n### `startIcon`\r\n\r\nThis property sets an icon to appear at the start (left side when the left-to-right direction is set) of the input.\r\n\r\nThis string prop enables the display of an icon on the left side (left-to-right display) of the input field by providing a valid [icon name]().\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox startIcon=\"hyperlink\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: startIcon\"\r\n  app={`\r\n    <App>\r\n      <NumberBox startIcon=\"hyperlink\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nIt is possible to set the other adornments as well: [`endText`](#endtext), [`startIcon`](#starticon) and [`startText`](#starttext).\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox startIcon=\"hyperlink\" startText=\"www.\" endIcon=\"email\" endText=\".com\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: all adornments\"\r\n  app={`\r\n    <App>\r\n      <NumberBox startIcon=\"hyperlink\" startText=\"www.\" endIcon=\"email\" endText=\".com\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `startText`\r\n\r\nThis property sets a text to appear at the start (left side when the left-to-right direction is set) of the input.\r\n\r\nThis string prop enables the display of a custom string on the left side (left-to-right display) of the input field.\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox startText=\"www.\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: startText\"\r\n  app={`\r\n    <App>\r\n      <NumberBox startText=\"www.\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nIt is possible to set the other adornments as well: [`endIcon`](#endicon), [`startIcon`](#starticon) and [`endText`](#endtext).\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox startIcon=\"hyperlink\" startText=\"www.\" endIcon=\"email\" endText=\".com\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: all adornments\"\r\n  app={`\r\n    <App>\r\n      <NumberBox startIcon=\"hyperlink\" startText=\"www.\" endIcon=\"email\" endText=\".com\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `step (default: 1)`\r\n\r\nThis prop governs how big the step when clicking on the spinner of the field.\r\n\r\nThe default stepping value is **1**.\r\n\r\nNote that only integers are allowed to be entered.\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox initialValue=\"10\" step=\"10\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: step\"\r\n  app={`\r\n    <App>\r\n      <NumberBox initialValue=\"10\" step=\"10\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `validationStatus (default: \"none\")`\r\n\r\nThis property allows you to set the validation status of the input component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `valid` | Visual indicator for an input that is accepted |\r\n| `warning` | Visual indicator for an input that produced a warning |\r\n| `error` | Visual indicator for an input that produced an error |\r\n\r\nThis prop is used to visually indicate status changes reacting to form field validation.\r\n\r\n| Value     | Description                                           |\r\n| :-------- | :---------------------------------------------------- |\r\n| `valid`   | Visual indicator for an input that is accepted        |\r\n| `warning` | Visual indicator for an input that produced a warning |\r\n| `error`   | Visual indicator for an input that produced an error  |\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox />\r\n  <NumberBox validationStatus=\"valid\" />\r\n  <NumberBox validationStatus=\"warning\" />\r\n  <NumberBox validationStatus=\"error\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: validationStatus\"\r\n  app={`\r\n    <App>\r\n      <NumberBox />\r\n      <NumberBox validationStatus=\"valid\" />\r\n      <NumberBox validationStatus=\"warning\" />\r\n      <NumberBox validationStatus=\"error\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `zeroOrPositive (default: false)`\r\n\r\nThis boolean property determines whether the input value can only be 0 or positive numbers (`true`) or also negative (`false`).\r\n\r\nThis boolean property determines whether the input value can only be 0 or positive numbers (`true`) or also negative (`false`).\r\nBy default, this property is set to `false`.\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox initialValue=\"123\" zeroOrPositive=\"true\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: zeroOrPositive\"\r\n  app={`\r\n    <App>\r\n      <NumberBox initialValue=\"123\" zeroOrPositive=\"true\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `didChange`\r\n\r\nThis event is triggered when value of NumberBox has changed.\r\n\r\nThis event is triggered after the user has changed the field value.\r\n\r\nWrite in the input field and see how the `Text` underneath it is updated in parallel.\r\n\r\n```xmlui copy {2}\r\n<App var.field=\"0\">\r\n  <NumberBox initialValue=\"{field}\" onDidChange=\"(val) => field = val\" />\r\n  <Text value=\"{field}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: didChange\"\r\n  app={`\r\n    <App var.field=\"0\">\r\n      <NumberBox initialValue=\"{field}\" onDidChange=\"(val) => field = val\" />\r\n      <Text value=\"{field}\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `gotFocus`\r\n\r\nThis event is triggered when the NumberBox has received the focus.\r\n\r\nThis event is triggered when the `NumberBox` receives focus. The following sample demonstrates this event.\r\n\r\n```xmlui copy {3-4}\r\n<App var.focused=\"{false}\">\r\n  <NumberBox\r\n    onGotFocus=\"focused = true\"\r\n    onLostFocus=\"focused = false\" />\r\n  <Text>The NumberBox is {focused ? '' : 'not'} focused</Text>\r\n</App>\r\n```\r\n\r\nClick into the `NumberBox` (and then click the text below):\r\n\r\n<Playground\r\n  name=\"Example: gotFocus/lostFocus\"\r\n  app={`\r\n    <App var.focused=\"{false}\">\r\n      <NumberBox\r\n        onGotFocus=\"focused = true\"\r\n        onLostFocus=\"focused = false\" />\r\n      <Text>The NumberBox is {focused ? '' : 'not'} focused</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `lostFocus`\r\n\r\nThis event is triggered when the NumberBox has lost the focus.\r\n\r\nThis event is triggered when the `NumberBox` loses focus.\r\n\r\n(See the example above)\r\n\r\n## Exposed Methods\r\n\r\n### `focus`\r\n\r\nThis method sets the focus on the NumberBox.\r\n\r\n### `setValue`\r\n\r\nYou can use this method to set the component's current value programmatically (`true`: checked, `false`: unchecked).\r\n\r\nYou can use this method to set the component's current value programmatically.\r\n\r\n```xmlui copy {3, 9, 12}\r\n<App>\r\n  <NumberBox\r\n    id=\"numberbox\"\r\n    readOnly=\"true\"\r\n  />\r\n  <HStack>\r\n    <Button\r\n      label=\"Set to 100\"\r\n      onClick=\"numberbox.setValue(100)\" />\r\n    <Button\r\n      label=\"Set to 0\"\r\n      onClick=\"numberbox.setValue(0)\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: value and setValue\"\r\n  app={`\r\n    <App>\r\n      <NumberBox\r\n        id=\"numberbox\"\r\n        readOnly=\"true\"\r\n      />\r\n      <HStack>\r\n        <Button\r\n          label=\"Set to 100\"\r\n          onClick=\"numberbox.setValue(100)\" />\r\n        <Button\r\n          label=\"Set to 0\"\r\n          onClick=\"numberbox.setValue(0)\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `value`\r\n\r\nYou can query the component's value. If no value is set, it will retrieve `undefined`.\r\n\r\nYou can query this read-only API property to get the input component's current value.\r\n\r\nSee an example in the `setValue` API method.\r\n\r\n## Styling\r\n\r\nThe `NumberBox` component uses these theme variables to customize its appearance:\r\n\r\n- `borderRadius-NumberBox`\r\n- `textColor-NumberBox`\r\n- `backgroundColor-NumberBox--disabled`\r\n- `borderWidth-NumberBox`\r\n- `borderStyle-NumberBox`\r\n- `borderColor-NumberBox--disabled`\r\n- `backgroundColor-NumberBox--disabled`\r\n- `textColor-NumberBox--disabled`\r\n- `borderColor-NumberBox-default`\r\n- `borderColor-NumberBox-error`\r\n- `borderColor-NumberBox-warning`\r\n- `borderColor-NumberBox-success`\r\n- `textColor-placeholder-NumberBox`\r\n\r\n```json\r\n{\r\n  \"id\": \"custom\",\r\n  \"name\": \"Custom Theme\",\r\n  \"themeVars\": {\r\n    \"borderRadius-NumberBox\": \"30px\",\r\n    \"color-adornment-NumberBox\": \"red\",\r\n    \"borderWidth-NumberBox\": \"4px\"\r\n  }\r\n}\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling\"\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"borderRadius-NumberBox\": \"30px\",\r\n        \"color-adornment-NumberBox\": \"red\",\r\n        \"borderWidth-NumberBox\": \"4px\",\r\n      },\r\n    },\r\n  ]}\r\n  app={`\r\n    <App>\r\n      <NumberBox startIcon=\"hyperlink\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nTo style all input controls not just this component, use `Input` instead of the `NumberBox` segment:\r\n\r\n```\r\nborderColor-Input: \"#0033FF\"\r\n```\r\n\r\n`Input` affects the following controls:\r\n\r\n- [`Checkbox`](./Checkbox.mdx)\r\n- [`RadioGroupOption`](./RadioGroupOption.mdx)\r\n- [`Select`](./Select.mdx)\r\n- [`Switch`](./Switch.mdx)\r\n- [`TextArea`](./TextArea.mdx)\r\n- [`TextBox`](./TextBox.mdx)\r\n\r\nSee [custom themes](../learning/themes/overview.mdx) for styling details.\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NumberBox--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NumberBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NumberBox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NumberBox-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NumberBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NumberBox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NumberBox-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NumberBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NumberBox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NumberBox-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NumberBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NumberBox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-NumberBox-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-NumberBox--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-NumberBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-NumberBox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-NumberBox-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-NumberBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-NumberBox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-NumberBox-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-NumberBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-NumberBox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-NumberBox-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-NumberBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-NumberBox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-NumberBox-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-NumberBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-NumberBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-NumberBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-NumberBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-NumberBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-NumberBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-NumberBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-NumberBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-NumberBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-NumberBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-NumberBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-NumberBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-NumberBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-NumberBox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-NumberBox-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-NumberBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-NumberBox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-NumberBox-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-NumberBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-NumberBox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-NumberBox-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-NumberBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-NumberBox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-NumberBox-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-NumberBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-NumberBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-NumberBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-NumberBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-NumberBox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-NumberBox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-NumberBox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-NumberBox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-NumberBox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-NumberBox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-NumberBox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-NumberBox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-NumberBox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-NumberBox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-NumberBox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-NumberBox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-NumberBox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-NumberBox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-NumberBox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-NumberBox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-adornment-NumberBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-adornment-NumberBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-adornment-NumberBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-adornment-NumberBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-NumberBox--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-NumberBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-NumberBox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-NumberBox-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-NumberBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-NumberBox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-NumberBox-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-NumberBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-NumberBox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-NumberBox-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-NumberBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-NumberBox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-NumberBox-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-placeholder-NumberBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-placeholder-NumberBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-placeholder-NumberBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-placeholder-NumberBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n",
  "components/Option":"import { Callout } from \"nextra/components\";\r\n\r\n# Option [#component-option]\r\n\r\n`Option` is a non-visual component describing a selection option. Other components (such as `Select`, `AutoComplete`, and others) may use nested `Option` instances from which the user can select.\r\n\r\n## Using `Option`\r\n\r\n### With `AutoComplete`\r\n\r\n```xmlui copy {4-6}\r\n<App>\r\n  <Text value=\"Selected ID: {myComp.value}\"/>\r\n  <AutoComplete id=\"myComp\">\r\n    <Option label=\"John, Smith\" value=\"john\" />\r\n    <Option label=\"Jane, Clint\" value=\"jane\" disabled=\"true\" />\r\n    <Option label=\"Herbert, Frank\" value=\"herbert\" />\r\n  </AutoComplete>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: Option in a AutoComplete\"\r\n    height={260}\r\n    app={`\r\n    <App>\r\n      <Text value=\"Selected ID: {myComp.value}\"/>\r\n      <AutoComplete id=\"myComp\">\r\n        <Option label=\"John, Smith\" value=\"john\" />\r\n        <Option label=\"Jane, Clint\" value=\"jane\" disabled=\"true\" />\r\n        <Option label=\"Herbert, Frank\" value=\"herbert\" />\r\n      </AutoComplete>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### With `Select`\r\n\r\n```xmlui copy {4-6}\r\n<App>\r\n  <Text value=\"Selected ID: {mySelect.value}\"/>\r\n  <Select id=\"mySelect\">\r\n    <Option label=\"John, Smith\" value=\"john\" />\r\n    <Option label=\"Jane, Clint\" value=\"jane\" />\r\n    <Option label=\"Herbert, Frank\" value=\"herbert\" />\r\n  </Select>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: Option in a Select\"\r\n    height={260}\r\n    app={`\r\n    <App>\r\n      <Text value=\"Selected ID: {mySelect.value}\"/>\r\n      <Select id=\"mySelect\">\r\n        <Option label=\"John, Smith\" value=\"john\" />\r\n        <Option label=\"Jane, Clint\" value=\"jane\" />\r\n        <Option label=\"Herbert, Frank\" value=\"herbert\" />\r\n      </Select>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\n### `enabled (default: true)`\r\n\r\nThis boolean property value indicates whether the component responds to user events (`true`) or not (`false`).\r\n\r\n### `label`\r\n\r\nThis property defines the text to display for the option. If `label` is not defined, `Option` will use the `value` as the label.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n    If `Option` does not define any of the `label` or `value` properties, the option will not be rendered.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<App>\r\n  <Text value=\"Selected ID: {mySelect.value}\"/>\r\n  <Select id=\"mySelect\">\r\n    <Option />\r\n    <Option label=\"Vanilla\" value=\"van\"/>\r\n    <Option label=\"Chocolate\" value=\"choc\" />\r\n    <Option value=\"pist\" />\r\n  </Select>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: Using label\"\r\n    height={260}\r\n    app={`\r\n    <App>\r\n      <Text value=\"Selected ID: {mySelect.value}\"/>\r\n      <Select id=\"mySelect\">\r\n        <Option />\r\n        <Option label=\"Vanilla\" value=\"van\"/>\r\n        <Option label=\"Chocolate\" value=\"choc\" />\r\n        <Option value=\"pist\" />\r\n      </Select>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `optionTemplate`\r\n\r\nThis property is used to define a custom option template\r\n\r\n### `value`\r\n\r\nThis property defines the value of the option. If `value` is not defined, `Option` will use the `label` as the value.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n    If `Option` does not define any of the `label` or `value` properties, the option will not be rendered.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<App>\r\n  <Text value=\"Selected ID: {mySelect.value}\"/>\r\n  <Select id=\"mySelect\">\r\n    <Option />\r\n    <Option label=\"Vanilla\" />\r\n    <Option label=\"Chocolate\" value=\"chocolate\" />\r\n    <Option label=\"Pistachio\" value=\"pistachio\" />\r\n  </Select>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: Option in a Select\"\r\n    height={260}\r\n    app={`\r\n    <App>\r\n      <Text value=\"Selected ID: {mySelect.value}\"/>\r\n      <Select id=\"mySelect\">\r\n        <Option />\r\n        <Option label=\"Vanilla\" />\r\n        <Option label=\"Chocolate\" value=\"chocolate\" />\r\n        <Option label=\"Pistachio\" value=\"pistachio\" />\r\n      </Select>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/Page":"import { Callout } from \"nextra/components\";\r\n\r\n# Page [#component-page]\r\n\r\nThe `Page` component defines what content is displayed when the user navigates to a particular URL that is associated with the page.\r\n\r\n## Properties\r\n\r\n### `url`\r\n\r\nThe URL of the route associated with the content.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/PageMetaTitle":"import { Callout } from \"nextra/components\";\r\n\r\n# PageMetaTitle [#component-pagemetatitle]\r\n\r\nA PageMetaTitle component allows setting up (or changing) the app title to display with the current browser tab.\r\n\r\n## Properties\r\n\r\n### `value`\r\n\r\nThis property sets the page's title to display in the browser tab.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/Pages":"import { Callout } from \"nextra/components\";\r\n\r\n# Pages [#component-pages]\r\n\r\nThe `Pages` component is used as a container for [`Page`](./Page.mdx) components within an [`App`](./App.mdx).\r\n\r\nSee the [\\`Page\\` docs](./Page.mdx) for a short description.\r\n\r\nExamples for both components can be found here.\r\n\r\n### Using the Pages and Page components\r\n\r\nThe `Page` component has a property called `url`. This is the route associated with the `Page's` contents.\r\nYou can provide a link to this route to display a particular `Page`.\r\nCurrently, all navigation is done on the clientside.\r\nNo page is fetched from the server, thus the application operates as a [Single Page Application](https://developer.mozilla.org/en-US/docs/Glossary/SPA).\r\n\r\n```xmlui copy {3-4, 7, 10}\r\n<App>\r\n  <NavPanel>\r\n    <NavLink label=\"Home\" to=\"/\" icon=\"home\"/>\r\n    <NavLink label=\"Account\" to=\"/account\" icon=\"user\"/>\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">\r\n      <Text>Hello App!</Text>\r\n    </Page>\r\n    <Page url=\"/account\">\r\n      <Text>This is the account page.</Text>\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  height={150}\r\n  name=\"Example: using Pages and Page\"\r\n  horizontal\r\n  app={`\r\n  <App>\r\n    <NavPanel>\r\n      <NavLink label=\"Home\" to=\"/\" icon=\"home\"/>\r\n      <NavLink label=\"Account\" to=\"/account\" icon=\"user\"/>\r\n    </NavPanel>\r\n    <Pages>\r\n      <Page url=\"/\">\r\n        <Text>Hello App!</Text>\r\n      </Page>\r\n      <Page url=\"/account\">\r\n        <Text>This is the account page.</Text>\r\n      </Page>\r\n    </Pages>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\n### `defaultRoute`\r\n\r\nThe default route when displaying the app\r\n\r\n```xmlui copy {6-13}\r\n<App>\r\n  <NavPanel>\r\n    <NavLink label=\"Not Home\" to=\"/not-home\" icon=\"trash\"/>\r\n    <NavLink label=\"Home\" to=\"/home\" icon=\"home\"/>\r\n  </NavPanel>\r\n  <Pages defaultRoute=\"/home\">\r\n    <Page url=\"/not-home\">\r\n      <Text>This is not home...</Text>\r\n    </Page>\r\n    <Page url=\"/home\">\r\n      <Text>Hello App!</Text>\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  height={150}\r\n  name=\"Example: defaultRoute\"\r\n  horizontal\r\n  app={`\r\n  <App>\r\n    <NavPanel>\r\n      <NavLink label=\"Not Home\" to=\"/not-home\" icon=\"trash\"/>\r\n      <NavLink label=\"Home\" to=\"/home\" icon=\"home\"/>\r\n    </NavPanel>\r\n    <Pages defaultRoute=\"/home\">\r\n      <Page url=\"/not-home\">\r\n        <Text>This is not home...</Text>\r\n      </Page>\r\n      <Page url=\"/home\">\r\n        <Text>Hello App!</Text>\r\n      </Page>\r\n    </Pages>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/PasswordInput":"import { Callout } from \"nextra/components\";\r\n\r\n# PasswordInput [#component-passwordinput]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `Password` component is a specialized version of the `TextBox` component that allows users to input and edit passwords.\r\n\r\n## Properties\r\n\r\n### `autoFocus (default: false)`\r\n\r\nIf this property is set to `true`, the component gets the focus automatically when displayed.\r\n\r\n### `enabled (default: true)`\r\n\r\nThis boolean property value indicates whether the component responds to user events (`true`) or not (`false`).\r\n\r\n### `endIcon`\r\n\r\nThis property sets an icon to appear on the end (right side when the left-to-right direction is set) of the input.\r\n\r\n### `endText`\r\n\r\nThis property sets a text to appear on the end (right side when the left-to-right direction is set) of the input.\r\n\r\n### `initialValue`\r\n\r\nThis property sets the component's initial value.\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\n### `labelBreak (default: false)`\r\n\r\nThis boolean value indicates if the `TextBox` labels can be split into multiple lines if it would overflow the available label width.\r\n\r\n### `labelPosition (default: \"top\")`\r\n\r\nPlaces the label at the given position of the component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `start` | The left side of the input (left-to-right) or the right side of the input (right-to-left) |\r\n| `end` | The right side of the input (left-to-right) or the left side of the input (right-to-left) |\r\n| `top` | The top of the input **(default)** |\r\n| `bottom` | The bottom of the input |\r\n\r\n### `labelWidth`\r\n\r\nThis property sets the width of the `TextBox`.\r\n\r\n### `maxLength`\r\n\r\nThis property sets the maximum length of the input it accepts.\r\n\r\n### `placeholder`\r\n\r\nA placeholder text that is visible in the input field when its empty.\r\n\r\n### `readOnly (default: false)`\r\n\r\nSet this property to `true` to disallow changing the component value.\r\n\r\n### `required`\r\n\r\nSet this property to `true` to indicate it must have a value before submitting the containing form.\r\n\r\n### `startIcon`\r\n\r\nThis property sets an icon to appear at the start (left side when the left-to-right direction is set) of the input.\r\n\r\n### `startText`\r\n\r\nThis property sets a text to appear at the start (left side when the left-to-right direction is set) of the input.\r\n\r\n### `validationStatus (default: \"none\")`\r\n\r\nThis property allows you to set the validation status of the input component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `valid` | Visual indicator for an input that is accepted |\r\n| `warning` | Visual indicator for an input that produced a warning |\r\n| `error` | Visual indicator for an input that produced an error |\r\n\r\n## Events\r\n\r\n### `didChange`\r\n\r\nThis event is triggered when value of TextBox has changed.\r\n\r\n### `gotFocus`\r\n\r\nThis event is triggered when the TextBox has received the focus.\r\n\r\n### `lostFocus`\r\n\r\nThis event is triggered when the TextBox has lost the focus.\r\n\r\n## Exposed Methods\r\n\r\n### `focus`\r\n\r\nThis method sets the focus on the TextBox.\r\n\r\n### `setValue`\r\n\r\nYou can use this method to set the component's current value programmatically (`true`: checked, `false`: unchecked).\r\n\r\n### `value`\r\n\r\nYou can query the component's value. If no value is set, it will retrieve `undefined`.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/ProgressBar":"import { Callout } from \"nextra/components\";\r\n\r\n# ProgressBar [#component-progressbar]\r\n\r\nA `ProgressBar` component visually represents the progress of a task or process.\r\n\r\n## Properties\r\n\r\n### `value (default: 0)`\r\n\r\nThis property defines the progress value with a number between 0 and 1.\r\n\r\nThe following example demonstrates using it:\r\n\r\n```xmlui copy {2-6}\r\n<App>\r\n  <ProgressBar />\r\n  <ProgressBar value=\"0.2\"/>\r\n  <ProgressBar value=\"0.6\"/>\r\n  <ProgressBar value=\"1\"/>\r\n  <ProgressBar value=\"1.2\"/>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: value\"\r\n  app={`\r\n    <App>\r\n      <ProgressBar />\r\n      <ProgressBar value=\"0.2\"/>\r\n      <ProgressBar value=\"0.6\"/>\r\n      <ProgressBar value=\"1\"/>\r\n      <ProgressBar value=\"1.2\"/>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `ProgressBar` component uses these theme variables to customize its appearance:\r\n\r\n- `backgroundColor-ProgressBar`\r\n- `color-indicator-ProgressBar`\r\n- `borderRadius-ProgressBar`\r\n- `borderRadius-indicator-ProgressBar`\r\n- `thicness-ProgressBar`\r\n\r\nThis sample shows how you can style `ProgressBar`:\r\n\r\n```xmlui copy\r\n<Theme\r\n  backgroundColor-ProgressBar=\"cyan\"\r\n  color-indicator-ProgressBar=\"purple\"\r\n  thickness-ProgressBar=\"12px\"\r\n  borderRadius-indicator-ProgressBar=\"12px\"\r\n  borderRadius-Progressbar=\"4px\">\r\n  <App>\r\n    <ProgressBar value=\"0\"/>\r\n    <ProgressBar value=\"0.2\"/>\r\n    <ProgressBar value=\"0.6\"/>\r\n    <ProgressBar value=\"1\"/>\r\n    <ProgressBar value=\"1.2\"/>\r\n  </App>\r\n</Theme>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling ProgressBar\"\r\n  app={`\r\n    <Theme\r\n      backgroundColor-ProgressBar=\"cyan\"\r\n      color-indicator-ProgressBar=\"purple\"\r\n      thickness-ProgressBar=\"12px\"\r\n      borderRadius-indicator-ProgressBar=\"12px\"\r\n      borderRadius-Progressbar=\"4px\">\r\n      <App>\r\n        <ProgressBar value=\"0\"/>\r\n        <ProgressBar value=\"0.2\"/>\r\n        <ProgressBar value=\"0.6\"/>\r\n        <ProgressBar value=\"1\"/>\r\n        <ProgressBar value=\"1.2\"/>\r\n      </App>\r\n    </Theme>\r\n  `}\r\n/>\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-ProgressBar | $color-surface-200 | $color-surface-200 |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-indicator-ProgressBar | 0px | 0px |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-ProgressBar | $borderRadius | $borderRadius |\r\n| [color](../styles-and-themes/common-units/#color)-indicator-ProgressBar | $color-primary-500 | $color-primary-500 |\r\n| [thickness](../styles-and-themes/common-units/#size)-ProgressBar | $space-2 | $space-2 |\r\n",
  "components/Queue":"import { Callout } from \"nextra/components\";\r\n\r\n# Queue [#component-queue]\r\n\r\n<Callout>**Note**: This component does not show up on the UI; it merely helps implement UI logic.</Callout>\r\n\r\nThe `Queue` component provides an API to enqueue elements and defines events to process queued elements in a FIFO order.\r\n\r\nThe component provides context values with which you can access some internal properties:\r\n\r\n- `$completedItems`: A list containing the queue items that have been completed (fully processed).\r\n- `$queuedItems`: A list containing the items waiting in the queue, icluding the completed items.\r\n\r\n## Using Queue\r\n\r\nAs its name suggests, the `Queue` component keeps a queue of items to process. You can add items to the queue with the `enqueueItem` (or `enqueueItems`) method. Once the queue has some items to process, the engine reads them one by one (in FIFO order) and processes an item with the `process` event handler.\r\nThough `Queue` is a non-visual component, it can render UI for reporting progress through its `progressFeedback` property. Also, when the queue gets empty, the UI can render a result summary through the `resultFeedback` property.\r\n\r\nThe following sample demonstrates these concepts. When the user clicks the button, a new random number is queued. The sample imitates a long calculation by waiting one second within the `process` event handler and reports the progress.\r\n\r\nA `ChangeListener` instance observes queue length changes and stores the actual length to display that in the UI.\r\n\r\n```xmlui copy {9-24}\r\n<App\r\n  var.queued=\"{0}\"\r\n  var.queueLength=\"{0}\"\r\n  var.processed=\"{0}\"\r\n  var.result=\"{0}\">\r\n  <Button\r\n    label=\"Add a new item to the queue\"\r\n    onClick=\"{myQueue.enqueueItem(Math.random()); queued++; }\" />\r\n  <Queue id=\"myQueue\"\r\n    onProcess=\"processing =>\r\n      {\r\n          result += processing.item;\r\n          delay(1000);\r\n          processed++;\r\n          processing.onProgress(processed)\r\n      }\r\n    \">\r\n    <property name=\"progressFeedback\">\r\n      <Text value=\"{processed} / {queued}\" />\r\n    </property>\r\n    <property name=\"resultFeedback\">\r\n      <Text value=\"{result.toFixed(4)}\" />\r\n    </property>\r\n  </Queue>\r\n  <ChangeListener\r\n    listenTo=\"{myQueue.getQueueLength()}\"\r\n    onDidChange=\"l => queueLength = l.newValue;\"/>\r\n  <Text>Items queued: {queued}</Text>\r\n  <Text>Current queue length: {queueLength}</Text>\r\n  <Text>Current result: {result.toFixed(4)}</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: using Queue\"\r\n  app={`\r\n    <App\r\n      var.queued=\"{0}\"\r\n      var.queueLength=\"{0}\"\r\n      var.processed=\"{0}\"\r\n      var.result=\"{0}\">\r\n      <Button\r\n        label=\"Add a new item to the queue\"\r\n        onClick=\"{myQueue.enqueueItem(Math.random()); queued++; }\" />\r\n      <Queue id=\"myQueue\"\r\n        onProcess=\"processing =>\r\n          {\r\n             result += processing.item;\r\n             delay(1000);\r\n             processed++;\r\n             processing.onProgress(processed)\r\n          }\r\n        \">\r\n        <property name=\"progressFeedback\">\r\n          <Text value=\"{processed} / {queued}\" />\r\n        </property>\r\n        <property name=\"resultFeedback\">\r\n          <Text value=\"{result.toFixed(4)}\" />\r\n        </property>\r\n      </Queue>\r\n      <ChangeListener\r\n        listenTo=\"{myQueue.getQueueLength()}\"\r\n        onDidChange=\"l => queueLength = l.newValue;\"/>\r\n      <Text>Items queued: {queued}</Text>\r\n      <Text>Current queue length: {queueLength}</Text>\r\n      <Text>Current result: {result.toFixed(4)}</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nTry the app by clicking the button several times. Check how the queue processes the items and displays feedback.\r\n\r\n## Properties\r\n\r\n### `clearAfterFinish`\r\n\r\nThis property indicates the completed items (successful or error) should be removed from the queue after completion.\r\n\r\n### `progressFeedback`\r\n\r\nThis property defines the component template of the UI that displays progress information whenever, the queue's `progressReport` function in invoked.\r\n\r\n### `resultFeedback`\r\n\r\nThis property defines the component template of the UI that displays result information when the queue becomes empty after processing all queued items.\r\n\r\n## Events\r\n\r\n### `complete`\r\n\r\nThe queue fires this event when the queue gets empty after processing all items. The event handler has no arguments.\r\n\r\nThe following sample displays a tick mark every time the queue is emptied:\r\n\r\n```xmlui copy {13}\r\n<App\r\n  var.queued=\"{0}\"\r\n  var.queueEmptied=\"\"\r\n  var.result=\"{0}\">\r\n  <Button\r\n    label=\"Add a new item to the queue\"\r\n    onClick=\"{myQueue.enqueueItem(Math.random()); queued++; }\" />\r\n  <Queue id=\"myQueue\"\r\n    onProcess=\"processing => {\r\n      result += processing.item;\r\n      delay(1000);\r\n    }\"\r\n    onComplete=\"queueEmptied += '✅'\" >\r\n    <property name=\"progressFeedback\">\r\n      <Text value=\"Completed: {$completedItems.length} of {$queuedItems.length}\"/>\r\n    </property>\r\n    <property name=\"resultFeedback\">\r\n      <Text value=\"{result.toFixed(4)}\" />\r\n    </property>\r\n  </Queue>\r\n  <Text>Items queued: {queued}</Text>\r\n  <Text>Current result: {result.toFixed(4)}</Text>\r\n  <Text>Queue emptied: {queueEmptied}</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: complete\"\r\n  app={`\r\n    <App\r\n      var.queued=\"{0}\"\r\n      var.queueEmptied=\"\"\r\n      var.result=\"{0}\">\r\n      <Button\r\n        label=\"Add a new item to the queue\"\r\n        onClick=\"{myQueue.enqueueItem(Math.random()); queued++; }\" />\r\n      <Queue id=\"myQueue\"\r\n        onProcess=\"processing => {\r\n          result += processing.item;\r\n          delay(1000);\r\n        }\"\r\n        onComplete=\"queueEmptied += '✅'\" >\r\n        <property name=\"resultFeedback\">\r\n          <Text value=\"{result.toFixed(4)}\" />\r\n        </property>\r\n        <property name=\"progressFeedback\">\r\n          <Text value=\"Completed: {$completedItems.length} of {$queuedItems.length}\"/>\r\n        </property>\r\n      </Queue>\r\n      <Text>Items queued: {queued}</Text>\r\n      <Text>Current result: {result.toFixed(4)}</Text>\r\n      <Text>Queue emptied: {queueEmptied}</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `didProcess`\r\n\r\nThis event is fired when the processing of a queued item has been successfully processed.\r\n\r\nThe parameter of the event handler is an object with these properties:\r\n- `item`: the item to process\r\n- `actionItemId`: The unique (internal) ID of the item being processed, as generated by the `Queue` component. You can pass this ID to some API methods (for example, to `remove`).\r\n- `processItemContext`: A context object (initially empty) that you can use to add some context-specific information to the item. The event handlers of other events will see this information as the item being processed conveys it.\r\n\r\nThe following sample uses the `didProcess` event handler to add a tick symbol to the progress whenever an item has been processed:\r\n\r\n```xmlui copy {13}\r\n<App\r\n  var.queued=\"{0}\"\r\n  var.progressLine=\"\"\r\n  var.result=\"{0}\">\r\n  <Button\r\n    label=\"Add a new item to the queue\"\r\n    onClick=\"{myQueue.enqueueItem(Math.random()); queued++; }\" />\r\n  <Queue id=\"myQueue\"\r\n    onProcess=\"processing => {\r\n      result += processing.item;\r\n      delay(1000);\r\n    }\"\r\n    onDidProcess=\"progressLine += '✅'\" >\r\n    <property name=\"resultFeedback\">\r\n      <Text value=\"{result.toFixed(4)}\" />\r\n    </property>\r\n  </Queue>\r\n  <Text>Items queued: {queued}</Text>\r\n  <Text>Current result: {result.toFixed(4)}</Text>\r\n  <Text>Progress: {progressLine}</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: didProcess\"\r\n  app={`\r\n    <App\r\n      var.queued=\"{0}\"\r\n      var.progressLine=\"\"\r\n      var.result=\"{0}\">\r\n      <Button\r\n        label=\"Add a new item to the queue\"\r\n        onClick=\"{myQueue.enqueueItem(Math.random()); queued++; }\" />\r\n      <Queue id=\"myQueue\"\r\n        onProcess=\"processing => {\r\n          result += processing.item;\r\n          delay(1000);\r\n        }\"\r\n        onDidProcess=\"progressLine += '✅'\" >\r\n        <property name=\"resultFeedback\">\r\n          <Text value=\"{result.toFixed(4)}\" />\r\n        </property>\r\n      </Queue>\r\n      <Text>Items queued: {queued}</Text>\r\n      <Text>Current result: {result.toFixed(4)}</Text>\r\n      <Text>Progress: {progressLine}</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `process`\r\n\r\nThis event is fired to process the next item in the queue. If the processing cannot proceed because of some error, raise an exception, and the queue will handle that.\r\n\r\nThe parameter of the event handler is an object with these properties:\r\n- `item`: the item to process\r\n- `actionItemId`: The unique (internal) ID of the item being processed, as generated by the `Queue` component. You can pass this ID to some API methods (for example, to `remove`).\r\n- `processItemContext`: A context object (initially empty) that you can use to add some context-specific information to the item. The event handlers of other events will see this information as the item being processed conveys it.\r\n- `reportProgress`: A function you can use to report the progress. Invoke this method with an argument that the `progressFeedback` component's template will utilize.\r\n\r\nSee the example in the [Using Queue](#using-queue) section.\r\n\r\n### `processError`\r\n\r\nThis event is fired when processing an item raises an error. The event handler method receives two parameters. The first is the error raised during the processing of the item; the second is an object with these properties:\r\n\r\n- `item`: the item to process\r\n- `actionItemId`: The unique (internal) ID of the item being processed, as generated by the `Queue` component. You can pass this ID to some API methods (for example, to `remove`).\r\n- `processItemContext`: A context object (initially empty) that you can use to add some context-specific information to the item. The event handlers of other events will see this information as the item being processed conveys it.\r\n\r\nIf the event handler returns false, the queue does not sign the error in the UI. With other return values (including no return value), the queue displays the error.\r\n\r\nThe following sample generates an error for every fourth item, and gives an error feedback with the `processError` event handler:\r\n\r\n```xmlui copy {10-12, 17}\r\n<App\r\n  var.queued=\"{0}\"\r\n  var.progressLine=\"\"\r\n  var.result=\"{0}\">\r\n  <Button\r\n    label=\"Add a new item to the queue\"\r\n    onClick=\"{myQueue.enqueueItem(Math.random()); queued++; }\" />\r\n  <Queue id=\"myQueue\"\r\n    onProcess=\"processing => {\r\n      if (progressLine.length % 4 === 3) {\r\n        throw 'Item cannot be processed';\r\n      }\r\n      result += processing.item;\r\n      delay(1000);\r\n    }\"\r\n    onDidProcess=\"progressLine += '✅'\"\r\n    onProcessError=\"progressLine += '❌'\" >\r\n    <property name=\"resultFeedback\">\r\n      <Text value=\"{result.toFixed(4)}\" />\r\n    </property>\r\n  </Queue>\r\n  <Text>Items queued: {queued}</Text>\r\n  <Text>Current result: {result.toFixed(4)}</Text>\r\n  <Text>Progress: {progressLine}</Text>\r\n</App>\r\n```\r\n\r\nClick the button several times to see how processing errors are handled in the UI.\r\n\r\n<Playground\r\n  name=\"Example: processError\"\r\n  app={`\r\n    <App\r\n      var.queued=\"{0}\"\r\n      var.progressLine=\"\"\r\n      var.result=\"{0}\">\r\n      <Button\r\n        label=\"Add a new item to the queue\"\r\n        onClick=\"{myQueue.enqueueItem(Math.random()); queued++; }\" />\r\n      <Queue id=\"myQueue\"\r\n        onProcess=\"processing => {\r\n          if (progressLine.length % 4 === 3) {\r\n            throw 'Item cannot be processed';\r\n          }\r\n          result += processing.item;\r\n          delay(1000);\r\n        }\"\r\n        onDidProcess=\"progressLine += '✅'\"\r\n        onProcessError=\"progressLine += '❌'\" >\r\n        <property name=\"resultFeedback\">\r\n          <Text value=\"{result.toFixed(4)}\" />\r\n        </property>\r\n      </Queue>\r\n      <Text>Items queued: {queued}</Text>\r\n      <Text>Current result: {result.toFixed(4)}</Text>\r\n      <Text>Progress: {progressLine}</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `willProcess`\r\n\r\nThis event is triggered to process a particular item.\r\n\r\nThis event is fired before the next item in the queue gets processed. If the event handler returns `false`, the queue skips processing that item. With other return values (including no return value), the queue continues processing the item.\r\n\r\nThe parameter of the event handler is an object with these properties:\r\n- `item`: the item to process\r\n- `actionItemId`: The unique (internal) ID of the item being processed, as generated by the `Queue` component. You can pass this ID to some API methods (for example, to `remove`).\r\n- `processItemContext`: A context object (initially empty) that you can use to add some context-specific information to the item. The event handlers of other events will see this information as the item being processed conveys it.\r\n\r\nThe following sample declares a `willProcess` event handler that will skip processing (summing) items less than 0.5; the handler counts the number of skipped items.\r\n\r\n```xmlui copy {9}\r\n<App\r\n  var.queued=\"{0}\"\r\n  var.skipped=\"{0}\"\r\n  var.result=\"{0}\">\r\n  <Button\r\n    label=\"Add a new item to the queue\"\r\n    onClick=\"{myQueue.enqueueItem(Math.random()); queued++; }\" />\r\n  <Queue id=\"myQueue\"\r\n    onWillProcess=\"toProcess => toProcess.item < 0.5 ? (skipped++, false) : true\"\r\n    onProcess=\"processing => {\r\n      result += processing.item;\r\n      delay(1000);\r\n    }\">\r\n    <property name=\"resultFeedback\">\r\n      <Text value=\"{result.toFixed(4)}\" />\r\n    </property>\r\n  </Queue>\r\n  <Text>Items queued: {queued}</Text>\r\n  <Text>Items skipped: {skipped}</Text>\r\n  <Text>Current result: {result.toFixed(4)}</Text>\r\n</App>\r\n```\r\n\r\nClick the button several times and see how the number of skipped items increments.\r\n\r\n<Playground\r\n  name=\"Example: willProcess\"\r\n  app={`\r\n    <App\r\n      var.queued=\"{0}\"\r\n      var.skipped=\"{0}\"\r\n      var.result=\"{0}\">\r\n      <Button\r\n        label=\"Add a new item to the queue\"\r\n        onClick=\"{myQueue.enqueueItem(Math.random()); queued++; }\" />\r\n      <Queue id=\"myQueue\"\r\n        onWillProcess=\"toProcess => toProcess.item < 0.5 ? (skipped++, false) : true\"\r\n        onProcess=\"processing => {\r\n          result += processing.item;\r\n          delay(1000);\r\n        }\">\r\n        <property name=\"resultFeedback\">\r\n          <Text value=\"{result.toFixed(4)}\" />\r\n        </property>\r\n      </Queue>\r\n      <Text>Items queued: {queued}</Text>\r\n      <Text>Items skipped: {skipped}</Text>\r\n      <Text>Current result: {result.toFixed(4)}</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Exposed Methods\r\n\r\n### `enqueueItem`\r\n\r\nThis method enqueues the item passed in the method parameter. The new item will be processed after the current queue items have been handled. The method retrieves the unique ID of the newly added item; this ID can be used later in other methods, such as `remove`.\r\n\r\nThe following example stores and displays this item when a new item is put into the queue:\r\n\r\n```xmlui copy {5} /enqueueItem/\r\n<App var.queued=\"{0}\" var.itemIds=\"\">\r\n  <Button\r\n    label=\"Add a new item to the queue\"\r\n    onClick=\"{\r\n      const itemId = myQueue.enqueueItem(Math.random()); \r\n      itemIds += itemId + ', '; queued++;\r\n    }\" />\r\n  <Queue id=\"myQueue\" onProcess=\"processing => {}\" />\r\n  <Text>Items queued: {queued}</Text>\r\n  <Text>Item IDs: {itemIds}</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: enqueueItem\"\r\n  app={`\r\n    <App var.queued=\"{0}\" var.itemIds=\"\">\r\n      <Button\r\n        label=\"Add a new item to the queue\"\r\n        onClick=\"{\r\n          const itemId = myQueue.enqueueItem(Math.random()); \r\n          itemIds += itemId + ', '; queued++;\r\n        }\" />\r\n      <Queue id=\"myQueue\" onProcess=\"processing => {}\" />\r\n      <Text>Items queued: {queued}</Text>\r\n      <Text>Item IDs: {itemIds}</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `enqueueItems`\r\n\r\nThis method enqueues the array of items passed in the method parameter. The new items will be processed after the current queue items have been handled. The method retrieves an array of unique IDs, one for each new item. An item ID can be used later in other methods, such as `remove`.\r\n\r\n### `getQueueLength`\r\n\r\nThis method retrieves the current queue length. The queue contains only those items that are not fully processed yet.\r\n\r\n### `getQueuedItems`\r\n\r\nYou can use this method to return the items in the queue. These items contain all entries not removed from the queue yet, including pending, in-progress, and completed items.\r\n\r\nThis method returns the items currently in the queue with their entire context. The result of this method is a list of objects with these properties:\r\n\r\n- `item`: The queued item (as passed to the `enqueueItem` and `enqueueItems` methods)\r\n- `actionItemId`: The unique (internal) ID of the item being processed, as generated by the `Queue` component.\r\n- `status`: The current processing status of the item; one of the following values: `\"pending\"`, `\"started\"`, `\"in-progress\"`, `\"completed\"`, or `\"error\"`\r\n- `progress`: The latest progress value reported for the item (may be undefined)\r\n- `result`: The optional value the `process` event handler returns.\r\n\r\n> **Note**: When all items are processed, the queue removes the items and fires the `complete` event. When the event handler runs, the queue is empty, and `getQueuedItems` returns an empty list.\r\n\r\n### `remove`\r\n\r\nThis method retrieves the current queue length. The queue contains only those items that are not fully processed yet.\r\n\r\nThis method removes an item from the queue. The parameter of this method is the unique ID of the item returned from the `enqueueItem` (or `enqueueItems` method.\r\n\r\nThe following example emulates a file-processing application. When a file is about to save (in the `process` event), the processing fails with files that deny overwrite. In such a case, the `processError` event handler asks the user to confirm the overwrite action. In case of confirmation, the queue uses the `remove` action to discard the faulty queue item and enqueues the file again with the `accept` behavior so that it won't fail next time.\r\n\r\n```xmlui copy {21}\r\n<App var.queued=\"{0}\" var.processed=\"\" var.skipped=\"{0}\">\r\n  <Button\r\n    label=\"Add a new file to the queue\"\r\n    onClick=\"{myQueue.enqueueItem({file: ++queued, conflict: 'deny'})}\" />\r\n  <Queue id=\"myQueue\"\r\n    onProcess=\"processing =>\r\n      {\r\n          delay(1000);\r\n          if (processing.item.conflict === 'deny') {\r\n            throw 'Conflict';\r\n          }\r\n          processed += processing.item.file + ', ';\r\n      }\r\n    \"\r\n    onProcessError=\"(error, processing) => {\r\n      if (error.message === 'Conflict') {\r\n        console.log(error);\r\n        const result = confirm('Do you want to overwrite?', \r\n          'File ' + processing.item.file + ' already exists', \r\n          'Overwrite');\r\n        $this.remove(processing.actionItemId);\r\n        if (result) {\r\n          $this.enqueueItems([{...processing.item, conflict: 'accept'}]);\r\n        }\r\n        return false;\r\n      }\r\n    }\">\r\n    <property name=\"resultFeedback\">\r\n      <Text value=\"All items processed\" />\r\n    </property>\r\n  </Queue>\r\n  <Text>Items queued: {queued}</Text>\r\n  <Text>Processed: {processed}</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: remove\"\r\n  app={`\r\n    <App var.queued=\"{0}\" var.processed=\"\" var.skipped=\"{0}\">\r\n      <Button\r\n        label=\"Add a new file to the queue\"\r\n        onClick=\"{myQueue.enqueueItem({file: ++queued, conflict: 'deny'})}\" />\r\n      <Queue id=\"myQueue\"\r\n        onProcess=\"processing =>\r\n          {\r\n             delay(1000);\r\n             if (processing.item.conflict === 'deny') {\r\n               throw 'Conflict';\r\n             }\r\n             processed += processing.item.file + ', ';\r\n          }\r\n        \"\r\n        onProcessError=\"(error, processing) => {\r\n          if (error.message === 'Conflict') {\r\n            console.log(error);\r\n            const result = confirm('Do you want to overwrite?', \r\n              'File ' + processing.item.file + ' already exists', \r\n              'Overwrite');\r\n            $this.remove(processing.actionItemId);\r\n            if (result) {\r\n              $this.enqueueItems([{...processing.item, conflict: 'accept'}]);\r\n            }\r\n            return false;\r\n          }\r\n        }\">\r\n        <property name=\"resultFeedback\">\r\n          <Text value=\"All items processed\" />\r\n        </property>\r\n      </Queue>\r\n      <Text>Items queued: {queued}</Text>\r\n      <Text>Processed: {processed}</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/RadioGroup":"import { Callout } from \"nextra/components\";\r\n\r\n# RadioGroup [#component-radiogroup]\r\n\r\nThe `RadioGroup` input component is a group of radio buttons ([`RadioGroupOption`](./RadioGroupOption.mdx) components) that allow users to select only one option from the group at a time.\r\n\r\n`RadioGroup` is often used in forms. See the [Using Forms](/learning/using-components/forms.mdx) guide for details.\r\n\r\n## Properties\r\n\r\n### `autoFocus (default: false)`\r\n\r\nIf this property is set to `true`, the component gets the focus automatically when displayed.\r\n\r\n### `enabled (default: true)`\r\n\r\nThis boolean property value indicates whether the component responds to user events (`true`) or not (`false`).\r\n\r\nThis property indicates whether the input accepts user actions (`true`) or not (`false`). The default value is `true`.\r\n\r\n```xmlui copy /enabled=\"false\"/\r\n<App>\r\n  <RadioGroup initialValue=\"first\" enabled=\"false\">\r\n    <HStack padding=\"$space-normal\">\r\n      <Option label=\"First Item\" value=\"first\"/>\r\n      <Option label=\"Second Item\" value=\"second\"/>\r\n      <Option label=\"Third Item\" value=\"third\"/>\r\n    </HStack>\r\n  </RadioGroup>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: enabled\"\r\n  app={`\r\n    <App>\r\n      <RadioGroup initialValue=\"first\" enabled=\"false\">\r\n        <HStack padding=\"$space-normal\">\r\n          <Option label=\"First Item\" value=\"first\"/>\r\n          <Option label=\"Second Item\" value=\"second\"/>\r\n          <Option label=\"Third Item\" value=\"third\"/>\r\n        </HStack>\r\n      </RadioGroup>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `initialValue`\r\n\r\nThis property sets the component's initial value.\r\n\r\nThis property defines the initial value of the selected option within the group.\r\n\r\n```xmlui copy /initialValue=\"first\"/\r\n<App>\r\n  <RadioGroup initialValue=\"first\">\r\n    <HStack padding=\"$space-normal\">\r\n      <Option label=\"First Item\" value=\"first\"/>\r\n      <Option label=\"Second Item\" value=\"second\"/>\r\n      <Option label=\"Third Item\" value=\"third\"/>\r\n    </HStack>\r\n  </RadioGroup>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: initialValue\"\r\n  app={`\r\n    <App>\r\n      <RadioGroup initialValue=\"first\">\r\n        <HStack padding=\"$space-normal\">\r\n          <Option label=\"First Item\" value=\"first\"/>\r\n          <Option label=\"Second Item\" value=\"second\"/>\r\n          <Option label=\"Third Item\" value=\"third\"/>\r\n        </HStack>\r\n      </RadioGroup>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\n### `labelBreak (default: false)`\r\n\r\nThis boolean value indicates if the `RadioGroup` labels can be split into multiple lines if it would overflow the available label width.\r\n\r\n### `labelPosition (default: \"top\")`\r\n\r\nPlaces the label at the given position of the component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `start` | The left side of the input (left-to-right) or the right side of the input (right-to-left) |\r\n| `end` | The right side of the input (left-to-right) or the left side of the input (right-to-left) |\r\n| `top` | The top of the input **(default)** |\r\n| `bottom` | The bottom of the input |\r\n\r\n### `labelWidth`\r\n\r\nThis property sets the width of the `RadioGroup`.\r\n\r\n### `orientation`\r\n\r\n(*** NOT IMPLEMENTED YET ***) This property sets the orientation of the options within the radio group.\r\n\r\n### `readOnly (default: false)`\r\n\r\nSet this property to `true` to disallow changing the component value.\r\n\r\n### `required`\r\n\r\nSet this property to `true` to indicate it must have a value before submitting the containing form.\r\n\r\n### `validationStatus (default: \"none\")`\r\n\r\nThis property allows you to set the validation status of the input component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `valid` | Visual indicator for an input that is accepted |\r\n| `warning` | Visual indicator for an input that produced a warning |\r\n| `error` | Visual indicator for an input that produced an error |\r\n\r\nThis prop is used to visually indicate status changes reacting to form field validation.\r\n\r\n| Value     | Description                                           |\r\n| :-------- | :---------------------------------------------------- |\r\n| `valid`   | Visual indicator for an input that is accepted        |\r\n| `warning` | Visual indicator for an input that produced a warning |\r\n| `error`   | Visual indicator for an input that produced an error  |\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    <RadioGroup initialValue=\"first\" validationStatus=\"error\">\r\n      <Option label=\"First Item\" value=\"first\"/>\r\n      <Option label=\"Second Item\" value=\"second\"/>\r\n    </RadioGroup>\r\n    <RadioGroup initialValue=\"first\" validationStatus=\"warning\">\r\n      <Option label=\"First Item\" value=\"first\"/>\r\n      <Option label=\"Second Item\" value=\"second\"/>\r\n    </RadioGroup>\r\n    <RadioGroup initialValue=\"first\" validationStatus=\"valid\">\r\n      <Option label=\"First Item\" value=\"first\"/>\r\n      <Option label=\"Second Item\" value=\"second\"/>\r\n    </RadioGroup>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: validationStatus\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <RadioGroup initialValue=\"first\" validationStatus=\"error\">\r\n          <Option label=\"First Item\" value=\"first\"/>\r\n          <Option label=\"Second Item\" value=\"second\"/>\r\n        </RadioGroup>\r\n        <RadioGroup initialValue=\"first\" validationStatus=\"warning\">\r\n          <Option label=\"First Item\" value=\"first\"/>\r\n          <Option label=\"Second Item\" value=\"second\"/>\r\n        </RadioGroup>\r\n        <RadioGroup initialValue=\"first\" validationStatus=\"valid\">\r\n          <Option label=\"First Item\" value=\"first\"/>\r\n          <Option label=\"Second Item\" value=\"second\"/>\r\n        </RadioGroup>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `didChange`\r\n\r\nThis event is triggered when value of RadioGroup has changed.\r\n\r\nThis event is triggered after the user has changed the field value. The following example uses this event to display the selected option's value:\r\n\r\n```xmlui copy /onDidChange=\"(val) => field = val\"/\r\n<App var.field=\"\">\r\n  <RadioGroup initialValue=\"{field}\" onDidChange=\"(val) => field = val\">\r\n    <Option label=\"First Item\" value=\"first\"/>\r\n    <Option label=\"Second Item\" value=\"second\"/>\r\n  </RadioGroup>\r\n  <Text value=\"{field}\" />\r\n</App>\r\n```\r\n\r\nSelect one of the available options and see how the `Text` underneath it is updated in parallel:\r\n\r\n<Playground\r\n  name=\"Example: didChange\"\r\n  app={`\r\n    <App var.field=\"\">\r\n      <RadioGroup initialValue=\"{field}\" onDidChange=\"(val) => field = val\">\r\n        <Option label=\"First Item\" value=\"first\"/>\r\n        <Option label=\"Second Item\" value=\"second\"/>\r\n      </RadioGroup>\r\n      <Text value=\"{field}\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `gotFocus`\r\n\r\nThis event is triggered when the RadioGroup has received the focus.\r\n\r\n### `lostFocus`\r\n\r\nThis event is triggered when the RadioGroup has lost the focus.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\n`RadioGroup` is a component that governs its children and stores the selected value. It does not support styling; however, you can style the options within the group. When you set the theme variables for the group's options, use the `RadioGroupOption` name.\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-RadioGroupOption--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-RadioGroupOption--disabled] | $borderColor-RadioGroupOption--disabled | $borderColor-RadioGroupOption--disabled |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-RadioGroupOption-default | $color-primary-500 | $color-primary-500 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-RadioGroupOption-error | $borderColor-RadioGroupOption-error | $borderColor-RadioGroupOption-error |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-RadioGroupOption-success | $borderColor-RadioGroupOption-success | $borderColor-RadioGroupOption-success |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-RadioGroupOption-warning | $borderColor-RadioGroupOption-warning | $borderColor-RadioGroupOption-warning |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-RadioGroupOption-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-RadioGroupOption--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-RadioGroupOption-default | $color-surface-500 | $color-surface-500 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-RadioGroupOption-default | $color-surface-500 | $color-surface-500 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-RadioGroupOption-default--active | $color-primary-500 | $color-primary-500 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-RadioGroupOption-default--active | $color-primary-500 | $color-primary-500 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-RadioGroupOption-default--hover | $color-surface-700 | $color-surface-700 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-RadioGroupOption-default--hover | $color-surface-700 | $color-surface-700 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-RadioGroupOption-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-RadioGroupOption-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-RadioGroupOption-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-RadioGroupOption | 2px | 2px |\r\n| [color](../styles-and-themes/common-units/#color)-RadioGroupOption--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-RadioGroupOption-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-RadioGroupOption-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-RadioGroupOption-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-RadioGroupOption-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-RadioGroupOption | $fontSize-small | $fontSize-small |\r\n| [fontSize](../styles-and-themes/common-units/#size)-RadioGroupOption | $fontSize-small | $fontSize-small |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-RadioGroupOption | $fontWeight-bold | $fontWeight-bold |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-RadioGroupOption | $fontWeight-bold | $fontWeight-bold |\r\n| [gap](../styles-and-themes/common-units/#size)-RadioGroupOption | $space-1_5 | $space-1_5 |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-RadioGroupOption--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-RadioGroupOption--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-RadioGroupOption--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-RadioGroupOption--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-RadioGroupOption-error | $borderColor-RadioGroupOption-error | $borderColor-RadioGroupOption-error |\r\n| [textColor](../styles-and-themes/common-units/#color)-RadioGroupOption-success | $borderColor-RadioGroupOption-success | $borderColor-RadioGroupOption-success |\r\n| [textColor](../styles-and-themes/common-units/#color)-RadioGroupOption-warning | $borderColor-RadioGroupOption-warning | $borderColor-RadioGroupOption-warning |\r\n",
  "components/RealTimeAdapter":"import { Callout } from \"nextra/components\";\r\n\r\n# RealTimeAdapter [#component-realtimeadapter]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\n`RealTimeAdapter` is a non-visual component that listens to real-time events through long-polling.\r\n\r\n## Properties\r\n\r\n### `url`\r\n\r\nThis property specifies the URL to use for long-polling.\r\n\r\n## Events\r\n\r\n### `eventArrived`\r\n\r\nThis event is raised when data arrives from the backend using long-polling.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/Redirect":"import { Callout } from \"nextra/components\";\r\n\r\n# Redirect [#component-redirect]\r\n\r\n`Redirect` is a component that immediately redirects the browser to the URL in its `to` property when it gets visible (its `when` property gets `true`). The redirection works only within the app.\r\n\r\n## Using `Redirect`\r\n\r\nThe following app demonstrates two different patterns for using `Redirect`.\r\n\r\n1. When you navigate to the \"Redirect #1\" page, it immediately redirects the app to the \"Accounts\" page. By default, the  `when` property of `Redirect` (and any other component) is \"true\", so redirection immediately happens.\r\n2. The \"Redirect #2\" page expects you to click the button before redirecting. The button click sets the `when` property of `Redirect` to true, and redirection happens at that moment.\r\n\r\n```xmlui copy {14, 20}\r\n<App>\r\n  <NavPanel>\r\n    <NavLink to=\"/\">Home</NavLink>\r\n    <NavLink to=\"/accounts\">Accounts</NavLink>\r\n    <NavLink to=\"/products\">Products</NavLink>\r\n    <NavLink to=\"/redirect1\">Redirect #1</NavLink>\r\n    <NavLink to=\"/redirect2\">Redirect #2</NavLink>\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">Home</Page>\r\n    <Page url=\"/accounts\">Accounts</Page>\r\n    <Page url=\"/products\">Products</Page>\r\n    <Page url=\"/redirect1\">\r\n      <Redirect to=\"/accounts\" />\r\n      Redirecting to Accounts...\r\n    </Page>\r\n    <Page url=\"/redirect2\">\r\n      <Fragment var.clicked=\"{false}\">\r\n        <Button label=\"Click to redirect\" onClick=\"clicked = true\"/>\r\n        <Redirect when=\"{clicked}\" to=\"/accounts\" />\r\n        Redirecting to Accounts...\r\n      </Fragment>\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\nTry the app!\r\n\r\n<Playground\r\n  name=\"Example: providing children\"\r\n  height={170}\r\n  app={`\r\n    <App>\r\n      <NavPanel>\r\n        <NavLink to=\"/\">Home</NavLink>\r\n        <NavLink to=\"/accounts\">Accounts</NavLink>\r\n        <NavLink to=\"/products\">Products</NavLink>\r\n        <NavLink to=\"/redirect1\">Redirect #1</NavLink>\r\n        <NavLink to=\"/redirect2\">Redirect #2</NavLink>\r\n      </NavPanel>\r\n      <Pages>\r\n        <Page url=\"/\">Home</Page>\r\n        <Page url=\"/accounts\">Accounts</Page>\r\n        <Page url=\"/products\">Products</Page>\r\n        <Page url=\"/redirect1\">\r\n          <Redirect to=\"/accounts\" />\r\n          Redirecting to Accounts...\r\n        </Page>\r\n        <Page url=\"/redirect2\">\r\n          <Fragment var.clicked=\"{false}\">\r\n            <Button label=\"Click to redirect\" onClick=\"clicked = true\"/>\r\n            <Redirect when=\"{clicked}\" to=\"/accounts\" />\r\n            Redirecting to Accounts...\r\n          </Fragment>\r\n        </Page>\r\n      </Pages>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\n### `to`\r\n\r\nThis property defines the URL to which this component is about to redirect requests.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/Select":"import { Callout } from \"nextra/components\";\r\n\r\n# Select [#component-select]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nProvides a dropdown with a list of options to choose from.\r\n\r\nThe component provides context values with which you can access some internal properties:\r\n\r\n- `$item`: This property represents the value of an item in the dropdown list.\r\n- `$itemContext`: This property provides a `removeItem` method to delete the particular value from the selection.\r\n\r\n## Using `Select`\r\n\r\nThe component accepts `Option` components as children defining a particular option's label-value pair.\r\n`Option` requires a `value` property and while also having a `label` that is displayed in the list.\r\nIf the `label` is not specified `value` is shown.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Select>\r\n    <Option value=\"opt1\" label=\"first\"/>\r\n    <Option value=\"opt2\" label=\"second\"/>\r\n    <Option value=\"opt3\" label=\"third\"/>\r\n  </Select>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: using Select\"\r\n    height={200}\r\n    app={`\r\n    <App>\r\n      <Select>\r\n        <Option value=\"opt1\" label=\"first\"/>\r\n        <Option value=\"opt2\" label=\"second\" enabled=\"false\" />\r\n        <Option value=\"opt3\" label=\"third\"/>\r\n      </Select>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nYou can use `Select` with dynamic options:\r\n\r\n```xmlui copy\r\n<App>\r\n  <Select>\r\n    <Items data=\"{['one', 'two', 'three']}\" >\r\n      <Option value=\"{$itemIndex}\" label=\"{$item}\" />\r\n    </Items> \r\n  </Select>\r\n</App>  \r\n```\r\n\r\n<Playground\r\n  name=\"Example: using Select with dynamic options\"\r\n  height={200}\r\n  app={`\r\n    <App>\r\n      <Select>\r\n        <Items data=\"{['one', 'two', 'three']}\" >\r\n          <Option value=\"{$itemIndex}\" label=\"{$item}\" />\r\n        </Items> \r\n      </Select>\r\n    </App>  \r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\n### `autoFocus (default: false)`\r\n\r\nIf this property is set to `true`, the component gets the focus automatically when displayed.\r\n\r\n### `dropdownHeight`\r\n\r\nThis property sets the height of the dropdown list.\r\n\r\n```xmlui copy /dropdownHeight=\"180px\"/\r\n<App>\r\n  <Select dropdownHeight=\"180px\">\r\n    <Option value=\"opt1\" label=\"first\"/>\r\n    <Option value=\"opt2\" label=\"second\"/>\r\n    <Option value=\"opt3\" label=\"third\"/>\r\n    <!-- Omitted -->\r\n    <Option value=\"opt11\" label=\"eleventh\"/>\r\n    <Option value=\"opt12\" label=\"twelfth\"/>\r\n  </Select>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: dropdownHeight\"\r\n  height={300}\r\n  app={`\r\n    <App>\r\n      <Select dropdownHeight=\"180px\">\r\n        <Option value=\"opt1\" label=\"first\"/>\r\n        <Option value=\"opt2\" label=\"second\"/>\r\n        <Option value=\"opt3\" label=\"third\"/>\r\n        <Option value=\"opt4\" label=\"fourth\"/>\r\n        <Option value=\"opt5\" label=\"fifth\"/>\r\n        <Option value=\"opt6\" label=\"sixth\"/>\r\n        <Option value=\"opt7\" label=\"seventh\"/>\r\n        <Option value=\"opt8\" label=\"eighth\"/>\r\n        <Option value=\"opt9\" label=\"ninth\"/>\r\n        <Option value=\"opt10\" label=\"tenth\"/>\r\n        <Option value=\"opt11\" label=\"eleventh\"/>\r\n        <Option value=\"opt12\" label=\"twelfth\"/>\r\n      </Select>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `emptyListTemplate`\r\n\r\nThis optional property provides the ability to customize what is displayed when the list of options is empty.\r\n\r\nClick on the second field to see the custom empty list indicator.\r\n\r\n```xmlui copy {9-11}\r\n<App>\r\n  <VStack>\r\n    <Text value=\"Default:\" />\r\n    <Select />\r\n  </VStack>\r\n  <VStack>\r\n    <Text value=\"Custom:\" />\r\n    <Select>\r\n      <property name=\"emptyListTemplate\">\r\n        <Text variant=\"strong\" value=\"Nothing to see here!\" />\r\n      </property>\r\n    </Select>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: emptyListTemplate\"\r\n    height={260}\r\n    app={`\r\n    <App>\r\n      <VStack>\r\n        <Text value=\"Default:\" />\r\n        <Select />\r\n      </VStack>\r\n      <VStack>\r\n        <Text value=\"Custom:\" />\r\n        <Select>\r\n          <property name=\"emptyListTemplate\">\r\n            <Text variant=\"strong\" value=\"Nothing to see here!\" />\r\n          </property>\r\n        </Select>\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `enabled (default: true)`\r\n\r\nThis boolean property value indicates whether the component responds to user events (`true`) or not (`false`).\r\n\r\n```xmlui copy\r\n<App>\r\n  <Select enabled=\"false\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: enabled\"\r\n    app={`\r\n    <App>\r\n      <Select enabled=\"false\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `inProgress`\r\n\r\nThis property indicates whether the component is in progress. It can be used to show a loading message.\r\n\r\n### `inProgressNotificationMessage`\r\n\r\nThis property indicates the message to display when the component is in progress.\r\n\r\n### `initialValue`\r\n\r\nThis property sets the component's initial value.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Select initialValue=\"opt3\">\r\n    <Option value=\"opt1\" label=\"first\"/>\r\n    <Option value=\"opt2\" label=\"second\"/>\r\n    <Option value=\"opt3\" label=\"third\"/>\r\n  </Select>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: initialValue\"\r\n    height={200}\r\n    app={`\r\n    <App>\r\n      <Select initialValue=\"opt3\">\r\n        <Option value=\"opt1\" label=\"first\"/>\r\n        <Option value=\"opt2\" label=\"second\"/>\r\n        <Option value=\"opt3\" label=\"third\"/>\r\n      </Select>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\n### `labelBreak (default: false)`\r\n\r\nThis boolean value indicates if the `Select` labels can be split into multiple lines if it would overflow the available label width.\r\n\r\n### `labelPosition (default: \"top\")`\r\n\r\nPlaces the label at the given position of the component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `start` | The left side of the input (left-to-right) or the right side of the input (right-to-left) |\r\n| `end` | The right side of the input (left-to-right) or the left side of the input (right-to-left) |\r\n| `top` | The top of the input **(default)** |\r\n| `bottom` | The bottom of the input |\r\n\r\n### `labelWidth`\r\n\r\nThis property sets the width of the `Select`.\r\n\r\n### `maxLength`\r\n\r\nThis property sets the maximum length of the input it accepts.\r\n\r\n### `multiSelect (default: false)`\r\n\r\nThe `true` value of the property indicates if the user can select multiple items.\r\n\r\n```xmlui copy /multiSelect=\"true\"/\r\n<App>\r\n  <Select multiSelect=\"true\" dropdownHeight=\"180px\" >\r\n    <Option value=\"opt1\" label=\"first\"/>\r\n    <Option value=\"opt2\" label=\"second\"/>\r\n    <Option value=\"opt3\" label=\"third\"/>\r\n    <!-- Omitted -->\r\n    <Option value=\"opt11\" label=\"eleventh\"/>\r\n    <Option value=\"opt12\" label=\"twelfth\"/>\r\n  </Select>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: multiSelect\"\r\n  height={300}\r\n  app={`\r\n    <App>\r\n      <Select multiSelect=\"true\" dropdownHeight=\"180px\" >\r\n        <Option value=\"opt1\" label=\"first\"/>\r\n        <Option value=\"opt2\" label=\"second\"/>\r\n        <Option value=\"opt3\" label=\"third\"/>\r\n        <Option value=\"opt4\" label=\"fourth\"/>\r\n        <Option value=\"opt5\" label=\"fifth\"/>\r\n        <Option value=\"opt6\" label=\"sixth\"/>\r\n        <Option value=\"opt7\" label=\"seventh\"/>\r\n        <Option value=\"opt8\" label=\"eighth\"/>\r\n        <Option value=\"opt9\" label=\"ninth\"/>\r\n        <Option value=\"opt10\" label=\"tenth\"/>\r\n        <Option value=\"opt11\" label=\"eleventh\"/>\r\n        <Option value=\"opt12\" label=\"twelfth\"/>\r\n      </Select>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `optionLabelTemplate`\r\n\r\nThis property allows replacing the default template to display an option in the dropdown list.\r\n\r\nIn the template definition, you can use the `$item` context property to access the particular item's `label` and `value`. \r\n\r\n```xmlui copy {3-9} /optionLabelTemplate/\r\n<App>\r\n  <Select initialValue=\"{0}\" placeholder=\"Select...\" searchable>\r\n    <property name=\"optionLabelTemplate\">\r\n      <HStack \r\n        paddingHorizontal=\"$padding-tight\" \r\n        border=\"2px dotted $color-primary-500\">\r\n        <Text>{$item.label}</Text>\r\n      </HStack>\r\n    </property>\r\n    <Option value=\"{0}\" label=\"zero\"/>\r\n    <Option value=\"opt1\" label=\"first\"/>\r\n    <Option value=\"opt2\" label=\"second\"/>\r\n    <Option value=\"opt3\" label=\"third\"/>\r\n  </Select>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: optionLabelTemplate\"\r\n  height={300}\r\n  app={`\r\n    <App>\r\n      <Select initialValue=\"{0}\" placeholder=\"Select...\" searchable>\r\n        <property name=\"optionLabelTemplate\">\r\n          <HStack \r\n            paddingHorizontal=\"$padding-tight\" \r\n            border=\"2px dotted $color-primary-500\">\r\n            <Text>{$item.label}</Text>\r\n          </HStack>\r\n        </property>\r\n        <Option value=\"{0}\" label=\"zero\"/>\r\n        <Option value=\"opt1\" label=\"first\"/>\r\n        <Option value=\"opt2\" label=\"second\"/>\r\n        <Option value=\"opt3\" label=\"third\"/>\r\n      </Select>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `optionTemplate`\r\n\r\nThis property allows replacing the default template to display an option in the dropdown list.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Select>\r\n    <property name=\"optionTemplate\">\r\n      <HStack verticalAlignment=\"center\" gap=\"$space-0_5\">\r\n        <Icon name=\"info\" />\r\n        <Text value=\"{$item.label}\" variant=\"strong\" />\r\n      </HStack>\r\n    </property>\r\n    <Option value=\"opt1\" label=\"first\"/>\r\n    <Option value=\"opt2\" label=\"second\"/>\r\n    <Option value=\"opt3\" label=\"third\"/>\r\n  </Select>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: optionTemplate\"\r\n    height={200}\r\n    app={`\r\n    <App>\r\n      <Select>\r\n        <property name=\"optionTemplate\">\r\n          <HStack verticalAlignment=\"center\" gap=\"$space-0_5\">\r\n            <Icon name=\"info\" />\r\n            <Text value=\"{$item.label}\" variant=\"strong\" />\r\n          </HStack>\r\n        </property>\r\n        <Option value=\"opt1\" label=\"first\"/>\r\n        <Option value=\"opt2\" label=\"second\"/>\r\n        <Option value=\"opt3\" label=\"third\"/>\r\n      </Select>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `placeholder`\r\n\r\nA placeholder text that is visible in the input field when its empty.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Select placeholder=\"Please select an item\">\r\n    <Option value=\"opt1\" label=\"first\"/>\r\n    <Option value=\"opt2\" label=\"second\"/>\r\n    <Option value=\"opt3\" label=\"third\"/>\r\n  </Select>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: placeholder\"\r\n    height={200}\r\n    app={`\r\n    <App>\r\n      <Select placeholder=\"Please select an item\">\r\n        <Option value=\"opt1\" label=\"first\"/>\r\n        <Option value=\"opt2\" label=\"second\"/>\r\n        <Option value=\"opt3\" label=\"third\"/>\r\n      </Select>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `readOnly (default: false)`\r\n\r\nSet this property to `true` to disallow changing the component value.\r\n\r\n### `required`\r\n\r\nSet this property to `true` to indicate it must have a value before submitting the containing form.\r\n\r\n### `searchable`\r\n\r\nThis property enables the search functionality in the dropdown list.\r\n\r\n### `validationStatus (default: \"none\")`\r\n\r\nThis property allows you to set the validation status of the input component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `valid` | Visual indicator for an input that is accepted |\r\n| `warning` | Visual indicator for an input that produced a warning |\r\n| `error` | Visual indicator for an input that produced an error |\r\n\r\n```xmlui copy\r\n<App>\r\n  <Select />\r\n  <Select validationStatus=\"valid\" />\r\n  <Select validationStatus=\"warning\" />\r\n  <Select validationStatus=\"error\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: validationStatus\"\r\n    app={`\r\n    <App>\r\n      <Select />\r\n      <Select validationStatus=\"valid\" />\r\n      <Select validationStatus=\"warning\" />\r\n      <Select validationStatus=\"error\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `valueTemplate`\r\n\r\nThis property allows replacing the default template to display a selected value when multiple selections (`multiSelect` is `true`) are enabled.\r\n\r\nIn the template definition, you can use the `$item` context property to access the particular item's `label` and `value`.  The `$itemContext` property provides a `removeItem` method to delete a value from the current selection.\r\n\r\n```xmlui copy {3-15} /valueTemplate/\r\n<App>\r\n  <Select initialValue=\"{0}\" placeholder=\"Select...\" multiSelect>\r\n    <property name=\"valueTemplate\">\r\n      <HStack \r\n        paddingLeft=\"$padding-tight\" \r\n        border=\"2px dotted $color-primary-500\"              \r\n        verticalAlignment=\"center\">\r\n        <Text>{$item.label}</Text>\r\n        <Button \r\n          variant=\"ghost\"\r\n          icon=\"close\" \r\n          size=\"xs\" \r\n          onClick=\"$itemContext.removeItem()\"/>\r\n      </HStack>\r\n    </property>\r\n    <Option value=\"{0}\" label=\"zero\"/>\r\n    <Option value=\"opt1\" label=\"first\"/>\r\n    <Option value=\"opt2\" label=\"second\"/>\r\n    <Option value=\"opt3\" label=\"third\"/>\r\n  </Select>\r\n</App>  \r\n```\r\n\r\n<Playground\r\n  name=\"Example: valueTemplate\"\r\n  height={300}\r\n  app={`\r\n    <App>\r\n      <Select initialValue=\"{0}\" placeholder=\"Select...\" multiSelect>\r\n        <property name=\"valueTemplate\">\r\n          <HStack \r\n            paddingLeft=\"$padding-tight\" \r\n            border=\"2px dotted $color-primary-500\"              \r\n            verticalAlignment=\"center\">\r\n            <Text>{$item.label}</Text>\r\n            <Button \r\n              variant=\"ghost\"\r\n              icon=\"close\" \r\n              size=\"xs\" \r\n              onClick=\"$itemContext.removeItem()\"/>\r\n          </HStack>\r\n        </property>\r\n        <Option value=\"{0}\" label=\"zero\"/>\r\n        <Option value=\"opt1\" label=\"first\"/>\r\n        <Option value=\"opt2\" label=\"second\"/>\r\n        <Option value=\"opt3\" label=\"third\"/>\r\n      </Select>\r\n    </App>  \r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `didChange`\r\n\r\nThis event is triggered when value of Select has changed.\r\n\r\n```xmlui copy /onDidChange=\"(newItem) => newValue = newItem\"/\r\n<App>\r\n  <variable name=\"newValue\" value=\"\" />\r\n  <Text value=\"{newValue}\" />\r\n  <Select onDidChange=\"(newItem) => newValue = newItem\">\r\n    <Option value=\"opt1\" label=\"first\"/>\r\n    <Option value=\"opt2\" label=\"second\"/>\r\n    <Option value=\"opt3\" label=\"third\"/>\r\n  </Select>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: didChange\"\r\n    height={200}\r\n    app={`\r\n    <App>\r\n      <variable name=\"newValue\" value=\"\" />\r\n      <Text value=\"{newValue}\" />\r\n      <Select onDidChange=\"(newItem) => newValue = newItem\">\r\n        <Option value=\"opt1\" label=\"first\"/>\r\n        <Option value=\"opt2\" label=\"second\"/>\r\n        <Option value=\"opt3\" label=\"third\"/>\r\n      </Select>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `gotFocus`\r\n\r\nThis event is triggered when the Select has received the focus.\r\n\r\n```xmlui copy {5-6}\r\n<App>\r\n  <variable name=\"isFocused\" value=\"{false}\" />\r\n  <Text value=\"Input control is focused: {isFocused}\" />\r\n  <Select\r\n    onGotFocus=\"isFocused = true\"\r\n    onLostFocus=\"isFocused = false\">\r\n    <Option value=\"opt1\" label=\"first\"/>\r\n    <Option value=\"opt2\" label=\"second\"/>\r\n    <Option value=\"opt3\" label=\"third\"/>\r\n  </Select>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: gotFocus/lostFocus\"\r\n    height={200}\r\n    app={`\r\n    <App>\r\n      <variable name=\"isFocused\" value=\"{false}\" />\r\n      <Text value=\"Input control is focused: {isFocused}\" />\r\n      <Select\r\n        onGotFocus=\"isFocused = true\"\r\n        onLostFocus=\"isFocused = false\">\r\n        <Option value=\"opt1\" label=\"first\"/>\r\n        <Option value=\"opt2\" label=\"second\"/>\r\n        <Option value=\"opt3\" label=\"third\"/>\r\n      </Select>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `lostFocus`\r\n\r\nThis event is triggered when the Select has lost the focus.\r\n\r\n## Exposed Methods\r\n\r\n### `focus`\r\n\r\nThis method sets the focus on the Select.\r\n\r\n```xmlui copy /onClick=\"inputControl.focus()\"/\r\n<App>\r\n  <Button label=\"Focus Input\" onClick=\"inputControl.focus()\" />\r\n  <Select id=\"inputControl\">\r\n    <Option value=\"opt1\" label=\"first\"/>\r\n    <Option value=\"opt2\" label=\"second\"/>\r\n    <Option value=\"opt3\" label=\"third\"/>\r\n  </Select>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: focus()\"\r\n    height={240}\r\n    app={`\r\n    <App>\r\n      <Button label=\"Focus Input\" onClick=\"inputControl.focus()\" />\r\n      <Select id=\"inputControl\">\r\n        <Option value=\"opt1\" label=\"first\"/>\r\n        <Option value=\"opt2\" label=\"second\"/>\r\n        <Option value=\"opt3\" label=\"third\"/>\r\n      </Select>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `reset`\r\n\r\nThis method resets the component to its initial value, or clears the selection if no initial value was provided.\r\n\r\n### `setValue`\r\n\r\nYou can use this method to set the component's current value programmatically (`true`: checked, `false`: unchecked).\r\n\r\n```xmlui copy\r\n<App>\r\n  <Select id=\"inputControl\">\r\n    <Option value=\"opt1\" label=\"first\"/>\r\n    <Option value=\"opt2\" label=\"second\"/>\r\n    <Option value=\"opt3\" label=\"third\"/>\r\n  </Select>\r\n  <HStack>\r\n    <Button\r\n      label=\"Select 2nd Item\"\r\n      onClick=\"inputControl.setValue('opt2')\" />\r\n    <Button\r\n      label=\"Remove Selection\"\r\n      onClick=\"inputControl.setValue('')\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: value() and setValue()\"\r\n    app={`\r\n    <App>\r\n      <Select id=\"inputControl\">\r\n        <Option value=\"opt1\" label=\"first\"/>\r\n        <Option value=\"opt2\" label=\"second\"/>\r\n        <Option value=\"opt3\" label=\"third\"/>\r\n      </Select>\r\n      <HStack>\r\n        <Button\r\n          label=\"Select 2nd Item\"\r\n          onClick=\"inputControl.setValue('opt2')\" />\r\n        <Button\r\n          label=\"Remove Selection\"\r\n          onClick=\"inputControl.setValue('')\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `value`\r\n\r\nYou can query the component's value. If no value is set, it will retrieve `undefined`.\r\n\r\n## Styling\r\n\r\nThe `Select` component uses these theme variables:\r\n\r\n- `minHeight-Select`\r\n\r\nThese variables have 4 variants depending on the [validationStatus](#validationstatus) denoted by `|status|`.\r\nIf the status segment is omitted, the style will be applied to all statuses.\r\n\r\n- `borderRadius-Select-|status|`\r\n- `fontSize-Select-|status|`\r\n- `textColor-placeholder-Select-|status|`\r\n- `borderWidth-Select-|status|`\r\n\r\n- `outlineWidth-Select-|status|--focus`\r\n- `outlineColor-Select-|status|--focus`\r\n- `outlineStyle-Select-|status|--focus`\r\n- `outlineOffset-Select-|status|--focus`\r\n\r\n```json copy\r\n\"borderRadius-Select-default\": \"10px\",\r\n\"textColor-placeholder-Select-error\": \"crimson\"\r\n```\r\n\r\nIn addition to the validation statuses,\r\nthe variables below are associated with styles for `hover` and `disabled` interaction states denoted by `|interact|` in their signature:\r\n\r\n- `borderColor-Select-|status|--|interact|`\r\n- `backgroundColor-Select-|status|--|interact|`\r\n- `boxShadow-Select-|status|--|interact|`\r\n- `textColor-Select-|status|--|interact|`\r\n\r\n```json copy\r\n\"backgroundColor-Select-default--disabled\": \"gray\",\r\n\"textColor-Select-error--active\": \"lightcoral\"\r\n```\r\n\r\nTheme variables to set the dropdown menu styles:\r\n\r\n- `backgroundColor-menu-Select`\r\n- `boxShadow-menu-Select`\r\n- `borderRadius-menu-Select`\r\n- `textColor-indicator-Select`\r\n\r\nTheme variables to set the selection styles in a dropdown menu:\r\n\r\n- `textColor-value-Select`\r\n- `backgroundColor-value-Select`\r\n\r\nTheme variables to set the styles of an unselected item:\r\n\r\n- `backgroundColor-item-Select--hover`\r\n- `backgroundColor-item-Select--active`\r\n- `textColor-item-Select--disabled`\r\n\r\n### Example\r\n\r\n```json copy\r\n{\r\n  \"id\": \"custom\",\r\n  \"name\": \"Custom Theme\",\r\n  \"themeVars\": {\r\n    \"borderRadius-Select\": \"30px\",\r\n    \"textColor-placeholder-Select\": \"red\",\r\n    \"borderWidth-Select\": \"4px\"\r\n  }\r\n}\r\n```\r\n\r\n<Playground\r\n    name=\"Example: styling\"\r\n    height={260}\r\n    defaultTheme=\"custom\"\r\n    themes={[\r\n        {\r\n            id: \"custom\",\r\n            name: \"Custom Theme\",\r\n            themeVars: {\r\n                \"borderRadius-Select\": \"30px\",\r\n                \"textColor-placeholder-Select\": \"red\",\r\n                \"borderWidth-Select\": \"4px\",\r\n            },\r\n        },\r\n    ]}\r\n    app={`\r\n    <App>\r\n      <Select placeholder=\"Please select an option\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nTo style all input controls not just this component, use `Input` instead of the `Select` segment:\r\n\r\n```\r\nborderColor-Input: \"#0033FF\"\r\n```\r\n\r\n`Input` affects the following controls:\r\n\r\n- [`Checkbox`](./Checkbox.mdx)\r\n- [`NumberBox`](./NumberBox.mdx)\r\n- [`RadioGroupOption`](./RadioGroupOption.mdx)\r\n- [`Switch`](./Switch.mdx)\r\n- [`TextArea`](./TextArea.mdx)\r\n- [`TextBox`](./TextBox.mdx)\r\n- [`MultiSelect`](./MultiSelect.mdx)\r\n- [`MultiCombobox`](./MultiCombobox.mdx)\r\n\r\nSee [custom themes](../learning/themes/overview.mdx) for styling details.\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-item-Select | $backgroundColor-dropdown-item | $backgroundColor-dropdown-item |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-item-Select--active | $backgroundColor-dropdown-item--active | $backgroundColor-dropdown-item--active |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-item-Select--hover | $backgroundColor-dropdown-item--active | $backgroundColor-dropdown-item--active |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-menu-Select | $color-surface-raised | $color-surface-raised |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-menu-Select | $color-surface-raised | $color-surface-raised |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Select--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Select-badge | $color-primary-500 | $color-primary-500 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Select-badge | $color-primary-500 | $color-primary-500 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Select-badge--active | $color-primary-500 | $color-primary-500 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Select-badge--active | $color-primary-500 | $color-primary-500 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Select-badge--hover | $color-primary-400 | $color-primary-400 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Select-badge--hover | $color-primary-400 | $color-primary-400 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Select-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Select-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Select-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Select-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Select-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Select-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Select-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Select-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-menu-Select | $borderColor | $borderColor |\r\n| [borderColor](../styles-and-themes/common-units/#color)-menu-Select | $borderColor | $borderColor |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Select--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Select-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Select-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Select-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Select-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Select-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Select-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Select-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Select-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-menu-Select | $borderRadius | $borderRadius |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-menu-Select | $borderRadius | $borderRadius |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Select-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Select-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Select-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Select-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Select-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Select-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Select-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Select-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-menu-Select | 1px | 1px |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-menu-Select | 1px | 1px |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Select-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Select-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Select-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Select-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-menu-Select | $boxShadow-md | $boxShadow-md |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-menu-Select | $boxShadow-md | $boxShadow-md |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Select-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Select-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Select-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Select-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Select-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Select-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Select-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Select-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Select | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Select-badge | $fontSize-small | $fontSize-small |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Select-badge | $fontSize-small | $fontSize-small |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Select-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Select-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Select-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Select-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [opacity](../styles-and-themes/common-units/#opacity)-Select--disabled | 0.5 | 0.5 |\r\n| [opacity](../styles-and-themes/common-units/#opacity)-text-item-Select--disabled | 0.5 | 0.5 |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Select-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Select-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Select-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Select-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Select-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Select-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Select-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Select-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Select-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Select-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Select-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Select-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Select-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Select-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Select-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Select-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-item-Select | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-item-Select | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-item-Select | $space-2 | $space-2 |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-Select-badge | $space-1 | $space-1 |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-item-Select | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-item-Select | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-item-Select | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-item-Select | $space-2 | $space-2 |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-Select-badge | $space-1 | $space-1 |\r\n| [textColor](../styles-and-themes/common-units/#color)-indicator-Select | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-item-Select--disabled | $color-surface-200 | $color-surface-200 |\r\n| [textColor](../styles-and-themes/common-units/#color)-placeholder-Select | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-placeholder-Select-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-placeholder-Select-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-placeholder-Select-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-placeholder-Select-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Select--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Select-badge | $color-surface-50 | $color-surface-50 |\r\n| [textColor](../styles-and-themes/common-units/#color)-Select-badge | $color-surface-50 | $color-surface-50 |\r\n| [textColor](../styles-and-themes/common-units/#color)-Select-badge--active | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Select-badge--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Select-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Select-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Select-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Select-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Select-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Select-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Select-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Select-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n",
  "components/SelectionStore":"import { Callout } from \"nextra/components\";\r\n\r\n# SelectionStore [#component-selectionstore]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `SelectionStore` is a non-visual component that may wrap components (items) and manage their selection state to accommodate the usage of other actions.\r\n\r\nFor an example that covers all props, and API methods and values, see the [\\`Selection-Aware Components\\`](#selection-aware-components) section.\r\n\r\n## Using `SelectionStore`\r\n\r\nA `SelectionStore` instance is a mediator between a component that can manage a list of selected items and the external context.\r\nThe wrapped component can report its selection state (which items are currently selected);\r\nso that the external context can access and manage the selection state through the component's API.\r\n\r\n## Selection-Aware Components\r\n\r\nSome components know they are wrapped with a `SelectionStore` and manage their current selection state through it.\r\nFor example, the following sample `SelectionStore` wraps a `Table` with its `rowsSelectable` property set to true.\r\nWhenever the user changes the selection state of a particular row, the `SelectionStore` updates its state accordingly.\r\n\r\n```xmlui copy\r\n<App>\r\n  <H3>Rockets {rockets.value.length ? \"(\" + rockets.value.length + \" selected)\" : \"\"}</H3>\r\n  <HStack>\r\n    <Button label=\"Select First\" \r\n      onClick=\"if (rockets.value?.length) rockets.setSelectedRowIds([rockets.value[0].id])\" />\r\n    <Button label=\"Refresh Table\" onClick=\"rockets.refreshSelection()\" />\r\n    <Button label=\"Clear Selection\" onClick=\"rockets.clearSelection()\" />\r\n  </HStack>\r\n  <SelectionStore id=\"rockets\">\r\n    <Table\r\n      width=\"100%\"\r\n      rowsSelectable=\"{true}\"\r\n      data=\"https://api.spacexdata.com/v3/rockets\"\r\n      height=\"300px\">\r\n      <Column header=\"Image\" size=\"80px\">\r\n        <Image height=\"80px\" fit=\"cover\" src=\"{$item.flickr_images[0]}\"/>\r\n      </Column>\r\n      <Column canSort=\"true\" bindTo=\"country\"/>\r\n      <Column canSort=\"true\" bindTo=\"company\"/>\r\n    </Table>\r\n  </SelectionStore>\r\n</App>\r\n```\r\n\r\nThe UI refreshes the number of selected items as you check or uncheck the rows in the following table:\r\n\r\n<Playground\r\n  name=\"Example: using SelectionStore\"\r\n  app={`\r\n    <App>\r\n      <H3>Rockets {rockets.value.length ? \"(\" + rockets.value.length + \" selected)\" : \"\"}</H3>\r\n      <HStack>\r\n        <Button label=\"Select First\" \r\n          onClick=\"if (rockets.value?.length) rockets.setSelectedRowIds([rockets.value[0].id])\" />\r\n        <Button label=\"Refresh Table\" onClick=\"rockets.refreshSelection()\" />\r\n        <Button label=\"Clear Selection\" onClick=\"rockets.clearSelection()\" />\r\n      </HStack>\r\n      <SelectionStore id=\"rockets\">\r\n        <Table\r\n          width=\"100%\"\r\n          rowsSelectable=\"{true}\"\r\n          data=\"https://api.spacexdata.com/v3/rockets\"\r\n          height=\"300px\">\r\n          <Column header=\"Image\" size=\"80px\">\r\n            <Image height=\"80px\" fit=\"cover\" src=\"{$item.flickr_images[0]}\"/>\r\n          </Column>\r\n          <Column canSort=\"true\" bindTo=\"country\"/>\r\n          <Column canSort=\"true\" bindTo=\"company\"/>\r\n        </Table>\r\n      </SelectionStore>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\n### `idKey`\r\n\r\nThe selected items in the selection store needs to have a unique ID to use as an unambiguous key for that particular item. This property uniquely identifies the selected object item via a given property. By default, the key attribute is `\"id\"`.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/Slider":"import { Callout } from \"nextra/components\";\r\n\r\n# Slider [#component-slider]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `Slider` component allows you to select a numeric value between a range specified by minimum and maximum values.\r\n\r\n## Properties\r\n\r\n### `autoFocus (default: false)`\r\n\r\nIf this property is set to `true`, the component gets the focus automatically when displayed.\r\n\r\n### `enabled (default: true)`\r\n\r\nThis boolean property value indicates whether the component responds to user events (`true`) or not (`false`).\r\n\r\n### `initialValue`\r\n\r\nThis property sets the component's initial value.\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\n### `labelBreak (default: false)`\r\n\r\nThis boolean value indicates if the `Slider` labels can be split into multiple lines if it would overflow the available label width.\r\n\r\n### `labelPosition (default: \"top\")`\r\n\r\nPlaces the label at the given position of the component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `start` | The left side of the input (left-to-right) or the right side of the input (right-to-left) |\r\n| `end` | The right side of the input (left-to-right) or the left side of the input (right-to-left) |\r\n| `top` | The top of the input **(default)** |\r\n| `bottom` | The bottom of the input |\r\n\r\n### `labelWidth`\r\n\r\nThis property sets the width of the `Slider`.\r\n\r\n### `maxValue (default: 10)`\r\n\r\nThis property specifies the maximum value of the allowed input range.\r\n\r\n### `minStepsBetweenThumbs`\r\n\r\nThis property sets the minimum number of steps required between multiple thumbs on the slider, ensuring they maintain a specified distance.\r\n\r\n### `minValue (default: 0)`\r\n\r\nThis property specifies the minimum value of the allowed input range.\r\n\r\n### `rangeStyle`\r\n\r\nThis property allows you to apply custom styles to the range element of the slider.\r\n\r\n### `readOnly (default: false)`\r\n\r\nSet this property to `true` to disallow changing the component value.\r\n\r\n### `required`\r\n\r\nSet this property to `true` to indicate it must have a value before submitting the containing form.\r\n\r\n### `showValues (default: true)`\r\n\r\nThis property controls whether the slider shows the current values of the thumbs.\r\n\r\n### `step`\r\n\r\nThis property defines the increment value for the slider, determining the allowed intervals between selectable values.\r\n\r\n### `thumbStyle`\r\n\r\nThis property allows you to apply custom styles to the thumb elements of the slider.\r\n\r\n### `validationStatus (default: \"none\")`\r\n\r\nThis property allows you to set the validation status of the input component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `valid` | Visual indicator for an input that is accepted |\r\n| `warning` | Visual indicator for an input that produced a warning |\r\n| `error` | Visual indicator for an input that produced an error |\r\n\r\n### `valueFormat`\r\n\r\nThis property allows you to customize how the values are displayed.\r\n\r\n## Events\r\n\r\n### `didChange`\r\n\r\nThis event is triggered when value of Slider has changed.\r\n\r\n### `gotFocus`\r\n\r\nThis event is triggered when the Slider has received the focus.\r\n\r\n### `lostFocus`\r\n\r\nThis event is triggered when the Slider has lost the focus.\r\n\r\n## Exposed Methods\r\n\r\n### `focus`\r\n\r\nThis method sets the focus on the Slider.\r\n\r\n### `setValue`\r\n\r\nYou can use this method to set the component's current value programmatically (`true`: checked, `false`: unchecked).\r\n\r\n### `value`\r\n\r\nYou can query the component's value. If no value is set, it will retrieve `undefined`.\r\n\r\n## Styling\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-range-Slider | $color-primary | $color-primary |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-range-Slider | $color-primary | $color-primary |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-range-Slider--disabled | $color-surface-400 | $color-surface-800 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-range-Slider--disabled | $color-surface-400 | $color-surface-800 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-thumb-Slider | $color-primary-500 | $color-primary-400 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-thumb-Slider | $color-primary-500 | $color-primary-400 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-track-Slider | $color-surface-200 | $color-surface-200 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-track-Slider | $color-surface-200 | $color-surface-200 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-track-Slider--disabled | $color-surface-300 | $color-surface-600 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-track-Slider--disabled | $color-surface-300 | $color-surface-600 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Slider-default | transparent | transparent |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Slider-default | transparent | transparent |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Slider-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Slider-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Slider-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Slider-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Slider-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Slider-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Slider-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Slider-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Slider-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Slider-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Slider-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-thumb-Slider | $color-surface-50 | $color-surface-950 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-thumb-Slider | $color-surface-50 | $color-surface-950 |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Slider-default | $borderRadius | $borderRadius |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Slider-default | $borderRadius | $borderRadius |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Slider-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Slider-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Slider-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Slider-default | solid | solid |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Slider-default | solid | solid |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Slider-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Slider-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Slider-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-thumb-Slider | solid | solid |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-thumb-Slider | solid | solid |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Slider-default | 0 | 0 |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Slider-default | 0 | 0 |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Slider-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Slider-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Slider-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-thumb-Slider | 2px | 2px |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-thumb-Slider | 2px | 2px |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Slider-default | none | none |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Slider-default | none | none |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Slider-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Slider-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Slider-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Slider-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Slider-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Slider-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Slider-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Slider-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Slider-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Slider-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Slider-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-thumb-Slider | $boxShadow-md | $boxShadow-md |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-thumb-Slider | $boxShadow-md | $boxShadow-md |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-thumb-Slider--focus | $boxShadow-xl | $boxShadow-xl |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-thumb-Slider--hover | $boxShadow-lg | $boxShadow-lg |\r\n",
  "components/SpaceFiller":"import { Callout } from \"nextra/components\";\r\n\r\n# SpaceFiller [#component-spacefiller]\r\n\r\nThe `SpaceFiller` is a component that works well in layout containers to fill the remaining (unused) space. Its behavior depends on the layout container in which it is used.\r\n\r\n## Using `SpaceFiller`\r\n\r\nIn a `Stack`, `SpaceFiller` pushes the children following it to the other end of the container:\r\n\r\n```xmlui copy {3}\r\n<App>\r\n  <HStack>\r\n    <Stack width=\"36px\" height=\"36px\" backgroundColor=\"red\" />\r\n    <SpaceFiller />\r\n    <Stack width=\"36px\" height=\"36px\" backgroundColor=\"blue\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"SpaceFiller in an HStack\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Stack width=\"36px\" height=\"36px\" backgroundColor=\"red\" />\r\n        <SpaceFiller />\r\n        <Stack width=\"36px\" height=\"36px\" backgroundColor=\"blue\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nIn a `FlowLayout`, `SpaceFiller` acts as a line break for a row. The children following the `SpaceFiller` enters a new line.\r\n\r\n```xmlui copy {3}\r\n<App>\r\n  <FlowLayout>\r\n    <Stack width=\"20%\" height=\"36px\" backgroundColor=\"red\" />\r\n    <SpaceFiller />\r\n    <Stack width=\"20%\" height=\"36px\" backgroundColor=\"green\" />\r\n    <Stack width=\"20%\" height=\"36px\" backgroundColor=\"blue\" />\r\n  </FlowLayout>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: in a FlowLayout\"\r\n  app={`\r\n    <App>\r\n      <FlowLayout>\r\n        <Stack width=\"20%\" height=\"36px\" backgroundColor=\"red\" />\r\n        <SpaceFiller />\r\n        <Stack width=\"20%\" height=\"36px\" backgroundColor=\"green\" />\r\n        <Stack width=\"20%\" height=\"36px\" backgroundColor=\"blue\" />\r\n      </FlowLayout>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\nThis component does not have any properties.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\n`SpaceFiller` ignores all layout properties; it cannot be styled.\r\n",
  "components/Spinner":"import { Callout } from \"nextra/components\";\r\n\r\n# Spinner [#component-spinner]\r\n\r\nThe `Spinner` component is an animated indicator that represents a particular action in progress without a deterministic progress value.\r\n\r\nWhile it is visible, the action is yet to be completed; on completion, the UI logic may opt to remove the component.\r\n\r\n## Using the `Spinner`\r\n\r\n```xmlui copy\r\n<App>\r\n  <Spinner />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: using Spinner\"\r\n  app={`\r\n    <App>\r\n      <Spinner />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n`Spinner` ignores the `width`, `minWidth`, `maxWidth`, `height`, `minHeight`, and `maxHeight` properties. If you want to change its size, use the `size-Spinner` theme variable (see details is the [Styling](#styling) section).\r\n</Callout>\r\n\r\n## Properties\r\n\r\n### `delay (default: 400)`\r\n\r\nThe delay in milliseconds before the spinner is displayed.\r\n\r\nUse the buttons to toggle between the two `Spinners`.\r\n\r\n```xmlui copy {8-9}\r\n<App>\r\n  <variable name=\"noDelay\" value=\"{true}\" />\r\n  <variable name=\"yesDelay\" value=\"{false}\" />\r\n  <HStack gap=\"$space-0_5\">\r\n    <Button label=\"No delay\" onClick=\"noDelay = true; yesDelay = false;\" />\r\n    <Button label=\"1000 ms delay\" onClick=\"noDelay = false; yesDelay = true;\" />\r\n  </HStack>\r\n  <Spinner when=\"{noDelay}\" delay=\"0\" />\r\n  <Spinner when=\"{yesDelay}\" delay=\"1000\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: delay\"\r\n  height={180}\r\n  app={`\r\n    <App>\r\n      <variable name=\"noDelay\" value=\"{true}\" />\r\n      <variable name=\"yesDelay\" value=\"{false}\" />\r\n      <HStack gap=\"$space-0_5\">\r\n        <Button label=\"No delay\" onClick=\"noDelay = true; yesDelay = false;\" />\r\n        <Button label=\"1000 ms delay\" onClick=\"noDelay = false; yesDelay = true;\" />\r\n      </HStack>\r\n      <Spinner when=\"{noDelay}\" delay=\"0\" />\r\n      <Spinner when=\"{yesDelay}\" delay=\"1000\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `fullScreen (default: false)`\r\n\r\nIf set to `true`, the component will be rendered in a full screen container.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Spinner fullScreen=\"true\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: fullScreen\"\r\n  height={200}\r\n  app={`\r\n  <App>\r\n    <Spinner fullScreen=\"true\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `themeColor`\r\n\r\n(**NOT IMPLEMENTED YET**) The theme color of the component.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `Spinner` has the following theme variables:\r\n\r\n- `borderColor-Spinner`\r\n- `size-Spinner`\r\n- `thickness-Spinner`\r\n\r\n```json copy\r\n{\r\n  \"id\": \"custom\",\r\n  \"name\": \"Custom Theme\",\r\n  \"themeVars\": {\r\n    \"size-Spinner\": \"3rem\",\r\n    \"thickness-Spinner\": \"8px\",\r\n    \"borderColor-Spinner\": \"red\"\r\n  }\r\n}\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling\"\r\n  app={`\r\n  <App>\r\n    <Spinner />\r\n  </App>\r\n  `}\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"size-Spinner\": \"3rem\",\r\n        \"thickness-Spinner\": \"8px\",\r\n        \"borderColor-Spinner\": \"red\",\r\n      }\r\n    }\r\n  ]}\r\n/>\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Spinner | $color-surface-400 | $color-surface-400 |\r\n| [size](../styles-and-themes/common-units/#size)-Spinner | $space-10 | $space-10 |\r\n| [thickness](../styles-and-themes/common-units/#size)-Spinner | $space-0_5 | $space-0_5 |\r\n",
  "components/Splitter":"import { Callout } from \"nextra/components\";\r\n\r\n# Splitter [#component-splitter]\r\n\r\nThe `Splitter` component divides a container (such as a window, panel, pane, etc.) into two resizable sections.\r\n\r\nThese sections are identified by their names: primary and secondary. They have a draggable bar between them.\r\n\r\nMost properties of the component focus on the primary section (e.g. sizing).\r\n\r\nSee also: [\\`HSplitter\\`](./HSplitter.mdx), [\\`VSplitter\\`](./VSplitter.mdx).\r\n\r\n## Properties\r\n\r\n### `floating (default: false)`\r\n\r\nToggles whether the resizer is visible (`false`) or not (`true`) when not hovered or dragged. The default value is `false`, meaning the resizer is visible all the time.\r\n\r\n```xmlui copy /floating=\"true\"/\r\n<App>\r\n  <Splitter height=\"200px\" floating=\"true\">\r\n    <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n    <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n  </Splitter>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: floating\"\r\n  app={`\r\n    <App>\r\n      <Splitter height=\"200px\" floating=\"true\">\r\n        <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n        <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n      </Splitter>\r\n    </App>\r\n`}\r\n/>\r\n\r\n### `initialPrimarySize (default: \"50%\")`\r\n\r\nThis optional number property sets the initial size of the primary section. The unit of the size value is in pixels or percentages.\r\n\r\n```xmlui copy /initialPrimarySize=\"40%\"/\r\n<App>\r\n  <Splitter height=\"200px\" initialPrimarySize=\"40%\">\r\n    <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n    <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n  </Splitter>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: initialPrimarySize\"\r\n  app={`\r\n    <App>\r\n      <Splitter height=\"200px\" initialPrimarySize=\"40%\">\r\n        <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n        <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n      </Splitter>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `maxPrimarySize (default: \"100%\")`\r\n\r\nThis property sets the maximum size the primary section can have. The unit of the size value is in pixels or percentages.\r\n\r\n```xmlui copy /maxPrimarySize=\"80%\"/\r\n<App>\r\n  <Splitter height=\"200px\" maxPrimarySize=\"80%\">\r\n    <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n    <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n  </Splitter>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: maxPrimarySize\"\r\n  app={`\r\n    <App>\r\n      <Splitter height=\"200px\" maxPrimarySize=\"80%\">\r\n        <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n        <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n      </Splitter>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `minPrimarySize (default: \"0%\")`\r\n\r\nThis property sets the minimum size the primary section can have. The unit of the size value is in pixels or percentages.\r\n\r\n```xmlui copy /minPrimarySize=\"40px\"/\r\n<App>\r\n  <Splitter height=\"200px\" minPrimarySize=\"40px\">\r\n    <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n    <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n  </Splitter>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: minPrimarySize\"\r\n  app={`\r\n    <App>\r\n      <Splitter height=\"200px\" minPrimarySize=\"40px\">\r\n        <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n        <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n      </Splitter>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `orientation (default: \"vertical\")`\r\n\r\nSets whether the `Splitter` divides the container horizontally and lays out the section on top of each other (`vertical`), or vertically by placing the sections next to each other (`horizontal`).\r\n\r\nAvailable values: `horizontal`, `vertical` **(default)**\r\n\r\n```xmlui copy /orientation=\"horizontal\"/\r\n<App>\r\n  <Splitter height=\"200px\" orientation=\"horizontal\">\r\n    <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n    <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n  </Splitter>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: orientation\"\r\n  app={`\r\n    <App>\r\n      <Splitter height=\"200px\" orientation=\"horizontal\">\r\n        <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n        <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n      </Splitter>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `splitterTemplate`\r\n\r\nThe divider can be customized using XMLUI components via this property.\r\n\r\n```xmlui copy {2-4}\r\n<App>\r\n  <Splitter height=\"200px\">\r\n    <property name=\"splitterTemplate\">\r\n      <ContentSeparator backgroundColor=\"green\" height=\"4px\" />\r\n    </property>\r\n    <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n    <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n  </Splitter>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: splitterTemplate\"\r\n  app={`\r\n    <App>\r\n      <Splitter height=\"200px\">\r\n        <property name=\"splitterTemplate\">\r\n          <ContentSeparator backgroundColor=\"green\" height=\"4px\" />\r\n        </property>\r\n        <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n        <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n      </Splitter>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `swapped (default: false)`\r\n\r\nThis optional booelan property indicates whether the `Splitter` sections are layed out as primary and secondary (`false`) or secondary and primary (`true`) from left to right.\r\n\r\n```xmlui copy /swapped=\"true\"/\r\n<App>\r\n  <Splitter height=\"200px\" swapped=\"true\">\r\n    <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n    <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n  </Splitter>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: swapped\"\r\n  app={`\r\n    <App>\r\n      <Splitter height=\"200px\" swapped=\"true\">\r\n        <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n        <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n      </Splitter>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `resize`\r\n\r\nThis event fires when the component is resized.\r\n\r\n```xmlui copy {2}\r\n<App height=\"200px\" var.counter=\"{0}\">\r\n  <Splitter onResize=\"counter++\">\r\n    <Stack backgroundColor=\"lightblue\" height=\"100%\">\r\n      <Text value=\"Resize event called {counter} number of times\" />\r\n    </Stack>\r\n    <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n  </Splitter>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: resize\"\r\n  app={`\r\n    <App height=\"200px\" var.counter=\"{0}\">\r\n      <Splitter onResize=\"counter++\">\r\n        <Stack backgroundColor=\"lightblue\" height=\"100%\">\r\n          <Text value=\"Resize event called {counter} number of times\" />\r\n        </Stack>\r\n        <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n      </Splitter>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `Splitter` component provides these theme variables:\r\n\r\n- `border-Splitter`\r\n- `backgroundColor-Splitter`\r\n- `backgroundColor-resizer-Splitter`\r\n- `borderColor-Splitter`\r\n- `cursor-resizer-horizontal-Splitter`\r\n- `cursor-resizer-vertical-Splitter`\r\n- `padding-Splitter`\r\n- `borderRadius-Splitter`\r\n- `boxShadow-Splitter`\r\n- `borderStyle-Splitter`\r\n- `borderWidth-Splitter`\r\n- `thickness-resizer-Splitter`\r\n\r\n```json copy\r\n{\r\n  \"id\": \"custom\",\r\n  \"name\": \"Custom Theme\",\r\n  \"themeVars\": {\r\n    \"cursor-resizer-horizontal-Splitter\": \"grab\",\r\n    \"cursor-resizer-vertical-Splitter\": \"grab\",\r\n    \"thickness-resizer-Splitter\": \"4px\",\r\n    \"backgroundColor-resizer-Splitter\": \"#2319e0\"\r\n  }\r\n}\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling\"\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"cursor-resizer-horizontal-Splitter\": \"grab\",\r\n        \"cursor-resizer-vertical-Splitter\": \"grab\",\r\n        \"thickness-resizer-Splitter\": \"4px\",\r\n        \"backgroundColor-resizer-Splitter\": \"#2319e0\"\r\n      },\r\n    },\r\n  ]}\r\n  app={`\r\n    <App>\r\n      <Splitter height=\"200px\">\r\n        <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n        <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n      </Splitter>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-resizer-Splitter | $backgroundColor-Card | $backgroundColor-Card |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Splitter | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)-Splitter | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Splitter | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Splitter | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Splitter | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Splitter | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-Splitter | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [cursor](../styles-and-themes/common-units/#cursor)-resizer-horizontal-Splitter | ew-resize | ew-resize |\r\n| [cursor](../styles-and-themes/common-units/#cursor)-resizer-vertical-Splitter | ns-resize | ns-resize |\r\n| [thickness](../styles-and-themes/common-units/#size)-resizer-Splitter | 5px | 5px |\r\n",
  "components/Stack":"import { Callout } from \"nextra/components\";\r\n\r\n# Stack [#component-stack]\r\n\r\n`Stack` is a layout container displaying children in a horizontal or vertical stack.\r\n\r\nThe Stack component is the primary and most versatile building block for laying out content. It can display its children horizontally or vertically, and it is possible to align its children easily along the horizontal and vertical axes.\r\n\r\nSee also: [HStack](./HStack), [VStack](./VStack), [CHStack](./CHStack), [CVStack](./CVStack).\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou can learn about the semantics and usage of layout container, including `Stack`, [here](/learning/layout-components).\r\n</Callout>\r\n\r\n## Properties\r\n\r\n### `gap (default: \"$gap-normal\")`\r\n\r\nOptional size value indicating the gap between child elements.\r\n\r\nIn the following example we use pixels, characters (shorthand `ch`), and the `em` CSS unit size which is a relative size to the font size of the element (See size values).\r\n\r\n```xmlui copy {3, 10}\r\n<App>\r\n  <Stack orientation=\"horizontal\" backgroundColor=\"cyan\"\r\n      gap=\"80px\">\r\n    <Stack height=\"40px\" width=\"40px\" backgroundColor=\"red\" />\r\n    <Stack height=\"40px\" width=\"40px\" backgroundColor=\"green\" />\r\n    <Stack height=\"40px\" width=\"40px\" backgroundColor=\"blue\" />\r\n    <Stack height=\"40px\" width=\"40px\" backgroundColor=\"yellow\" />\r\n  </Stack>\r\n  <Stack orientation=\"horizontal\" backgroundColor=\"cyan\"\r\n          gap=\"12ch\">\r\n    <Stack height=\"40px\" width=\"40px\" backgroundColor=\"red\" />\r\n    <Stack height=\"40px\" width=\"40px\" backgroundColor=\"green\" />\r\n    <Stack height=\"40px\" width=\"40px\" backgroundColor=\"blue\" />\r\n    <Stack height=\"40px\" width=\"40px\" backgroundColor=\"yellow\" />\r\n  </Stack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: gap\"\r\n  app={`\r\n    <App>\r\n      <Stack orientation=\"horizontal\" backgroundColor=\"cyan\"\r\n         gap=\"80px\">\r\n        <Stack height=\"40px\" width=\"40px\" backgroundColor=\"red\" />\r\n        <Stack height=\"40px\" width=\"40px\" backgroundColor=\"green\" />\r\n        <Stack height=\"40px\" width=\"40px\" backgroundColor=\"blue\" />\r\n        <Stack height=\"40px\" width=\"40px\" backgroundColor=\"yellow\" />\r\n      </Stack>\r\n      <Stack orientation=\"horizontal\" backgroundColor=\"cyan\"\r\n             gap=\"12ch\">\r\n        <Stack height=\"40px\" width=\"40px\" backgroundColor=\"red\" />\r\n        <Stack height=\"40px\" width=\"40px\" backgroundColor=\"green\" />\r\n        <Stack height=\"40px\" width=\"40px\" backgroundColor=\"blue\" />\r\n        <Stack height=\"40px\" width=\"40px\" backgroundColor=\"yellow\" />\r\n      </Stack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `horizontalAlignment (default: \"start\")`\r\n\r\nManages the horizontal content alignment for each child element in the Stack.\r\n\r\nAvailable values: `start` **(default)**, `center`, `end`\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nThe `start` and `end` values can be affected by i18n if the layout is in a right-to-left writing style.\r\n</Callout>\r\n\r\n```xmlui copy {3}\r\n<App>\r\n  <Stack width=\"100%\" horizontalAlignment=\"center\" backgroundColor=\"cyan\">\r\n    <Stack width=\"36px\" height=\"36px\" backgroundColor=\"red\" />\r\n  </Stack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: horizontalAlignment\"\r\n  app={`\r\n    <App>\r\n      <Stack width=\"100%\" horizontalAlignment=\"center\" backgroundColor=\"cyan\">\r\n        <Stack width=\"36px\" height=\"36px\" backgroundColor=\"red\" />\r\n      </Stack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `orientation (default: \"vertical\")`\r\n\r\nAn optional property that governs the Stack's orientation (whether the Stack lays out its children in a row or a column).\r\n\r\nAvailable values: `horizontal`, `vertical` **(default)**\r\n\r\n### `reverse (default: false)`\r\n\r\nOptional boolean property to reverse the order of child elements.\r\n\r\nDefault is **false**, which indicates a left-to-right layout.\r\n\r\n```xmlui copy /reverse=\"true\"/\r\n<App>\r\n  <Stack backgroundColor=\"cyan\">\r\n    <Stack gap=\"10px\" orientation=\"horizontal\">\r\n      <Stack height=\"40px\" width=\"40px\" backgroundColor=\"red\" />\r\n      <Stack height=\"40px\" width=\"40px\" backgroundColor=\"green\" />\r\n      <Stack height=\"40px\" width=\"40px\" backgroundColor=\"blue\" />\r\n    </Stack>\r\n    <Stack reverse=\"true\" orientation=\"horizontal\">\r\n      <Stack height=\"40px\" width=\"40px\" backgroundColor=\"red\" />\r\n      <Stack height=\"40px\" width=\"40px\" backgroundColor=\"green\" />\r\n      <Stack height=\"40px\" width=\"40px\" backgroundColor=\"blue\" />\r\n    </Stack>\r\n  </Stack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: reverse\"\r\n  app={`\r\n    <App>\r\n      <Stack backgroundColor=\"cyan\">\r\n        <Stack gap=\"10px\" orientation=\"horizontal\">\r\n          <Stack height=\"40px\" width=\"40px\" backgroundColor=\"red\" />\r\n          <Stack height=\"40px\" width=\"40px\" backgroundColor=\"green\" />\r\n          <Stack height=\"40px\" width=\"40px\" backgroundColor=\"blue\" />\r\n        </Stack>\r\n        <Stack reverse=\"true\" orientation=\"horizontal\">\r\n          <Stack height=\"40px\" width=\"40px\" backgroundColor=\"red\" />\r\n          <Stack height=\"40px\" width=\"40px\" backgroundColor=\"green\" />\r\n          <Stack height=\"40px\" width=\"40px\" backgroundColor=\"blue\" />\r\n        </Stack>\r\n      </Stack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `verticalAlignment (default: \"start\")`\r\n\r\nManages the vertical content alignment for each child element in the Stack.\r\n\r\nAvailable values: `start` **(default)**, `center`, `end`\r\n\r\n```xmlui copy {2}\r\n<App>\r\n  <Stack height=\"100px\" verticalAlignment=\"end\" backgroundColor=\"cyan\">\r\n    <Stack width=\"36px\" height=\"36px\" backgroundColor=\"red\" />\r\n  </Stack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: verticalAlignment\"\r\n  app={`\r\n    <App>\r\n      <Stack height=\"100px\" verticalAlignment=\"end\" backgroundColor=\"cyan\">\r\n        <Stack width=\"36px\" height=\"36px\" backgroundColor=\"red\" />\r\n      </Stack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `wrapContent (default: false)`\r\n\r\nOptional boolean which wraps the content if set to true and the available space is not big enough. Works only with horizontal orientations.\r\n\r\nOptional boolean which wraps the content if set to true and the available space is not big enough. Works in all orientations.\r\n\r\n```xmlui copy /wrapContent=\"true\"/\r\n<App>\r\n  <Stack wrapContent=\"true\" width=\"140px\" orientation=\"horizontal\" backgroundColor=\"cyan\">\r\n    <Stack height=\"40px\" width=\"40px\" backgroundColor=\"blue\" />\r\n    <Stack height=\"40px\" width=\"40px\" backgroundColor=\"blue\" />\r\n    <Stack height=\"40px\" width=\"40px\" backgroundColor=\"blue\" />\r\n    <Stack height=\"40px\" width=\"40px\" backgroundColor=\"blue\" />\r\n  </Stack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: wrapContent\"\r\n  app={`\r\n    <App>\r\n      <Stack wrapContent=\"true\" width=\"140px\" orientation=\"horizontal\" backgroundColor=\"cyan\">\r\n        <Stack height=\"40px\" width=\"40px\" backgroundColor=\"blue\" />\r\n        <Stack height=\"40px\" width=\"40px\" backgroundColor=\"blue\" />\r\n        <Stack height=\"40px\" width=\"40px\" backgroundColor=\"blue\" />\r\n        <Stack height=\"40px\" width=\"40px\" backgroundColor=\"blue\" />\r\n      </Stack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `click`\r\n\r\nThis event is triggered when the Stack is clicked.\r\n\r\nDescribes the logic that fires when the component is clicked.\r\n\r\n```xmlui copy {4}\r\n<App>\r\n  <HStack var.shown=\"{false}\">\r\n    <Stack height=\"40px\" width=\"40px\" backgroundColor=\"red\" onClick=\"shown = !shown\" />\r\n    <Stack when=\"{shown}\" height=\"40px\" width=\"40px\" backgroundColor=\"blue\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: click\"\r\n  app={`\r\n    <App>\r\n      <HStack var.shown=\"{false}\">\r\n        <Stack height=\"40px\" width=\"40px\" backgroundColor=\"red\" onClick=\"shown = !shown\" />\r\n        <Stack when=\"{shown}\" height=\"40px\" width=\"40px\" backgroundColor=\"blue\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/StickyBox":"import { Callout } from \"nextra/components\";\r\n\r\n# StickyBox [#component-stickybox]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `StickyBox` is a component that \"sticks\" or remains fixed at the top or bottom position on the screen as the user scrolls.\r\n\r\n## Properties\r\n\r\n### `to (default: \"top\")`\r\n\r\nThis property determines whether the StickyBox should be anchored to the `top` or `bottom`.\r\n\r\nAvailable values: `top` **(default)**, `bottom`\r\n\r\n```xmlui copy\r\n<App>\r\n  <StickyBox to=\"top\">\r\n    This part of the UI sticks to the top\r\n  </StickyBox>\r\n  <Stack backgroundColor=\"red\" height=\"80px\" width=\"100%\" />\r\n  <Stack backgroundColor=\"green\" height=\"80px\" width=\"100%\" />\r\n  <Stack backgroundColor=\"blue\" height=\"80px\" width=\"100%\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: to\"\r\n  height={200}\r\n  app={`\r\n  <App>\r\n    <StickyBox to=\"top\">\r\n      This part of the UI sticks to the top\r\n    </StickyBox>\r\n    <Stack backgroundColor=\"red\" height=\"80px\" width=\"100%\" />\r\n    <Stack backgroundColor=\"green\" height=\"80px\" width=\"100%\" />\r\n    <Stack backgroundColor=\"blue\" height=\"80px\" width=\"100%\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe component uses the following theme variables:\r\n\r\n- `backgroundColor-StickyBox`\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-StickyBox | $backgroundColor | $backgroundColor |\r\n",
  "components/SubMenuItem":"import { Callout } from \"nextra/components\";\r\n\r\n# SubMenuItem [#component-submenuitem]\r\n\r\nThis component represents a nested menu item within another menu or menu item.\r\n\r\n## Properties\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\n### `triggerTemplate`\r\n\r\nThis property allows you to define a custom trigger instead of the default one provided by `SubMenuItem`.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/Switch":"import { Callout } from \"nextra/components\";\r\n\r\n# Switch [#component-switch]\r\n\r\nThe `Switch` component is a user interface element that allows users to toggle between two states: on and off. It consists of a small rectangular or circular button that can be moved left or right to change its state.\r\n\r\n## Properties\r\n\r\n### `autoFocus (default: false)`\r\n\r\nIf this property is set to `true`, the component gets the focus automatically when displayed.\r\n\r\n### `enabled (default: true)`\r\n\r\nThis boolean property value indicates whether the component responds to user events (`true`) or not (`false`).\r\n\r\nThis boolean property indicates whether the checkbox responds to user events (i.e. clicks);\r\nit is `true` by default.\r\n\r\n```xmlui copy {4-5, 9-10}\r\n<App>\r\n  Enabled switches:\r\n  <HStack>\r\n    <Switch initialValue=\"true\" enabled=\"true\" />\r\n    <Switch initialValue=\"false\" enabled=\"true\" />\r\n  </HStack>\r\n  Disabled switches:\r\n  <HStack>\r\n    <Switch initialValue=\"true\" enabled=\"false\" />\r\n    <Switch initilaValue=\"false\" enabled=\"false\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: enabled\"\r\n  app={`\r\n    <App>\r\n      Enabled switches:\r\n      <HStack>\r\n        <Switch initialValue=\"true\" enabled=\"true\" />\r\n        <Switch initialValue=\"false\" enabled=\"true\" />\r\n      </HStack>\r\n      Disabled switches:\r\n      <HStack>\r\n        <Switch initialValue=\"true\" enabled=\"false\" />\r\n        <Switch initilaValue=\"false\" enabled=\"false\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `indeterminate (default: false)`\r\n\r\nThe `true` value of this property signals that the component is in an _intedeterminate state_.\r\n\r\n### `initialValue (default: false)`\r\n\r\nThis property sets the component's initial value.\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\nThis property sets the label of the component.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Switch label=\"Example label\" initialValue=\"true\" />\r\n  <Switch label=\"Another label\" intialValue=\"false\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: label\"\r\n  app={`\r\n    <App>\r\n      <Switch label=\"Example label\" initialValue=\"true\" />\r\n      <Switch label=\"Another label\" intialValue=\"false\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `labelBreak (default: false)`\r\n\r\nThis boolean value indicates if the `Switch` labels can be split into multiple lines if it would overflow the available label width.\r\n\r\n### `labelPosition (default: \"end\")`\r\n\r\nPlaces the label at the given position of the component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `start` | The left side of the input (left-to-right) or the right side of the input (right-to-left) |\r\n| `end` | The right side of the input (left-to-right) or the left side of the input (right-to-left) **(default)** |\r\n| `top` | The top of the input |\r\n| `bottom` | The bottom of the input |\r\n\r\n```xmlui copy\r\n<App>\r\n  <Switch label=\"Top label\" labelPosition=\"top\" initialValue=\"true\" />\r\n  <Switch label=\"End label\" labelPosition=\"end\" initialValue=\"true\" />\r\n  <Switch label=\"Bottom label\" labelPosition=\"bottom\" initialValue=\"true\" />\r\n  <Switch label=\"Start label\" labelPosition=\"start\" initialValue=\"true\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: labelPosition\"\r\n  app={`\r\n    <App>\r\n      <Switch label=\"Top label\" labelPosition=\"top\" initialValue=\"true\" />\r\n      <Switch label=\"End label\" labelPosition=\"end\" initialValue=\"true\" />\r\n      <Switch label=\"Bottom label\" labelPosition=\"bottom\" initialValue=\"true\" />\r\n      <Switch label=\"Start label\" labelPosition=\"start\" initialValue=\"true\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `labelWidth`\r\n\r\nThis property sets the width of the `Switch`.\r\n\r\n### `readOnly (default: false)`\r\n\r\nSet this property to `true` to disallow changing the component value.\r\n\r\nIf true, the value of the component cannot be modified.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Switch readOnly=\"true\" label=\"Checked\" initialValue=\"true\" />\r\n  <Switch readOnly=\"true\" label=\"Unchecked\" intialValue=\"false\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: readOnly\"\r\n  app={`\r\n    <App>\r\n      <Switch readOnly=\"true\" label=\"Checked\" initialValue=\"true\" />\r\n      <Switch readOnly=\"true\" label=\"Unchecked\" intialValue=\"false\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `required`\r\n\r\nSet this property to `true` to indicate it must have a value before submitting the containing form.\r\n\r\n### `validationStatus (default: \"none\")`\r\n\r\nThis property allows you to set the validation status of the input component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `valid` | Visual indicator for an input that is accepted |\r\n| `warning` | Visual indicator for an input that produced a warning |\r\n| `error` | Visual indicator for an input that produced an error |\r\n\r\n## Events\r\n\r\n### `didChange`\r\n\r\nThis event is triggered when value of Switch has changed.\r\n\r\nThis event is triggered when the `Switch` is toggled due to user interaction.\r\nA read-only switch never fires this event, and it won't fire if the switch's value is set programmatically.\r\n\r\n```xmlui copy\r\n<App verticalAlignment=\"center\" var.changes=\"\">\r\n  <Switch label=\"Changeable\" onDidChange=\"changes += '+'\" />\r\n  <Switch label=\"Readonly\" readOnly=\"true\" onDidChange=\"changes += '-'\" />\r\n  <Text value=\"Changes: {changes}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: didChange\"\r\n  app={`\r\n    <App verticalAlignment=\"center\" var.changes=\"\">\r\n      <Switch label=\"Changeable\" onDidChange=\"changes += '+'\" />\r\n      <Switch label=\"Readonly\" readOnly=\"true\" onDidChange=\"changes += '-'\" />\r\n      <Text value=\"Changes: {changes}\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `gotFocus`\r\n\r\nThis event is triggered when the Switch has received the focus.\r\n\r\nThis event is triggered when the `Switch` receives focus.\r\n\r\nClick the `Switch` in the example demo to change the label text. Note how clicking elsewhere resets the text to the original.\r\n\r\n```xmlui copy {4,5}\r\n<App var.focused=\"{false}\" verticalAlignment=\"center\">\r\n  <Switch\r\n    value=\"true\"\r\n    onGotFocus=\"focused = true\"\r\n    onLostFocus=\"focused = false\"\r\n  />\r\n  <Text value=\"{focused === true ? 'I am focused!' : 'I have lost the focus!'}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: gotFocus/lostFocus\"\r\n  app={`\r\n    <App var.focused=\"{false}\" verticalAlignment=\"center\">\r\n      <Switch\r\n        value=\"true\"\r\n        onGotFocus=\"focused = true\"\r\n        onLostFocus=\"focused = false\"\r\n      />\r\n      <Text value=\"{focused === true ? 'I am focused!' : 'I have lost the focus!'}\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `lostFocus`\r\n\r\nThis event is triggered when the Switch has lost the focus.\r\n\r\n## Exposed Methods\r\n\r\n### `setValue`\r\n\r\nYou can use this method to set the component's current value programmatically (`true`: checked, `false`: unchecked).\r\n\r\n```xmlui copy {9,12,14}\r\n<App var.changes=\"\">\r\n  <Switch\r\n    id=\"mySwitch\"\r\n    readOnly=\"true\"\r\n    label=\"This switch can be set only programmatically\"\r\n    onDidChange=\"changes += '+'\" />\r\n  <HStack>\r\n    <Button\r\n      label=\"Check\"\r\n      onClick=\"mySwitch.setValue(true)\" />\r\n    <Button\r\n      label=\"Uncheck\"\r\n      onClick=\"mySwitch.setValue(false)\" />\r\n  </HStack>\r\n  <Text>The switch is {checkbox.value ? \"checked\" : \"unchecked\"}</Text>\r\n  <Text value=\"Changes: {changes}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: value and setValue\"\r\n  app={`\r\n    <App var.changes=\"\">\r\n      <Switch\r\n        id=\"mySwitch\"\r\n        readOnly=\"true\"\r\n        label=\"This switch can be set only programmatically\"\r\n        onDidChange=\"changes += '+'\" />\r\n      <HStack>\r\n        <Button\r\n          label=\"Check\"\r\n          onClick=\"mySwitch.setValue(true)\" />\r\n        <Button\r\n          label=\"Uncheck\"\r\n          onClick=\"mySwitch.setValue(false)\" />\r\n      </HStack>\r\n      <Text>The switch is {checkbox.value ? \"checked\" : \"unchecked\"}</Text>\r\n      <Text value=\"Changes: {changes}\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `value`\r\n\r\nYou can query this read-only API property to query the component's current value (`true`: checked, `false`: unchecked).\r\n\r\n## Styling\r\n\r\nThe `Switch` component uses these theme variables to customize its appearance:\r\n\r\n- `backgroundColor-Switch`\r\n- `borderColor-Switch`\r\n- `backgroundColor-Switch--disabled`\r\n- `backgroundColor-indicator-Switch`\r\n- `backgroundColor-checked-Switch`\r\n- `backgroundColor-checked-Switch-warning`\r\n- `backgroundColor-checked-Switch-success`\r\n- `backgroundColor-checked-Switch-error`\r\n- `borderColor-checked-Switch`\r\n- `borderColor-checked-Switch-warning`\r\n- `borderColor-checked-Switch-success`\r\n- `borderColor-checked-Switch-error`\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nsome generic styling options are not available for this component.\r\nNamely using any `padding` features like the following:\r\n\r\n```\r\n<Switch padding=\"1rem\" />\r\n```\r\n\r\nIf you need to add space around the component, use `margins` instead of `paddings`.\r\n</Callout>\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-Switch | $color-primary-500 | $color-primary-500 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-Switch | $color-primary-500 | $color-primary-500 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-Switch-error | $borderColor-Switch-error | $borderColor-Switch-error |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-Switch-error | $borderColor-Switch-error | $borderColor-Switch-error |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-Switch-success | $borderColor-Switch-success | $borderColor-Switch-success |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-Switch-success | $borderColor-Switch-success | $borderColor-Switch-success |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-Switch-warning | $borderColor-Switch-warning | $borderColor-Switch-warning |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-checked-Switch-warning | $borderColor-Switch-warning | $borderColor-Switch-warning |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-indicator-Switch | $backgroundColor-primary | $backgroundColor-primary |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Switch | $color-surface-400 | $color-surface-400 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Switch | $color-surface-400 | $color-surface-400 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Switch--disabled | $color-surface-200 | $color-surface-200 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Switch--disabled | $color-surface-200 | $color-surface-200 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-checked-Switch | $color-primary-500 | $color-primary-500 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-checked-Switch | $color-primary-500 | $color-primary-500 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-checked-Switch-error | $borderColor-Switch-error | $borderColor-Switch-error |\r\n| [borderColor](../styles-and-themes/common-units/#color)-checked-Switch-error | $borderColor-Switch-error | $borderColor-Switch-error |\r\n| [borderColor](../styles-and-themes/common-units/#color)-checked-Switch-success | $borderColor-Switch-success | $borderColor-Switch-success |\r\n| [borderColor](../styles-and-themes/common-units/#color)-checked-Switch-success | $borderColor-Switch-success | $borderColor-Switch-success |\r\n| [borderColor](../styles-and-themes/common-units/#color)-checked-Switch-warning | $borderColor-Switch-warning | $borderColor-Switch-warning |\r\n| [borderColor](../styles-and-themes/common-units/#color)-checked-Switch-warning | $borderColor-Switch-warning | $borderColor-Switch-warning |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Switch | $color-surface-400 | $color-surface-400 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Switch | $color-surface-400 | $color-surface-400 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Switch--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Switch-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Switch-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Switch-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Switch-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-Switch--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-Switch--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-Switch--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-Switch--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n",
  "components/TabItem":"import { Callout } from \"nextra/components\";\r\n\r\n# TabItem [#component-tabitem]\r\n\r\n`TabItem` is a non-visual component describing a tab. Tabs component may use nested TabItem instances from which the user can select.\r\n\r\n## Properties\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/Table":"import { Callout } from \"nextra/components\";\r\n\r\nimport data from  \"../../component-samples/Table/list-component-data.js\";\r\n\r\n# Table [#component-table]\r\n\r\n`Table` is a component that displays cells organized into rows and columns. The `Table` component is virtualized so it only renders visible cells.\r\n\r\nIn the following sections the examples use data with the structure outlined below:\r\n\r\n| Id   | Name    | Quantity | Unit   | Category   |\r\n| :--- | :------ | :------- | :----- | :--------- |\r\n| 0    | Apples  | 5        | pieces | fruits     |\r\n| 1    | Bananas | 6        | pieces | fruits     |\r\n| 2    | Carrots | 100      | grams  | vegetables |\r\n| 3    | Spinach | 1        | bunch  | vegetables |\r\n| 4    | Milk    | 10       | liter  | diary      |\r\n| 5    | Cheese  | 200      | grams  | diary      |\r\n\r\nThe data is provided as JSON. In the source code samples, the `data={[...]}` declaration represents the data above.\r\n\r\nAll samples use table columns with the following definition unless noted otherwise\r\n(The `...` declaration nested into `<Table>` represents this column definition):\r\n\r\n```xmlui copy\r\n<Table data='{[...]}'>\r\n  <Column bindTo=\"name\"/>\r\n  <Column bindTo=\"quantity\"/>\r\n  <Column bindTo=\"unit\"/>\r\n</Table>\r\n```\r\n\r\n> **Note**: See [`Column`](../components/Column) to learn more about table columns.\r\n\r\n## Properties\r\n\r\n### `alwaysShowSelectionHeader (default: false)`\r\n\r\nThis property indicates when the row selection header is displayed. When the value is `true,` the selection header is always visible. Otherwise, it is displayed only when hovered.\r\n\r\n### `autoFocus (default: false)`\r\n\r\nIf this property is set to `true`, the component gets the focus automatically when displayed.\r\n\r\n### `data`\r\n\r\nThe component receives data via this property. The `data` property is a list of items that the `Table` can display.\r\n\r\n```xmlui copy /data='{[...]}'/\r\n<App>\r\n  <Table data='{[...]}'>\r\n    <Column bindTo=\"name\"/>\r\n    <Column bindTo=\"quantity\"/>\r\n    <Column bindTo=\"unit\"/>\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: data\"\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}'>\r\n        <Column bindTo=\"name\"/>\r\n        <Column bindTo=\"quantity\"/>\r\n        <Column bindTo=\"unit\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nYou can also provide the `Table` with data directly from an API via this property.\r\nHere, the component displays rocket information coming from the official SpaceX API.\r\n\r\n```xmlui copy /data='https://api.spacexdata.com/v3/rockets'/\r\n<App>\r\n  <Table data='https://api.spacexdata.com/v3/rockets'>\r\n    <Column header=\"Image\" size=\"140px\">\r\n      <Image height=\"100px\" fit=\"cover\" src=\"{$item.flickr_images[0]}\"/>\r\n    </Column>\r\n    <Column canSort=\"true\" bindTo=\"country\"/>\r\n    <Column canSort=\"true\" bindTo=\"company\"/>\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: data API Call\"\r\n  height={400}\r\n  app={`\r\n    <App>\r\n      <Table data='https://api.spacexdata.com/v3/rockets'>\r\n        <Column header=\"Image\" size=\"140px\">\r\n          <Image height=\"100px\" fit=\"cover\" src=\"{$item.flickr_images[0]}\"/>\r\n        </Column>\r\n        <Column canSort=\"true\" bindTo=\"country\"/>\r\n        <Column canSort=\"true\" bindTo=\"company\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `enableMultiRowSelection (default: true)`\r\n\r\nThis boolean property indicates whether you can select multiple rows in the table. This property only has an effect when the rowsSelectable property is set. Setting it to `false` limits selection to a single row.\r\n\r\nThis boolean property indicates whether you can select multiple rows in the table.\r\nThis property only has an effect when the `rowsSelectable` property is set.\r\nSetting it to `false` limits selection to a single row.\r\n\r\nBy default, the value of this property is `true`.\r\n\r\n```xmlui copy /enableMultiRowSelection=\"false\"/\r\n<App>\r\n  <Table data='{[...]}' \r\n    rowsSelectable=\"true\" \r\n    enableMultiRowSelection=\"false\">\r\n    <Column bindTo=\"name\"/>\r\n    <Column bindTo=\"quantity\"/>\r\n    <Column bindTo=\"unit\"/>\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: enableMultiRowSelection\"\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}' \r\n        rowsSelectable=\"true\" \r\n        enableMultiRowSelection=\"false\">\r\n        <Column bindTo=\"name\"/>\r\n        <Column bindTo=\"quantity\"/>\r\n        <Column bindTo=\"unit\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `headerHeight`\r\n\r\nThis optional property is used to specify the height of the table header.\r\n\r\nIt accepts common [size values](./appearance/common-units.mdx#size-values).\r\n\r\n```xmlui copy /headerHeight=\"60px\"/\r\n<App>\r\n  <Table data='{[...]}' headerHeight=\"60px\">\r\n    <Column bindTo=\"name\"/>\r\n    <Column bindTo=\"quantity\"/>\r\n    <Column bindTo=\"unit\"/>\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: headerHeight\"\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}' headerHeight=\"60px\">\r\n        <Column bindTo=\"name\"/>\r\n        <Column bindTo=\"quantity\"/>\r\n        <Column bindTo=\"unit\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `hideHeader (default: false)`\r\n\r\nSet the header visibility using this property. Set it to `true` to hide the header.\r\n\r\nSet the header visibility using this property. Set it to `true` to hide the header.\r\nThe default value is `false`.\r\n\r\n```xmlui copy /hideHeader=\"true\"/\r\n<App>\r\n  <Table data='{[...]}' hideHeader=\"true\">\r\n    <Column bindTo=\"name\"/>\r\n    <Column bindTo=\"quantity\"/>\r\n    <Column bindTo=\"unit\"/>\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: hideHeader\"\r\n  height={300}\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}' hideHeader=\"true\">\r\n        <Column bindTo=\"name\"/>\r\n        <Column bindTo=\"quantity\"/>\r\n        <Column bindTo=\"unit\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `iconNoSort`\r\n\r\nAllows setting the icon displayed in the Table column header when sorting is enabled, but the column remains unsorted.\r\n\r\nAllows the customization of the icon displayed in a Table column header when when sorting is enabled\r\nand sorting is not done according to the column. Use the \"-\" (dash) value to sign that you do not want to display an icon when a table column is not sorted.\r\n\r\n```xmlui copy /iconNoSort=\"close\"/\r\n<App>\r\n  <Table data='{[...]}' sortBy=\"quantity\" iconNoSort=\"close\">\r\n    <Column bindTo=\"name\" canSort=\"true\" />\r\n    <Column bindTo=\"quantity\" canSort=\"true\" />\r\n    <Column bindTo=\"unit\" canSort=\"true\" />\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: iconNoSort\"\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}' sortBy=\"quantity\" iconNoSort=\"close\">\r\n        <Column bindTo=\"name\" canSort=\"true\" />\r\n        <Column bindTo=\"quantity\" canSort=\"true\" />\r\n        <Column bindTo=\"unit\" canSort=\"true\" />\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `iconSortAsc`\r\n\r\nAllows setting the icon displayed in the Table column header when sorting is enabled, and the column is sorted in ascending order.\r\n\r\nAllows the customization of the icon displayed in a Table column header when sorting is enabled,\r\nsorting is done according to the column, and the column is sorted in ascending order.\r\n\r\n```xmlui copy /iconSortAsc=\"chevronup\"/\r\n<App>\r\n  <Table data='{[...]}' sortBy=\"quantity\" iconSortAsc=\"chevronup\">\r\n    <Column bindTo=\"name\" canSort=\"true\" />\r\n    <Column bindTo=\"quantity\" canSort=\"true\" />\r\n    <Column bindTo=\"unit\" canSort=\"true\" />\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: iconSortAsc\"\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}' sortBy=\"quantity\" iconSortAsc=\"chevronup\">\r\n        <Column bindTo=\"name\" canSort=\"true\" />\r\n        <Column bindTo=\"quantity\" canSort=\"true\" />\r\n        <Column bindTo=\"unit\" canSort=\"true\" />\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `iconSortDesc`\r\n\r\nAllows setting the icon displayed in the Table column header when sorting is enabled, and the column is sorted in descending order.\r\n\r\nAllows the customization of the icon displayed in a Table column header when sorting is enabled,\r\nsorting is done according to the column, and the column is sorted in descending order.\r\n\r\n```xmlui copy /iconSortDesc=\"chevrondown\"/\r\n<App>\r\n  <Table data='{[...]}' sortBy=\"quantity\" iconSortDesc=\"chevrondown\">\r\n    <Column bindTo=\"name\" canSort=\"true\" />\r\n    <Column bindTo=\"quantity\" canSort=\"true\" />\r\n    <Column bindTo=\"unit\" canSort=\"true\" />\r\n  </Table>\r\n</App>\r\n```\r\n\r\nSelect a column header and set it to descending ordering.\r\n\r\n<Playground\r\n  name=\"Example: iconSortDesc\"\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}' sortBy=\"quantity\" iconSortDesc=\"chevrondown\">\r\n        <Column bindTo=\"name\" canSort=\"true\" />\r\n        <Column bindTo=\"quantity\" canSort=\"true\" />\r\n        <Column bindTo=\"unit\" canSort=\"true\" />\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `isPaginated (default: false)`\r\n\r\nThis property adds pagination controls to the `Table`.\r\n\r\n```xmlui copy /isPaginated=\"true\"/\r\n<App>\r\n  <Table data='{[...]}' isPaginated=\"true\" pageSizes=\"{[3, 6, 12]}\">\r\n    <Column bindTo=\"name\"/>\r\n    <Column bindTo=\"quantity\"/>\r\n    <Column bindTo=\"unit\"/>\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: isPaginated\"\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}' isPaginated=\"true\" pageSizes=\"{[3, 6, 12]}\">\r\n        <Column bindTo=\"name\"/>\r\n        <Column bindTo=\"quantity\"/>\r\n        <Column bindTo=\"unit\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `loading`\r\n\r\nThis boolean property indicates if the component is fetching (or processing) data. This property is useful when data is loaded conditionally or receiving it takes some time.\r\n\r\nThis boolean property indicates if the component is fetching (or processing) data.\r\nThis property is useful when data is loaded conditionally or receiving it takes some time.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Table loading=\"true\">\r\n    <Column bindTo=\"name\"/>\r\n    <Column bindTo=\"quantity\"/>\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: loading\"\r\n  app={`\r\n    <App>\r\n      <Table loading=\"true\">\r\n        <Column bindTo=\"name\"/>\r\n        <Column bindTo=\"quantity\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `noBottomBorder (default: false)`\r\n\r\nThis property indicates whether the table should have a bottom border. When set to `true`, the table does not have a bottom border. Otherwise, it has a bottom border.\r\n\r\n### `noDataTemplate`\r\n\r\nA property to customize what to display if the table does not contain any data.\r\n\r\n```xmlui copy {3-5}\r\n<App>\r\n  <Table>\r\n    <property name=\"noDataTemplate\">\r\n      <Text value=\"No data loaded\" variant=\"strong\" />\r\n    </property>\r\n    <Column bindTo=\"name\"/>\r\n    <Column bindTo=\"quantity\"/>\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: noDataTemplate\"\r\n  app={`\r\n    <App>\r\n      <Table>\r\n        <property name=\"noDataTemplate\">\r\n          <Text value=\"No data loaded\" variant=\"strong\" />\r\n        </property>\r\n        <Column bindTo=\"name\"/>\r\n        <Column bindTo=\"quantity\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `pageSizes`\r\n\r\nThis property holds an array of page sizes (numbers) the user can select for pagination. If this property is not defined, the component allows only a page size of 10 items.\r\n\r\nPage sizes are only accepted in an array, even if the array contains one item.\r\n\r\nNote that this property only works if the [`isPaginated`](#ispaginated) property is set to `true`.\r\n\r\n```xmlui copy /pageSizes=\"{[3, 6, 12]}\"/\r\n<App>\r\n  <Table data='{[...]}' isPaginated=\"true\" pageSizes=\"{[3, 6, 12]}\">\r\n    <Column bindTo=\"name\"/>\r\n    <Column bindTo=\"quantity\"/>\r\n    <Column bindTo=\"unit\"/>\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: pageSizes\"\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}' isPaginated=\"true\" pageSizes=\"{[3, 6, 12]}\">\r\n        <Column bindTo=\"name\"/>\r\n        <Column bindTo=\"quantity\"/>\r\n        <Column bindTo=\"unit\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `rowDisabledPredicate`\r\n\r\nThis property defines a predicate function with a return value that determines if the row should be disabled. The function retrieves the item to display and should return a Boolean-like value.\r\n\r\nThe following example disables all table rows where the item's quantity exceeds 6:\r\n\r\n```xmlui copy {3}\r\n<App>\r\n  <Table data='{[...]}'\r\n    rowDisabledPredicate=\"{(item) => item.quantity > 6}\">\r\n    <Column bindTo=\"name\"/>\r\n    <Column bindTo=\"quantity\"/>\r\n    <Column bindTo=\"unit\"/>\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nDisabled items are rendered with a different color.\r\n</Callout>\r\n\r\n<Playground\r\n  name=\"Example: rowDisabledPredicate\"\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}'\r\n        rowDisabledPredicate=\"{(item) => item.quantity > 6}\">\r\n        <Column bindTo=\"name\"/>\r\n        <Column bindTo=\"quantity\"/>\r\n        <Column bindTo=\"unit\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `rowsSelectable`\r\n\r\nIndicates whether the rows are selectable (`true`) or not (`false`).\r\n\r\nThe default value is `false`.\r\n\r\n```xmlui copy /rowsSelectable=\"true\"/\r\n<App>\r\n  <Table data='{[...]}' rowsSelectable=\"true\">\r\n    <Column bindTo=\"name\"/>\r\n    <Column bindTo=\"quantity\"/>\r\n    <Column bindTo=\"unit\"/>\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: rowsSelectable\"\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}' rowsSelectable=\"true\">\r\n        <Column bindTo=\"name\"/>\r\n        <Column bindTo=\"quantity\"/>\r\n        <Column bindTo=\"unit\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `sortBy`\r\n\r\nThis property is used to determine which data attributes to sort by.\r\n\r\n```xmlui copy /sortBy=\"quantity\"/\r\n<App>\r\n  <Table data='{[...]}' sortBy=\"quantity\">\r\n    <Column bindTo=\"name\"/>\r\n    <Column bindTo=\"quantity\"/>\r\n    <Column bindTo=\"unit\"/>\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: sortBy\"\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}' sortBy=\"quantity\">\r\n        <Column bindTo=\"name\"/>\r\n        <Column bindTo=\"quantity\"/>\r\n        <Column bindTo=\"unit\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `sortDirection`\r\n\r\nThis property determines the sort order to be `ascending` or `descending`. This property only works if the [`sortBy`](#sortby) property is also set.\r\n\r\n```xmlui copy /sortDirection=\"descending\"/\r\n<App>\r\n  <Table data='{[...]}' sortBy=\"quantity\" sortDirection=\"descending\">\r\n    <Column bindTo=\"name\"/>\r\n    <Column bindTo=\"quantity\"/>\r\n    <Column bindTo=\"unit\"/>\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: sortDirection\"\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}' sortBy=\"quantity\" sortDirection=\"descending\">\r\n        <Column bindTo=\"name\"/>\r\n        <Column bindTo=\"quantity\"/>\r\n        <Column bindTo=\"unit\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `selectionDidChange`\r\n\r\nThis event is triggered when the table's current selection (the rows selected) changes. Its parameter is an array of the selected table row items. \r\n\r\nOf course, if multiple-row selection is not allowed (`enableMultipleRowSelection` is false), this array will contain zero or one item.\r\n\r\n```xmlui copy {4}\r\n<App var.selection=\"\">\r\n  <Text>Current selection (row IDs): [{selection}]</Text>\r\n  <Table data='{[...]}'\r\n    rowsSelectable=\"true\"\r\n    enableMultiRowSelection=\"true\"\r\n    onSelectionDidChange=\"(newSel) => selection = newSel.map(item => item.id).join()\" >\r\n    <Column bindTo=\"name\" canSort=\"true\"/>\r\n    <Column bindTo=\"quantity\" canSort=\"true\"/>\r\n    <Column bindTo=\"unit\" canSort=\"true\"/>\r\n  </Table>\r\n</App>\r\n```\r\n\r\nClick on any of the column headers to trigger a new sorting:\r\n\r\n<Playground\r\n  name=\"Example: selectionDidChange\"\r\n  app={`\r\n    <App var.selection=\"\">\r\n      <Text>Current selection (row IDs): [{selection}]</Text>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}'\r\n        rowsSelectable=\"true\"\r\n        enableMultiRowSelection=\"true\"\r\n        onSelectionDidChange=\"(newSel) => selection = newSel.map(item => item.id).join()\" >\r\n        <Column bindTo=\"name\" canSort=\"true\"/>\r\n        <Column bindTo=\"quantity\" canSort=\"true\"/>\r\n        <Column bindTo=\"unit\" canSort=\"true\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `sortingDidChange`\r\n\r\nThis event is fired when the table data sorting has changed. It has two arguments: the column's name and the sort direction. When the column name is empty, the table displays the data list as it received it.\r\n\r\nNote the [`canSort`](./TableColumnDef.mdx#cansort) properties on the `TableColumnDef` components which enable custom ordering.\r\n\r\n```xmlui copy {4}\r\n<App var.sortedBy=\"\">\r\n  <Heading level=\"h4\" value=\"Table is sorted by: {sortedBy || ''}\" paddingLeft=\"1rem\"/>\r\n  <Table data='{[...]}'\r\n    onSortingDidChange=\"(by, dir) => sortedBy = (by && dir) ? by + ' | ' + dir : '' \" >\r\n    <Column bindTo=\"name\" canSort=\"true\"/>\r\n    <Column bindTo=\"quantity\" canSort=\"true\"/>\r\n    <Column bindTo=\"unit\" canSort=\"true\"/>\r\n  </Table>\r\n</App>\r\n```\r\n\r\nClick on any of the column headers to trigger a new sorting:\r\n\r\n<Playground\r\n  name=\"Example: sortingDidChange\"\r\n  app={`\r\n    <App var.sortedBy=\"\">\r\n      <Heading level=\"h4\" value=\"Table is sorted by: {sortedBy || ''}\" paddingLeft=\"1rem\"/>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}'\r\n        onSortingDidChange=\"(by, dir) => sortedBy = (by && dir) ? by + ' | ' + dir : '' \" >\r\n        <Column bindTo=\"name\" canSort=\"true\"/>\r\n        <Column bindTo=\"quantity\" canSort=\"true\"/>\r\n        <Column bindTo=\"unit\" canSort=\"true\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `willSort`\r\n\r\nThis event is fired before the table data is sorted. It has two arguments: the column's name and the sort direction. When the method returns a literal `false` value (and not any other falsy one), the method indicates that the sorting should be aborted.\r\n\r\nThe following example uses the `willSort` event to refuse sorting by name:\r\n\r\n```xmlui copy {4}\r\n<App var.sortedBy=\"\">\r\n  <Heading level=\"h4\" value=\"Table is sorted by: {sortedBy || ''}\" paddingLeft=\"1rem\"/>\r\n  <Table data='{[...]}'\r\n    onWillSort=\"(by, dir) => by !== 'name'\"\r\n    onSortingDidChange=\"(by, dir) => sortedBy = (by && dir) ? by + ' | ' + dir : '' \" >\r\n    <Column bindTo=\"name\" canSort=\"true\"/>\r\n    <Column bindTo=\"quantity\" canSort=\"true\"/>\r\n    <Column bindTo=\"unit\" canSort=\"true\"/>\r\n  </Table>\r\n</App>\r\n```\r\n\r\nClick on any of the column headers to trigger the event.\r\nThough sorting is enabled in the `TableColumnnDef` component of the \"name\" column via `canSort`,\r\nclicking that column header still does not sort because `willSort` prevents it:\r\n\r\n<Playground\r\n  name=\"Example: willSort\"\r\n  app={`\r\n    <App var.sortedBy=\"\">\r\n      <Heading level=\"h4\" value=\"Table is sorted by: {sortedBy || ''}\" paddingLeft=\"1rem\"/>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}'\r\n        onWillSort=\"(by, dir) => by !== 'name'\"\r\n        onSortingDidChange=\"(by, dir) => sortedBy = (by && dir) ? by + ' | ' + dir : '' \" >\r\n        <Column bindTo=\"name\" canSort=\"true\"/>\r\n        <Column bindTo=\"quantity\" canSort=\"true\"/>\r\n        <Column bindTo=\"unit\" canSort=\"true\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Exposed Methods\r\n\r\n### `clearSelection`\r\n\r\nThis method clears the list of currently selected table rows.\r\n\r\n```xmlui copy /clearSelection()/ /selectId(1)/ /selectId([2, 4])/ /selectAll()/\r\n<App>\r\n  <HStack>\r\n    <Button label=\"Select all\" onClick=\"table.selectAll()\" />\r\n    <Button label=\"Clear all\" onClick=\"table.clearSelection()\" />\r\n    <Button label=\"Select 1\" onClick=\"table.selectId(1)\" />\r\n    <Button label=\"Select 2, 4\" onClick=\"table.selectId([2, 4])\" />\r\n  </HStack>\r\n  <Table id=\"table\" data='{${JSON.stringify(data, null, 2)}}'\r\n    rowsSelectable=\"true\"\r\n    enableMultiRowSelection=\"true\">\r\n    <Column bindTo=\"name\" canSort=\"true\"/>\r\n    <Column bindTo=\"quantity\" canSort=\"true\"/>\r\n    <Column bindTo=\"unit\" canSort=\"true\"/>\r\n  </Table>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: selection methods\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Button label=\"Select all\" onClick=\"table.selectAll()\" />\r\n        <Button label=\"Clear all\" onClick=\"table.clearSelection()\" />\r\n        <Button label=\"Select 1\" onClick=\"table.selectId(1)\" />\r\n        <Button label=\"Select 2, 4\" onClick=\"table.selectId([2, 4])\" />\r\n      </HStack>\r\n      <Table id=\"table\" data='{${JSON.stringify(data, null, 2)}}'\r\n        rowsSelectable=\"true\"\r\n        enableMultiRowSelection=\"true\">\r\n        <Column bindTo=\"name\" canSort=\"true\"/>\r\n        <Column bindTo=\"quantity\" canSort=\"true\"/>\r\n        <Column bindTo=\"unit\" canSort=\"true\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `getSelectedIds`\r\n\r\nThis method returns the list of currently selected table rows IDs.\r\n\r\n(See the [example](#clearselection) at the `clearSelection` method)\r\n\r\n### `getSelectedItems`\r\n\r\nThis method returns the list of currently selected table rows items.\r\n\r\n(See the [example](#clearselection) at the `clearSelection` method)\r\n\r\n### `selectAll`\r\n\r\nThis method selects all the rows in the table. This method has no effect if the rowsSelectable property is set to `false`.\r\n\r\n(See the [example](#clearselection) at the `clearSelection` method)\r\n\r\n### `selectId`\r\n\r\nThis method selects the row with the specified ID. This method has no effect if the `rowsSelectable` property is set to `false`. The method argument can be a single id or an array of them.\r\n\r\n(See the [example](#clearselection) at the `clearSelection` method)\r\n\r\n## Styling\r\n\r\nThe `Table` component uses the following theme variables.\r\n\r\nOverall Table theme variables:\r\n\r\n- `backgroundColor-Table`\r\n- `borderStyle-cell-Table`\r\n- `backgroundColor-pagination-Table`\r\n- `textColor-Table`\r\n- `textColor-pagination-Table`\r\n\r\nRow theme variables:\r\n\r\n- `backgroundColor-row-Table`\r\n- `backgroundColor-row-Table--hover`\r\n- `fontSize-row-Table`\r\n- `fontWeight-row-Table`\r\n\r\nSelected row theme variables:\r\n\r\n- `backgroundColor-selected-Table`\r\n- `backgroundColor-selected-Table--hover`\r\n\r\nCell theme variables:\r\n\r\n- `border-cell-Table`\r\n- `borderColor-cell-Table`\r\n- `borderWidth-cell-Table`\r\n- `padding-cell-Table`\r\n- `paddingHorizontal-cell-Table`\r\n- `paddingVertical-cell-Table`\r\n- `paddingHorizontal-cell-first-Table`\r\n- `paddingHorizontal-cell-last-Table`\r\n\r\nHeading theme variables:\r\n\r\n- `backgroundColor-heading-Table`\r\n- `backgroundColor-heading-Table--hover`\r\n- `backgroundColor-heading-Table--active`\r\n- `textColor-heading-Table`\r\n- `fontSize-heading-Table`\r\n- `fontWeight-heading-Table`\r\n- `padding-heading-Table`\r\n- `paddingHorizontal-heading-Table`\r\n- `paddingVertical-heading-Table`\r\n- `textTransform-heading-Table`\r\n\r\n### Example\r\n\r\n```json copy\r\n{\r\n  \"id\": \"custom\",\r\n  \"name\": \"Custom Theme\",\r\n  \"themeVars\": {\r\n    \"backgroundColor-heading-Table\": \"#c4c4c4\",\r\n    \"backgroundColor-Table\": \"#ededed\",\r\n    \"paddingVertical-heading-Table\": \"1rem\",\r\n    \"textColor-Table\": \"black\",\r\n    \"textColor-heading-Table\": \"black\"\r\n  }\r\n}\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling\"\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"backgroundColor-heading-Table\": \"#c4c4c4\",\r\n        \"backgroundColor-Table\": \"#ededed\",\r\n        \"paddingVertical-heading-Table\": \"1rem\",\r\n        \"textColor-Table\": \"black\",\r\n        \"textColor-heading-Table\": \"black\"\r\n      },\r\n    },\r\n  ]}\r\n  app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data, null, 2)}}'>\r\n        <Column bindTo=\"name\"/>\r\n        <Column bindTo=\"quantity\"/>\r\n        <Column bindTo=\"unit\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-heading-Table | $color-surface-100 | $color-surface-100 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-heading-Table--active | $color-surface-300 | $color-surface-300 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-heading-Table--hover | $color-surface-200 | $color-surface-200 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-pagination-Table | $backgroundColor-Table | $backgroundColor-Table |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-row-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-row-Table--hover | $color-primary-50 | $color-primary-50 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-selected-Table | $color-primary-100 | $color-primary-100 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-selected-Table--hover | $backgroundColor-row-Table--hover | $backgroundColor-row-Table--hover |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)-cell-Table | 1px solid $borderColor | 1px solid $borderColor |\r\n| [borderBottom](../styles-and-themes/common-units/#border)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomColor](../styles-and-themes/common-units/#color)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomStyle](../styles-and-themes/common-units/#border-style)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderBottomWidth](../styles-and-themes/common-units/#size)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndEndRadius-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)EndStartRadius-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalColor](../styles-and-themes/common-units/#color)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalStyle](../styles-and-themes/common-units/#border-style)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontalWidth](../styles-and-themes/common-units/#size)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeft](../styles-and-themes/common-units/#border)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftStyle](../styles-and-themes/common-units/#border-style)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderLeftWidth](../styles-and-themes/common-units/#size)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRight](../styles-and-themes/common-units/#border)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightStyle](../styles-and-themes/common-units/#border-style)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRightWidth](../styles-and-themes/common-units/#size)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartEndRadius-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)StartStartRadius-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTop](../styles-and-themes/common-units/#border)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopColor](../styles-and-themes/common-units/#color)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopStyle](../styles-and-themes/common-units/#border-style)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderTopWidth](../styles-and-themes/common-units/#size)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderHorizontal](../styles-and-themes/common-units/#border)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalColor](../styles-and-themes/common-units/#color)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalStyle](../styles-and-themes/common-units/#border-style)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderVerticalWidth](../styles-and-themes/common-units/#size)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-heading-Table | $fontSize-tiny | $fontSize-tiny |\r\n| [fontSize](../styles-and-themes/common-units/#size)-row-Table | $fontSize-small | $fontSize-small |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-heading-Table | $fontWeight-bold | $fontWeight-bold |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-row-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-heading-Table--focus | $outlineColor--focus | $outlineColor--focus |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-heading-Table--focus | $outlineOffset--focus | $outlineOffset--focus |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-heading-Table--focus | $outlineStyle--focus | $outlineStyle--focus |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-heading-Table--focus | $outlineWidth--focus | $outlineWidth--focus |\r\n| [padding](../styles-and-themes/common-units/#size)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-heading-Table | $space-2 | $space-2 |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-heading-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-cell-first-Table | $space-5 | $space-5 |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-cell-last-Table | $space-5 | $space-5 |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-cell-Table | $space-2 | $space-2 |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-heading-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-heading-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-heading-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-cell-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-heading-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-cell-Table | $space-2 | $space-2 |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-heading-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-heading-Table | $color-surface-500 | $color-surface-500 |\r\n| [textColor](../styles-and-themes/common-units/#color)-pagination-Table | $color-secondary | $color-secondary |\r\n| [textColor](../styles-and-themes/common-units/#color)-Table | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-heading-Table | uppercase | uppercase |\r\n",
  "components/TableOfContents":"import { Callout } from \"nextra/components\";\r\n\r\n# TableOfContents [#component-tableofcontents]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `TableOfContents` component collects headings and bookmarks within the current page and displays them in a tree representing their hierarchy. When you select an item in this tree, the component navigates the page to the selected position.\r\n\r\n## Properties\r\n\r\n### `maxHeadingLevel (default: \"6\")`\r\n\r\nDefines the maximum heading level (1 to 6) to include in the table of contents. For example, if it is 2, then `H1` and `H2` are displayed, but lower levels (`H3` to `H6`) are not.\r\n\r\n### `smoothScrolling (default: \"false\")`\r\n\r\nThis property indicates that smooth scrolling is used while scrolling the selected table of contents items into view.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-TableOfContents | transparent | transparent |\r\n| [border](../styles-and-themes/common-units/#border)-color-TableOfContentsItem | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [border](../styles-and-themes/common-units/#border)-style-TableOfContents | solid | solid |\r\n| [border](../styles-and-themes/common-units/#border)-style-TableOfContentsItem | solid | solid |\r\n| [border](../styles-and-themes/common-units/#border)-style-TableOfContentsItem--active | solid | solid |\r\n| [border](../styles-and-themes/common-units/#border)-width-TableOfContents | 0 | 0 |\r\n| [border](../styles-and-themes/common-units/#border)-width-TableOfContentsItem | $space-0_5 | $space-0_5 |\r\n| [border](../styles-and-themes/common-units/#border)-width-TableOfContentsItem--active | $space-0_5 | $space-0_5 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-TableOfContents | transparent | transparent |\r\n| [borderColor](../styles-and-themes/common-units/#color)-TableOfContentsItem | $borderColor | $borderColor |\r\n| [borderColor](../styles-and-themes/common-units/#color)-TableOfContentsItem--active | $color-primary-500 | $color-primary-500 |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-TableOfContents | 0 | 0 |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-TableOfContentsItem | 0 | 0 |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-TableOfContentsItem--active | 0 | 0 |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-TableOfContents | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-TableOfContents | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-TableOfContentsItem | $textColor-primary | $textColor-primary |\r\n| [color](../styles-and-themes/common-units/#color)-TableOfContentsItem--active | $color-primary-500 | $color-primary-500 |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-TableOfContentsItem | $fontFamily | $fontFamily |\r\n| [fontSize](../styles-and-themes/common-units/#size)-TableOfContentsItem | $fontSize-smaller | $fontSize-smaller |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-TableOfContentsItem | $fontWeight-normal | $fontWeight-normal |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-TableOfContentsItem--active | $fontWeight-bold | $fontWeight-bold |\r\n| [height](../styles-and-themes/common-units/#size)-TableOfContents | auto | auto |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-TableOfContentsItem | 0 | 0 |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-TableOfContents | 0 | 0 |\r\n| [marginTop](../styles-and-themes/common-units/#size)-TableOfContents | 0 | 0 |\r\n| [padding](../styles-and-themes/common-units/#size)-TableOfContentsItem | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-1 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-2 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-3 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-4 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-5 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-6 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-TableOfContentsItem | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-1 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-2 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-3 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-4 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-5 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingBottom](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-6 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-TableOfContents | $space-8 | $space-8 |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-TableOfContentsItem | $space-2 | $space-2 |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-1 | unset | unset |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-2 | unset | unset |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-3 | unset | unset |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-4 | unset | unset |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-5 | unset | unset |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-6 | unset | unset |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-TableOfContentsItem | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-1 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-2 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-3 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-4 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-5 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingLeft](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-6 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-TableOfContentsItem | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-1 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-2 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-3 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-4 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-5 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingRight](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-6 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-TableOfContentsItem | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-1 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-2 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-3 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-4 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-5 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingTop](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-6 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-TableOfContents | $space-4 | $space-4 |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-TableOfContentsItem | $space-2 | $space-2 |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-1 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-2 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-3 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-4 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-5 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-TableOfContentsItem-level-6 | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-TableOfContentsItem | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-TableOfContentsItem | none | none |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-TableOfContentsItem | baseline | baseline |\r\n| [width](../styles-and-themes/common-units/#size)-TableOfContents | auto | auto |\r\n",
  "components/Tabs":"import { Callout } from \"nextra/components\";\r\n\r\n# Tabs [#component-tabs]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `Tabs` component provides a tabbed layout where each tab has a clickable label and content.\r\n\r\nThe component accepts only `TabItem` components as children.\r\nOther child components will not be displayed.\r\n\r\nThe `TabItem` component has a `label` prop to define the tab button label text.\r\nContent is provided to a tab via placing child components under the `TabItem`.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Tabs>\r\n    <TabItem label=\"Account\">\r\n      <Text>Account</Text>\r\n    </TabItem>\r\n    <TabItem label=\"Stream\">\r\n      <Text>Stream</Text>\r\n    </TabItem>\r\n    <TabItem label=\"Support\">\r\n      <Text>Support</Text>\r\n    </TabItem>\r\n  </Tabs>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: using Tabs\"\r\n  app={`\r\n    <App>\r\n      <Tabs>\r\n        <TabItem label=\"Account\">\r\n          <Text>Account</Text>\r\n        </TabItem>\r\n        <TabItem label=\"Stream\">\r\n          <Text>Stream</Text>\r\n        </TabItem>\r\n        <TabItem label=\"Support\">\r\n          <Text>Support</Text>\r\n        </TabItem>\r\n      </Tabs>\r\n    </App>\r\n  `}\r\n  height={200}\r\n/>\r\n\r\n## Properties\r\n\r\n### `activeTab`\r\n\r\nThis property indicates the index of the active tab. The indexing starts from 0, representing the starting (leftmost) tab.\r\n\r\n```xmlui copy /activeTab=\"2\"/\r\n<App>\r\n  <Tabs activeTab=\"2\">\r\n    <TabItem label=\"Account\">\r\n      <Text>Account</Text>\r\n    </TabItem>\r\n    <TabItem label=\"Stream\">\r\n      <Text>Stream</Text>\r\n    </TabItem>\r\n    <TabItem label=\"Support\">\r\n      <Text>Support</Text>\r\n    </TabItem>\r\n  </Tabs>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: activeTab\"\r\n  app={`\r\n    <App>\r\n      <Tabs activeTab=\"2\">\r\n        <TabItem label=\"Account\">\r\n          <Text>Account</Text>\r\n        </TabItem>\r\n        <TabItem label=\"Stream\">\r\n          <Text>Stream</Text>\r\n        </TabItem>\r\n        <TabItem label=\"Support\">\r\n          <Text>Support</Text>\r\n        </TabItem>\r\n      </Tabs>\r\n    </App>\r\n  `}\r\n  height={200}\r\n/>\r\n\r\n### `orientation (default: \"vertical\")`\r\n\r\nThis property indicates the orientation of the component. In horizontal orientation, the tab sections are laid out on the left side of the content panel, while in vertical orientation, the buttons are at the top.\r\n\r\nAvailable values: `horizontal`, `vertical` **(default)**\r\n\r\n```xmlui copy /orientation=\"horizontal\"/\r\n<App>\r\n  <Tabs orientation=\"horizontal\">\r\n    <TabItem label=\"Account\">\r\n      <Text>Account</Text>\r\n    </TabItem>\r\n    <TabItem label=\"Stream\">\r\n      <Text>Stream</Text>\r\n    </TabItem>\r\n    <TabItem label=\"Support\">\r\n      <Text>Support</Text>\r\n    </TabItem>\r\n  </Tabs>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: orientation\"\r\n  app={`\r\n    <App>\r\n      <Tabs orientation=\"horizontal\">\r\n        <TabItem label=\"Account\">\r\n          <Text>Account</Text>\r\n        </TabItem>\r\n        <TabItem label=\"Stream\">\r\n          <Text>Stream</Text>\r\n        </TabItem>\r\n        <TabItem label=\"Support\">\r\n          <Text>Support</Text>\r\n        </TabItem>\r\n      </Tabs>\r\n    </App>\r\n  `}\r\n  height={200}\r\n/>\r\n\r\n### `tabTemplate`\r\n\r\nThis property declares the template for the clickable tab area.\r\n\r\n```xmlui copy {2-4}\r\n<App>\r\n  <Tabs>\r\n    <property name=\"tabTemplate\">\r\n      <Button variant=\"outlined\" label=\"{$item.label}\" />\r\n    </property>\r\n    <TabItem label=\"Account\">\r\n      <Text>Account</Text>\r\n    </TabItem>\r\n    <TabItem label=\"Stream\">\r\n      <Text>Stream</Text>\r\n    </TabItem>\r\n    <TabItem label=\"Support\">\r\n      <Text>Support</Text>\r\n    </TabItem>\r\n  </Tabs>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: tabTemplate\"\r\n  app={`\r\n    <App>\r\n      <Tabs>\r\n        <property name=\"tabTemplate\">\r\n          <Button variant=\"outlined\" label=\"{$item.label}\" />\r\n        </property>\r\n        <TabItem label=\"Account\">\r\n          <Text>Account</Text>\r\n        </TabItem>\r\n        <TabItem label=\"Stream\">\r\n          <Text>Stream</Text>\r\n        </TabItem>\r\n        <TabItem label=\"Support\">\r\n          <Text>Support</Text>\r\n        </TabItem>\r\n      </Tabs>\r\n    </App>\r\n  `}\r\n  height={200}\r\n/>\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\n### `next`\r\n\r\nThis method selects the next tab.\r\n\r\n## Styling\r\n\r\nThe `Tabs` component uses these theme variables to customize its appearance:\r\n\r\n- `backgroundColor-Tabs`\r\n- `borderColor-Tabs`\r\n- `borderWidth-Tabs`\r\n- `borderColor-active-Tabs`\r\n- `backgroundColor-trigger-Tabs`\r\n- `backgroundColor-trigger-Tabs--hover`\r\n\r\n```json copy\r\n{\r\n  \"id\": \"custom\",\r\n  \"name\": \"Custom Theme\",\r\n  \"themeVars\": {\r\n    \"backgroundColor-Tabs\": \"green\",\r\n    \"borderWidth-Tabs\": \"6px\",\r\n    \"borderColor-Tabs\": \"gold\"\r\n  }\r\n}\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling\"\r\n  height={200}\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"backgroundColor-Tabs\": \"green\",\r\n        \"borderWidth-Tabs\": \"6px\",\r\n        \"borderColor-Tabs\": \"gold\"\r\n      },\r\n    },\r\n  ]}\r\n  app={`\r\n    <App>\r\n      <Tabs>\r\n        <TabItem label=\"Account\">\r\n          <Text>Account</Text>\r\n        </TabItem>\r\n        <TabItem label=\"Stream\">\r\n          <Text>Stream</Text>\r\n        </TabItem>\r\n        <TabItem label=\"Support\">\r\n          <Text>Support</Text>\r\n        </TabItem>\r\n      </Tabs>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-list-Tabs | $color-primary-50 | $color-primary-50 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Tabs | $backgroundColor-primary | $backgroundColor-primary |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-trigger-Tabs | $backgroundColor-primary | $backgroundColor-primary |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-trigger-Tabs--hover | $color-primary-50 | $color-primary-50 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-active-Tabs | $color-primary | $color-primary |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Tabs | $borderColor | $borderColor |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Tabs | solid | solid |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Tabs | 2px | 2px |\r\n| [textColor](../styles-and-themes/common-units/#color)-trigger-Tabs | $color-primary-100 | $color-primary-100 |\r\n",
  "components/Text":"import { Callout } from \"nextra/components\";\r\n\r\n# Text [#component-text]\r\n\r\nThe `Text` component displays textual information in a number of optional styles and variants.\r\n\r\nYou can learn more about this component in the [Working with Text](/learning/using-components/text) article.\r\n\r\nAlso note that variants of the `Text` component are also mapped to HtmlTag components.\r\nSee the [variant](#variant) section to check which variant maps to which HtmlTag.\r\n\r\n## Properties\r\n\r\n### `ellipses (default: false)`\r\n\r\nThis property indicates whether ellipses should be displayed when the text is cropped (`true`) or not (`false`).\r\n\r\n```xmlui copy /ellipses=\"false\"/\r\n<App>\r\n  <VStack width=\"120px\">\r\n    <Text\r\n      backgroundColor=\"cyan\"\r\n      color=\"black\"\r\n      maxLines=\"1\"\r\n      ellipses=\"false\">\r\n      Though this long text does is about to crop!\r\n    </Text>\r\n    <Text\r\n      backgroundColor=\"cyan\"\r\n      color=\"black\"\r\n      maxLines=\"1\">\r\n      Though this long text does is about to crop!\r\n    </Text>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: ellipses\"\r\n  app={`\r\n  <App>\r\n    <VStack width=\"120px\">\r\n      <Text\r\n        backgroundColor=\"cyan\"\r\n        color=\"black\"\r\n        maxLines=\"1\"\r\n        ellipses=\"false\">\r\n        Though this long text does is about to crop!\r\n      </Text>\r\n      <Text\r\n        backgroundColor=\"cyan\"\r\n        color=\"black\"\r\n        maxLines=\"1\">\r\n        Though this long text does is about to crop!\r\n      </Text>\r\n    </VStack>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `maxLines`\r\n\r\nThis property determines the maximum number of lines the component can wrap to. If there is no space to display all the contents, the component displays up to as many lines as specified in this property. When the value is not defined, there is no limit on the displayed lines.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Text\r\n    maxWidth=\"120px\"\r\n    backgroundColor=\"cyan\"\r\n    color=\"black\"\r\n    value=\"A long text that will likely overflow\"\r\n    maxLines=\"2\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: maxLines\"\r\n  app={`\r\n  <App>\r\n    <Text\r\n      maxWidth=\"120px\"\r\n      backgroundColor=\"cyan\"\r\n      color=\"black\"\r\n      value=\"A long text that will likely overflow\"\r\n      maxLines=\"1\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `preserveLinebreaks (default: \"false\")`\r\n\r\nThis property indicates if linebreaks should be preserved when displaying text.\r\n\r\n```xmlui copy {7}\r\n<App>\r\n  <HStack>\r\n    <Text\r\n      width=\"250px\"\r\n      backgroundColor=\"cyan\"\r\n      color=\"black\"\r\n      preserveLinebreaks=\"true\"\r\n      value=\"(preserve) This long text\r\n      with several line breaks\r\n              does not fit into a viewport with a 200-pixel width.\" />\r\n    <Text\r\n      width=\"250px\"\r\n      backgroundColor=\"cyan\"\r\n      color=\"black\"\r\n      value=\"(don't preserve) This long text\r\n      with several line breaks\r\n              does not fit into a viewport with a 200-pixel width.\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: preserveLinebreaks\"\r\n  app={`\r\n  <App>\r\n    <HStack>\r\n      <Text\r\n        width=\"250px\"\r\n        backgroundColor=\"cyan\"\r\n        color=\"black\"\r\n        preserveLinebreaks=\"true\"\r\n        value=\"(preserve) This long text\r\n        with several line breaks\r\n                does not fit into a viewport with a 200-pixel width.\" />\r\n      <Text\r\n        width=\"250px\"\r\n        backgroundColor=\"cyan\"\r\n        color=\"black\"\r\n        value=\"(don't preserve) This long text\r\n        with several line breaks\r\n                does not fit into a viewport with a 200-pixel width.\" />\r\n    </HStack>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n> **Note**: Remember to use the `value` property of the `Text`.\r\n> Linebreaks are converted to spaces when nesting the text inside the `Text` component.\r\n\r\n### `value`\r\n\r\nThe text to be displayed. This value can also be set via nesting the text into the `Text` component.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Text value=\"An example text\" />\r\n  <Text>An example text</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: value\"\r\n  app={`\r\n  <App>\r\n    <Text value=\"An example text\" />\r\n    <Text>An example text</Text>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `variant`\r\n\r\nAn optional string value that provides named presets for text variants with a unique combination of font style, weight, size, color, and other parameters. If not defined, the text uses the current style of its context.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `abbr` | Represents an abbreviation or acronym |\r\n| `caption` | Represents the caption (or title) of a table |\r\n| `cite` | Is used to mark up the title of a cited work |\r\n| `code` | Represents a line of code |\r\n| `codefence` | Handles the display of code blocks if combined with a `code` variant |\r\n| `deleted` | Represents text that has been deleted |\r\n| `em` | Marks text to stress emphasis |\r\n| `inserted` | Represents a range of text that has been added to a document |\r\n| `keyboard` | Represents a span of text denoting textual user input from a keyboard or voice input |\r\n| `marked` | Represents text which is marked or highlighted for reference or notation |\r\n| `mono` | Text using a mono style font family |\r\n| `paragraph` | Represents a paragraph |\r\n| `placeholder` | Text that is mostly used as the placeholder style in input controls |\r\n| `sample` | Represents sample (or quoted) output from a computer program |\r\n| `secondary` | Represents a bit dimmed secondary text |\r\n| `small` | Represents side-comments and small print |\r\n| `sub` | Specifies inline text as subscript |\r\n| `strong` | Contents have strong importance |\r\n| `subheading` | Indicates that the text is the subtitle in a heading |\r\n| `subtitle` | Indicates that the text is the subtitle of some other content |\r\n| `sup` | Specifies inline text as superscript |\r\n| `tableheading` | Indicates that the text is a table heading |\r\n| `title` | Indicates that the text is the title of some other content |\r\n| `var` | Represents the name of a variable in a mathematical expression |\r\n\r\n<Playground\r\n  name=\"Example: variant\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Text width=\"150px\">default:</Text>\r\n        <Text>This is an example text</Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">paragraph:</Text>\r\n        <Text variant=\"paragraph\">This is an example paragraph</Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">abbr:</Text>\r\n        <Text variant=\"abbr\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">cite:</Text>\r\n        <Text variant=\"cite\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">code:</Text>\r\n        <Text variant=\"code\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">codefence:</Text>\r\n        <Text variant=\"codefence\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">codefence + code:</Text>\r\n        <Text variant=\"codefence\">\r\n          <Text variant=\"code\">\r\n            This is an example text\r\n          </Text>\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">deleted:</Text>\r\n        <Text variant=\"deleted\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">inserted:</Text>\r\n        <Text variant=\"inserted\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">keyboard:</Text>\r\n        <Text variant=\"keyboard\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">marked:</Text>\r\n        <Text variant=\"marked\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">sample:</Text>\r\n        <Text variant=\"sample\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">sup:</Text>\r\n        <Text>\r\n          This is an example text\r\n          <Text variant=\"sup\">(with some additional text)</Text>\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">sub:</Text>\r\n        <Text>\r\n          This is an example text\r\n          <Text variant=\"sub\">(with some additional text)</Text>\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">var:</Text>\r\n        <Text variant=\"var\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">mono:</Text>\r\n        <Text variant=\"mono\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">strong:</Text>\r\n        <Text variant=\"strong\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">em:</Text>\r\n        <Text variant=\"em\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">title:</Text>\r\n        <Text variant=\"title\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">subtitle:</Text>\r\n        <Text variant=\"subtitle\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">small:</Text>\r\n        <Text variant=\"small\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">caption:</Text>\r\n        <Text variant=\"caption\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">placeholder:</Text>\r\n        <Text variant=\"placeholder\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">subheading:</Text>\r\n        <Text variant=\"subheading\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">tableheading:</Text>\r\n        <Text variant=\"tableheading\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">secondary:</Text>\r\n        <Text variant=\"secondary\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n**HtmlTag Mappings**\r\n\r\nThe table below indicates which Text `variant` maps to which HtmlTag component.\r\n\r\n| Variant     | Component |\r\n| ----------- | --------- |\r\n| `abbr`      | abbr      |\r\n| `cite`      | cite      |\r\n| `code`      | code      |\r\n| `codefence` | pre       |\r\n| `deleted`   | del       |\r\n| `inserted`  | ins       |\r\n| `keyboard`  | kbd       |\r\n| `marked`    | mark      |\r\n| `sample`    | samp      |\r\n| `sub`       | sub       |\r\n| `sup`       | sup       |\r\n| `var`       | var       |\r\n| `strong`    | strong    |\r\n| `em`        | em        |\r\n| `paragraph` | p         |\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `Text` component uses these theme variables:\r\n\r\n- `verticalAlign`\r\n- `borderRadius`\r\n- `color`\r\n- `backgroundColor`\r\n- `borderColor`\r\n- `textDecorationColor`\r\n- `fontFamily`\r\n- `fontSize`\r\n- `fontWeight`\r\n- `fontStyle`\r\n- `fontStretch`\r\n- `letterSpacing`\r\n- `textDecorationLine`\r\n- `lineHeight`\r\n- `textUnderlineOffset`\r\n- `paddingHorizontal`\r\n- `paddingVertical`\r\n- `borderStyle`\r\n- `textDecorationStyle`\r\n- `borderWidth`\r\n- `textDecorationThickness`\r\n- `transform`\r\n\r\nYou must combine these property names with `Text` and the variant's name.\r\nFor example, you can set a light green background for the `abbr` variant and add some horizontal padding\r\nwith the following theme variables:\r\n\r\n```json copy\r\n\"backgroundColor-Text-abbr\": \"lightgreen\",\r\n\"paddingHorizontal-Text-abbr\": \"8px\"\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling the 'abbr' variant\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Text width=\"150px\">default:</Text>\r\n        <Text>This is an example text</Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">abbr:</Text>\r\n        <Text variant=\"abbr\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">cite:</Text>\r\n        <Text variant=\"cite\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"backgroundColor-Text-abbr\": \"lightgreen\",\r\n        \"paddingHorizontal-Text-abbr\": \"8px\",\r\n      },\r\n    },\r\n  ]}\r\n/>\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-code | $color-surface-100 | $color-surface-100 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-codefence | $color-primary-100 | $color-primary-100 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-keyboard | $color-surface-200 | $color-surface-200 |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-marked | yellow | yellow |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-subheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-code | $color-surface-200 | $color-surface-200 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-keyboard | $color-surface-300 | $color-surface-300 |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-subheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text | $borderRadius | $borderRadius |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-code | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-keyboard | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-subheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text | solid | solid |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-code | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-keyboard | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-subheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text | $space-0 | $space-0 |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-code | 1px | 1px |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-keyboard | 1px | 1px |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-subheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-Text-codefence | $color-surface-900 | $color-surface-900 |\r\n| [color](../styles-and-themes/common-units/#color)-Text-placeholder | $color-surface-500 | $color-surface-500 |\r\n| [color](../styles-and-themes/common-units/#color)-Text-secondary | $textColor-secondary | $textColor-secondary |\r\n| [color](../styles-and-themes/common-units/#color)-Text-subheading | $textColor-secondary | $textColor-secondary |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text | $fontFamily | $fontFamily |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-code | $fontFamily-monospace | $fontFamily-monospace |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-codefence | $fontFamily-monospace | $fontFamily-monospace |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-keyboard | $fontFamily-monospace | $fontFamily-monospace |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-mono | $fontFamily-monospace | $fontFamily-monospace |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-sample | $fontFamily-monospace | $fontFamily-monospace |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-subheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontFamily](../styles-and-themes/common-units/#fontFamily)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text | $fontSize-small | $fontSize-small |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-code | $fontSize-small | $fontSize-small |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-keyboard | $fontSize-small | $fontSize-small |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-placeholder | $fontSize-small | $fontSize-small |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-sample | $fontSize-small | $fontSize-small |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-secondary | $fontSize-small | $fontSize-small |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-small | $fontSize-small | $fontSize-small |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-sub | $fontSize-smaller | $fontSize-smaller |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-subheading | $fontSize-H6 | $fontSize-H6 |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-subtitle | $fontSize-medium | $fontSize-medium |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-sup | $fontSize-smaller | $fontSize-smaller |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-title | $fontSize-large | $fontSize-large |\r\n| [fontSize](../styles-and-themes/common-units/#size)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-code | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-keyboard | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-subheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStretch](../styles-and-themes/common-units/#fontStretch)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-cite | italic | italic |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-code | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-keyboard | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-subheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontStyle](../styles-and-themes/common-units/#fontStyle)-Text-var | italic | italic |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text | $fontWeight-normal | $fontWeight-normal |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-abbr | $fontWeight-bold | $fontWeight-bold |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-code | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-keyboard | $fontWeight-bold | $fontWeight-bold |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-subheading | $fontWeight-bold | $fontWeight-bold |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-tableheading | $fontWeight-bold | $fontWeight-bold |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontWeight](../styles-and-themes/common-units/#fontWeight)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-caption | 0.05rem | 0.05rem |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-code | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-keyboard | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-subheading | 0.04em | 0.04em |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [letterSpacing](../styles-and-themes/common-units/#size)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-code | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-keyboard | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-small | $lineHeight-tight | $lineHeight-tight |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-subheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [lineHeight](../styles-and-themes/common-units/#size)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-code | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-keyboard | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-subheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-tableheading | $space-4 | $space-4 |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginBottom](../styles-and-themes/common-units/#size)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-code | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-keyboard | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-subheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-tableheading | $space-1 | $space-1 |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [marginTop](../styles-and-themes/common-units/#size)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-Text-code | $space-1 | $space-1 |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-Text-codefence | $space-3 | $space-3 |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-Text-keyboard | $space-1 | $space-1 |\r\n| [paddingHorizontal](../styles-and-themes/common-units/#size)-Text-tableheading | $space-1 | $space-1 |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-Text-codefence | $space-2 | $space-2 |\r\n| [paddingVertical](../styles-and-themes/common-units/#size)-Text-paragraph | $space-1 | $space-1 |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text | $textColor-primary | $textColor-primary |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-code | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-keyboard | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-subheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-code | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-keyboard | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-subheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationColor](../styles-and-themes/common-units/#color)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-code | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-deleted | line-through | line-through |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-inserted | underline | underline |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-keyboard | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-subheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationLine](../styles-and-themes/common-units/#textDecoration)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-code | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-keyboard | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-subheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationStyle](../styles-and-themes/common-units/#textDecoration)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-code | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-keyboard | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-subheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textDecorationThickness](../styles-and-themes/common-units/#textDecoration)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-abbr | uppercase | uppercase |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-code | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-keyboard | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-subheading | uppercase | uppercase |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textTransform](../styles-and-themes/common-units/#textTransform)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-code | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-keyboard | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-sub | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-subheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-sup | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textUnderlineOffset](../styles-and-themes/common-units/#size)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-abbr | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-caption | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-cite | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-code | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-codefence | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-deleted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-inserted | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-keyboard | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-markdown | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-marked | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-mono | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-paragraph | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-placeholder | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-sample | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-secondary | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-small | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-sub | sub | sub |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-subheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-subtitle | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-sup | super | super |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-tableheading | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-title | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [verticalAlign](../styles-and-themes/common-units/#alignment)-Text-var | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n",
  "components/TextArea":"import { Callout } from \"nextra/components\";\r\n\r\n# TextArea [#component-textarea]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\n`TextArea` is a component that provides a multiline text input area.\r\n\r\nThe `TextArea` is an input control component and is often used in forms. See the [Using Forms](../learning/forms.mdx) guide for details.\r\n\r\nTo add new lines to the input field press `Shift` + `Enter`.\r\n\r\n## Properties\r\n\r\n### `autoFocus (default: false)`\r\n\r\nIf this property is set to `true`, the component gets the focus automatically when displayed.\r\n\r\n### `autoSize (default: false)`\r\n\r\nIf set to `true`, this boolean property enables the `TextArea` to resize automatically based on the number of lines inside it.\r\n\r\n> **Note**: If either `autoSize`, `maxRows` or `minRows` is set, the `rows` prop has no effect.\r\n\r\nWrite multiple lines in the `TextArea` in the demo below to see how it resizes automatically.\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextArea autoSize=\"true\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: autoSize\"\r\n  app={`\r\n  <App>\r\n    <TextArea autoSize=\"true\" />\r\n  </App>\r\n  `}\r\n  height={240}\r\n/>\r\n\r\n### `enabled (default: true)`\r\n\r\nThis boolean property value indicates whether the component responds to user events (`true`) or not (`false`).\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextArea enabled=\"false\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: enabled\"\r\n  app={`\r\n  <App>\r\n    <TextArea enabled=\"false\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `enterSubmits (default: true)`\r\n\r\nThis optional boolean property indicates whether pressing the `Enter` key on the keyboard prompts the parent `Form` component to submit.\r\n\r\nPress `Enter` after writing something in the `TextArea` in the demo below.\r\nSee [Using Forms](../learning/forms.mdx) for details.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Form onSubmit=\"toast.success(JSON.stringify(address.value))\">\r\n    <TextArea\r\n      id=\"address\"\r\n      enterSubmits=\"true\"\r\n      initialValue=\"Suzy Queue, 4455 Landing Lange, APT 4, Louisville, KY 40018-1234\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: enterSubmits\"\r\n  app={`\r\n  <App>\r\n    <Form onSubmit=\"toast.success(JSON.stringify(address.value))\">\r\n      <TextArea\r\n        id=\"address\"\r\n        enterSubmits=\"true\"\r\n        initialValue=\"Suzy Queue, 4455 Landing Lange, APT 4, Louisville, KY 40018-1234\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `escResets (default: false)`\r\n\r\nThis boolean property indicates whether the TextArea contents should be reset when pressing the ESC key.\r\n\r\n### `initialValue`\r\n\r\nThis property sets the component's initial value.\r\n\r\nThe initial value displayed in the input field.\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextArea initialValue=\"Example text\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: initialValue\"\r\n  app={`\r\n  <App>\r\n    <TextArea initialValue=\"Example text\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\n### `labelBreak (default: false)`\r\n\r\nThis boolean value indicates if the `TextArea` labels can be split into multiple lines if it would overflow the available label width.\r\n\r\n### `labelPosition (default: \"top\")`\r\n\r\nPlaces the label at the given position of the component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `start` | The left side of the input (left-to-right) or the right side of the input (right-to-left) |\r\n| `end` | The right side of the input (left-to-right) or the left side of the input (right-to-left) |\r\n| `top` | The top of the input **(default)** |\r\n| `bottom` | The bottom of the input |\r\n\r\n### `labelWidth`\r\n\r\nThis property sets the width of the `TextArea`.\r\n\r\n### `maxLength`\r\n\r\nThis property sets the maximum length of the input it accepts.\r\n\r\n### `maxRows`\r\n\r\nThis optional property sets the maximum number of text rows the `TextArea` can grow.\r\n\r\n> **Note**: If either `autoSize`, `maxRows` or `minRows` is set, the `rows` prop has no effect.\r\n\r\n```xmlui copy {3}\r\n<App>\r\n  <TextArea\r\n    maxRows=\"3\"\r\n    initialValue=\"Lorem ipsum dolor sit amet,\r\n    consectetur adipiscing elit,\r\n    sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n    Ut enim ad minim veniam,\r\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: maxRows\"\r\n  height={160}\r\n  app={`\r\n  <App>\r\n    <TextArea\r\n      maxRows=\"3\"\r\n      initialValue=\"Lorem ipsum dolor sit amet,\r\n      consectetur adipiscing elit,\r\n      sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n      Ut enim ad minim veniam,\r\n      quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `minRows`\r\n\r\nThis optional property sets the minimum number of text rows the `TextArea` can shrink.\r\n\r\n> **Note**: If either `autoSize`, `maxRows` or `minRows` is set, the `rows` prop has no effect.\r\n\r\n```xmlui copy /minRows=\"3\"/\r\n<App>\r\n  <TextArea minRows=\"3\" initialValue=\"Lorem ipsum dolor sit amet...\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: minRows\"\r\n  height={200}\r\n  app={`\r\n  <App>\r\n    <TextArea minRows=\"3\" initialValue=\"Lorem ipsum dolor sit amet...\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `placeholder`\r\n\r\nA placeholder text that is visible in the input field when its empty.\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextArea placeholder=\"This is a placeholder\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: placeholder\"\r\n  app={`\r\n  <App>\r\n    <TextArea placeholder=\"This is a placeholder\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `readOnly (default: false)`\r\n\r\nSet this property to `true` to disallow changing the component value.\r\n\r\n```xmlui copy /readOnly=\"{true}\"/\r\n<App>\r\n  <TextArea initialValue=\"Example text\" readOnly=\"{true}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: readOnly\"\r\n  app={`\r\n  <App>\r\n    <TextArea initialValue=\"Example text\" readOnly=\"{true}\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `required`\r\n\r\nSet this property to `true` to indicate it must have a value before submitting the containing form.\r\n\r\n### `resize`\r\n\r\nThis optional property specifies in which dimensions can the `TextArea` be resized by the user.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `(undefined)` | No resizing |\r\n| `horizontal` | Can only resize horizontally |\r\n| `vertical` | Can only resize vertically |\r\n| `both` | Can resize in both dimensions |\r\n\r\nIf you allow resizing, the `TextArea` turns off automatic sizing.\r\n\r\nWhen you allow vertical resizing, you can limit the sizable range according to `minRows` and `maxRows`.\r\n\r\nDrag the small resize indicators at the bottom right on each of the controls in the demo.\r\n\r\n```xmlui copy /resize/\r\n<App>\r\n  <TextArea resize=\"vertical\" minRows=\"1\" maxRows=\"8\" />\r\n  <TextArea resize=\"both\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: resize\"\r\n  height={300}\r\n  app={`\r\n  <App>\r\n    <TextArea resize=\"vertical\" minRows=\"1\" maxRows=\"8\" />\r\n    <TextArea resize=\"both\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `rows (default: 2)`\r\n\r\nSpecifies the number of rows the component initially has.\r\n\r\n> **Note**: If either `autoSize`, `maxRows` or `minRows` is set, the `rows` prop has no effect.\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextArea rows=\"10\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: rows\"\r\n  app={`\r\n  <App>\r\n    <TextArea rows=\"10\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `validationStatus (default: \"none\")`\r\n\r\nThis property allows you to set the validation status of the input component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `valid` | Visual indicator for an input that is accepted |\r\n| `warning` | Visual indicator for an input that produced a warning |\r\n| `error` | Visual indicator for an input that produced an error |\r\n\r\nThis prop is used to visually indicate status changes reacting to form field validation.\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextArea />\r\n  <TextArea validationStatus=\"valid\" />\r\n  <TextArea validationStatus=\"warning\" />\r\n  <TextArea validationStatus=\"error\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: validationStatus\"\r\n  app={`\r\n  <App>\r\n    <TextArea />\r\n    <TextArea validationStatus=\"valid\" />\r\n    <TextArea validationStatus=\"warning\" />\r\n    <TextArea validationStatus=\"error\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `didChange`\r\n\r\nThis event is triggered when value of TextArea has changed.\r\n\r\nWrite in the input field and see how the `Text` underneath it is updated in parallel.\r\n\r\n```xmlui copy {3}\r\n<App var.field=\"\">\r\n  <TextArea autoFocus=\"true\" initialValue=\"{field}\" onDidChange=\"(val) => field = val\" />\r\n  <Text value=\"{field}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: didChange\"\r\n  height={160}\r\n  app={`\r\n  <App var.field=\"\">\r\n    <TextArea autoFocus=\"true\" initialValue=\"{field}\" onDidChange=\"(val) => field = val\" />\r\n    <Text value=\"{field}\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `gotFocus`\r\n\r\nThis event is triggered when the TextArea has received the focus.\r\n\r\nClicking on the `TextArea` in the example demo changes the label text.\r\nNote how clicking elsewhere resets the text to the original.\r\n\r\n```xmlui copy {4-5}\r\n<App>\r\n  <TextArea\r\n    initialValue=\"{focused === true ? 'I got focused!' : 'I lost focus...'}\"\r\n    onGotFocus=\"focused = true\"\r\n    onLostFocus=\"focused = false\"\r\n    var.focused=\"{false}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: gotFocus/lostFocus\"\r\n  app={`\r\n  <App>\r\n    <TextArea\r\n      initialValue=\"{focused === true ? 'I got focused!' : 'I lost focus...'}\"\r\n      onGotFocus=\"focused = true\"\r\n      onLostFocus=\"focused = false\"\r\n      var.focused=\"{false}\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `lostFocus`\r\n\r\nThis event is triggered when the TextArea has lost the focus.\r\n\r\n## Exposed Methods\r\n\r\n### `focus`\r\n\r\nThis method sets the focus on the TextArea.\r\n\r\n```xmlui copy {2-3}\r\n<App>\r\n  <Button label=\"Trigger Focus\" onClick=\"inputComponent.focus()\" />\r\n  <TextArea id=\"inputComponent\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: focus\"\r\n  app={`\r\n  <App>\r\n    <Button label=\"Trigger Focus\" onClick=\"inputComponent.focus()\" />\r\n    <TextArea id=\"inputComponent\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `setValue`\r\n\r\nYou can use this method to set the component's current value programmatically (`true`: checked, `false`: unchecked).\r\n\r\n```xmlui copy {9}\r\n<App var.changes=\"\">\r\n  <TextArea\r\n    id=\"inputField\"\r\n    readOnly=\"true\"\r\n    onDidChange=\"changes++\" />\r\n  <HStack>\r\n    <Button\r\n      label=\"Check\"\r\n      onClick=\"inputField.setValue('example ')\" />\r\n    <Text value=\"Number of changes: {changes}\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: setValue\"\r\n  app={`\r\n  <App var.changes=\"\">\r\n    <TextArea\r\n      id=\"inputField\"\r\n      readOnly=\"true\"\r\n      onDidChange=\"changes++\" />\r\n    <HStack>\r\n      <Button\r\n        label=\"Check\"\r\n        onClick=\"inputField.setValue('example ')\" />\r\n      <Text value=\"Number of changes: {changes}\" />\r\n    </HStack>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `value`\r\n\r\nYou can query the component's value. If no value is set, it will retrieve `undefined`.\r\n\r\nIn the example below, typing in the `TextArea` will also display the length of the text typed into it above the field:\r\n\r\n```xmlui copy {2-3}\r\n<App>\r\n  <Text value=\"TextArea content length: {inputComponent.value.length}\" />\r\n  <TextArea id=\"inputComponent\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: value\"\r\n  app={`\r\n  <App>\r\n    <Text value=\"TextArea content length: {inputComponent.value.length}\" />\r\n    <TextArea id=\"inputComponent\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Styling\r\n\r\nThe `TextArea` component uses these theme variables.\r\n\r\nThese variables have 4 variants depending on the [validationStatus](#validationstatus) denoted by `|status|`.\r\nIf the status segment is omitted, the style will be applied to all validation statuses.\r\n\r\n- `borderRadius-TextArea-|status|`\r\n- `borderWidth-TextArea-|status|`\r\n- `borderStyle-TextArea-|status|`\r\n- `fontSize-TextArea-|status|`\r\n- `color-placeholder-TextArea-|status|`\r\n\r\n```json copy\r\n\"borderRadius-TextArea-default\": \"10px\",\r\n\"color-placeholder-TextArea-error\": \"crimson\"\r\n```\r\n\r\nIn addition to the validation statuses,\r\nthe variables below are associated with styles for `hover` and `focus` interaction states denoted by `|interact|` in their signature:\r\n\r\n- `borderColor-TextArea-|status|--|interact|`\r\n- `backgroundColor-TextArea-|status|--|interact|`\r\n- `boxShadow-TextArea-|status|--|interact|`\r\n- `textColor-TextArea-|status|--|interact|`\r\n\r\n```json copy\r\n\"backgroundColor-TextArea-default--hover\": \"gray\",\r\n\"textColor-TextArea-error--focus\": \"lightcoral\"\r\n```\r\n\r\nThe following variables are only used in the `focus` state:\r\n\r\n- `outlineWidth-TextArea-|status|--focus`\r\n- `outlineColor-TextArea-|status|--focus`\r\n- `outlineStyle-TextArea-|status|--focus`\r\n- `outlineOffset-TextArea-|status|--focus`\r\n\r\nThese variables set the `disabled` state:\r\n\r\n- `backgroundColor-TextArea--disabled`\r\n- `textColor-TextArea--disabled`\r\n- `borderColor-TextArea--disabled`\r\n\r\n### Example\r\n\r\n```json copy\r\n\"borderRadius-TextArea\": \"30px\",\r\n\"color-placeholder-TextArea-default\": \"blue\"\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling\"\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"borderRadius-TextArea\": \"30px\",\r\n        \"color-placeholder-TextArea-default\": \"blue\"\r\n      },\r\n    },\r\n  ]}\r\n  app={`\r\n  <App>\r\n    <TextArea placeholder=\"I am a placeholder\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\nTo style all input controls not just this component, replace the `TextArea` segment with `Input`:\r\n\r\n```\r\nborderColor-Input: \"#0033FF\"\r\n```\r\n\r\n`Input` affects the following controls:\r\n\r\n- [`Checkbox`](./Checkbox.mdx)\r\n- [`NumberBox`](./NumberBox.mdx)\r\n- [`RadioGroupOption`](./RadioGroupOption.mdx)\r\n- [`Select`](./Select.mdx)\r\n- [`Switch`](./Switch.mdx)\r\n- [`TextBox`](./TextBox.mdx)\r\n- [`MultiSelect`](./MultiSelect.mdx)\r\n- [`MultiCombobox`](./MultiCombobox.mdx)\r\n\r\nSee [custom themes](../learning/themes/overview.mdx) for styling details.\r\n",
  "components/TextBox":"import { Callout } from \"nextra/components\";\r\n\r\n# TextBox [#component-textbox]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `TextBox` is an input component that allows users to input and edit textual data.\r\n\r\n## Properties\r\n\r\n### `autoFocus (default: false)`\r\n\r\nIf this property is set to `true`, the component gets the focus automatically when displayed.\r\n\r\n### `enabled (default: true)`\r\n\r\nThis boolean property value indicates whether the component responds to user events (`true`) or not (`false`).\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextBox enabled=\"false\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: enabled\"\r\n  app={`\r\n  <App>\r\n    <TextBox enabled=\"false\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `endIcon`\r\n\r\nThis property sets an icon to appear on the end (right side when the left-to-right direction is set) of the input.\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextBox endIcon=\"email\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: endIcon\"\r\n  app={`\r\n  <App>\r\n    <TextBox endIcon=\"email\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\nIt is possible to set the other adornments as well: [`endText`](#endtext), [`startIcon`](#starticon) and [`startText`](#starttext).\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextBox startIcon=\"hyperlink\" startText=\"www.\" endIcon=\"email\" endText=\".com\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: all adornments\"\r\n  app={`\r\n  <App>\r\n    <TextBox startIcon=\"hyperlink\" startText=\"www.\" endIcon=\"email\" endText=\".com\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `endText`\r\n\r\nThis property sets a text to appear on the end (right side when the left-to-right direction is set) of the input.\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextBox endText=\".com\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: endText\"\r\n  app={`\r\n  <App>\r\n    <TextBox endText=\".com\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\nIt is possible to set the other adornments as well: [`endIcon`](#endicon), [`startIcon`](#starticon) and [`startText`](#starttext).\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextBox startIcon=\"hyperlink\" startText=\"www.\" endIcon=\"email\" endText=\".com\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: all adornments\"\r\n  app={`\r\n  <App>\r\n    <TextBox startIcon=\"hyperlink\" startText=\"www.\" endIcon=\"email\" endText=\".com\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `initialValue`\r\n\r\nThis property sets the component's initial value.\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextBox initialValue=\"Example text\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: initialValue\"\r\n  app={`\r\n  <App>\r\n    <TextBox initialValue=\"Example text\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `label`\r\n\r\nThis property sets the label of the component.\r\n\r\n### `labelBreak (default: false)`\r\n\r\nThis boolean value indicates if the `TextBox` labels can be split into multiple lines if it would overflow the available label width.\r\n\r\n### `labelPosition (default: \"top\")`\r\n\r\nPlaces the label at the given position of the component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `start` | The left side of the input (left-to-right) or the right side of the input (right-to-left) |\r\n| `end` | The right side of the input (left-to-right) or the left side of the input (right-to-left) |\r\n| `top` | The top of the input **(default)** |\r\n| `bottom` | The bottom of the input |\r\n\r\n### `labelWidth`\r\n\r\nThis property sets the width of the `TextBox`.\r\n\r\n### `maxLength`\r\n\r\nThis property sets the maximum length of the input it accepts.\r\n\r\nTry to enter a longer value into the input field below.\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextBox maxLength=\"16\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: maxLength\"\r\n  app={`\r\n  <App>\r\n    <TextBox maxLength=\"16\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `placeholder`\r\n\r\nA placeholder text that is visible in the input field when its empty.\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextBox placeholder=\"This is a placeholder\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: placeholder\"\r\n  app={`\r\n  <App>\r\n    <TextBox placeholder=\"This is a placeholder\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `readOnly (default: false)`\r\n\r\nSet this property to `true` to disallow changing the component value.\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextBox initialValue=\"Example text\" readOnly=\"true\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: readOnly\"\r\n  app={`\r\n  <App>\r\n    <TextBox initialValue=\"Example text\" readOnly=\"true\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `required`\r\n\r\nSet this property to `true` to indicate it must have a value before submitting the containing form.\r\n\r\n### `startIcon`\r\n\r\nThis property sets an icon to appear at the start (left side when the left-to-right direction is set) of the input.\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextBox startIcon=\"hyperlink\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: startIcon\"\r\n  app={`\r\n  <App>\r\n    <TextBox startIcon=\"hyperlink\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\nIt is possible to set the other adornments as well: [`endText`](#endtext), [`startIcon`](#starticon) and [`startText`](#starttext).\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextBox startIcon=\"hyperlink\" startText=\"www.\" endIcon=\"email\" endText=\".com\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: all adornments\"\r\n  app={`\r\n  <App>\r\n    <TextBox startIcon=\"hyperlink\" startText=\"www.\" endIcon=\"email\" endText=\".com\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `startText`\r\n\r\nThis property sets a text to appear at the start (left side when the left-to-right direction is set) of the input.\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextBox startText=\"www.\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: startText\"\r\n  app={`\r\n  <App>\r\n    <TextBox startText=\"www.\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\nIt is possible to set the other adornments as well: [`endIcon`](#endicon), [`startIcon`](#starticon) and [`endText`](#endtext).\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextBox startIcon=\"hyperlink\" startText=\"www.\" endIcon=\"email\" endText=\".com\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: all adornments\"\r\n  app={`\r\n  <App>\r\n    <TextBox startIcon=\"hyperlink\" startText=\"www.\" endIcon=\"email\" endText=\".com\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `validationStatus (default: \"none\")`\r\n\r\nThis property allows you to set the validation status of the input component.\r\n\r\nAvailable values:\r\n\r\n| Value | Description |\r\n| --- | --- |\r\n| `valid` | Visual indicator for an input that is accepted |\r\n| `warning` | Visual indicator for an input that produced a warning |\r\n| `error` | Visual indicator for an input that produced an error |\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextBox />\r\n  <TextBox validationStatus=\"valid\" />\r\n  <TextBox validationStatus=\"warning\" />\r\n  <TextBox validationStatus=\"error\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: validationStatus\"\r\n  app={`\r\n  <App>\r\n    <TextBox />\r\n    <TextBox validationStatus=\"valid\" />\r\n    <TextBox validationStatus=\"warning\" />\r\n    <TextBox validationStatus=\"error\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\n### `didChange`\r\n\r\nThis event is triggered when value of TextBox has changed.\r\n\r\nWrite in the input field and see how the `Text` underneath it is updated in parallel.\r\n\r\n```xmlui copy {3}\r\n<App var.field=\"\">\r\n  <TextBox initialValue=\"{field}\" onDidChange=\"(val) => field = val\" />\r\n  <Text value=\"{field}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: didChange\"\r\n  height={160}\r\n  app={`\r\n  <App var.field=\"\">\r\n    <TextBox initialValue=\"{field}\" onDidChange=\"(val) => field = val\" />\r\n    <Text value=\"{field}\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `gotFocus`\r\n\r\nThis event is triggered when the TextBox has received the focus.\r\n\r\nClicking on the `TextBox` in the example demo changes the label text.\r\nNote how clicking elsewhere resets the text to its original.\r\n\r\n```xmlui copy {4-5}\r\n<App>\r\n  <TextBox\r\n    initialValue=\"{focused === true ? 'I got focused!' : 'I lost focus...'}\"\r\n    onGotFocus=\"focused = true\"\r\n    onLostFocus=\"focused = false\"\r\n    var.focused=\"{false}\"\r\n  />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: gotFocus/lostFocus\"\r\n  app={`\r\n  <App>\r\n    <TextBox\r\n      initialValue=\"{focused === true ? 'I got focused!' : 'I lost focus...'}\"\r\n      onGotFocus=\"focused = true\"\r\n      onLostFocus=\"focused = false\"\r\n      var.focused=\"{false}\"\r\n    />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `lostFocus`\r\n\r\nThis event is triggered when the TextBox has lost the focus.\r\n\r\n## Exposed Methods\r\n\r\n### `focus`\r\n\r\nThis method sets the focus on the TextBox.\r\n\r\n```xmlui copy {2-3}\r\n<App>\r\n  <Button label=\"Trigger Focus\" onClick=\"inputComponent.focus()\" />\r\n  <TextBox id=\"inputComponent\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: focus\"\r\n  app={`\r\n  <App>\r\n    <Button label=\"Trigger Focus\" onClick=\"inputComponent.focus()\" />\r\n    <TextBox id=\"inputComponent\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `setValue`\r\n\r\nYou can use this method to set the component's current value programmatically (`true`: checked, `false`: unchecked).\r\n\r\n```xmlui copy {10}\r\n<App var.changes=\"\">\r\n  <TextBox\r\n    id=\"inputField\"\r\n    readOnly=\"true\"\r\n    onDidChange=\"changes++\"\r\n  />\r\n  <HStack>\r\n    <Button\r\n      label=\"Check\"\r\n      onClick=\"inputField.setValue('example ')\"\r\n    />\r\n    <Text value=\"Number of changes: {changes}\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: setValue\"\r\n  app={`\r\n  <App var.changes=\"\">\r\n    <TextBox\r\n      id=\"inputField\"\r\n      readOnly=\"true\"\r\n      onDidChange=\"changes++\"\r\n    />\r\n    <HStack>\r\n      <Button\r\n        label=\"Check\"\r\n        onClick=\"inputField.setValue('example ')\"\r\n      />\r\n      <Text value=\"Number of changes: {changes}\" />\r\n    </HStack>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `value`\r\n\r\nYou can query the component's value. If no value is set, it will retrieve `undefined`.\r\n\r\nIn the example below, typing in the `TextBox` will also display the length of the text typed into it above the field:\r\n\r\n```xmlui copy {2-3}\r\n<App>\r\n  <Text value=\"TextBox content length: {inputComponent.value.length}\" />\r\n  <TextBox id=\"inputComponent\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: value\"\r\n  app={`\r\n  <App>\r\n    <Text value=\"TextBox content length: {inputComponent.value.length}\" />\r\n    <TextBox id=\"inputComponent\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Styling\r\n\r\nThe `TextBox` component uses these theme variables:\r\n\r\nThese variables have 4 variants depending on the [validationStatus](#validationstatus) denoted by `|status|`.\r\nIf the status segment is omitted, the style will be applied to all validation statuses.\r\n\r\n- `borderRadius-TextBox-|status|`\r\n- `borderWidth-TextBox-|status|`\r\n- `borderStyle-TextBox-|status|`\r\n- `fontSize-TextBox-|status|`\r\n- `color-placeholder-TextBox-|status|`\r\n\r\n```json copy\r\n\"borderRadius-TextBox-default\": \"10px\",\r\n\"color-placeholder-TextBox-error\": \"crimson\"\r\n```\r\n\r\nIn addition to the validation statuses,\r\nthe variables below are associated with styles for `hover` and `focus` interaction states denoted by `|interact|` in their signature:\r\n\r\n- `borderColor-TextBox-|status|--|interact|`\r\n- `backgroundColor-TextBox-|status|--|interact|`\r\n- `boxShadow-TextBox-|status|--|interact|`\r\n- `textColor-TextBox-|status|--|interact|`\r\n\r\n```json copy\r\n\"backgroundColor-TextBox-default--hover\": \"gray\",\r\n\"textColor-TextBox-error--focus\": \"lightcoral\"\r\n```\r\n\r\nThe following variables are only used in the `focus` state:\r\n\r\n- `outlineWidth-TextBox-|status|--focus`\r\n- `outlineColor-TextBox-|status|--focus`\r\n- `outlineStyle-TextBox-|status|--focus`\r\n- `outlineOffset-TextBox-|status|--focus`\r\n\r\nThese variables set the `disabled` state:\r\n\r\n- `backgroundColor-TextBox--disabled`\r\n- `textColor-TextBox--disabled`\r\n- `borderColor-TextBox--disabled`\r\n\r\n### Example\r\n\r\n```json copy\r\n\"borderRadius-TextBox\": \"30px\",\r\n\"color-placeholder-TextBox-default\": \"blue\"\r\n```\r\n\r\n<Playground\r\n  name=\"Example: styling\"\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"borderRadius-TextBox\": \"30px\",\r\n        \"color-placeholder-TextBox-default\": \"blue\"\r\n      },\r\n    },\r\n  ]}\r\n  app={`\r\n  <App>\r\n    <TextBox placeholder=\"I am a placeholder\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\nTo style all input controls not just this component, replace the `TextBox` segment with `Input`:\r\n\r\n```\r\nborderColor-Input: \"#0033FF\"\r\n```\r\n\r\n`Input` affects the following controls:\r\n\r\n- [`Checkbox`](./Checkbox.mdx)\r\n- [`NumberBox`](./NumberBox.mdx)\r\n- [`RadioGroupOption`](./RadioGroupOption.mdx)\r\n- [`Select`](./Select.mdx)\r\n- [`Switch`](./Switch.mdx)\r\n- [`TextArea`](./TextArea.mdx)\r\n- [`MultiSelect`](./MultiSelect.mdx)\r\n- [`MultiCombobox`](./MultiCombobox.mdx)\r\n\r\nSee [custom themes](../learning/themes/overview.mdx) for styling details.\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-TextBox--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-TextBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-TextBox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-TextBox-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-TextBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-TextBox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-TextBox-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-TextBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-TextBox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-TextBox-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-TextBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-TextBox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [backgroundColor](../styles-and-themes/common-units/#color)-TextBox-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-TextBox--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-TextBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-TextBox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-TextBox-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-TextBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-TextBox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-TextBox-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-TextBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-TextBox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-TextBox-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-TextBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-TextBox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderColor](../styles-and-themes/common-units/#color)-TextBox-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-TextBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-TextBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-TextBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderRadius](../styles-and-themes/common-units/#border-rounding)-TextBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-TextBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-TextBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-TextBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderStyle](../styles-and-themes/common-units/#border-style)-TextBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-TextBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-TextBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-TextBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [borderWidth](../styles-and-themes/common-units/#size)-TextBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-TextBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-TextBox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-TextBox-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-TextBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-TextBox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-TextBox-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-TextBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-TextBox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-TextBox-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-TextBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-TextBox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-TextBox-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-adornment-TextBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-adornment-TextBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-adornment-TextBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-adornment-TextBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-placeholder-TextBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-placeholder-TextBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-placeholder-TextBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [color](../styles-and-themes/common-units/#color)-placeholder-TextBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-TextBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-TextBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-TextBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [fontSize](../styles-and-themes/common-units/#size)-TextBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-TextBox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-TextBox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-TextBox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineColor](../styles-and-themes/common-units/#color)-TextBox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-TextBox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-TextBox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-TextBox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineOffset](../styles-and-themes/common-units/#size)-TextBox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-TextBox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-TextBox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-TextBox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineStyle](../styles-and-themes/common-units/#border)-TextBox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-TextBox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-TextBox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-TextBox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [outlineWidth](../styles-and-themes/common-units/#size)-TextBox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-TextBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-TextBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-TextBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [padding](../styles-and-themes/common-units/#size)-TextBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-TextBox--disabled | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-TextBox-default | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-TextBox-default--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-TextBox-default--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-TextBox-error | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-TextBox-error--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-TextBox-error--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-TextBox-success | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-TextBox-success--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-TextBox-success--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-TextBox-warning | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-TextBox-warning--focus | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n| [textColor](../styles-and-themes/common-units/#color)-TextBox-warning--hover | <GrayText>none</GrayText> | <GrayText>none</GrayText> |\r\n",
  "components/Theme":"import { Callout } from \"nextra/components\";\r\n\r\n# Theme [#component-theme]\r\n\r\nThe `Theme` component provides a way to define a particular theming context for its nested components. The XMLUI framework uses `Theme` to define the default theming context for all of its child components. Theme variables and theme settings only work in this context.\r\n\r\nYou can change the tone or even specify individual theme variables and change the appearance of nested contents in a theme.\r\nIt is also possible to nest multiple `Theme` components to define multiple theming contexts.\r\nContexts follow a specificity rule.\r\n\r\nLearn more about styling theming and theming context in [Themes and Styles Overview](../learning/themes/overview/#style-scopes).\r\n\r\n## Using `Theme`\r\n\r\nIn contrast to other components, `Theme` accepts theme variables as properties.\r\nYou can define specific styles for components nested in `Theme` using these theme variables.\r\n\r\nThe following example specifies a dark tone for the current theme\r\nand sets several theme variables to style the `ProgressBar` component:\r\n\r\n```xmlui copy {3-8}\r\n<App>\r\n  <Theme\r\n    tone=\"dark\"\r\n    backgroundColor-ProgressBar=\"cyan\"\r\n    color-indicator-ProgressBar=\"purple\"\r\n    thickness-ProgressBar=\"12px\"\r\n    borderRadius-indicator-ProgressBar=\"12px\"\r\n    borderRadius-Progressbar=\"4px\"\r\n  >\r\n    <VStack backgroundColor=\"$backgroundColor-primary\">\r\n      <ProgressBar value=\"0\"/>\r\n      <ProgressBar value=\"0.2\"/>\r\n      <ProgressBar value=\"0.6\"/>\r\n      <ProgressBar value=\"1.0\"/>\r\n    </VStack>\r\n  </Theme>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: using Theme\"\r\n  app={`\r\n  <App>\r\n    <Theme\r\n      tone=\"dark\"\r\n      backgroundColor-ProgressBar=\"cyan\"\r\n      color-indicator-ProgressBar=\"purple\"\r\n      thickness-ProgressBar=\"12px\"\r\n      borderRadius-indicator-ProgressBar=\"12px\"\r\n      borderRadius-Progressbar=\"4px\"\r\n    >\r\n      <VStack backgroundColor=\"$backgroundColor-primary\">\r\n        <ProgressBar value=\"0\"/>\r\n        <ProgressBar value=\"0.2\"/>\r\n        <ProgressBar value=\"0.6\"/>\r\n        <ProgressBar value=\"1.0\"/>\r\n      </VStack>\r\n    </Theme>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\n### `root`\r\n\r\nThis property indicates whether the component is at the root of the application.\r\n\r\nIf so, it will set a number of important settings for the app:\r\n- what favicon to use\r\n- sets up font links\r\n- specifies the base css\r\n- sets up the root for the toast notification system\r\n\r\nOtherwise, the `Theme` component will just provide the theme context to its children.\r\n\r\n### `themeId`\r\n\r\nThis property specifies which theme to use by setting the theme's id.\r\n\r\n```xmlui copy {2, 9, 16}\r\n<App>\r\n  <Theme themeId=\"xmlui\">\r\n    <VStack backgroundColor=\"$backgroundColor-primary\">\r\n      <H3>Use 'xmlui' theme:</H3>\r\n      <ProgressBar value=\"0\"/>\r\n      <ProgressBar value=\"0.6\"/>\r\n    </VStack>\r\n  </Theme>\r\n  <Theme themeId=\"xmlui-green\">\r\n    <VStack backgroundColor=\"$backgroundColor-primary\">\r\n      <H3>Use 'xmlui-green' theme:</H3>\r\n      <ProgressBar value=\"0\"/>\r\n      <ProgressBar value=\"0.6\"/>\r\n    </VStack>\r\n  </Theme>\r\n  <Theme themeId=\"solid\">\r\n    <VStack backgroundColor=\"$backgroundColor-primary\">\r\n      <H3>Use the 'solid' theme:</H3>\r\n      <ProgressBar value=\"0\"/>\r\n      <ProgressBar value=\"0.6\"/>\r\n    </VStack>\r\n  </Theme>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: themeId\"\r\n  app={`\r\n  <App>\r\n    <Theme themeId=\"xmlui\">\r\n      <VStack backgroundColor=\"$backgroundColor-primary\">\r\n        <H3>Use 'xmlui' theme:</H3>\r\n        <ProgressBar value=\"0\"/>\r\n        <ProgressBar value=\"0.6\"/>\r\n      </VStack>\r\n    </Theme>\r\n    <Theme themeId=\"xmlui-green\">\r\n      <VStack backgroundColor=\"$backgroundColor-primary\">\r\n        <H3>Use 'xmlui-green' theme:</H3>\r\n        <ProgressBar value=\"0\"/>\r\n        <ProgressBar value=\"0.6\"/>\r\n      </VStack>\r\n    </Theme>\r\n    <Theme themeId=\"solid\">\r\n      <VStack backgroundColor=\"$backgroundColor-primary\">\r\n        <H3>Use the 'solid' theme:</H3>\r\n        <ProgressBar value=\"0\"/>\r\n        <ProgressBar value=\"0.6\"/>\r\n      </VStack>\r\n    </Theme>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `tone (default: \"light\")`\r\n\r\nThis property allows the setting of the current theme's tone.\r\n\r\nAvailable values: `light` **(default)**, `dark`\r\n\r\n```xmlui copy {2,9}\r\n<App>\r\n  <Theme tone=\"light\">\r\n    <VStack backgroundColor=\"$backgroundColor-primary\" >\r\n      <H3>Use the light tone of the base theme:</H3>\r\n      <ProgressBar value=\"0\"/>\r\n      <ProgressBar value=\"0.6\"/>\r\n    </VStack>\r\n  </Theme>\r\n  <Theme tone=\"dark\">\r\n    <VStack backgroundColor=\"$backgroundColor-primary\">\r\n      <H3>Use the dark tone of the base theme:</H3>\r\n      <ProgressBar value=\"0\"/>\r\n      <ProgressBar value=\"0.6\"/>\r\n    </VStack>\r\n  </Theme>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: tone\"\r\n  app={`\r\n  <App>\r\n    <Theme tone=\"light\">\r\n      <VStack backgroundColor=\"$backgroundColor-primary\" >\r\n        <H3>Use the light tone of the base theme:</H3>\r\n        <ProgressBar value=\"0\"/>\r\n        <ProgressBar value=\"0.6\"/>\r\n      </VStack>\r\n    </Theme>\r\n    <Theme tone=\"dark\">\r\n      <VStack backgroundColor=\"$backgroundColor-primary\">\r\n        <H3>Use the dark tone of the base theme:</H3>\r\n        <ProgressBar value=\"0\"/>\r\n        <ProgressBar value=\"0.6\"/>\r\n      </VStack>\r\n    </Theme>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThe `Theme` component is a styling wrapper that influences the nested components' visual appearance. It cannot be styled.\r\n",
  "components/ToneChangerButton":"import { Callout } from \"nextra/components\";\r\n\r\n# ToneChangerButton [#component-tonechangerbutton]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `ToneChangerButton` component is a component that allows the user to change the tone of the app.\r\n\r\n```xmlui {4} copy\r\n<App>\r\n  <AppHeader>\r\n    <SpaceFiller />\r\n    <ToneChangerButton />\r\n  </AppHeader>\r\n  <Card\r\n    title=\"Tone Changer Button\"\r\n    subtitle=\"Click the button in the header to change the tone.\"\r\n  />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: using ToneChangerButton\"\r\n  app={`\r\n  <App>\r\n    <AppHeader>\r\n      <SpaceFiller />\r\n      <ToneChangerButton />\r\n    </AppHeader>\r\n    <Card\r\n      title=\"Tone Changer Button\"\r\n      subtitle=\"Click the button in the header to change the tone.\"\r\n    />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Properties\r\n\r\nThis component does not have any properties.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "components/VSplitter":"import { Callout } from \"nextra/components\";\r\n\r\n# VSplitter [#component-vsplitter]\r\n\r\nThis component is inherited from <SmartLink href=\"/components/Splitter\">Splitter</SmartLink>\r\n\r\nSee also: <SmartLink href=\"/components/HSplitter\">HSplitter</SmartLink>\r\n\r\n`VSplitter` is a specialized, shorthand version for the regular `Splitter` component with a vertical orientation.\r\n\r\n```xmlui copy\r\n<App>\r\n  <VSplitter height=\"200px\">\r\n    <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n    <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n  </VSplitter>\r\n</App>\r\n```\r\n\r\n## Examples\r\n\r\n<Playground\r\n  name=\"Example: VSplitter\"\r\n  app={`\r\n    <App>\r\n      <VSplitter height=\"200px\">\r\n        <Stack backgroundColor=\"lightblue\" height=\"100%\" />\r\n        <Stack backgroundColor=\"darksalmon\" height=\"100%\" />\r\n      </VSplitter>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou cannot change the orientation of `VSplitter` from vertical to horizontal by setting the `orientation` prop, as the engine ignores that setting.\r\n</Callout>\r\n\r\n\r\n",
  "components/VStack":"import { Callout } from \"nextra/components\";\r\n\r\n# VStack [#component-vstack]\r\n\r\nThis component is inherited from <SmartLink href=\"/components/Stack\">Stack</SmartLink>\r\n\r\nSee also: <SmartLink href=\"/components/CHStack\">CHStack</SmartLink>, <SmartLink href=\"/components/CVStack\">CVStack</SmartLink>, <SmartLink href=\"/components/HStack\">HStack</SmartLink>\r\n\r\n`VStack` is a specialized, shorthand version for the regular [Stack](./Stack) component with a vertical orientation.\r\nSee also: [HStack](./HStack.mdx), [CHStack](./CHStack.mdx), [CVStack](./CVStack.mdx).\r\n\r\n```xmlui copy\r\n<App>\r\n  <VStack>\r\n    <Stack height=\"32px\" width=\"32px\" backgroundColor=\"red\" />\r\n    <Stack height=\"32px\" width=\"32px\" backgroundColor=\"blue\" />\r\n    <Stack height=\"32px\" width=\"32px\" backgroundColor=\"green\" />\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n## Examples\r\n\r\n<Playground\r\n  name=\"Example: VStack\"\r\n  app={`\r\n  <App>\r\n    <VStack>\r\n      <Stack height=\"32px\" width=\"32px\" backgroundColor=\"red\" />\r\n      <Stack height=\"32px\" width=\"32px\" backgroundColor=\"blue\" />\r\n      <Stack height=\"32px\" width=\"32px\" backgroundColor=\"green\" />\r\n    </VStack>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou cannot change the orientation of `VStack` from vertical to horizontal by setting the `orientation` prop, as the engine ignores that setting.\r\n</Callout>\r\n\r\n\r\n",
  "contact-us":"import { Callout } from 'nextra/components'\r\n\r\n# Contact Us\r\n\r\n<Callout type=\"warning\">\r\nThis page is under construction.\r\n</Callout>",
  "create-apps":"import { Callout } from 'nextra/components'\r\nimport themeGallery from \"./styles-and-themes/samples/theme-gallery-brief.xmlui\";\r\nimport { BASIC_COMPONENTS, BUILD_AND_DEPLOY, CODING_WITH_XMLUI, LAYOUT, LAYOUT_PROPERTIES, MARKUP, USING_MODAL_DIALOGS, REUSABLE_COMPONENTS, ROUTING, THE_APP_COMPONENT, THEMES, USING_FORMS, WORKING_WITH_DATA, WORKING_WITH_RESOURCES, WORKING_WITH_TEXT } from '../meta/pages';\r\n\r\n# Creating XMLUI Apps\r\n\r\nIn this section, you will find articles that teach you the details of creating apps with the XMLUI framework. If you have not experienced it before, we suggest you to read the Getting Started article and the Personal Todo App tutorial; these demonstrate the essential concepts through experimenting with simple apps.\r\n\r\nThis article describes the structure of an XMLUI app by introducing its files and folders. After reading it, you can learn more details about the framework in these articles:\r\n- <SmartLink href={MARKUP}>Markup</SmartLink>: Learn the essence of the XMLUI markup language\r\n- <SmartLink href={CODING_WITH_XMLUI}>Coding with XMLUI</SmartLink>: Understand the coding fundamentals of XMLUI apps\r\n- <SmartLink href={THE_APP_COMPONENT}>The App Component</SmartLink>: XMLUI provides an `App` component, supplying layout and UI logic services for the entire app\r\n- <SmartLink href={LAYOUT}>Layout</SmartLink>: Learn how to design the app's layout with XMLUI's simple layout system\r\n- <SmartLink href={WORKING_WITH_TEXT}>Working with Text</SmartLink>: Understand how you can display text in XMLUI apps\r\n- <SmartLink href={BASIC_COMPONENTS}>Basic Components</SmartLink>: Get acquainted with the basic components XMLUI provides for building apps\r\n- <SmartLink href={WORKING_WITH_DATA}>Working with Data</SmartLink>: XMLUI makes accessing, displaying, manipulating, and persisting data extremely easy through web APIs. Learn how to use these features.\r\n- <SmartLink href={ROUTING}>Routing and Links</SmartLink>: Understand how you can navigate between different parts of an XMLUI app\r\n- <SmartLink href={USING_FORMS}>Using Forms</SmartLink>: The framework has rich support for creating data entry and edit forms and managing their persistence\r\n- <SmartLink href={USING_MODAL_DIALOGS}>Modal Dialogs</SmartLink>: Learn how to create and display modal dialogs in XMLUI apps\r\n- <SmartLink href={REUSABLE_COMPONENTS}>Reusable Components</SmartLink>: You can create and leverage your app-specific components using XMLUI markup\r\n- <SmartLink href={THEMES}>Themes</SmartLink>: XMLUI supports themes that can change the look and feel of an app. Learn how to create, modify and use themes.\r\n- <SmartLink href={LAYOUT_PROPERTIES}>Layout Properties</SmartLink>: Components support several properties that influence their layout and appearance; you can learn about them here.\r\n- <SmartLink href={WORKING_WITH_RESOURCES}>Working with Resources</SmartLink>: Understand how to manage resources (images, icons, fonts, etc.) with XMLUI\r\n- <SmartLink href={BUILD_AND_DEPLOY}>Build & Deploy</SmartLink>: Learn how to build and deploy XMLUI apps for production\r\n\r\n\r\n## XMLUI Application Structure\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  XMLUI apps have a **simple file structure** that can be directly hosted as static files in a web server's folder (without a build process). \r\n</Callout>\r\n\r\nUnless most modern web UI frameworks, XMLUI does not require you to go through a build process. You work with a simple file structure, where most files are XMLUI markup files; there are a few others.\r\n- You use a local web server that can host static files during development.\r\n- When your app is about to be released, you copy the same folder structure to a production web server.\r\n\r\n<Callout emoji=\"💡\">\r\n  The framework offers several build methods that optimize the static file structure for size and startup performance. These are optional; you do not need them while developing an app.\r\n</Callout>\r\n\r\n\r\nDownload the zip file of the Starter App from here (link placeholder) and unzip it into a working folder. Now, open this folder in your file management tool to check its contents. You will find several files in the folder:\r\n\r\n```\r\n<XMLUI app folder>\r\n  ├── index.html (The web page that opens in the browser)\r\n  ├── Main.xmlui (The main XMLUI file with the app)\r\n  ├── config.json (The app's configuration file)\r\n  ├── xmlui-standalone.umd.js (The framework's runtime)\r\n  ├── components (The folder with the app's XMLUI components)\r\n  │   ├── ApiAware.xmlui\r\n  │   ├── Home.xmlui\r\n  │   ├── IncButton.xmlui\r\n  └── resources (Static app resources like images, logos, icons, etc.)\r\n      ├── favicon.ico\r\n      ├── xmlui-logo.svg\r\n      └── xmlui-logo-dark.svg\r\n```\r\n\r\n## Application Files and Folders\r\n\r\nThis folder contains an `index.html` file that loads a single JavaScript file (the XMLUI framework). It also contains your app's XMLUI source (the `Main.xmlui` file and other files within the `components` folder).\r\n\r\nThe `index.html` file is simple:\r\n\r\n```html filename=\"index.html\" /xmlui-standalone.umd.js/\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <script src=\"xmlui-standalone.umd.js\"></script>\r\n  </head>\r\n  <body>\r\n  </body>\r\n</html>\r\n```\r\n\r\nThe `index.html` file loads the `xmlui-standalone.umd.js`, which represents the entire framework. When this JavaScript file starts, it initializes the framework and ignites the app:\r\n- Loads and compiles the `Main.xmlui` file, the entry point of an XMLUI app.\r\n- When this app uses app-specific components, the framework loads and compiles them from the `components` folder.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  XMLUI supports apps that load the framework from a CDN. In these apps, `index.html` addresses the JavaScript file with the CDN's URL.\r\n</Callout>\r\n\r\n### The Configuration File\r\n\r\nWhen you start developing an XMLUI app, it comes with a simple file, `config.json,` which holds a few of your app's traits. You do not need to change this file; you can update a few entries to modify your app's working context.\r\n\r\n```json filename=\"config.json\"\r\n{\r\n  \"name\": \"Tutorial\",\r\n  \"version\": \"1.0.0\",\r\n  \"resources\": {\r\n    \"logo\": \"resources/xmlui-logo.svg\",\r\n    \"logo-dark\": \"resources/xmlui-logo-dark.svg\",\r\n    \"favicon\": \"resources/favicon.ico\"\r\n  }\r\n}\r\n```\r\n\r\nThe `name` property defines the text to display as the app's title in the browse tab. The `version` property helps query the current version number (and display it) within the app.\r\n\r\nThe app may use a few resource files (you can declare them in the `resources` section of the file) that your app uses.\r\n\r\n### Application Folders\r\n\r\nThe application structure has a few folders the framework uses for some specific purpose. Besides them, you can use other folders to organize your source code, store app resources, etc. The framework utilizes these folders:\r\n\r\n- **`components`**: This folder contains the XMLUI source files of the app-specific components. When the app uses a component, the framework looks up its definition in this folder.\r\n- **`resources`**: This folder contains static resources like images, logos, icons, etc. The framework uses these resources when the app needs them.\r\n- **`themes`**: This folder contains the XMLUI theme files. When the app starts, the framework looks for available theme definitions in this folder.\r\n\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  You can use other folders within the app's root folder to store custom web fonts, unique resources, static data, etc. For more information, see this article (link placeholder).\r\n</Callout>",
  "create-apps/app-component":"import { Callout } from 'nextra/components';\r\nimport xmluiLogo from \"./samples/app/xmlui-logo.svg\";\r\nimport xmluiLogoDark from \"./samples/app/xmlui-logo-dark.svg\";\r\nimport horizontal from \"./samples/app/horizontal.xmlui\";\r\nimport horizontalSticky from \"./samples/app/horizontal-sticky.xmlui\";\r\nimport condensed from \"./samples/app/condensed.xmlui\";\r\nimport condensedSticky from \"./samples/app/condensed-sticky.xmlui\";\r\nimport vertical from \"./samples/app/vertical.xmlui\";\r\nimport verticalSticky from \"./samples/app/vertical-sticky.xmlui\";\r\nimport verticalFullHeader from \"./samples/app/vertical-full-header.xmlui\";\r\nimport { COMPONENT_APP, COMPONENT_APPHEADER, COMPONENT_FOOTER, COMPONENT_NAVPANEL, COMPONENT_PAGES, ROUTING, THEMES } from '../../meta/pages';\r\n\r\n# The App Component\r\n\r\nYou can use any component as your app's root. For example, you can display a simple text with this markup:\r\n\r\n```xmlui copy\r\n<Text>Hello from XMLUI!</Text>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Text as the root component\"\r\n  horizontal={true}\r\n  app={`\r\n    <Text>Hello from XMLUI!</Text>\r\n  `}\r\n/>\r\n\r\n\r\nNonetheless, we suggest you create an app using XMLUI's `App` component as the root.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nThe **`App` component** gives you a flying start when creating a new application.\r\n</Callout>\r\n\r\nWith `App`, your application immediately has a boilerplate for its essential UI parts, including headers, navigation, content, and others.\r\n\r\nInstead of building the app layout from scratch, you can choose from a set of predefined ones. Moreover, you can change the app layout at run time or in the configuration. `App` provides several ways to scroll the content (according to the selected layout) and a responsiveness according to the available viewport width.\r\n\r\n## Layout Placeholders\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nThe `App` component creates its layout by combining several components into an integrated UI. You can provide these constituent parts (each of them is optional) to let `App` organize them:\r\n\r\n- Application header\r\n- Navigation panel\r\n- Navigation-aware main content panel\r\n- Footer\r\n</Callout>\r\n\r\nIn the markup, `App` has placeholders to define the particular parts of the UI:\r\n\r\n```xmlui copy\r\n<App>\r\n  <AppHeader>\r\n    <!-- Here comes the header -->\r\n  </AppHeader>\r\n  <NavPanel>\r\n    <!-- Define the app's navigation menu here -->\r\n  </NavPanel>\r\n  <Pages>\r\n    <!-- Define the navigation-aware content here -->\r\n  </Pages>\r\n  <Footer>\r\n    <!-- This is a placeholder for the footer -->\r\n  </Footer>\r\n  <!-- Any other content to render -->\r\n</App>\r\n```\r\n\r\nYou can use these placeholder components:\r\n\r\n- `AppHeader`: The content of this placeholder describes the app's header template. If the application has a logo, it automatically inserts that into the header.\r\n- `NavPanel`: This section describes a hierarchical structure representing the app's main menu.\r\n- `Pages`: lists the individual UI parts (pages) the application navigates to (according to the selected menu item or programmatically).\r\n- `Footer`: `App` uses the section's contents as the footer.\r\n\r\nWhen all placeholders are empty (like in the previous sample markup), `App` renders an empty header and an empty main content section below the empty header:\r\n\r\n<Playground\r\n    name=\"Example: App with empty layout elements\"\r\n    height={150}\r\n    app={`\r\n    <App>\r\n      <AppHeader>\r\n        <!-- Here comes the header -->\r\n      </AppHeader>\r\n      <NavPanel>\r\n        <!-- Define the app's navigation menu here -->\r\n      </NavPanel>\r\n      <Pages>\r\n        <!-- Define the navigation-aware content here -->\r\n      </Pages>\r\n      <Footer>\r\n        <!-- This is a placeholder for the footer -->\r\n      </Footer>\r\n      <!-- Any other content to render -->\r\n    </App>\r\n  `}\r\n/>\r\n\r\nYou can set the application logo using the `logo` property of `App`:\r\n\r\n```xmlui copy\r\n<App logo=\"resources/logo.svg\">\r\n  <!-- ... -->\r\n</App>\r\n```\r\n\r\nWhen the engine finds a logo in the app's manifest, it displays it in its header. So, the previous markup displays this UI after setting the logo resource:\r\n\r\n<Playground\r\n    name=\"Example: App with empty layout elements and logo\"\r\n    resources={{ logo: xmluiLogo }}\r\n    height={150}\r\n    app={`\r\n    <App>\r\n      <AppHeader>\r\n        <!-- Here comes the header -->\r\n      </AppHeader>\r\n      <NavPanel>\r\n        <!-- Define the app's navigation menu here -->\r\n      </NavPanel>\r\n      <Pages>\r\n        <!-- Define the navigation-aware content here -->\r\n      </Pages>\r\n      <Footer>\r\n        <!-- This is a placeholder for the footer -->\r\n      </Footer>\r\n      <!-- Any other content to render -->\r\n    </App>\r\n  `}\r\n/>\r\n\r\nEach layout placeholder is optional. If you leave any of these placeholders, the app component does not render the particular app section. You can change the order of the placeholder; for example, declare an app footer before the header and change the definition order of these sections.\r\n\r\nAlso, XMLUI considers any content added within the `App` tag but outside the layout placeholders as part of the main contents.\r\n\r\nLook at this example:\r\n\r\n```xmlui copy\r\n<App>\r\n  <H1>Welcome to my humble app!</H1>\r\n  <Footer>\r\n    This is my footer\r\n  </Footer>\r\n  <H3>This is a content outside the placeholders</H3>\r\n</App>\r\n```\r\n\r\nThis markup declares only a footer placeholder. The `<H1>` and `<H3>` components represent the main content. XMLUI renders this app, putting the main content and the footer in their expected place:\r\n\r\n<Playground\r\n  name=\"Example: App with content outside of placeholders\"\r\n  height={240}\r\n  app={`\r\n    <App>\r\n      <H1>Welcome to my humble app!</H1>\r\n      <Footer>\r\n        This is my footer\r\n      </Footer>\r\n      <H3>This is a content outside the placeholders</H3>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Layout Variants [#layout-variants]\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nThe `App` component can render several layouts determining the location and behavior of app sections.\r\n</Callout>\r\n\r\nYou can set the layout in several ways:\r\n\r\n- You can use the `layout` prop of the `App` component to set it to one of the predefined values.\r\n- You can use the `layout` theme variable to define the layout for a particular theme. This way, you can define layout-aware application themes.\r\n\r\nTo get acquainted with these layouts, the samples below show different layout settings with this markup (using the `layout` property with the demonstrated variant):\r\n\r\n```xmlui copy\r\n<App layout=\"...\">\r\n  <AppHeader title=\"Example App\"/>\r\n  <NavPanel>\r\n    <NavLink label=\"Home\" to=\"/\" icon=\"home\"/>\r\n    <NavLink label=\"About\" to=\"/about\"/>\r\n  </NavPanel>\r\n  <Pages defaultRoute=\"/\">\r\n    <Page url=\"/\">\r\n      <List data=\"https://api.spacexdata.com/v3/history\">\r\n        <Card title=\"{$item.title}\" subtitle=\"{$item.details}\"/>\r\n      </List>\r\n    </Page>\r\n    <Page url=\"/About\">\r\n      <Text value=\"About this app\" />\r\n    </Page>\r\n  </Pages>\r\n  <Footer>Powered by XMLUI</Footer>\r\n</App>\r\n```\r\n\r\nAlso, the samples set an application logo.\r\n\r\n\r\n### Horizontal Layout\r\n\r\nXMLUI supports several layouts that organize the app's navigation sections (header, menu structure) horizontally in a row. These variants are the following:\r\n\r\n- `horizontal`: This layout stacks the layout sections in a single column in this order: header, navigation bar, main content, and footer. The application is a single scroll container; every part moves as you scroll the page.\r\n- `horizontal-sticky`: Similar to `horizontal`, the header and the navigation bar dock to the top of the viewport, while the footer sticks to the bottom. When you scroll vertically, only the main content scrolls; the header and footer stay docked.\r\n- `condensed`: Similar to `horizontal`. However, the header and the navigation bar are in a single header block. If you do not define the layout explicitly, XMLUI defaults this variant.\r\n- `condensed-sticky`: Similar to `horizontal-sticky`. However, the header and the navigation bar are in a single header block.\r\n\r\n\r\n#### `horizontal`\r\n\r\nThe navigation panel displays the items horizontally. When you scroll the content, all layout sections scroll with the app.\r\n\r\n<Playground\r\n  name=\"Example: 'horizontal' layout\"\r\n  height={350}\r\n  resources={{ logo: xmluiLogo }}\r\n  app={horizontal}\r\n/>\r\n\r\n#### `horizontal-sticky`\r\n\r\nThe navigation panel displays the items horizontally. When you scroll the content, the heading and the navigation panel dock to the top, while the footer sticks to the bottom.\r\n\r\n<Playground\r\n  name=\"Example: 'horizontal-sticky' layout\"\r\n  height={350}\r\n  resources={{ logo: xmluiLogo }}\r\n  app={horizontalSticky}\r\n/>\r\n\r\n#### `condensed`\r\n\r\nThe app header is merged with the navigation panel, which displays the items horizontally. When you scroll the content, all layout sections scroll with the app.\r\n\r\n<Playground\r\n  name=\"Example: 'condensed' layout\"\r\n  height={350}\r\n  resources={{ logo: xmluiLogo }}\r\n  app={condensed}\r\n/>\r\n\r\n#### `condensed-sticky`\r\n\r\nThe app header is merged with the navigation panel, which displays the items horizontally. When you scroll the content, the heading and the navigation panel dock to the top, while the footer sticks to the bottom.\r\n\r\n<Playground\r\n  name=\"Example: 'condensed-sticky' layout\"\r\n  height={350}\r\n  resources={{ logo: xmluiLogo }}\r\n  app={condensedSticky}\r\n/>\r\n\r\n### Vertical Layout\r\n\r\nXMLUI supports several layouts that display the app's navigation sections (header, menu structure) vertically in a column to the left of the main content area. These variants are the following:\r\n\r\n- `vertical`: The main content is aligned to the right (including the header and the footer), and its content is a single scroll container; every part of it moves as you scroll the page. This layout does not display the logo in the app header.\r\n- `vertical-sticky`: Similar to `vertical`, the header and the navigation bar dock to the top of the main content's viewport, while the footer sticks to the bottom. This layout does not display the logo in the app header.\r\n- `vertical-full-header`: Similar to `vertical-sticky`. However, the header and the navigation bar dock to the top of the app's window, while the footer sticks to the bottom.\r\n\r\nWhen the navigation panel is collapsed, the app title is displayed to the right of the navigation menu icon. The following image shows the collapsed navigation panel:\r\n\r\n<br/>\r\n<Image alt=\"Test API\" src=\"/resources/images/create-apps/collapsed-vertical.png\" />\r\n\r\nThe following vertical layout examples use the same markup as the horizontal ones.\r\n\r\n#### `vertical`\r\n\r\nHere, the app logo and the menu are docked to the left. On the right, the header, the main content, and the footer scroll with the app. Observe the empty app header! Now, the logo is moved to above the navigation panel.\r\n\r\n<Playground\r\n  name=\"Example: 'vertical' layout\"\r\n  height={350}\r\n  resources={{ logo: xmluiLogo }}\r\n  app={vertical}\r\n/>\r\n\r\n#### `vertical-sticky`\r\n\r\nThis layout is similar to the previous (`horizontal`) one. However, the app header sticks to the top of the main content (to the right), while the footer docks to the bottom.\r\n\r\n<Playground\r\n  name=\"Example: 'vertical-sticky' layout\"\r\n  height={350}\r\n  resources={{ logo: xmluiLogo }}\r\n  app={verticalSticky}\r\n/>\r\n\r\n#### `vertical-full-header`\r\n\r\nThis layout docks the app header to the top and the footer to the bottom. The navigation panel and the main content share the remaining area. When you scroll, only the main content moves; the other sections stick to the app's window.\r\n\r\n<Playground\r\n  name=\"Example: 'vertical-full-header' layout\"\r\n  height={350}\r\n  resources={{ logo: xmluiLogo }}\r\n  app={verticalFullHeader}\r\n/>\r\n\r\n## AppHeader\r\n\r\nThe `AppHeader` placeholder declares the UI patch to display in the app's header. If the app defines a logo, the `App` component displays that logo in the header (to the left) and the content within the `AppHeader`. Be aware that the header's appearance depends on the app's layout.\r\n\r\n### No AppHeader\r\n\r\nWhen the `App` does not contain an `AppHeader` placeholder, the app does not display a header in any layout mode:\r\n\r\n```xmlui copy\r\n<App layout=\"horizontal\">\r\n  <H1>Main Content</H1>\r\n  <Footer>\r\n    This is my app footer.\r\n  </Footer>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: No AppHeader\"\r\n  height={200}\r\n  app={`\r\n    <App layout=\"horizontal\">\r\n      <H1>Main Content</H1>\r\n      <Footer>\r\n        This is my app footer.\r\n      </Footer>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Empty AppHeader\r\n\r\nIf the `App` contains an `AppHeader` empty placeholder, it displays an empty header unless you define a logo. The following example does not define a logo, so the header remains empty:\r\n\r\n```xmlui copy {2}\r\n<App layout=\"condensed\">\r\n  <AppHeader/>\r\n  <H1>Main Content</H1>\r\n  <Footer>\r\n    This is my app footer.\r\n  </Footer>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Empty AppHeader\"\r\n  height={200}\r\n  app={`\r\n    <App layout=\"condensed\">\r\n      <AppHeader/>\r\n      <H1>Main Content</H1>\r\n      <Footer>\r\n        This is my app footer.\r\n      </Footer>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Empty AppHeader with Logo\r\n\r\nIf the `App` contains an empty `AppHeader` placeholder but defines a logo, the header displays the logo. The following example uses the same app markup as the previous one; however, it defines a logo in the `App` component's `logo` property:\r\n\r\n```xmlui copy\r\n<App layout=\"condensed\" logo=\"resources/logo.svg\">\r\n  <AppHeader/>\r\n  <H1>Main Content</H1>\r\n  <Footer>\r\n    This is my app footer.\r\n  </Footer>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Empty AppHeader\"\r\n  height={200}\r\n  resources={{ logo: xmluiLogo }}\r\n  app={`\r\n    <App layout=\"condensed\">\r\n      <AppHeader/>\r\n      <H1>Main Content</H1>\r\n      <Footer>\r\n        This is my app footer.\r\n      </Footer>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Explicit AppHeader\r\n\r\nWhen the `AppHeader` section contains a definition, the `App` component displays that in the header:\r\n\r\n```xmlui copy\r\n<App layout=\"condensed\">\r\n  <AppHeader>\r\n    <H1>AcmeApp</H1>\r\n    <SpaceFiller />\r\n    <Icon name=\"palette\" />\r\n  </AppHeader>\r\n  <H1>Main Content</H1>\r\n  <Footer>\r\n    This is my app footer.\r\n  </Footer>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Explicit AppHeader\"\r\n  height={200}\r\n  app={`\r\n    <App layout=\"condensed\">\r\n      <AppHeader>\r\n        <H1>AcmeApp</H1>\r\n        <SpaceFiller />\r\n        <Icon name=\"palette\" />\r\n      </AppHeader>\r\n      <H1>Main Content</H1>\r\n      <Footer>\r\n        This is my app footer.\r\n      </Footer>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Logo\r\n\r\nYou can display a logo in the app's header. There are several ways to define the logo; you will learn about them here.\r\n\r\n### Using the App Component Properties\r\n\r\nThe `App` Component has these properties to define a logo resource:\r\n- `logo`: the URI of the logo relative to the app's root folder\r\n- `logo-dark`: the URI of the logo to be used when the current theme uses a dark tone. This property overrides - `logo` when the dark tone is active.\r\n- `logo-light`: the URI of the logo to be used with a light tone. This property overrides `logo` when the dark tone is active.\r\n\r\n```xmlui copy {3-4}\r\n<App\r\n  layout=\"condensed\"\r\n  logo=\"resources/logo.svg\"\r\n  logo-dark=\"resources/logo-dark.svg\">\r\n  <AppHeader/>\r\n  <H1>App with a logo</H1>\r\n</App>\r\n```\r\n\r\nThis app uses a light tone:\r\n\r\n<Playground\r\n  name=\"Example: Logo specified in the App component (light tone)\"\r\n  height={150}\r\n  resources={{ logo: xmluiLogo }}\r\n  app={`\r\n    <App layout=\"condensed\">\r\n      <AppHeader/>\r\n      <H1>App with a logo</H1>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nThe logo is different when a dark tone is used:\r\n\r\n<Playground\r\n  name=\"Example: Logo specified in the App component (dark tone)\"\r\n  height={150}\r\n  resources={{ logo: xmluiLogoDark }}\r\n  app={`\r\n    <Theme tone=\"dark\">\r\n      <App layout=\"condensed\">\r\n        <AppHeader/>\r\n        <H1>App with a logo</H1>\r\n      </App>\r\n    </Theme>\r\n  `}\r\n/>\r\n\r\n### Configuring Logos\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nYou can set app logos through the `config.json` file in the app's root folder too.\r\n</Callout>\r\n\r\nInstead of using the `App` components `logo`, `logo-dark`, and `logo-light` properties, you can set these resource URIs in the app's optional configuration file.\r\n\r\nThe following entries in `config.json` display the same logo as the examples in the previous section.\r\n\r\n```json\r\n{\r\n  \"resources\": {\r\n    \"logo\": \"resources/logo.svg\",\r\n    \"logo-dark\": \"resources/logo-dark.svg\",\r\n    \"logo-light\": \"resources/logo-light.svg\"\r\n  }\r\n}\r\n```\r\n\r\n### Hiding the Logo\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nThough your app contains a logo definition, you can prevent it from displaying it with the header by setting the `AppHeader` placeholder's `showLogo` property to `false`.\r\n</Callout>\r\n\r\n```xmlui copy /showLogo=\"false\"/\r\n<App\r\n  layout=\"condensed\"\r\n  logo=\"resources/logo.svg\"\r\n  logo-dark=\"resources/logo-dark.svg\">\r\n  <AppHeader showLogo=\"false\"/>\r\n  <H1>App with a hidden logo</H1>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Hiding the Logo\"\r\n  height={200}\r\n  resources={{ logo: xmluiLogo }}\r\n  app={`\r\n    <App>\r\n      <AppHeader showLogo=\"false\"/>\r\n      <H1>App with a hidden logo</H1>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Using the Logo in Placeholders\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nYou can show the app's logo not only in the header but in other parts of the app using the `Logo` component.\r\n</Callout>\r\n\r\nThe following example turns off the logo in the header and displays it in the main content:\r\n\r\n```xmlui {11} copy\r\n<App\r\n  layout=\"condensed\"\r\n  logo=\"resources/logo.svg\"\r\n  logo-dark=\"resources/logo-dark.svg\">\r\n  <AppHeader showLogo=\"false\">\r\n    <H1>AcmeApp</H1>\r\n    <SpaceFiller />\r\n    <Icon name=\"palette\" />\r\n  </AppHeader>\r\n  <H1>Main Content</H1>\r\n  <Logo height=\"60px\" />\r\n  <Footer>\r\n    This is my app footer.\r\n  </Footer>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Using logo in placeholders\"\r\n  height={280}\r\n  resources={{ logo: xmluiLogo }}\r\n  app={`\r\n    <App layout=\"condensed\">\r\n      <AppHeader showLogo=\"false\">\r\n        <H1>AcmeApp</H1>\r\n        <SpaceFiller />\r\n        <Icon name=\"palette\" />\r\n      </AppHeader>\r\n      <H1>Main Content</H1>\r\n      <Logo height=\"60px\" />\r\n      <Footer>\r\n        This is my app footer.\r\n      </Footer>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n\r\n### Declaring a Custom Logo\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nThe `AppHeader` component placeholder has a property, `logoTemplate`, which you can use to define your custom logo.\r\n</Callout>\r\n\r\n```xmlui {3-8} copy\r\n<App>\r\n  <AppHeader>\r\n    <property name=\"logoTemplate\">\r\n      <HStack>\r\n        <Stack width=\"24px\" height=\"16px\" backgroundColor=\"purple\" />\r\n        <Stack width=\"24px\" height=\"16px\" backgroundColor=\"green\" />\r\n      </HStack>\r\n    </property>\r\n    <H2>AcmeApp</H2>\r\n  </AppHeader>\r\n  <H1>Main Content</H1>\r\n  <Footer>\r\n    This is my app footer.\r\n  </Footer>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Custom Logo\"\r\n  height={200}\r\n  resources={{ logo: xmluiLogo }}\r\n  app={`\r\n    <App>\r\n      <AppHeader>\r\n        <property name=\"logoTemplate\">\r\n          <HStack>\r\n            <Stack width=\"24px\" height=\"16px\" backgroundColor=\"purple\" />\r\n            <Stack width=\"24px\" height=\"16px\" backgroundColor=\"green\" />\r\n          </HStack>\r\n        </property>\r\n        <H2>AcmeApp</H2>\r\n      </AppHeader>\r\n      <H1>Main Content</H1>\r\n      <Footer>\r\n        This is my app footer.\r\n      </Footer>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Navigation\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nThe `App` component has two placeholders that help you create the app's navigation structure. The `NavPanel` lets you define the available navigation links (menu commands); `Pages` lists the UI elements that represent a particular navigation target.\r\n</Callout>\r\n\r\nThe links and the targets are bound through URLs. When the user selects a navigation link (menu command), XMLUI ensures that the matching UI part is displayed as the main content.\r\n\r\n```xmlui copy\r\n<App layout=\"horizontal-sticky\">\r\n  <AppHeader><H1>MyTravel App</H1></AppHeader>\r\n  <NavPanel>\r\n    <NavLink label=\"Home\" to=\"/\" />\r\n    <NavLink label=\"Flights\" to=\"/flights\" />\r\n    <NavLink label=\"Hotels\" to=\"/hotels\" />\r\n    <NavLink label=\"Car Rentals\" to=\"/cars/123\" />\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">Home</Page>\r\n    <Page url=\"/flights\">Flights Page</Page>\r\n    <Page url=\"/hotels\">Hotels Page</Page>\r\n    <Page url=\"/cars/:id\">Car Rentals Page {$routeParams.id}</Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Navigation\"\r\n  height={250}\r\n  app={`\r\n    <App layout=\"horizontal-sticky\">\r\n      <AppHeader><H1>MyTravel App</H1></AppHeader>\r\n      <NavPanel>\r\n        <NavLink label=\"Home\" to=\"/\" />\r\n        <NavLink label=\"Flights\" to=\"/flights\" />\r\n        <NavLink label=\"Hotels\" to=\"/hotels\" />\r\n        <NavLink label=\"Car Rentals\" to=\"/cars/123\" />\r\n      </NavPanel>\r\n      <Pages>\r\n        <Page url=\"/\">Home</Page>\r\n        <Page url=\"/flights\">Flights Page</Page>\r\n        <Page url=\"/hotels\">Hotels Page</Page>\r\n        <Page url=\"/cars/:id\">Car Rentals Page {$routeParams.id}</Page>\r\n      </Pages>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYou can learn more about navigation in the <SmartLink href={ROUTING}>Routing</SmartLink> article.\r\n</Callout>\r\n\r\n## Footer\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nWith the `<Footer>` placeholder, you can define the markup part that should be displayed as an application footer.\r\n</Callout>\r\n\r\nHere is an example:\r\n\r\n```xmlui {5-9} copy\r\n<App>\r\n  <AppHeader>\r\n    <H3>AcmeDrive</H3>\r\n  </AppHeader>\r\n  <H1>Main Content</H1>\r\n  <Footer>\r\n    Powered by XMLUI\r\n    <SpaceFiller />\r\n    <Icon name=\"drive\" />\r\n  </Footer>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Footer\"\r\n  height={200}\r\n  app={`\r\n    <App>\r\n      <AppHeader>\r\n        <H3>AcmeDrive</H3>\r\n      </AppHeader>\r\n      <H1>Main Content</H1>\r\n      <Footer>\r\n        Powered by XMLUI\r\n        <SpaceFiller />\r\n        <Icon name=\"drive\" />\r\n      </Footer>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Styling\r\n\r\nYou can use themes (and override theme variables) to change the style of an app. Learn more in these articles:\r\n- <SmartLink href={THEMES}>Themes</SmartLink>\r\n- <SmartLink href={COMPONENT_APP}>The `App` component reference</SmartLink>\r\n- <SmartLink href={COMPONENT_APPHEADER}>The `AppHeader` component reference</SmartLink>\r\n- <SmartLink href={COMPONENT_NAVPANEL}>The `NavPanel` component reference</SmartLink>\r\n- <SmartLink href={COMPONENT_PAGES}>The `Pages` component reference</SmartLink>\r\n- <SmartLink href={COMPONENT_FOOTER}>The `Footer` component reference</SmartLink>\r\n",
  "create-apps/basic-components":"import { Callout } from 'nextra/components'\r\nimport {\r\n  COMPONENT_BADGE,\r\n  COMPONENT_BUTTON,\r\n  COMPONENT_CHECKBOX,\r\n  COMPONENT_COMBOBOX,\r\n  COMPONENT_CONTENTSEPARATOR,\r\n  COMPONENT_DATEPICKER,\r\n  COMPONENT_ICON,\r\n  COMPONENT_IMAGE,\r\n  COMPONENT_LINK,\r\n  COMPONENT_MULTICOMBOBOX,\r\n  COMPONENT_MULTISELECT,\r\n  COMPONENT_NUMBERBOX,\r\n  COMPONENT_PROGRESSBAR,\r\n  COMPONENT_RADIOGROUP,\r\n  COMPONENT_SELECT,\r\n  COMPONENT_SPACEFILLER,\r\n  COMPONENT_SPINNER,\r\n  COMPONENT_SWITCH,\r\n  COMPONENT_TEXTAREA,\r\n  ROUTING,\r\n  WORKING_WITH_RESOURCES\r\n} from \"../../meta/pages\"\r\n\r\n# Basic Components\r\n\r\nXMLUI ships with several simple, easy-to-use components for various tasks.\r\nIn this article, you will learn some basic usage patterns of them.\r\n\r\n## Button\r\n\r\nUse the `Button` component to let users trigger various actions on the UI.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Button label=\"Click me!\" onClick=\"toast('Button clicked')\" />\r\n  <Button label=\"Can't Click Here\" enabled=\"{false}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Trigger Actions\"\r\n  app={`\r\n    <App>\r\n      <Button label=\"Click me!\" onClick=\"toast('Button clicked')\" />\r\n      <Button label=\"Can't Click Here\" enabled=\"{false}\" />\r\n    </App>\r\n  `}\r\n  height={160}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Certain buttons can be emphasized by using properties such as `variant`, `themeColor` and `size`.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    <Button label=\"Solid\" themeColor=\"primary\" />\r\n    <Button label=\"Solid\" themeColor=\"secondary\" />\r\n    <Button label=\"Solid\" themeColor=\"attention\" />\r\n  </HStack>\r\n  <HStack>\r\n    <Button label=\"Outlined\" variant=\"outlined\" themeColor=\"primary\" />\r\n    <Button label=\"Outlined\" variant=\"outlined\" themeColor=\"secondary\" />\r\n    <Button label=\"Outlined\" variant=\"outlined\" themeColor=\"attention\" />\r\n  </HStack>\r\n  <HStack>\r\n    <Button label=\"Ghost\" variant=\"ghost\" themeColor=\"primary\" />\r\n    <Button label=\"Ghost\" variant=\"ghost\" themeColor=\"secondary\" />\r\n    <Button label=\"Ghost\" variant=\"ghost\" themeColor=\"attention\" />\r\n  </HStack>\r\n\r\n  <HStack verticalAlignment=\"center\">\r\n    <Button label=\"Size xs\" size=\"xs\" />\r\n    <Button label=\"Size sm\" size=\"sm\" />\r\n    <Button label=\"Size md\" size=\"md\" />\r\n    <Button label=\"Size lg\" size=\"lg\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Button Variants\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Button label=\"Solid\" themeColor=\"primary\" />\r\n        <Button label=\"Solid\" themeColor=\"secondary\" />\r\n        <Button label=\"Solid\" themeColor=\"attention\" />\r\n      </HStack>\r\n      <HStack>\r\n        <Button label=\"Outlined\" variant=\"outlined\" themeColor=\"primary\" />\r\n        <Button label=\"Outlined\" variant=\"outlined\" themeColor=\"secondary\" />\r\n        <Button label=\"Outlined\" variant=\"outlined\" themeColor=\"attention\" />\r\n      </HStack>\r\n      <HStack>\r\n        <Button label=\"Ghost\" variant=\"ghost\" themeColor=\"primary\" />\r\n        <Button label=\"Ghost\" variant=\"ghost\" themeColor=\"secondary\" />\r\n        <Button label=\"Ghost\" variant=\"ghost\" themeColor=\"attention\" />\r\n      </HStack>\r\n\r\n      <HStack verticalAlignment=\"center\">\r\n        <Button label=\"Size xs\" size=\"xs\" />\r\n        <Button label=\"Size sm\" size=\"sm\" />\r\n        <Button label=\"Size md\" size=\"md\" />\r\n        <Button label=\"Size lg\" size=\"lg\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Buttons can also have icons to provide visual cues.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    <Button icon=\"close\" variant=\"ghost\" themeColor=\"secondary\" />\r\n    <Button label=\"Clear Text Field\" icon=\"trash\" iconPosition=\"end\"\r\n      variant=\"outlined\" themeColor=\"secondary\" />\r\n    <Button label=\"Update\" icon=\"pen\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Button Icons\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Button icon=\"close\" variant=\"ghost\" themeColor=\"secondary\" />\r\n        <Button label=\"Clear Text Field\" icon=\"trash\" iconPosition=\"end\"\r\n          variant=\"outlined\" themeColor=\"secondary\" />\r\n        <Button label=\"Update\" icon=\"pen\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nSee the <SmartLink href={COMPONENT_BUTTON}>Button component reference</SmartLink> to know more.\r\n\r\n## Checkbox\r\n\r\nThe `Checkbox` component allows users to make binary choices by toggling an input control on or off.\r\n\r\nIt works the same way as the [Switch](#switch) component - the only difference is that the `Checkbox` also has an indeterminate state.\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    Enabled checkboxes:\r\n    <Checkbox id=\"check1\" initialValue=\"true\" enabled=\"true\" />\r\n    <Checkbox id=\"check2\" initialValue=\"false\" enabled=\"true\" />\r\n  </HStack>\r\n  <HStack>\r\n    Checkbox values:\r\n    <Text value=\"{check1.value}\" />\r\n    <Text value=\"{check2.value}\" />\r\n  </HStack>\r\n  <HStack>\r\n    Disabled checkboxes:\r\n    <Checkbox initialValue=\"true\" enabled=\"false\" />\r\n    <Checkbox initilaValue=\"false\" enabled=\"false\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Checkboxes\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        Enabled checkboxes:\r\n        <Checkbox id=\"check1\" initialValue=\"true\" enabled=\"true\" />\r\n        <Checkbox id=\"check2\" initialValue=\"false\" enabled=\"true\" />\r\n      </HStack>\r\n      <HStack>\r\n        Checkbox values:\r\n        <Text value=\"{check1.value}\" />\r\n        <Text value=\"{check2.value}\" />\r\n      </HStack>\r\n      <HStack>\r\n        Disabled checkboxes:\r\n        <Checkbox initialValue=\"true\" enabled=\"false\" />\r\n        <Checkbox initilaValue=\"false\" enabled=\"false\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nThe `Checkbox` component can indicate the state of a group of other checkboxes.\r\nThis state is visual only, the actual value of the checkbox is still either `true` or `false`.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Get the data of an input control by assigning an ID to it and using dot notation to access its `value`.\r\n</Callout>\r\n\r\n```xmlui copy {5}\r\n<App>\r\n  <Checkbox\r\n    indeterminate=\"true\"\r\n    label=\"Indeterminate Indicator\"\r\n    initialValue=\"true\"\r\n    readOnly=\"true\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Indeterminate State\"\r\n  app={`\r\n    <App>\r\n      <Checkbox\r\n        indeterminate=\"true\"\r\n        label=\"Indeterminate Indicator\"\r\n        initialValue=\"true\"\r\n        readOnly=\"true\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nFind out more in the <SmartLink href={COMPONENT_CHECKBOX}>Checkbox reference</SmartLink>.\r\n\r\n## Switch\r\n\r\nThe `Switch` component allows users to make binary choices by toggling an input control on or off.\r\n\r\nIt works the same way as the [Checkbox](#checkbox) component - the only difference is that the `Checkbox` also has an indeterminate state.\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    Enabled switches:\r\n    <Switch id=\"switch1\" initialValue=\"true\" enabled=\"true\" />\r\n    <Switch id=\"switch2\" initialValue=\"false\" enabled=\"true\" />\r\n  </HStack>\r\n  <HStack>\r\n    Switch values:\r\n    <Text value=\"{switch1.value}\" />\r\n    <Text value=\"{switch2.value}\" />\r\n  </HStack>\r\n  <HStack>\r\n    Disabled switches:\r\n    <Switch initialValue=\"true\" enabled=\"false\" />\r\n    <Switch initilaValue=\"false\" enabled=\"false\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Switches\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        Enabled switches:\r\n        <Switch id=\"switch1\" initialValue=\"true\" enabled=\"true\" />\r\n        <Switch id=\"switch2\" initialValue=\"false\" enabled=\"true\" />\r\n      </HStack>\r\n      <HStack>\r\n        Switch values:\r\n        <Text value=\"{switch1.value}\" />\r\n        <Text value=\"{switch2.value}\" />\r\n      </HStack>\r\n      <HStack>\r\n        Disabled switches:\r\n        <Switch initialValue=\"true\" enabled=\"false\" />\r\n        <Switch initilaValue=\"false\" enabled=\"false\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nFind out more in the <SmartLink href={COMPONENT_SWITCH}>Switch reference</SmartLink>.\r\n\r\n## RadioGroup\r\n\r\nThis component can contain a set of radio group buttons (`RadioGroupOption`) and enable the selection of only one of them at any one time.\r\n\r\n```xmlui copy\r\n<App>\r\n  <RadioGroup id=\"group1\" initialValue=\"first\">\r\n    <HStack>\r\n      <Option label=\"First Item\" value=\"first\"/>\r\n      <Option label=\"Second Item\" value=\"second\"/>\r\n      <Option label=\"Third Item\" value=\"third\"/>\r\n    </HStack>\r\n  </RadioGroup>\r\n  <Text value=\"RadioGroup value: {group1.value}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: RadioGroup\"\r\n  app={`\r\n    <App>\r\n      <RadioGroup id=\"group1\" initialValue=\"first\">\r\n        <HStack>\r\n          <Option label=\"First Item\" value=\"first\"/>\r\n          <Option label=\"Second Item\" value=\"second\"/>\r\n          <Option label=\"Third Item\" value=\"third\"/>\r\n        </HStack>\r\n      </RadioGroup>\r\n      <Text value=\"RadioGroup value: {group1.value}\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nBoth the grouping component (`RadioGroup`) and its options (`RadioGroupOption`) can be enabled and disabled.\r\n\r\n```xmlui copy /enabled=\"false\"/\r\n<App>\r\n  <HStack>\r\n    <RadioGroup initialValue=\"first\">\r\n      <VStack>\r\n        <Option label=\"First Item\" value=\"first\" enabled=\"false\" />\r\n        <Option label=\"Second Item\" value=\"second\" enabled=\"false\" />\r\n        <Option label=\"Third Item\" value=\"third\" />\r\n      </VStack>\r\n    </RadioGroup>\r\n    <RadioGroup initialValue=\"first\" enabled=\"false\">\r\n      <VStack>\r\n        <Option label=\"First Item\" value=\"first\"/>\r\n        <Option label=\"Second Item\" value=\"second\"/>\r\n        <Option label=\"Third Item\" value=\"third\"/>\r\n      </VStack>\r\n    </RadioGroup>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: RadioGroup\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <RadioGroup initialValue=\"first\">\r\n          <VStack>\r\n            <Option label=\"First Item\" value=\"first\" />\r\n            <Option label=\"Second Item\" value=\"second\" enabled=\"false\" />\r\n            <Option label=\"Third Item\" value=\"third\" />\r\n          </VStack>\r\n        </RadioGroup>\r\n        <RadioGroup initialValue=\"first\" enabled=\"false\">\r\n          <VStack>\r\n            <Option label=\"First Item\" value=\"first\"/>\r\n            <Option label=\"Second Item\" value=\"second\"/>\r\n            <Option label=\"Third Item\" value=\"third\"/>\r\n          </VStack>\r\n        </RadioGroup>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nDetails can be found in the <SmartLink href={COMPONENT_RADIOGROUP}>RadioGroup component reference</SmartLink>.\r\n\r\n## DatePicker\r\n\r\nEnables the selection of a date or a range of dates in a specified format from an interactive display.\r\n\r\n```xmlui copy\r\n<App>\r\n  <DatePicker dateFormat=\"dd/MM/yyyy\" initialValue=\"25/05/2024\" />\r\n  <DatePicker dateFormat=\"yyyy-MM-dd\" initialValue=\"25/05/2024\" />\r\n  <DatePicker dateFormat=\"MMddyyyy\" initialValue=\"25/05/2024\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: DatePicker and Date Formatting\"\r\n  height={260}\r\n  app={`\r\n    <App>\r\n      <DatePicker dateFormat=\"dd/MM/yyyy\" initialValue=\"25/05/2024\" />\r\n      <DatePicker dateFormat=\"yyyy-MM-dd\" initialValue=\"25/05/2024\" />\r\n      <DatePicker dateFormat=\"MMddyyyy\" initialValue=\"25/05/2024\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Use the `mode` property to specify the number of selectable dates: \"single\" or \"range\".\r\n</Callout>\r\n\r\n```xmlui copy\r\n<App>\r\n  <DatePicker initialValue=\"25/05/2024\" mode=\"single\" />\r\n  <DatePicker initialValue=\"{{ from: '25/05/2024', to: '25/07/2024' }}\" mode=\"range\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: DatePicker mode\"\r\n  height={160}\r\n  app={`\r\n    <App>\r\n      <DatePicker initialValue=\"25/05/2024\" mode=\"single\" />\r\n      <DatePicker initialValue=\"{{ from: '25/05/2024', to: '25/07/2024' }}\" mode=\"range\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nFor further details see the <SmartLink href={COMPONENT_DATEPICKER}>DatePicker component reference</SmartLink>.\r\n\r\n## NumberBox\r\n\r\nA `NumberBox` component allows users to input numeric values: integer or floating point numbers.\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox initialValue=\"123\" />\r\n  <NumberBox initialValue=\"123\" hasSpinBox=\"false\" />\r\n  <NumberBox initialValue=\"123\" enabled=\"false\" />\r\n  <NumberBox initialValue=\"123\" enabled=\"false\" hasSpinBox=\"false\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: NumberBoxes\"\r\n  app={`\r\n    <App>\r\n      <NumberBox initialValue=\"123\" />\r\n      <NumberBox initialValue=\"123\" hasSpinBox=\"false\" />\r\n      <NumberBox initialValue=\"123\" enabled=\"false\" />\r\n      <NumberBox initialValue=\"123\" enabled=\"false\" hasSpinBox=\"false\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can provide different kinds of constraints on what numbers the input field accepts.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<App>\r\n  <VStack>\r\n    Integers Only\r\n    <NumberBox integersOnly=\"true\" initialValue=\"123\" />\r\n  </VStack>\r\n  <VStack>\r\n    Zero or Positive Numbers Only\r\n    <NumberBox zeroOrPositive=\"true\" initialValue=\"1\" />\r\n  </VStack>\r\n  <VStack>\r\n    Minimum and Maximum Values\r\n    <NumberBox minValue=\"-10\" maxValue=\"10\" initialValue=\"1\" />\r\n  </VStack>\r\n  <VStack>\r\n    Maximum Length\r\n    <NumberBox maxLength=\"3\" initialValue=\"123\" />\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: NumberBox Constraints\"\r\n  app={`\r\n    <App>\r\n      <VStack>\r\n        Integers Only\r\n        <NumberBox integersOnly=\"true\" initialValue=\"123\" />\r\n      </VStack>\r\n      <VStack>\r\n        Zero or Positive Numbers Only\r\n        <NumberBox zeroOrPositive=\"true\" initialValue=\"1\" />\r\n      </VStack>\r\n      <VStack>\r\n        Minimum and Maximum Values\r\n        <NumberBox minValue=\"-10\" maxValue=\"10\" initialValue=\"1\" />\r\n      </VStack>\r\n      <VStack>\r\n        Maximum Length\r\n        <NumberBox maxLength=\"3\" initialValue=\"123\" />\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nSee the <SmartLink href={COMPONENT_NUMBERBOX}>NumberBox component reference</SmartLink> to know more.\r\n\r\n## Select\r\n\r\nProvides a dropdown with a list of options to choose from.\r\nFor selecting multiple items from a list, refer to the [MultiSelect component](#multiselect).\r\n\r\n```xmlui copy\r\n<App>\r\n  <Select>\r\n    <Option value=\"opt1\" label=\"first\" />\r\n    <Option value=\"opt2\" label=\"second\" />\r\n    <Option value=\"opt3\" label=\"third\" />\r\n  </Select>\r\n  <Select>\r\n    <Items items=\"{['first', 'second', 'third']}\">\r\n      <Option label=\"{$item} option\" value=\"{$item}\" />\r\n    </Items>\r\n  </Select>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Using Select\"\r\n  height={260}\r\n  app={`\r\n    <App>\r\n      <Select>\r\n        <Option value=\"opt1\" label=\"first\" />\r\n        <Option value=\"opt2\" label=\"second\" />\r\n        <Option value=\"opt3\" label=\"third\" />\r\n      </Select>\r\n      <Select>\r\n        <Items items=\"{['first', 'second', 'third']}\">\r\n          <Option label=\"{$item} option\" value=\"{$item}\" />\r\n        </Items>\r\n      </Select>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nThe list items and the empty list display are both customizable.\r\n\r\nSee the <SmartLink href={COMPONENT_SELECT}>Select component reference</SmartLink> to know more.\r\n\r\n## TextArea\r\n\r\nThe `TextArea` component provides is a multiline text input component.\r\nTo add new lines to the input field, press `Shift` + `Enter`.\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextArea initialValue=\"I am a TextArea component.\" placeholder=\"Enter text...\" />\r\n  <TextArea initialValue=\"I am a disabled TextArea component.\" enabled=\"false\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Using TextArea\"\r\n  app={`\r\n    <App>\r\n      <TextArea initialValue=\"I am a TextArea.\" placeholder=\"Enter text...\" />\r\n      <TextArea initialValue=\"I am a disabled TextArea.\" enabled=\"false\" />\r\n    </App>\r\n  `}\r\n  height={220}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Control the number of rows, as well as minimum and maximum row numbers via properties.\r\n\r\n  Note that if either `autoSize`, `maxRows` or `minRows` is set, the `rows` property has no effect.\r\n</Callout>\r\n\r\n```xmlui copy {6, 14} /rows=\"3\"/\r\n<App>\r\n  <!-- Display exactly three rows no matter the content -->\r\n  <TextArea rows=\"3\" initialValue=\"Lorem ipsum dolor sit amet...\" />\r\n  <!-- Display at most three rows but show less if there is not enough content -->\r\n  <TextArea\r\n    maxRows=\"3\"\r\n    initialValue=\"Lorem ipsum dolor sit amet,\r\n    consectetur adipiscing elit,\r\n    sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n    Ut enim ad minim veniam,\r\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\" />\r\n  <!-- Display at least three rows and grow if necessary -->\r\n  <TextArea\r\n    minRows=\"3\"\r\n    initialValue=\"Lorem ipsum dolor sit amet,\r\n    consectetur adipiscing elit,\r\n    sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n    Ut enim ad minim veniam,\r\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: TextArea Row Manipulation\"\r\n  app={`\r\n    <App>\r\n      <TextArea rows=\"3\" initialValue=\"Lorem ipsum dolor sit amet...\" />\r\n      <TextArea\r\n        maxRows=\"3\"\r\n        initialValue=\"Lorem ipsum dolor sit amet,\r\n        consectetur adipiscing elit,\r\n        sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n        Ut enim ad minim veniam,\r\n        quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\" />\r\n      <TextArea\r\n        minRows=\"3\"\r\n        initialValue=\"Lorem ipsum dolor sit amet,\r\n        consectetur adipiscing elit,\r\n        sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n        Ut enim ad minim veniam,\r\n        quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\" />\r\n    </App>\r\n  `}\r\n  height={460}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Limit how the user can resize the `TextArea`.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextArea\r\n    resize=\"vertical\"\r\n    initialValue=\"You can resize me vertically\" />\r\n  <TextArea\r\n    resize=\"horizontal\"\r\n    initialValue=\"You can resize me horizontally\" />\r\n  <TextArea\r\n    resize=\"both\"\r\n    initialValue=\"You can resize me both ways\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Resizing TextArea\"\r\n  app={`\r\n    <App>\r\n      <TextArea\r\n        resize=\"vertical\"\r\n        initialValue=\"You can resize me vertically\" />\r\n      <TextArea\r\n        resize=\"horizontal\"\r\n        initialValue=\"You can resize me horizontally\" />\r\n      <TextArea\r\n        resize=\"both\"\r\n        initialValue=\"You can resize me both ways\" />\r\n    </App>\r\n  `}\r\n  height={340}\r\n/>\r\n\r\nSee the <SmartLink href={COMPONENT_TEXTAREA}>TextArea component reference</SmartLink> to know more.\r\n\r\n## TextBox\r\n\r\nThe TextBox is an input component that allows users to input and edit textual data.\r\n\r\n```xmlui copy\r\n<App>\r\n  <TextBox initialValue=\"I am a TextBox\" placeholder=\"Write something here...\" />\r\n  <TextBox initialValue=\"I am a TextBox\" enabled=\"false\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Using TextBox\"\r\n  app={`\r\n    <App>\r\n      <TextBox initialValue=\"I am a TextBox\" placeholder=\"Write something here...\" />\r\n      <TextBox initialValue=\"I am a TextBox\" enabled=\"false\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nFor details, see the <SmartLink href={COMPONENT_TEXTAREA}>TextBox component reference</SmartLink>.\r\n\r\n## Link\r\n\r\nA `Link` component represents a hyperlink used to link from one page to another (can be a subpage of the app or external).\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  **Note:** The `target` property set to \"_blank\" ensures the link opens in a new tab.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<App>\r\n  <Link to=\"https://docs.xmlui.com/\" target=\"_blank\">\r\n    XMLUI introduction\r\n  </Link>\r\n  <Link to=\"https://docs.xmlui.com/\" enabled=\"false\" target=\"_blank\">\r\n    Disabled XMLUI introduction\r\n  </Link>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Using Link\"\r\n  app={`\r\n    <App>\r\n      <Link to=\"https://docs.xmlui.com/\" target=\"_blank\">XMLUI introduction</Link>\r\n      <Link to=\"https://docs.xmlui.com/\" enabled=\"false\" target=\"_blank\">Disabled XMLUI introduction</Link>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Add an icon and text via relevant properties to leverage built-in styling.\r\n</Callout>\r\n\r\n```xmlui copy {3-4}\r\n<App>\r\n  <Link\r\n    label=\"XMLUI introduction\"\r\n    icon=\"star\"\r\n    target=\"_blank\"\r\n    to=\"https://docs.xmlui.com/\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Link Customization\"\r\n  app={`\r\n    <App>\r\n      <Link\r\n        label=\"XMLUI introduction\"\r\n        icon=\"star\"\r\n        target=\"_blank\"\r\n        to=\"https://docs.xmlui.com/\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  The `Link` component is hooked up the the XMLUI routing system. See <SmartLink href={ROUTING}>this article</SmartLink> for details.\r\n</Callout>\r\n\r\nAlso see the <SmartLink href={COMPONENT_LINK}>Link component reference</SmartLink> to know more about the component itself.\r\n\r\n## Badge\r\n\r\nThe `Badge` is a text label that accepts a color map to define its background color and, optionally, its label color.\r\n\r\n```xmlui copy\r\n<App>\r\n  <variable name=\"simpleColorMap\" value=\"{{ important: 'red', regular: 'blue', unimportant: 'black' }}\" />\r\n  Regular Badge\r\n  <HStack>\r\n    <Badge value=\"no mapped color\" colorMap=\"{simpleColorMap}\" />\r\n    <Badge value=\"important\" colorMap=\"{simpleColorMap}\" />\r\n    <Badge value=\"regular\" colorMap=\"{simpleColorMap}\" />\r\n    <Badge value=\"unimportant\" colorMap=\"{simpleColorMap}\" />\r\n  </HStack>\r\n  Pill Shaped Badge\r\n  <HStack>\r\n    <Badge variant=\"pill\" value=\"no mapped color\" colorMap=\"{simpleColorMap}\" />\r\n    <Badge variant=\"pill\" value=\"important\" colorMap=\"{simpleColorMap}\" />\r\n    <Badge variant=\"pill\" value=\"regular\" colorMap=\"{simpleColorMap}\" />\r\n    <Badge variant=\"pill\" value=\"unimportant\" colorMap=\"{simpleColorMap}\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Using Badge\"\r\n  app={`\r\n    <App>\r\n      <variable name=\"simpleColorMap\" value=\"{{ important: 'red', regular: 'blue', unimportant: 'black' }}\" />\r\n      Regular Badge\r\n      <HStack>\r\n        <Badge value=\"no mapped color\" />\r\n        <Badge variant=\"pill\" value=\"no mapped color\" />\r\n      </HStack>\r\n      With \"colorMap\"\r\n      <HStack>\r\n        <Badge value=\"no mapped color\" colorMap=\"{simpleColorMap}\" />\r\n        <Badge value=\"important\" colorMap=\"{simpleColorMap}\" />\r\n        <Badge value=\"regular\" colorMap=\"{simpleColorMap}\" />\r\n        <Badge value=\"unimportant\" colorMap=\"{simpleColorMap}\" />\r\n      </HStack>\r\n      Pill Shaped Badge\r\n      <HStack>\r\n        <Badge variant=\"pill\" value=\"no mapped color\" colorMap=\"{simpleColorMap}\" />\r\n        <Badge variant=\"pill\" value=\"important\" colorMap=\"{simpleColorMap}\" />\r\n        <Badge variant=\"pill\" value=\"regular\" colorMap=\"{simpleColorMap}\" />\r\n        <Badge variant=\"pill\" value=\"unimportant\" colorMap=\"{simpleColorMap}\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nAlso see the <SmartLink href={COMPONENT_BADGE}>Badge component reference</SmartLink> to know more about the component itself.\r\n\r\n## Card\r\n\r\nThe `Card` component is a container for grouping other UI elements.\r\nIt visually separates its content from its surroundings.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Card>\r\n    <HStack>\r\n      <Icon name=\"info\" />\r\n      <Text value=\"Information\" variant=\"strong\" />\r\n    </HStack>\r\n    This is an example text\r\n  </Card>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Using Card\"\r\n  app={`\r\n    <App>\r\n      <Card>\r\n        <HStack>\r\n          <Icon name=\"info\" />\r\n          <Text value=\"Information\" variant=\"strong\" />\r\n        </HStack>\r\n        This is an example text\r\n      </Card>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  The component also provides prestyled elements that are accessible via the Card properties.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<App>\r\n  <Card\r\n    avatarUrl=\"https://i.pravatar.cc/100\"\r\n    title=\"Predefined Title\"\r\n    subtitle=\"Predefined Subtitle\">\r\n    <HStack>\r\n      <Icon name=\"info\"/>\r\n      This is the content of the card. You can place anything here.\r\n      Currently, it contains an icons with some example text.\r\n    </HStack>\r\n  </Card>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Prestyled Elements in Card\"\r\n  app={`\r\n    <App>\r\n      <Card\r\n        avatarUrl=\"https://i.pravatar.cc/100\"\r\n        linkTo=\"https://docs.xmlui.com/\"\r\n        title=\"Predefined Title\"\r\n        subtitle=\"Predefined Subtitle\">\r\n        <HStack>\r\n          <Icon name=\"info\"/>\r\n          This is the content of the card. You can place anything here.\r\n          Currently, it contains an icons with some example text.\r\n        </HStack>\r\n      </Card>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Icon\r\n\r\nThis component is the representation of an icon.\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    <Icon name=\"message\" />\r\n    <Icon name=\"note\" />\r\n    <Icon name=\"cog\" />\r\n    <Icon name=\"start\" />\r\n  </Hstack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Using Icon\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Icon name=\"message\" />\r\n        <Icon name=\"note\" />\r\n        <Icon name=\"cog\" />\r\n        <Icon name=\"start\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  If an icon name does not correspond to a valid graphical element, you can use a fallback icon.\r\n  No icon is rendered if no fallback is specified.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    No icon displayed:\r\n    <Icon name=\"non-existing-icon\" />\r\n  </HStack>\r\n  <HStack>\r\n    Fallback displayed:\r\n    <Icon name=\"non-existing-icon-with-fallback\" fallback=\"trash\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Fallback Icon\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        No icon displayed:\r\n        <Icon name=\"non-existing-icon\" />\r\n      </HStack>\r\n      <HStack>\r\n        Fallback displayed:\r\n        <Icon name=\"non-existing-icon-with-fallback\" fallback=\"trash\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  It is possible to use your own icons instead of the built-in ones and\r\n  also define new icons <SmartLink href={WORKING_WITH_RESOURCES}>using the resource attribute</SmartLink> in the app config file.\r\n</Callout>\r\n\r\nSee the <SmartLink href={COMPONENT_ICON}>Icon component reference</SmartLink> to know more.\r\n\r\n## Image\r\n\r\nThe `Image` component can display complex graphical images.\r\nIt functions as a container for a picture.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Image src=\"/resources/images/components/image/breakfast.jpg\" width=\"240px\" />\r\n  <Image \r\n    src=\"cantFindIt.jpg\" \r\n    alt=\"This image depicts a wonderful scene not for human eyes\" \r\n    width=\"240px\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Using Image\"\r\n  app={`\r\n    <App>\r\n      <Image \r\n        src=\"/resources/images/components/image/breakfast.jpg\" \r\n        width=\"240px\" \r\n        boxShadow=\"$boxShadow-spread\" />\r\n      <Image src=\"cantFindIt.jpg\" \r\n        alt=\"This image depicts a wonderful scene not for human eyes\" \r\n        width=\"240px\" \r\n        boxShadow=\"$boxShadow-spread\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nSee the <SmartLink href={COMPONENT_IMAGE}>Image component reference</SmartLink> to know more.\r\n\r\n## ProgressBar\r\n\r\nA `ProgressBar` component visually represents the progress of a task or process.\r\n\r\n```xmlui copy\r\n<App>\r\n  <ProgressBar value=\"0\"/>\r\n  <ProgressBar value=\"0.2\"/>\r\n  <ProgressBar value=\"0.6\"/>\r\n  <ProgressBar value=\"1\"/>\r\n  <ProgressBar value=\"1.2\"/>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Using ProgressBar\"\r\n  app={`\r\n    <App>\r\n      <ProgressBar value=\"0\"/>\r\n      <ProgressBar value=\"0.2\"/>\r\n      <ProgressBar value=\"0.6\"/>\r\n      <ProgressBar value=\"1\"/>\r\n      <ProgressBar value=\"1.2\"/>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Use some kind of logic when setting the `value` property to represent change.\r\n</Callout>\r\n\r\nSee the <SmartLink href={COMPONENT_PROGRESSBAR}>ProgressBar component reference</SmartLink> to know more.\r\n\r\n## Spinner\r\n\r\nThe `Spinner` component is an animated indicator that represents a particular action in progress without a deterministic progress value.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Spinner />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Using Spinner\"\r\n  app={`\r\n  <App>\r\n    <Spinner />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Use the `delay` property to control when the Spinner is displayed.\r\n</Callout>\r\n\r\nUse the buttons to toggle between the two `Spinners` in the demo app:\r\n\r\n```xmlui copy\r\n<App>\r\n  <variable name=\"noDelay\" value=\"{true}\" />\r\n  <variable name=\"yesDelay\" value=\"{false}\" />\r\n  <HStack>\r\n    <Button\r\n      label=\"No delay\"\r\n      onClick=\"noDelay = true; yesDelay = false;\" />\r\n    <Button\r\n      label=\"1000 ms delay\"\r\n      onClick=\"noDelay = false; yesDelay = true;\" />\r\n  </HStack>\r\n  <Spinner when=\"{noDelay}\" delay=\"0\" />\r\n  <Spinner when=\"{yesDelay}\" delay=\"1000\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Delayed Spinner Display\"\r\n  height={200}\r\n  app={`\r\n    <App>\r\n      <variable name=\"noDelay\" value=\"{true}\" />\r\n      <variable name=\"yesDelay\" value=\"{false}\" />\r\n      <HStack>\r\n        <Button\r\n          label=\"No delay\"\r\n          onClick=\"noDelay = true; yesDelay = false;\" />\r\n        <Button\r\n          label=\"1000 ms delay\"\r\n          onClick=\"noDelay = false; yesDelay = true;\" />\r\n      </HStack>\r\n      <Spinner when=\"{noDelay}\" delay=\"0\" />\r\n      <Spinner when=\"{yesDelay}\" delay=\"1000\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nFor further details see the <SmartLink href={COMPONENT_SPINNER}>Spinner component reference</SmartLink>.\r\n\r\n## ContentSeparator\r\n\r\nA `ContentSeparator` is a component that divides or separates content visually within a layout.\r\n\r\n```xmlui copy {5, 10, 15}\r\n<App>\r\n  <Heading level=\"h2\">\r\n    Lorem Ipsum\r\n  </Heading>\r\n  <ContentSeparator />\r\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit,\r\n  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi\r\n  ut aliquip ex ea commodo consequat.\r\n  <ContentSeparator orientation=\"horizontal\" />\r\n  <HStack>\r\n    Duis aute irure dolor in reprehenderit in voluptate velit esse cillum\r\n    dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\r\n    non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n    <ContentSeparator orientation=\"vertical\" />\r\n    Sed ut perspiciatis unde omnis iste natus error sit voluptatem\r\n    accusantium doloremque laudantium, totam rem aperiam,\r\n    eaque ipsa quae ab illo inventore veritatis et quasi architecto\r\n    beatae vitae dicta sunt explicabo.\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  height={360}\r\n  name=\"Example: Using ContentSeparator\"\r\n  app={`\r\n  <App>\r\n    <Heading level=\"h2\">\r\n      Lorem Ipsum\r\n    </Heading>\r\n    <ContentSeparator />\r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit,\r\n    sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n    Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi\r\n    ut aliquip ex ea commodo consequat.\r\n    <ContentSeparator orientation=\"horizontal\" />\r\n    <HStack>\r\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum\r\n      dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\r\n      non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n      <ContentSeparator orientation=\"vertical\" />\r\n      Sed ut perspiciatis unde omnis iste natus error sit voluptatem\r\n      accusantium doloremque laudantium, totam rem aperiam,\r\n      eaque ipsa quae ab illo inventore veritatis et quasi architecto\r\n      beatae vitae dicta sunt explicabo.\r\n    </HStack>\r\n  </App>\r\n  `}\r\n/>\r\n\r\nSee the <SmartLink href={COMPONENT_CONTENTSEPARATOR}>ContentSeparator component reference</SmartLink> to know more.\r\n",
  "create-apps/build-and-deploy":"import { Callout } from 'nextra/components';\r\nimport { THEMES_DEFINITIONS, THEMES_WHAT_A_THEME_CONTAINS } from \"../../meta/pages.js\";\r\n\r\n# Build and deploy\r\n\r\nXMLUI allows you to create apps without building the source files. You can copy the file app's file structure into a web server configured for static file hosting, and your app will immediately work.\r\n\r\nBesides this simple deployment model, XMLUI offers another using a build process to optimize the code for startup speed and bundle size.\r\n\r\nWhen your app is deployed, you still have the opportunity to change its appearance and behavior through configuration.\r\n\r\nThis article will teach you the details of building and deploying apps.\r\n\r\n## \"No-build\" App Structure\r\n\r\nThe simple structure of XMLUI apps contains a few folders and files, as this table summarizes:\r\n\r\n| File/Folder | Description |\r\n| --- | --- |\r\n| **`index.html`** | The default webpage to display |\r\n| **`Main.xmlui`** | The XMLUI app's entry point |\r\n| **`Main.xmlui.xs`** | (*Optional*) Code-behind file for the app's entry point |\r\n| **`components`** | (*Optional*) The folder with the app's XMLUI components (empty) |\r\n| **`resources`** | (*Optional*) The folder with static app resources like images, logos, icons, etc. |\r\n| **`themes`** | (*Optional*) The folder theme files. |\r\n| **`xmlui`** | The folder with XMLUI core framework, optional features, emulated APIs, and third-party components |\r\n| **`config.json`** | (*Optional*) The app configuration file |\r\n| **`mockApi.js`** | (*Optional*) The service worker for emulated backend |\r\n| **`start.bat`** | (*Optional*) The batch file to start the `http-server` utility (assumes Node.js is installed) on Windows |\r\n| **`start.sh`** | (*Optional*) The bash script file to start the `http-server` utility (assumes Node.js is installed) on Mac and Linux |\r\n\r\nAll folders except `xmlui` are optional as your app may not contain resources, app-specific components, or themes.\r\n\r\n### Emulated API\r\n\r\nXMLUI provides API emulation, which allows you to create apps that communicate with browser-injected emulated endpoints instead of an actual remote backend. You do not need to change the source code of XMLUI apps to use this technology. Only plug in the API emulation; your app will use the emulated endpoints.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nThis technology is still under development. We use it in the tutorials and documentation samples, and we may make it available for XMLUI app developers in the future.\r\n</Callout>\r\n\r\nTwo files, `xmlui/mockApiDef.js` and `mockApi.js`, are present only in backend emulation apps.\r\n\r\nIf you have an emulated backend, the `mockApiDef.js` file should be loaded in `index.html` (before the XMLUI framework):\r\n\r\n```html copy filename=\"index.html\" {6} /emulatedApi.js/\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\" />\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n  <script src=\"./xmlui/mockApiDef.js\"></script>\r\n  <script src=\"./xmlui/xmlui-standalone.umd.js\"></script>\r\n</head>\r\n<body>\r\n</body>\r\n</html>\r\n```\r\n\r\nThe framework will automatically load the `mockApi.js` file (if present and needed) while initializing.\r\n\r\n### Component files\r\n\r\nThe `components` folder contains XMLUI component files. Each file represents a component that you can use in your app. The component files are XMLUI markup files with the `.xmlui` extension.\r\n\r\nWhile you work with XMLUI in \"no-build\" mode, your components must follow this naming convention:\r\n\r\n- The component file name must be in PascalCase.\r\n- The component file name must match the component's name in the XMLUI markup.\r\n- You must place the component file directly in the `components` folder (and not in a nested folder).\r\n\r\nFor example, if you have a component named `MyComponent`, the file name must be `MyComponent.xmlui`:\r\n\r\n```xmlui copy filename=\"components/MyComponent.xmlui\"\r\n<Component name=\"MyComponent\">\r\n  <!-- Component content -->\r\n</Component>\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nAs an XMLUI app is served from a web server, the browser does not know the file structure on the server. So, when the engine finds a reference to an unknown component (for example, `SomeComponent`), it considers it an app-specific component and tries to fetch it from the `/components/SomeComponents.xmlui` URL. If the fetch is not successful, the engine raises an error.\r\n</Callout>\r\n\r\nIf you need to use a component that does not follow the default convention, you can use the configuration file to describe its location.\r\n\r\n### Code-behind files\r\n\r\nXMLUI supports code-behind files. These files must use the same name and location as the markup file with the `.xmlui.xs` extension. So, if you have a code-behind file for the app, that file must be in the app's root folder with the `Main.xmlui.xs` name. Similarly, if you have a component in `MyComponent.xmlui` (within the `components` folder), the corresponding code-behind file must be `MyComponent.xmlui.xs`.\r\n\r\n### Theme Files\r\n\r\nXMLUI ships with several built-in <SmartLink href={THEMES_DEFINITIONS}>themes</SmartLink>; however, you can add extra themes to your app. These are JSON files and must be located within the `themes` folder. You can learn more about the theme files' format <SmartLink href={THEMES_WHAT_A_THEME_CONTAINS}>here</SmartLink>.\r\n\r\nWhile you work with XMLUI in \"no-build\" mode, your themes must follow this naming convention:\r\n\r\n- The theme file name must match the theme ID in the JSON file (and have a `.json` extension).\r\n- You must place the theme file directly in the `themes` folder (and not in a nested folder).\r\n\r\n### The configuration file\r\n\r\n<Callout type=\"warning\">\r\nWe are working to finalize the structure of the app configuration file; it will be done in a few days, and then we update this documentation section.\r\n</Callout>\r\n\r\n## Optimizing Apps\r\n\r\n<Callout type=\"warning\">\r\nWe are still working on the build tools that optimize the application structure. When these tools are ready, we update this part of the documentation.\r\n</Callout>\r\n\r\n## Developing Apps with HMR\r\n\r\nXMLUI supports using a development environment (with a similar structure to the \"no-build\" mode, which has some extra files), which supports hot module reloading (HMR). Optionally, use this mode and its build process to create optimized files.\r\n\r\n<Callout type=\"warning\">\r\nWe are still working on the HMR environment and building tools that optimize the application structure. When these tools are ready, we update this part of the documentation.\r\n</Callout>\r\n",
  "create-apps/data":"import { Callout } from 'nextra/components';\r\nimport { COMPONENT_ITEMS, COMPONENT_LIST, COMPONENT_TABLE, THE_APP_COMPONENT } from \"../../meta/pages.js\";\r\n\r\n# Working with data\r\n\r\nReal apps consume data. XMLUI provides a straightforward way to reach data from the backend and display them in the UI. It also lets you execute actions that change backend data.\r\n\r\nThis section will teach you how to access backend APIs through XMLUI components. In addition to the data access techniques, you will learn about a few data-aware components, such as `List` and `Table`.\r\n\r\n## The `data` property\r\n\r\nEach component in the framework (including the built-in and reusable components ) may have a `data` property. XMLUI specially handles this property:\r\n- First, it gets the property values; if it is an expression, it evaluates it.\r\n- If the property value is a string, the framework handles it as a URL and fetches the data from it. The retrieved data is passed to the component when the fetch is completed.\r\n- If the value is a `DataSource,` the framework fetches the data from that `DataSource` and passes it to the component when the fetch is completed.\r\n- In other cases, the value is passed to the component.\r\n\r\nAs you learned, property changes trigger UI refresh, so when the `data` property's value gets the actual data, the UI is updated accordingly.\r\n\r\n### Using `data` with Explicit Value\r\n\r\nWhen you pass an explicit (non-string) value to the `data` property, the framework directly passes it to the component, which renders it.\r\n\r\nHere is a sample demonstrating this case:\r\n\r\n```xmlui copy\r\n<App>\r\n  <List data=\"{['one', 'two', 'three']}\">\r\n    <Card title=\"{$item}\" />\r\n  </List>\r\n</App>  \r\n```\r\n\r\nThis code passes an array of strings to `data`. A `List` component displays each item in `data` according to the template described by its children. The `$item` context value in the template represents the current item to display.\r\n\r\n<Playground\r\n  name=\"Example: Explicit data\"\r\n  app={`\r\n    <App>\r\n      <List data=\"{['one', 'two', 'three']}\">\r\n        <Card title=\"{$item}\" />\r\n      </List>\r\n    </App>  \r\n  `}\r\n  height={240}\r\n/>\r\n\r\n\r\n\r\n### Using `data` with a valid URL\r\n\r\nWhen you pass a string value to `data`, XMLUI considers it a URL and fetches the data from it. When the fetch is complete, the UI is refreshed accordingly.\r\n\r\n```xmlui copy\r\n<App>\r\n  <List data=\"https://api.spacexdata.com/v4/launchpads\">\r\n    <Card title=\"{$item.name}\" />\r\n  </List>\r\n</App>  \r\n```\r\n\r\nThis markup uses the endpoint in `data` to fetch launchpad information from the SpaceX API.\r\n\r\n<Playground\r\n  name=\"Example: Data with a URL\"\r\n  app={`\r\n    <App>\r\n      <List data=\"https://api.spacexdata.com/v4/launchpads\">\r\n        <Card title=\"{$item.name}\" />\r\n      </List>\r\n    </App>  \r\n  `}\r\n  height={240}\r\n/>\r\n\r\n### Using `data` with a non-functional URL\r\n\r\nWhen you use a string value in `data` but not a valid URL or the data fetch results in an error, the `data` is set to an empty value. The following example demonstrates this case:\r\n\r\n```xmlui copy\r\n<App var.myData=\"{[]}\">\r\n  <Button label=\"Fetch Data\" onClick=\"myData = 'bla-bla-bla'\" />\r\n  <List data=\"{myData}\">\r\n    <Card title=\"{$item}\" />\r\n  </List>\r\n</App>  \r\n```\r\n\r\nBy default, the value passed to `data` is an empty list (the UI displays \"No data available\"); however, when you click the button that sets the `data` property to an invalid URL (\"bla-bla-bla\"), an error is raised while the framework fetches the data from that URL.\r\n\r\n<Playground\r\n  name=\"Example: Data with a non-functional URL\"\r\n  app={`\r\n    <App var.myData=\"{[]}\">\r\n      <Button label=\"Fetch Data\" onClick=\"myData = 'bla-bla-bla'\" />\r\n      <List data=\"{myData}\">\r\n        <Card title=\"{$item}\" />\r\n      </List>\r\n    </App>  \r\n  `}\r\n  height={180}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nWhen you click the button again, the value of `data` does not change (it remains \"bla-bla-bla\"), so the framework does not trigger the fetch again.\r\n</Callout>\r\n\r\n### Using `data` with a `DataSource`\r\n\r\nYou can bind the `data` property to a `DataSource` instance. Similarly to a single URL, `DataSource` fetches the data from that URL. \r\n\r\n```xmlui copy /rocketsData/\r\n<App>\r\n  <DataSource id=\"rocketsData\" url=\"https://api.spacexdata.com/v4/rockets\" />\r\n  <List data=\"{rocketsData}\">\r\n    <Card title=\"{$item.rocket_name}\" subtitle=\"{$item.success_rate_pct}%\" />\r\n  </List>\r\n</App>  \r\n```\r\n\r\nYou can refer to the `DataSource` instance with its identifier, `rocketsData`.\r\n\r\n<Playground\r\n  name=\"Example: Using DataSource in Data\"\r\n  app={`\r\n    <App>\r\n      <DataSource id=\"rocketsData\" url=\"https://api.spacexdata.com/v4/rockets\" />\r\n      <List data=\"{rocketsData}\">\r\n        <Card title=\"{$item.name}\" subtitle=\"{$item.success_rate_pct}%\" />\r\n      </List>\r\n    </App>  \r\n  `}\r\n  height={260}\r\n/>\r\n\r\nThis sample has the same effect as using a URL in the `data` property. However, when you need additional configuration to issue a fetch request (for example, changing the `GET` method or adding some custom headers), `DataSource` provides that flexibility over a single string URL.\r\n\r\nNote that a `DataSource` identifier can be shared among multiple components, intrinsic and/or user-defined.\r\n\r\n```xmlui copy /rocketsData/\r\n<App>\r\n  <DataSource id=\"rocketsData\" url=\"https://api.spacexdata.com/v4/rockets\" />\r\n  <List data=\"{rocketsData}\">\r\n    <Card title=\"{$item.rocket_name}\" subtitle=\"{$item.success_rate_pct}%\" />\r\n  </List>\r\n  <MyCustomRocketDisplay source=\"{rocketsData} />\r\n</App>\r\n```\r\n\r\n```xmlui copy\r\n<Component name=\"MyCustomRocketDisplay\">\r\n  <Items data=\"{$props.source}\">\r\n    <Text>\r\n      {$item.name}, {$item.type}, {$item.first_flight}\r\n    </Text>\r\n  </Items>\r\n</Component>\r\n```\r\n\r\n## Using `DataSource`\r\n\r\nThough using the `data` property is extremely easy, there are situations when you need more control over the fetched data than just automatically getting it. Here are a few of them:\r\n- You need to extract some part of the response and consider that part as the data you want to display.\r\n- You need to transform the data from the backend before displaying it.\r\n- You want to know that the data is being fetched to indicate that the fetch operation is in progress.\r\n- Initiating the fetch request is more complex than issuing a GET request with the specified URL; for example, you must pass some information in the request header.  \r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  The `DataSource` component provides **more control of the fetch operation** with its methods and state information.\r\n</Callout>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nThis samples in this section use XMLUI's emulated API feature.\r\n</Callout>\r\n\r\n### Accessing the Data\r\n\r\nYou can use `DataSource` with any component (even if that one does not handle data natively). When the fetch is complete, the `value` property represents retrieved data.\r\n\r\nIn the following example, you use the `value` property to set the contents of `H3`:\r\n\r\n```xmlui copy /fruits.value/\r\n<App>\r\n  <DataSource id='fruits' url='/api/fruits'/>\r\n  <HStack verticalAlignment=\"center\">\r\n  <H3>These are the {fruits.value.length} fruits:</H3>\r\n  <Items data=\"{fruits}\">\r\n    <Badge value=\"{$item}\" />\r\n  </Items>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Use data from a DataSource\"\r\n  api={{\r\n    initialize: `\r\n      $state.fruits = ['apple', 'banana', 'cherry', 'pear'];\r\n    `,\r\n    operations: {\r\n      'get-fruits': {\r\n        method: 'get',\r\n        url: '/api/fruits',\r\n        handler: `\r\n          return $state.fruits;\r\n        `,\r\n      },\r\n    }\r\n  }}\r\n  app={`\r\n    <App>\r\n      <DataSource id='fruits' url='/api/fruits'/>\r\n      <HStack verticalAlignment=\"center\">\r\n      <H3>These are the {fruits.value.length} fruits:</H3>\r\n      <Items data=\"{fruits}\">\r\n        <Badge value=\"{$item}\" />\r\n      </Items>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n  height={100}\r\n/>\r\n\r\n### Refreshing the data\r\n\r\n`DataSource` exposes a method, `refetch`, which you can use imperatively to re-query the data. The following markup demonstrates using it:\r\n\r\n```xmlui copy /coords.refetch()/\r\n<App>\r\n  <DataSource id='coords' url='/api/coords'/>\r\n  <Button label=\"Refresh\" onClick=\"coords.refetch()\" />\r\n  <Text>Satelite position: x={coords.value.x}, y={coords.value.y}</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Refreshing data\"\r\n  api={{\r\n    initialize: `\r\n      $state.click = 0;\r\n    `,\r\n    operations: {\r\n      'get-coords': {\r\n        method: 'get',\r\n        url: '/api/coords',\r\n        handler: `\r\n          const coords = { x: ($state.click * 1.523).toFixed(4), y: ($state.click * 2.421).toFixed(4) };\r\n          $state.click++;\r\n          return coords;\r\n        `,\r\n      },\r\n    }\r\n  }}\r\n  app={`\r\n    <App>\r\n      <DataSource id='coords' url='/api/coords'/>\r\n      <Button label=\"Refresh\" onClick=\"coords.refetch()\" />\r\n      <Text>Satelite position: x={coords.value.x}, y={coords.value.y}</Text>\r\n    </App>\r\n  `}\r\n  height={140}\r\n/>\r\n\r\n### Periodic Polling\r\n\r\n`DataSource` allows you to periodically poll the backend for data. Use the `pollIntervalInSeconds` property to set this period, as the following example shows:\r\n\r\n```xmlui copy /pollIntervalInSeconds=\"3\"/\r\n<App var.pollCount=\"{0}\">\r\n  <DataSource \r\n    id='rand' \r\n    url='/api/random' \r\n    pollIntervalInSeconds=\"3\" \r\n    onLoaded=\"pollCount++\"/>\r\n  <H3>Poll temperature in every 3 seconds (#{pollCount})</H3>\r\n  <Text>Current random temperature: {rand.value}</Text>\r\n</App>\r\n```\r\n\r\nBesides getting the data, this app uses the `loaded` event of `DataSource` to count the number of polls.\r\n\r\n<Playground\r\n  name=\"Example: Automatic polling\"\r\n  api={{\r\n    initialize: `\r\n      $state.click = 0;\r\n    `,\r\n    operations: {\r\n      'get-coords-2': {\r\n        method: 'get',\r\n        url: '/api/random',\r\n        handler: `\r\n          return (Math.random() * 40 + 40).toFixed(4);\r\n        `,\r\n      },\r\n    }\r\n  }}\r\n  app={`\r\n    <App var.pollCount=\"{0}\">\r\n      <DataSource \r\n        id='rand' \r\n        url='/api/random' \r\n        pollIntervalInSeconds=\"3\" \r\n        onLoaded=\"pollCount++\"/>\r\n      <H3>Poll temperature in every 3 seconds (#{pollCount})</H3>\r\n      <Text>Current random temperature: {rand.value}</Text>\r\n    </App>\r\n  `}\r\n  height={120}\r\n/>\r\n\r\n### In-Progress State\r\n\r\nYou can quickly determine if a data fetch operation is in progress. `DataSource` offers a property, `inProgress,` which indicates whether the data is currently being fetched. The following sample shows using this property:\r\n\r\n\r\n```xmlui copy /orders.inProgress/\r\n<App var.pollCount=\"{0}\">\r\n  <DataSource id='orders' url='/api/monthly-total' />\r\n  <Button onClick=\"orders.refetch()\">Query #of total orders</Button>\r\n  <Text when=\"{orders.inProgress}\">Calculating...</Text>\r\n  <H2 when=\"{!orders.inProgress}\">Total Orders: {orders.value}</H2>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Checking in-progress state\"\r\n  api={{\r\n    initialize: `\r\n      $state.click = 0;\r\n    `,\r\n    operations: {\r\n      'get-total': {\r\n        method: 'get',\r\n        url: '/api/monthly-total',\r\n        handler: `\r\n          delay(2000);\r\n          return Math.random() * 12000 + 800;\r\n        `,\r\n      },\r\n    }\r\n  }}\r\n  app={`\r\n    <App var.pollCount=\"{0}\">\r\n      <DataSource id='orders' url='/api/monthly-total' />\r\n      <Button onClick=\"orders.refetch()\">Query #of total orders</Button>\r\n      <Text when=\"{orders.inProgress}\">Calculating...</Text>\r\n      <H2 when=\"{!orders.inProgress}\">Total Orders: {orders.value}</H2>\r\n    </App>\r\n  `}\r\n  height={140}\r\n/>\r\n\r\n### Binding Component Properties to DataSource\r\n\r\nWhen you bind a `DataSource` component instance to a property, XMLUI starts the data fetch and changes the component property as soon as the retrieval has been completed.\r\n\r\nThe following sample demonstrates this scenario:\r\n\r\n```xmlui copy /orders.value.title/ /orders.value.author/\r\n<App>\r\n  <DataSource id='orders' url='/api/title-info' />\r\n  <Card title=\"{orders.value.title}\" subtitle=\"{orders.value.author}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Binding component properties to DataSource\"\r\n  api={{\r\n    initialize: `\r\n      $state.click = 0;\r\n    `,\r\n    operations: {\r\n      'get-titles': {\r\n        method: 'get',\r\n        url: '/api/title-info',\r\n        handler: `\r\n          return {author: \"Douglas Adams\", title: \"Hichhiker's Guide to the Galaxy\"};\r\n        `,\r\n      },\r\n    }\r\n  }}\r\n  app={`\r\n    <App>\r\n      <DataSource id='orders' url='/api/title-info' />\r\n      <Card title=\"{orders.value.title}\" subtitle=\"{orders.value.author}\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Adding Header information\r\n\r\nSome API endpoints may ask for a particular header. You can send it with the request using the `headers` property of `DataSource`.\r\n\r\nIn the following example, the backend requires a header named `x-api-key` with the value of `1111` to accept the request.\r\n\r\n```xmlui copy /headers=\"{{ 'x-api-key': '1111' }}/\r\n<App>\r\n  <DataSource id='orders' url='/api/title-info-header' headers=\"{{ 'x-api-key': '1111' }}\" />\r\n  <Card title=\"{orders.value.title}\" subtitle=\"{orders.value.author}\" />\r\n</App>\r\n```\r\n\r\nPop out this example in the playground and check what happens when you change or remove the `headers` property.\r\n\r\n<Playground\r\n  name=\"Example: Using Headers\"\r\n  api={{\r\n    initialize: `\r\n      $state.click = 0;\r\n    `,\r\n    operations: {\r\n      'get-title-with-header': {\r\n        method: 'get',\r\n        url: '/api/title-info-header',\r\n        handler: `\r\n        const token = $requestHeaders['x-api-key'];\r\n        if (token === \"1111\") {\r\n          return {author: \"Cixin Liu\", title: \"The Three-Body Problem\"};\r\n        }\r\n        throw Errors.HttpError(400, { message: \"No valid API key provided in header!\" });\r\n        `,\r\n      },\r\n    }\r\n  }}\r\n  app={`\r\n    <App>\r\n      <DataSource id='orders' url='/api/title-info-header' headers=\"{{ 'x-api-key': '1111' }}\" />\r\n      <Card title=\"{orders.value.title}\" subtitle=\"{orders.value.author}\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Selecting the Result [#select-result]\r\n\r\nSometimes, the response of a data fetch operation contains extra information that we do not consider part of the data. With the `resultSelector` property of a DataSource, you can declare the segment of the response to be taken into account as the actual data.\r\n\r\nFor example, let's assume we have this response:\r\n\r\n```json\r\n{\r\n  \"info\": [\r\n    {\"name\": \"New York\", \"population\": 8336817},\r\n    {\"name\": \"Los Angeles\", \"population\": 3979576},\r\n    {\"name\": \"Chicago\", \"population\": 2693976},\r\n    {\"name\": \"Houston\", \"population\": 2320268},\r\n    {\"name\": \"Phoenix\", \"population\": 1680992},\r\n  ],\r\n  \"meta\": {\r\n    \"total\": 10,\r\n    \"page\": 1,\r\n    \"per_page\": 10\r\n  }\r\n}\r\n```\r\n\r\nThe actual data is in the \"info\" property; \"meta\" is additional, and we do not want to display it. We can tighten the response to the actual data with `resultSelector`:\r\n\r\n```xmlui copy /resultSelector=\"info\"/\r\n<App>\r\n  <DataSource id='cities' url='/api/cities' resultSelector=\"info\" />\r\n  <VStack>\r\n    <H3>Cities</H3>\r\n    <Table data=\"{cities}\">\r\n      <Column header=\"Name\" bindTo=\"name\" />\r\n      <Column header=\"Population\" bindTo=\"population\" />\r\n    </Table>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Using resultSelector\"\r\n  api={{\r\n    initialize: `\r\n      $state.cities = {\r\n        \"info\": [\r\n          {\"name\": \"New York\", \"population\": 8336817},\r\n          {\"name\": \"Los Angeles\", \"population\": 3979576},\r\n          {\"name\": \"Chicago\", \"population\": 2693976},\r\n          {\"name\": \"Houston\", \"population\": 2320268},\r\n          {\"name\": \"Phoenix\", \"population\": 1680992},\r\n        ],\r\n        \"meta\": {\r\n          \"total\": 10,\r\n          \"page\": 1,\r\n          \"per_page\": 10\r\n        }\r\n      };\r\n    `,\r\n    operations: {\r\n      'get-cities': {\r\n        method: 'get',\r\n        url: '/api/cities',\r\n        handler: `\r\n          return $state.cities;\r\n        `,\r\n      },\r\n    }\r\n  }}\r\n  app={`\r\n    <App>\r\n      <DataSource id='cities' url='/api/cities' resultSelector=\"info\" />\r\n      <VStack>\r\n        <H3>Cities</H3>\r\n        <Table data=\"{cities}\">\r\n          <Column header=\"Name\" bindTo=\"name\" />\r\n          <Column header=\"Population\" bindTo=\"population\" />\r\n        </Table>\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Transforming the Result in the Displaying Component [#transform-data-1]\r\n\r\nAn intuitive option is to transform the data retrieved from a `DataSource` in the component displaying the data.\r\n\r\nThe following example orders a list of friends' data by descending age:\r\n\r\n```xmlui copy /friends.value.toSorted((a, b) => b.age - a.age)/\r\n<App>\r\n  <DataSource id='friends' url='/api/friends' />\r\n  <VStack>\r\n    <H3>My Friens:</H3>\r\n    <Items data=\"{friends.value.toSorted((a, b) => b.age - a.age)}\">\r\n      <H4>{$item.age}: {$item.name}</H4>\r\n    </Items>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Transforming data in the displaying component\"\r\n  api={{\r\n    initialize: `\r\n      $state.friends = [\r\n        { name: \"Eve\", age: 45 },\r\n        { name: \"Charlie\", age: 35 },\r\n        { name: \"Alice\", age: 25 },\r\n        { name: \"Bob\", age: 30 },\r\n        { name: \"Frank\", age: 50 },\r\n        { name: \"David\", age: 40 },\r\n      ]\r\n    `,\r\n    operations: {\r\n      'get-friends': {\r\n        method: 'get',\r\n        url: '/api/friends',\r\n        handler: `\r\n          return $state.friends;\r\n        `,\r\n      },\r\n    }\r\n  }}\r\n  app={`\r\n    <App>\r\n      <DataSource id='friends' url='/api/friends' />\r\n      <VStack>\r\n        <H3>My Friens:</H3>\r\n        <Items data=\"{friends.value.toSorted((a, b) => b.age - a.age)}\">\r\n          <H4>{$item.age}: {$item.name}</H4>\r\n        </Items>\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  Though this technique is seducing, you must apply the transform in every component that intends to display the data. Should you change that transform (let's say from descending to ascending order), you should maintain each occurrence.\r\n</Callout>\r\n\r\n### Transforming the Result with `transformResult` [#transform-data-2]\r\n\r\n`DataSource` has a `transformResult` property you can use to define a data transforms operation.\r\n\r\nLet's assume we have this hotel review information retrieved from the backend:\r\n\r\n```json\r\n[\r\n  { \"hotel\": \"Golden Beach Hotel\", \"reviews\": [5, 3, 3, 4] },\r\n  { \"hotel\": \"Sunset Hotel\", \"reviews\": [2, 3, 3, 4, 4, 4, 5] },\r\n  { \"hotel\": \"Blue Lagoon Hotel\", \"reviews\": [5, 5, 5, 5] },\r\n  { \"hotel\": \"Green Garden Hotel\", \"reviews\": [1, 2, 3, 2, 2] }\r\n]\r\n```\r\n\r\nWe are interested in the average value of reviews. With `transformResult`, we can transform the entire resultset and add a new field to each hotel row with the average review points:\r\n\r\n```xmlui copy {5}\r\n<App>\r\n  <DataSource \r\n    id='reviews' \r\n    url='/api/reviews' \r\n    transformResult=\"{(data) => data.map(d => ({...d, avg: avg(d.reviews, 2)}))}\" />\r\n  <VStack>\r\n  <H3>Reviews</H3>\r\n  <Table data=\"{reviews}\">\r\n    <Column header=\"Hotel\" bindTo=\"hotel\" />\r\n    <Column header=\"#of Reviews\" bindTo=\"reviews.length\" />\r\n    <Column header=\"Avg Review\" bindTo=\"avg\" />\r\n  </Table>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Using transformResult\"\r\n  api={{\r\n    initialize: `\r\n      $state.reviews = [\r\n        { \"hotel\": \"Golden Beach Hotel\", reviews: [5, 3, 3, 4] },\r\n        { \"hotel\": \"Sunset Hotel\", reviews: [2, 3, 3, 4, 4, 4, 5] },\r\n        { \"hotel\": \"Blue Lagoon Hotel\", reviews: [5, 5, 5, 5] },\r\n        { \"hotel\": \"Green Garden Hotel\", reviews: [1, 2, 3, 2, 2] }\r\n      ];\r\n    `,\r\n    operations: {\r\n      'get-cities': {\r\n        method: 'get',\r\n        url: '/api/reviews',\r\n        handler: `\r\n          return $state.reviews;\r\n        `,\r\n      },\r\n    }\r\n  }}\r\n  app={`\r\n    <App>\r\n      <DataSource \r\n        id='reviews' url='/api/reviews' \r\n        transformResult=\"{(data) => data.map(d => ({...d, avg: avg(d.reviews, 2)}))}\" />\r\n      <VStack>\r\n      <H3>Reviews</H3>\r\n      <Table data=\"{reviews}\">\r\n        <Column header=\"Hotel\" bindTo=\"hotel\" />\r\n        <Column header=\"#of Reviews\" bindTo=\"reviews.length\" />\r\n        <Column header=\"Avg Review\" bindTo=\"avg\" />\r\n      </Table>\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Transforming the Result via a Helper Variable [#transform-data-3]\r\n\r\nYou can introduce a new (declarative) variable and define its value as a transformation of the DataSource value. Let's assume we have reviews about cafes and want to display them in descending order, the cafe with the best review at the top.\r\n\r\nLet's declare the `sortedReviews` variable in code-behind:\r\n\r\n```js\r\nvar sortedReviews = reviews.value\r\n  .map(c => ({...c, avg: avg(c.reviews, 2)}))\r\n  .toSorted((a, b) => b.avg - a.avg);\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  XMLUI does not allow you to invoke a JavaScript array's `sort()` function, as that sorts the data in place. Use the `toSorted()` function with the same signature, which creates a new array with sorted data.\r\n</Callout>\r\n\r\nDue to XMLUI's reactive nature, `sortedReviews` is evaluated every time the data is fetched (as `reviews.value` changes). In the `Table` component's `data` property, you refer to the `sortedReviews` variable to ensure the transformed value is displayed.\r\n\r\n```xmlui copy /sortedReviews/\r\n<App>\r\n  <DataSource \r\n    id='reviews' url='/api/cafe-reviews'  />\r\n  <VStack>\r\n  <H3>Reviews</H3>\r\n  <Table data=\"{sortedReviews}\">\r\n    <Column header=\"Cafe\" bindTo=\"cafe\" />\r\n    <Column header=\"#of Reviews\" bindTo=\"reviews.length\" />\r\n    <Column header=\"Avg Review\" bindTo=\"avg\" />\r\n  </Table>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Transforming data via a helper variable\"\r\n  api={{\r\n    initialize: `\r\n      $state.cafes = [\r\n        { \"cafe\": \"Golden Beach Hotel\", reviews: [5, 3, 3, 4] },\r\n        { \"cafe\": \"Sunset Hotel\", reviews: [2, 3, 3, 4, 4, 4, 5] },\r\n        { \"cafe\": \"Blue Lagoon Hotel\", reviews: [5, 5, 5, 5] },\r\n        { \"cafe\": \"Green Garden Hotel\", reviews: [1, 2, 3, 2, 2] }\r\n      ];\r\n    `,\r\n    operations: {\r\n      'get-cities': {\r\n        method: 'get',\r\n        url: '/api/cafe-reviews',\r\n        handler: `\r\n          return $state.cafes;\r\n        `,\r\n      },\r\n    }\r\n  }}\r\n  app={`\r\n    <App>\r\n      <script>\r\n        var sortedReviews = reviews.value\r\n          .map(c => ({...c, avg: avg(c.reviews, 2)}))\r\n          .toSorted((a, b) => b.avg - a.avg);\r\n      </script>\r\n      <DataSource \r\n        id='reviews' url='/api/cafe-reviews'  />\r\n      <VStack>\r\n      <H3>Reviews</H3>\r\n      <Table data=\"{sortedReviews}\">\r\n        <Column header=\"Cafe\" bindTo=\"cafe\" />\r\n        <Column header=\"#of Reviews\" bindTo=\"reviews.length\" />\r\n        <Column header=\"Avg Review\" bindTo=\"avg\" />\r\n      </Table>\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Persisting Data [#persisting-data]\r\n\r\nIn contrast to fetching data, where the framework can be smart about when to initiate the data fetch operation, persisting data requires an explicit user (or system) trigger to invoke a related API endpoint.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  XMLUI has an **`APICall` component** that manages API endpoint invocations that persist data (or cause other state changes at the backend).\r\n</Callout>\r\n\r\nAn `APICall` component requires a URL and an operation method (such as POST, PUT, DELETE, etc.) to do its job. It must also be configured with other details to convey the request information between the UI and the backend.\r\n\r\nBesides managing the request-response protocol, `APICall` provides a few UI services:\r\n\r\n- It can ask you for confirmation and cancel the operation on refusing it.\r\n- You can check if an operation is in progress.\r\n- It may display toast messages (if you ask so) when the operation is completed.\r\n- You can define a toast message to show while the operation is in progress.\r\n- Other components may ask the APICall whether it is in progress.\r\n- You can define event handlers for handling successful/failed operations.\r\n\r\n### Using APICall to Persist Data\r\n\r\nThe following sample demonstrates how to use `APICall` to send a request with a particular body. The sample allows you to add a new fruit to a list; you send the new fruit's name in the request body.\r\n\r\n```xmlui copy  {6-12}\r\n<App>\r\n  <DataSource id='myFruits' url='/api/my-fruits' />\r\n  <HStack>\r\n    <TextBox id=\"newFruit\" placeholder=\"Enter a new fruit\" width=\"50%\" />\r\n    <Button enabled=\"{newFruit.value.trim()}\" label=\"Add\">\r\n      <event name=\"click\">\r\n        <APICall \r\n          method=\"post\" \r\n          url=\"/api/my-fruits\" \r\n          body=\"{newFruit.value}\" \r\n          onSuccess=\"newFruit.setValue('')\" />\r\n      </event> \r\n    </Button>\r\n  </HStack>\r\n  <HStack wrapContent=\"true\">\r\n    <Items data=\"{myFruits}\">\r\n      <Badge value=\"{$item.name}\"/>\r\n    </Items>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\nObserve the `onSuccess` event handler: the code deletes the textbox after completing the API call.\r\n\r\n<Playground\r\n  name=\"Example: Persisting data\"\r\n  height={240}\r\n  api={{\r\n    initialize: `\r\n      $state.fruits = [{id: 1, name: 'apple'}, {id: 2, name: 'banana'}, {id: 3, name: 'cherry'}];\r\n    `,\r\n    operations: {\r\n      'get-fruits-with-persist': {\r\n        method: 'get',\r\n        url: '/api/my-fruits',\r\n        handler: `\r\n          return $state.fruits;\r\n        `,\r\n      },\r\n      'post-fruit': {\r\n        method: 'post',\r\n        url: '/api/my-fruits',\r\n        handler: `\r\n          $state.fruits.push({id: $state.fruits.length + 1, name: $requestBody});\r\n        `,\r\n      },\r\n    }\r\n  }}\r\n  app={`\r\n    <App>\r\n      <DataSource id='myFruits' url='/api/my-fruits' />\r\n      <HStack>\r\n        <TextBox id=\"newFruit\" placeholder=\"Enter a new fruit\" width=\"50%\" />\r\n        <Button enabled=\"{newFruit.value.trim()}\" label=\"Add\">\r\n          <event name=\"click\">\r\n            <APICall \r\n              method=\"post\" \r\n              url=\"/api/my-fruits\" \r\n              body=\"{newFruit.value}\" \r\n              onSuccess=\"newFruit.setValue('')\" />\r\n          </event> \r\n        </Button>\r\n      </HStack>\r\n      <HStack wrapContent=\"true\">\r\n        <Items data=\"{myFruits}\">\r\n          <Badge value=\"{$item.name}\"/>\r\n        </Items>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Confirming and Notifications\r\n\r\n`APICall` allows you to request user confirmation before issuing a particular call. The operation continues if the answer is affirmative; otherwise, it will not be sent. You can also display a notification message when the operation is completed.\r\n\r\nThe following example demonstrates these features:\r\n\r\n```xmlui copy {10, 12} /confirmTitle/ /confirmMessage/ /completedNotificationMessage/\r\n<App>\r\n  <List data=\"/api/components\">\r\n    <HStack padding=\"$padding-tight\" verticalAlignment=\"center\">\r\n      <H3 width=\"20%\">{$item.name}</H3>\r\n      <Button label=\"Delete\" size=\"xs\">\r\n        <event name=\"click\">\r\n          <APICall \r\n            url=\"/api/components/{$item.id}\" \r\n            method=\"delete\" \r\n            confirmTitle=\"Delete a Component\"\r\n            confirmMessage=\"Are you sure you want to remove '{$item.name}' from your list?\" \r\n            completedNotificationMessage=\"{$item.name} component deleted.\" />\r\n        </event>\r\n      </Button>\r\n    </HStack>        \r\n  </List>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Confirmation\"\r\n  height={320}\r\n  api={{\r\n    initialize: `\r\n      $state.components = [\r\n        {id: 1, name: 'Button'}, \r\n        {id: 2, name: 'Checkbox'}, \r\n        {id: 3, name: 'Switch'},\r\n        {id: 4, name: 'TextBox'},\r\n        {id: 5, name: 'RadioButton'},\r\n        {id: 6, name: 'Slider'},\r\n      ];\r\n    `,\r\n    operations: {\r\n      'get-components': {\r\n        method: 'get',\r\n        url: '/api/components',\r\n        handler: `\r\n          return $state.components;\r\n        `,\r\n      },\r\n      'post-fruit': {\r\n        method: 'delete',\r\n        url: '/api/components/:id',\r\n        pathParamTypes: {\r\n          id: \"integer\",\r\n        },\r\n        handler: `\r\n          $state.components = $state.components.filter(c => c.id !== $pathParams.id);\r\n        `,\r\n      },\r\n    }\r\n  }}\r\n  app={`\r\n    <App>\r\n      <List data=\"/api/components\">\r\n        <HStack padding=\"$padding-tight\" verticalAlignment=\"center\">\r\n          <H3 width=\"20%\">{$item.name}</H3>\r\n          <Button label=\"Delete\" size=\"xs\">\r\n            <event name=\"click\">\r\n              <APICall \r\n                url=\"/api/components/{$item.id}\" \r\n                method=\"delete\" \r\n                confirmTitle=\"Delete a Component\"\r\n                confirmMessage=\"Are you sure you want to remove '{$item.name}' from your list?\" \r\n                completedNotificationMessage=\"{$item.name} component deleted.\" />\r\n            </event>\r\n          </Button>\r\n        </HStack>        \r\n      </List>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Using APICall Imperatively\r\n\r\nBesides using `APICall` in event handlers, you can use this component imperatively through its component identifier. This section shows you a few scenarios of this imperative usage.\r\n\r\n### Fetching Data with APICall\r\n\r\nThough you primarily use `DataSource` to fetch data, you can also use `APICall`. The following example demonstrates how to do this.\r\n\r\n```xmlui copy {2}\r\n<App var.launchpadData=\"{[]}\">\r\n  <APICall id=\"launchpads\" url=\"https://api.spacexdata.com/v4/launchpads\" method=\"get\" />\r\n  <Button \r\n    id=\"fetchButton\"\r\n    enabled=\"{!fetchButton.clickInProgress}\" \r\n    onClick=\"launchpadData = launchpads.execute()\">\r\n    Fetch Launchpads\r\n  </Button>\r\n  <List data=\"{launchpadData}\">\r\n    <Card subtitle=\"{$item.full_name}\" />\r\n  </List>\r\n</App>  \r\n```\r\n\r\nThis app displays the data stored in the `launchpadData` variable, initialized to an empty array. When you click the button, it triggers the fetch (get) operation defined by the `APICall` invoking the `execute()` method through the `APICall`'s identifier, `launchpads`. The execute method retrieves the fetched data and displays it by assigning it to `launchpadData`.\r\n\r\n<Playground\r\n  name=\"Example: Fetching data with APICall\"\r\n  app={`\r\n    <App var.launchpadData=\"{[]}\">\r\n      <APICall id=\"launchpads\" url=\"https://api.spacexdata.com/v4/launchpads\" method=\"get\" />\r\n      <Button \r\n        id=\"fetchButton\"\r\n        enabled=\"{!fetchButton.clickInProgress}\" \r\n        onClick=\"launchpadData = launchpads.execute()\">\r\n        Fetch Launchpads\r\n      </Button>\r\n      <List data=\"{launchpadData}\">\r\n        <Card subtitle=\"{$item.full_name}\" />\r\n      </List>\r\n    </App>  \r\n  `}\r\n  height={300}\r\n/>\r\n\r\n### Passing a Parameter to APICall\r\n\r\nYou can pass parameters to an `APICall` component and use that parameter to prepare the request. The following sample passes an identifier (of a rocket) in the `execute` methods. The `APICall` accesses that through its `$param` context value:\r\n\r\n```xmlui copy {3} /5e9d0d95eda69955f709d1eb/ /$param/\r\n<App \r\n  var.rocketData=\"\">\r\n  <APICall id=\"rocket\" url=\"https://api.spacexdata.com/v4/rockets/{$param}\" method=\"get\" />\r\n  <Button \r\n    id=\"fetchButton\"\r\n    enabled=\"{!fetchButton.clickInProgress}\" \r\n    onClick=\"rocketData = rocket.execute('5e9d0d95eda69955f709d1eb')\">\r\n    Fetch Falcon 1\r\n  </Button>\r\n  <Card when=\"{rocketData}\" title=\"{rocketData.name}\" subtitle=\"{rocketData.description}\" />\r\n</App>  \r\n```\r\n\r\n<Playground\r\n  name=\"Example: Fetching data with APICall\"\r\n  app={`\r\n    <App \r\n      var.rocketData=\"\">\r\n      <APICall id=\"rocket\" url=\"https://api.spacexdata.com/v4/rockets/{$param}\" method=\"get\" />\r\n      <Button \r\n        id=\"fetchButton\"\r\n        enabled=\"{!fetchButton.clickInProgress}\" \r\n        onClick=\"rocketData = rocket.execute('5e9d0d95eda69955f709d1eb')\">\r\n        Fetch Falcon 1\r\n      </Button>\r\n      <Card when=\"{rocketData}\" title=\"{rocketData.name}\" subtitle=\"{rocketData.description}\" />\r\n    </App>  \r\n  `}\r\n  height={300}\r\n/>\r\n\r\n### Passing Multiple Parameters\r\n\r\nAs the following sample demonstrates, you can pass multiple parameters to `APICall` when invoking the execute method.\r\n\r\n```xmlui copy {4-8} /$params[0]/ /$params[1]/ /execute/\r\n<App>\r\n  <DataSource id='myNames' url='/api/my-names' />\r\n  <HStack>\r\n    <APICall \r\n      id=\"addNameApi\"\r\n      url=\"/api/my-names/{$params[0]}\"\r\n      body=\"{$params[1]}\"\r\n      method=\"post\" />\r\n    <TextBox id=\"newName\" placeholder=\"Enter a new name\" width=\"50%\" />\r\n    <Button \r\n      enabled=\"{newName.value.trim()}\" \r\n      label=\"Add\"\r\n      onClick=\"\r\n        addNameApi.execute(myNames.value.length + 1, newName.value.trim());\r\n        newName.setValue('');\r\n      \"/>\r\n  </HStack>\r\n  <HStack wrapContent=\"true\">\r\n    <Items data=\"{myNames}\">\r\n      <Badge value=\"{$item.name}\"/>\r\n    </Items>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\nWhen the `APICall` receives multiple parameters, you can access only the first parameter with the `$param` context value. Other parameters can be accessed with indexing through the `$params` value, such as `$params[1]` for the second, `$params[2]` for the third (and so on) parameters. `$params[0]` is the same as `$param`.\r\n\r\n<Playground\r\n  name=\"Example: Passing multiple parameters to APICall\"\r\n  height={240}\r\n  api={{\r\n    initialize: `\r\n      $state.names = [{id: 1, name: 'Albert'}, {id: 2, name: 'Benny'}, {id: 3, name: 'Clotilde'}];\r\n    `,\r\n    operations: {\r\n      'get-names-with-persist': {\r\n        method: 'get',\r\n        url: '/api/my-names',\r\n        handler: `\r\n          return $state.names;\r\n        `,\r\n      },\r\n      'post-fruit': {\r\n        method: 'post',\r\n        url: '/api/my-names/:id',\r\n        pathParamTypes: {\r\n          id: \"integer\",\r\n        },\r\n        handler: `\r\n          $state.names.push({id: $pathParams.id, name: $requestBody});\r\n        `,\r\n      },\r\n    }\r\n  }}\r\n  app={`\r\n    <App>\r\n      <DataSource id='myNames' url='/api/my-names' />\r\n      <HStack>\r\n        <APICall \r\n          id=\"addNameApi\"\r\n          url=\"/api/my-names/{$params[0]}\"\r\n          body=\"{$params[1]}\"\r\n          method=\"post\" />\r\n        <TextBox id=\"newName\" placeholder=\"Enter a new name\" width=\"50%\" />\r\n        <Button \r\n          enabled=\"{newName.value.trim()}\" \r\n          label=\"Add\"\r\n          onClick=\"\r\n            addNameApi.execute(myNames.value.length + 1, newName.value.trim());\r\n            newName.setValue('');\r\n          \"/>\r\n      </HStack>\r\n      <HStack wrapContent=\"true\">\r\n        <Items data=\"{myNames}\">\r\n          <Badge value=\"{$item.name}\"/>\r\n        </Items>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Data-Aware Components\r\n\r\nXMLUI comes with several data-aware components. In this section, you will learn about them.\r\n\r\n### Items \r\n\r\nThe `Items` component maps sequential data into component instances, representing each data item as a particular component.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nLearn more about this component in the <SmartLink href={COMPONENT_ITEMS}>`Items`</SmartLink> reference documentation.\r\n</Callout>\r\n\r\nThe following sample uses the `data` property to define the source of backend data displayed in the component:\r\n\r\n```xmlui copy {3-5}\r\n<App>\r\n  <Items data=\"https://api.spacexdata.com/v3/rockets\">\r\n    <Image height=\"80px\" width=\"110px\" fit=\"cover\" src=\"{$item.flickr_images[0]}\"/>\r\n  </Items>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Items with data binding\"\r\n  height={300}\r\n  app={`\r\n  <App>\r\n    <Items data=\"https://api.spacexdata.com/v3/rockets\">\r\n      <Image height=\"80px\" width=\"110px\" fit=\"cover\" src=\"{$item.flickr_images[0]}\"/>\r\n    </Items>\r\n  </App>\r\n  `}\r\n/>\r\n\r\nThe `Items` component does not use virtualization; it maps each data item into a component.\r\nThus, passing many items to a component instance will use many resources and slow down your app.\r\nIf you plan to work with many items (more than a few dozen), use the [`List`](./List) and [`Table`](./Table) components instead.\r\n\r\nItems also can be used when you provide a list of options for components such as `Select`:\r\n\r\n```xmlui copy {3-5}\r\n<App>\r\n  <Select id=\"landpads\">\r\n    <Items data=\"https://api.spacexdata.com/v4/landpads\">\r\n      <Option label=\"{$item.full_name}\" value=\"{$item.name}\" />\r\n    </Items>\r\n  </Select>\r\n  <Text>Selected ID: {landpads.value ?? '(none)'}</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Items with data binding\"\r\n  height={300}\r\n  app={`\r\n  <App>\r\n    <Select id=\"landpads\">\r\n      <Items data=\"https://api.spacexdata.com/v4/landpads\">\r\n        <Option label=\"{$item.full_name}\" value=\"{$item.name}\" />\r\n      </Items>\r\n    </Select>\r\n    <Text>Selected ID: {landpads.value ?? '(none)'}</Text>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n\r\n### List\r\n\r\nThe `List` component is a robust layout container that renders associated data items as a list of components. `List` is virtualized; it renders only items visible in the viewport.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nLearn more about this component in the <SmartLink href={COMPONENT_LIST}>`List`</SmartLink> reference documentation.\r\n</Callout>\r\n\r\nThe following sample demonstrates using `List`:\r\n\r\n```xmlui copy\r\n<App>\r\n  <List data=\"https://api.spacexdata.com/v4/ships\">\r\n    <HStack padding=\"$padding-tight\">\r\n      <Text variant=\"strong\" width=\"30%\">{$item.name}</Text>\r\n      <Text width=\"15%\">Built: {$item.year_built ?? '(unknown)'}</Text>\r\n      <Image when=\"{$item.image}\" height=\"80px\" width=\"110px\" fit=\"cover\" src=\"{$item.image}\"/>\r\n      <Text when=\"{!$item.image}\" width=\"*\">No image available</Text>\r\n    </HStack>\r\n  </List>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: List with data binding\"\r\n  app={`\r\n    <App>\r\n      <List data=\"https://api.spacexdata.com/v4/ships\">\r\n        <HStack padding=\"$padding-tight\">\r\n          <Text variant=\"strong\" width=\"30%\">{$item.name}</Text>\r\n          <Text width=\"15%\">Built: {$item.year_built ?? '(unknown)'}</Text>\r\n          <Image when=\"{$item.image}\" height=\"80px\" width=\"110px\" fit=\"cover\" src=\"{$item.image}\"/>\r\n          <Text when=\"{!$item.image}\" width=\"*\">No image available</Text>\r\n        </HStack>\r\n      </List>\r\n    </App>  \r\n  `}\r\n  height={300}\r\n/>\r\n\r\nYou can order the items on the list with its `orderBy` property, which names a field and a sorting direction. Observe how the following sample uses a `DataSource` and maps the result into a new data array to create the `launchCount` field:\r\n\r\n```xmlui copy /orderBy=\"{{ field: 'launchCount', direction: 'desc' }}\"/\r\n<App>\r\n  <DataSource id=\"shipsData\" url=\"https://api.spacexdata.com/v4/ships\" />\r\n  <List \r\n    data=\"{shipsData.value.map(s => ({...s, launchCount: s.launches.length ?? 0}))}\"\r\n    orderBy=\"{{ field: 'launchCount', direction: 'desc' }}\">\r\n    <HStack padding=\"$padding-tight\">\r\n      <Text variant=\"strong\" width=\"30%\">{$item.name}</Text>\r\n      <Text width=\"15%\">Launches: {$item.launchCount}</Text>\r\n      <Image when=\"{$item.image}\" height=\"80px\" width=\"110px\" fit=\"cover\" src=\"{$item.image}\"/>\r\n      <Text when=\"{!$item.image}\" width=\"*\">No image available</Text>\r\n    </HStack>\r\n  </List>\r\n</App>  \r\n```\r\n\r\nAs you expect, the list displays ships in descending order by the number of their launches.\r\n\r\n<Playground\r\n  name=\"Example: List with data binding\"\r\n  app={`\r\n    <App>\r\n      <DataSource id=\"shipsData\" url=\"https://api.spacexdata.com/v4/ships\" />\r\n      <List \r\n        data=\"{shipsData.value.map(s => ({...s, launchCount: s.launches.length ?? 0}))}\"\r\n        orderBy=\"{{ field: 'launchCount', direction: 'desc' }}\">\r\n        <HStack padding=\"$padding-tight\">\r\n          <Text variant=\"strong\" width=\"30%\">{$item.name}</Text>\r\n          <Text width=\"15%\">Launches: {$item.launchCount}</Text>\r\n          <Image when=\"{$item.image}\" height=\"80px\" width=\"110px\" fit=\"cover\" src=\"{$item.image}\"/>\r\n          <Text when=\"{!$item.image}\" width=\"*\">No image available</Text>\r\n        </HStack>\r\n      </List>\r\n    </App>  \r\n  `}\r\n  height={300}\r\n/>\r\n\r\nAs the following sample demonstrates, a `List` can group its items according to a particular field. You can optionally define a section header and footer for the list.\r\n\r\n```xmlui copy {10-12} /groupBy=\"type\"/\r\n<App>\r\n  <List data=\"https://api.spacexdata.com/v4/ships\"\r\n    groupBy=\"type\">\r\n    <HStack padding=\"$padding-tight\">\r\n      <Text variant=\"strong\" width=\"30%\">{$item.name}</Text>\r\n      <Text width=\"15%\">Type: {$item.type}</Text>\r\n      <Image when=\"{$item.image}\" height=\"80px\" width=\"110px\" fit=\"cover\" src=\"{$item.image}\"/>\r\n      <Text when=\"{!$item.image}\" width=\"*\">No image available</Text>\r\n    </HStack>\r\n    <property name=\"groupHeaderTemplate\">\r\n      <Card title=\"{$group.key}\" />\r\n    </property>\r\n  </List>\r\n</App>  \r\n```\r\n\r\n<Playground\r\n  name=\"Example: List with data grouping\"\r\n  app={`\r\n    <App>\r\n      <List data=\"https://api.spacexdata.com/v4/ships\"\r\n        groupBy=\"type\">\r\n        <HStack padding=\"$padding-tight\">\r\n          <Text variant=\"strong\" width=\"30%\">{$item.name}</Text>\r\n          <Text width=\"15%\">Type: {$item.type}</Text>\r\n          <Image when=\"{$item.image}\" height=\"80px\" width=\"110px\" fit=\"cover\" src=\"{$item.image}\"/>\r\n          <Text when=\"{!$item.image}\" width=\"*\">No image available</Text>\r\n        </HStack>\r\n        <property name=\"groupHeaderTemplate\">\r\n          <Card title=\"{$group.key}\" />\r\n        </property>\r\n      </List>\r\n    </App>  \r\n  `}\r\n  height={300}\r\n/>\r\n\r\n### Table\r\n\r\n`Table` is a component that displays cells organized into rows and columns. The `Table` component is virtualized so it only renders visible cells.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nLearn more about this component in the <SmartLink href={COMPONENT_TABLE}>`Table`</SmartLink> reference documentation.\r\n</Callout>\r\n\r\nThe following sample demonstrates using `Table`. You can use `Column` components to specify table column templates.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Table data=\"https://api.spacexdata.com/v4/rockets\">\r\n    <Column header=\"Image\" width=\"100px\">\r\n      <Image height=\"80px\" width=\"110px\" fit=\"cover\" src=\"{$item.flickr_images[0]}\"/>\r\n    </Column>\r\n    <Column header=\"Name\" bindTo=\"name\" width=\"110px\">\r\n      <Text variant=\"strong\">{$item.name}</Text>\r\n    </Column>\r\n    <Column header=\"Description\" bindTo=\"description\" width=\"*\">\r\n      <Text maxLines=\"5\">{$item.description}</Text>\r\n    </Column>\r\n  </Table>\r\n</App>  \r\n```\r\n\r\n<Playground\r\n  name=\"Example: Table\"\r\n  app={`\r\n    <App>\r\n      <Table data=\"https://api.spacexdata.com/v4/rockets\">\r\n        <Column header=\"Image\" width=\"100px\">\r\n          <Image height=\"80px\" width=\"110px\" fit=\"cover\" src=\"{$item.flickr_images[0]}\"/>\r\n        </Column>\r\n        <Column header=\"Name\" bindTo=\"name\" width=\"110px\">\r\n          <Text variant=\"strong\">{$item.name}</Text>\r\n        </Column>\r\n        <Column header=\"Description\" bindTo=\"description\" width=\"*\">\r\n          <Text maxLines=\"5\">{$item.description}</Text>\r\n        </Column>\r\n      </Table>\r\n    </App>  \r\n  `}\r\n  height={300}\r\n/>\r\n",
  "create-apps/dialogs":"import { Callout } from 'nextra/components'\r\nimport { COMPONENT_MODALDIALOG } from \"../../meta/pages\"\r\n\r\n# Using Modal Dialogs\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Modal dialogs are an inherent part of XMLUI. Dialogs can be invoked both **declaratively** in markup, or **imperatively** from code.\r\n</Callout>\r\n\r\n<Callout type=\"warning\" emoji=\"💡\">\r\nWhen you try the examples in this section, pop them up into a separate window and test them there. If you do not, the modal dialogs will be displayed on the documentation page, perplexing your experience.\r\n</Callout>\r\n\r\n## Declarative Approach\r\n\r\nThe following example shows a simple dialog with details about a user. This sample demonstrates the declarative mode of displaying the dialog.\r\n\r\n```xmlui copy /when=\"{isDialogShown}\"/ /onClose=\"isDialogShown = false\"/ /onClick=\"isDialogShown = true\"/\r\n<App>\r\n  <variable name=\"isDialogShown\" value=\"{false}\"/>\r\n  <ModalDialog\r\n    when=\"{isDialogShown}\"\r\n    onClose=\"isDialogShown = false\">\r\n    Leslie is always number one to the coffee machine.\r\n    He has a competitive personality but gets along with a lot people.\r\n  </ModalDialog>\r\n  <NavPanel>\r\n    <NavLink label=\"Users\" to=\"/\" icon=\"user\" />\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">\r\n      <Card\r\n        avatarUrl=\"https://i.pravatar.cc/100\"\r\n        title=\"Leslie Peters\"\r\n        subtitle=\"Executive Manager\">\r\n        Leslie is pretty smart when it comes to business.\r\n        <Button label=\"Details\" onClick=\"isDialogShown = true\" />\r\n      </Card>\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\nThe declarative nature of displaying the dialog is in the behavior that the `when` attribute of `ModalDialog` is bound to the `isDialogShown` variable. By default, this variable is `false`. However, clicking the Details button sets it to `true`. When you trigger a closing action, the `onClose` event handler sets the variable to `false`.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nDo not forget to pop out the example below. To close an opened dialog, click anywhere outside it or on the close button of a dialog itself.\r\n</Callout>\r\n\r\n<Playground\r\n  name=\"Example: Declarative approach\"\r\n  app={`\r\n    <App>\r\n      <variable name=\"isDialogShown\" value=\"{false}\"/>\r\n      <ModalDialog\r\n        when=\"{isDialogShown}\"\r\n        onClose=\"isDialogShown = false\">\r\n        Leslie is always number one to the coffee machine.\r\n        He has a competitive personality but gets along with a lot people.\r\n      </ModalDialog>\r\n      <NavPanel>\r\n        <NavLink label=\"Users\" to=\"/\" icon=\"user\" />\r\n      </NavPanel>\r\n      <Pages>\r\n        <Page url=\"/\">\r\n          <Card\r\n            avatarUrl=\"https://i.pravatar.cc/100\"\r\n            title=\"Leslie Peters\"\r\n            subtitle=\"Executive Manager\">\r\n            Leslie is pretty smart when it comes to business.\r\n            <Button label=\"Details\" onClick=\"isDialogShown = true\" />\r\n          </Card>\r\n        </Page>\r\n      </Pages>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nThe declarative approach allows you to provide deep links to open modal dialogs. You can pass a query parameter with a flag indicating if the dialog is open and your declarative code can set the `when` property accordingly.\r\n\r\n## Imperative Approach\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can imperatively invoke the `open()` and `close()` exposed functions of a `ModalDialog` component instance via its ID.\r\n</Callout>\r\n\r\n```xmlui copy {3} /onClick=\"dialog.open()\"/ /onClick=\"dialog.close()\"/\r\n<App>\r\n  <ModalDialog\r\n    id=\"dialog\"\r\n    title=\"Leslie Peters\">\r\n    Leslie is always number one to the coffee machine.\r\n    He has a competitive personality but gets along with a lot people.\r\n    <Button label=\"Close\" onClick=\"dialog.close()\" />\r\n  </ModalDialog>\r\n  <NavPanel>\r\n    <NavLink label=\"Users\" to=\"/\" icon=\"user\" />\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">\r\n      <Card\r\n        avatarUrl=\"https://i.pravatar.cc/100\"\r\n        title=\"Leslie Peters\"\r\n        subtitle=\"Executive Manager\">\r\n        Leslie is pretty smart when it comes to business.\r\n        <Button label=\"Details\" onClick=\"dialog.open()\" />\r\n      </Card>\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Imperative approach\"\r\n  app={`\r\n  <App>\r\n    <ModalDialog\r\n      id=\"dialog\"\r\n      title=\"Leslie Peters\">\r\n      Leslie is always number one to the coffee machine.\r\n      He has a competitive personality but gets along with a lot people.\r\n      <Button label=\"Close\" onClick=\"dialog.close()\" />\r\n    </ModalDialog>\r\n    <NavPanel>\r\n      <NavLink label=\"Users\" to=\"/\" icon=\"user\" />\r\n    </NavPanel>\r\n    <Pages>\r\n      <Page url=\"/\">\r\n        <Card\r\n          avatarUrl=\"https://i.pravatar.cc/100\"\r\n          title=\"Leslie Peters\"\r\n          subtitle=\"Executive Manager\">\r\n          Leslie is pretty smart when it comes to business.\r\n          <Button label=\"Details\" onClick=\"dialog.open()\" />\r\n        </Card>\r\n      </Page>\r\n    </Pages>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Interoperability with Forms [#interoperability-with-forms]\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  When embedding a form in a dialog, the form's cancel and successful submit actions (unless you change this logic) automatically close the dialog hosting the form.\r\n</Callout>\r\n\r\n```xmlui copy {2-8} /onClick=\"dialog.open()\"/\r\n<App>\r\n  <ModalDialog id=\"dialog\">\r\n    <Form data=\"{{ name: 'Leslie', age: 32 }}\">\r\n      <FormItem bindTo=\"name\" label=\"User Name\" />\r\n      <FormItem bindTo=\"age\" label=\"Age\" type=\"integer\" zeroOrPositive=\"true\" />\r\n    </Form>\r\n  </ModalDialog>\r\n  <NavPanel>\r\n    <NavLink label=\"Users\" to=\"/\" icon=\"user\" />\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">\r\n      <Card\r\n        avatarUrl=\"https://i.pravatar.cc/100\"\r\n        title=\"Leslie Peters\"\r\n        subtitle=\"Executive Manager\">\r\n        Leslie is pretty smart when it comes to business.\r\n        <Button label=\"Details\" onClick=\"dialog.open()\" />\r\n      </Card>\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\nThe following code contains only a `dialog.open` action, which displays the dialog. The form issues a close action when you cancel or submit it.\r\n\r\n<Playground\r\n  name=\"Example: Form in ModalDialog\"\r\n  app={`\r\n  <App>\r\n    <ModalDialog id=\"dialog\">\r\n      <Form data=\"{{ name: 'Leslie', age: 32 }}\">\r\n        <FormItem bindTo=\"name\" label=\"User Name\" />\r\n        <FormItem bindTo=\"age\" label=\"Age\" type=\"integer\" zeroOrPositive=\"true\" />\r\n      </Form>\r\n    </ModalDialog>\r\n    <NavPanel>\r\n      <NavLink label=\"Users\" to=\"/\" icon=\"user\" />\r\n    </NavPanel>\r\n    <Pages>\r\n      <Page url=\"/\">\r\n        <Card\r\n          avatarUrl=\"https://i.pravatar.cc/100\"\r\n          title=\"Leslie Peters\"\r\n          subtitle=\"Executive Manager\">\r\n          Leslie is pretty smart when it comes to business.\r\n          <Button label=\"Details\" onClick=\"dialog.open()\" />\r\n        </Card>\r\n      </Page>\r\n    </Pages>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Further Customization\r\n\r\nThe `ModalDialog` component lets you customize some parts of it directly. For example, you can hide the close button displayed in the top-right dialog corner and add a restyled title to dialogs.\r\n\r\n```xmlui copy /closeButtonVisible=\"false\"/\r\n<App>\r\n  <Button label=\"Open Dialog\" onClick=\"dialog.open()\" />\r\n  <ModalDialog id=\"dialog\" title=\"Example Dialog\" closeButtonVisible=\"false\">\r\n    <Button label=\"Close Dialog\" onClick=\"dialog.close()\" />\r\n  </ModalDialog>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Customization\"\r\n  app={`\r\n  <App>\r\n    <Button label=\"Open Dialog\" onClick=\"dialog.open()\" />\r\n    <ModalDialog id=\"dialog\" title=\"Example Dialog\" closeButtonVisible=\"false\">\r\n      <Button label=\"Close Dialog\" onClick=\"dialog.close()\" />\r\n    </ModalDialog>\r\n  </App>\r\n  `}\r\n/>\r\n\r\nSee the <SmartLink href={COMPONENT_MODALDIALOG}>ModalDialog reference article</SmartLink> to see all properties and events.\r\n",
  "create-apps/forms":"import { Callout } from 'nextra/components';\r\nimport {\r\n  COMPONENT_FORMITEM,\r\n  COMPONENT_TEXT,\r\n  LAYOUT_DIMENSION_UNITS,\r\n  USING_MODAL_DIALOGS_INTEROPERABILITY_WITH_FORMS\r\n} from \"../../meta/pages\";\r\n\r\n# Using Forms\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  XMLUI has a robust form infrastructure allowing you to create forms without the hassle of managing, editing, validating, and saving the information you provide in the UI.\r\n</Callout>\r\n\r\nThe following example demonstrates the fundamental XMLUI concepts regarding forms:\r\n\r\n```xmlui copy\r\n<App>\r\n  <Form data=\"{{ name: 'Joe', age: 43 }}\">\r\n    <FlowLayout>\r\n      <H3>Customer information</H3>\r\n      <FormItem bindTo=\"name\" label=\"Customer name\" />\r\n      <FormItem bindTo=\"age\" label=\"Age\" type=\"integer\" zeroOrPositive=\"true\" />\r\n    </FlowLayout>\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  previewOnly\r\n  name=\"Example: XMLUI Form\"\r\n  app={`\r\n    <App>\r\n      <Form data=\"{{ name: 'Joe', age: 43 }}\" >\r\n        <FlowLayout>\r\n          <H3>Customer information</H3>\r\n          <FormItem bindTo=\"name\" label=\"Customer name\" minLength=\"2\" />\r\n          <FormItem bindTo=\"age\" label=\"Age\" type=\"integer\" zeroOrPositive=\"true\" />\r\n        </FlowLayout>\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nThe code can be broken down into the following:\r\n\r\n- The `Form` component encapsulates the management of form UI elements and data handling; the `data` property is used to provide data to the form. In this example, the data is a customer's name and age.\r\n- The `FormItem` component manages an individual attribute in the data. The form in the example uses two fields: one for the name and another for the age. Each `FormItem` has properties in order to handle data:\r\n  - `bindTo` specifies the property name within the `data` to bind the corresponding field\r\n  - `type` determines the type of the input field that should be used in order to modify a given piece of data (number field, text area field, radio buttons, etc.)\r\n  - other properties are generally either for styling or to provide further constraints and arguments for a given input field (e.g. accept only 0 or positive numbers if a field has the number field type)\r\n\r\n## Form with FormItems\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  The `Form` component is designed to work with `FormItem` components inside it to utilize all built-in features\r\n  that help in managing forms: displaying, validating, and saving data.\r\n\r\n  However, there is no restriction on what components you can use within a form.\r\n</Callout>\r\n\r\n```xmlui copy {8-10}\r\n<App>\r\n  <Form\r\n    data=\"{{ search: 'Seattle' }}\"\r\n    onSubmit=\"toast.success('Searching!')\"\r\n    saveLabel=\"Search\">\r\n      Please specify the name to include in the search:\r\n      <FormItem bindTo=\"search\" />\r\n      <Button\r\n        label=\"Select from dictionary\"\r\n        onClick=\"toast('Displaying dictionary')\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  previewOnly\r\n  name=\"Example: Form with non-FormItem #1\"\r\n  app={`\r\n  <App>\r\n    <Form\r\n      data=\"{{ search: 'Seattle' }}\"\r\n      onSubmit=\"toast.success('Searching!')\"\r\n      saveLabel=\"Search\">\r\n        Please specify the name to include in the search:\r\n        <FormItem bindTo=\"search\" />\r\n        <Button\r\n          label=\"Select from dictionary\"\r\n          onClick=\"toast('Displaying dictionary')\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Non-`FormItem` input components are not integrated into the form infrastructure.\r\n</Callout>\r\n\r\nThe following example shows this by placing a regular `Checkbox` component in the `Form`.\r\n\r\n```xmlui copy {8}\r\n<App>\r\n  <Form\r\n    data=\"{{ search: 'Seattle', caseSensitive: 'false' }}\"\r\n    onSubmit=\"(toSave) => toast.success('Searching for ' + JSON.stringify(toSave))\"\r\n    saveLabel=\"Search\" >\r\n      Please specify the name to include in the search:\r\n      <FormItem bindTo=\"search\" />\r\n      <Checkbox label=\"Case sensitive?\" initialValue=\"true\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\nWhen you click \"Search\", the saved data structure does not contain the `caseSensitive` field.\r\n\r\n<Playground\r\n  previewOnly\r\n  name=\"Example: Form with non-FormItem #2\"\r\n  app={`\r\n  <App>\r\n    <Form\r\n      data=\"{{ search: 'Seattle', caseSensitive: 'false' }}\"\r\n      onSubmit=\"(toSave) => toast.success('Searching for ' + JSON.stringify(toSave))\"\r\n      saveLabel=\"Search\" >\r\n        Please specify the name to include in the search:\r\n        <FormItem bindTo=\"search\" />\r\n        <Checkbox label=\"Case sensitive?\" initialValue=\"true\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Adding other input components (as helpers) may still be helpful.\r\n  You can use them to manipulate form data.\r\n  For example, you can use the value of a checkbox to add some logic,\r\n  such as copying some data fields into other fields automatically.\r\n</Callout>\r\n\r\n## Form Layouts\r\n\r\nYou can create any layout within a `Form` component.\r\nInstead of manually placing the components within a form,\r\nyou can nest a form's content into a `FlowLayout` and use the width property of individual `FormItem` components with <SmartLink href=\"\">percentage or star sizing</SmartLink>.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  `FlowLayout` is a responsive component. It ensures that your form is displayed correctly in mobile view as well.\r\n</Callout>\r\n\r\n### Single-Column Forms\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Unless you specify an explicit item width, each nested `FormItem` (within a `FlowLayout`) will fill the entire width of the form.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<App>\r\n  <Form data=\"{{ firstname: 'Jake', lastname: 'Hard', jobTitle: 'janitor', experience: 'broom' }}\">\r\n    <FlowLayout>\r\n      <FormItem label=\"Firstname\" bindTo=\"firstname\" />\r\n      <FormItem label=\"Lastname\" bindTo=\"lastname\" />\r\n      <FormItem label=\"Job Title\" bindTo=\"jobTitle\" />\r\n      <FormItem label=\"Experience\" bindTo=\"experience\" />\r\n    </FlowLayout>\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  previewOnly\r\n  name=\"Example: Single-column Form Layout\"\r\n  app={`\r\n  <App>\r\n    <Form data=\"{{ firstname: 'Jake', lastname: 'Hard', jobTitle: 'janitor', experience: 'broom' }}\">\r\n      <FlowLayout>\r\n        <FormItem label=\"Firstname\" bindTo=\"firstname\" />\r\n        <FormItem label=\"Lastname\" bindTo=\"lastname\" />\r\n        <FormItem label=\"Job Title\" bindTo=\"jobTitle\" />\r\n        <FormItem label=\"Experience\" bindTo=\"experience\" />\r\n      </FlowLayout>\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### Two-Column Forms\r\n\r\nSet each item's width to \"50%\" to create a two-column layout:\r\n\r\n```xmlui copy\r\n<App>\r\n  <Form\r\n    data=\"{{\r\n      firstname: 'Jake',\r\n      lastname: 'Hard',\r\n      jobTitle: 'janitor',\r\n      experience: 'broom'\r\n    }}\">\r\n    <FlowLayout>\r\n      <FormItem label=\"Firstname\" bindTo=\"firstname\" width=\"50%\" />\r\n      <FormItem label=\"Lastname\" bindTo=\"lastname\" width=\"50%\" />\r\n      <FormItem label=\"Job Title\" bindTo=\"jobTitle\" width=\"50%\" />\r\n      <FormItem label=\"Experience\" bindTo=\"experience\" width=\"50%\" />\r\n    </FlowLayout>\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  previewOnly\r\n  name=\"Example: Two-column Form Layout\"\r\n  app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{ firstname: 'Jake', lastname: 'Hard', jobTitle: 'janitor', experience: 'broom' }}\">\r\n        <FlowLayout>\r\n          <FormItem label=\"Firstname\" bindTo=\"firstname\" width=\"50%\" />\r\n          <FormItem label=\"Lastname\" bindTo=\"lastname\" width=\"50%\" />\r\n          <FormItem label=\"Job Title\" bindTo=\"jobTitle\" width=\"50%\" />\r\n          <FormItem label=\"Experience\" bindTo=\"experience\" width=\"50%\" />\r\n        </FlowLayout>\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Multiple Items with Star Sizing\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  XMLUI has layout containers that support <SmartLink href={LAYOUT_DIMENSION_UNITS}>star sizing</SmartLink> for their children.\r\n  This feature tells a component to fill up all remaining space in a row if other sibling component have their sizes specified.\r\n</Callout>\r\n\r\n```xmlui copy {14-15}\r\n<App>\r\n  <Form\r\n    data=\"{{\r\n      title: 'Mr.',\r\n      firstname: 'Jake',\r\n      lastname: 'Hard',\r\n      jobTitle: 'janitor',\r\n      experience: 'broom'\r\n    }}\"\r\n    onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n    <FlowLayout>\r\n      <HStack>\r\n        <FormItem label=\"Title\" bindTo=\"title\" width=\"100px\" />\r\n        <FormItem label=\"Firstname\" bindTo=\"firstname\" width=\"*\" />\r\n        <FormItem label=\"Lastname\" bindTo=\"lastname\" width=\"*\" />\r\n      </HStack>\r\n      <FormItem label=\"Job Title\" bindTo=\"jobTitle\" width=\"50%\" />\r\n      <FormItem label=\"Experience\" bindTo=\"experience\" width=\"50%\" />\r\n    </FlowLayout>\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    previewOnly\r\n    name=\"Example: Star Sizing\"\r\n    app={`\r\n    <App>\r\n      <Form\r\n        data=\"{{\r\n          title: 'Mr.',\r\n          firstname: 'Jake',\r\n          lastname: 'Hard',\r\n          jobTitle: 'janitor',\r\n          experience: 'broom'\r\n        }}\"\r\n        onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n        <FlowLayout>\r\n          <HStack>\r\n            <FormItem label=\"Title\" bindTo=\"title\" width=\"100px\" />\r\n            <FormItem label=\"Firstname\" bindTo=\"firstname\" width=\"*\" />\r\n            <FormItem label=\"Lastname\" bindTo=\"lastname\" width=\"*\" />\r\n          </HStack>\r\n          <FormItem label=\"Job Title\" bindTo=\"jobTitle\" width=\"50%\" />\r\n          <FormItem label=\"Experience\" bindTo=\"experience\" width=\"50%\" />\r\n        </FlowLayout>\r\n      </Form>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Input Components within FormItem\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  The `FormItem` component acts as an intermediary layer between the Form and whatever input control component is rendered through it.\r\n  It is responsible for managing the data represented by the corresponding input component.\r\n</Callout>\r\n\r\nThe `type` property of a `FormItem` specifies what input component to render.\r\nIf this property is empty, `FormItem` uses a <SmartLink href={COMPONENT_TEXT}>`TextBox`</SmartLink> as the input field.\r\n\r\nThe `FormItem` supports these input components:\r\n\r\n| `type` Value    | Description |\r\n| --------------- | ----------- |\r\n| `checkbox`      | A checkbox representing a boolean value. |\r\n| `combobox`      | Lets the user select an item from a dropdown list of filterable items. Use the input field to filter the list. |\r\n| `custom`        | A custom input component to enable developers to specify their own input fields. |\r\n| `datePicker`    | An input to select dates. |\r\n| `file`          | An input to select a file or folder from the local machine. |\r\n| `integer`       | An input for integer values. |\r\n| `multiCombobox` | Lets the user select mulitple items from a filterable dropdown list. Use the input field to filter the list. |\r\n| `multiSelect`   | Lets the user select mulitple items from a dropdown list. |\r\n| `number`        | An input for numeric values (integer or floating-point). |\r\n| `radioGroup`    | A group of radio buttons (only one can be selected). |\r\n| `select`        | Lets the user select an item from a dropdown list. |\r\n| `switch`        | A switch component to toggle a boolean value. |\r\n| `text`          | A textbox to enter text. |\r\n| `textarea`      | A multiline textbox to enter text. |\r\n\r\n<Callout type=\"warning\" emoji=\"⚠️\">\r\n  `FromItem` renders a read-only text if you use a `type` value not in this table.\r\n</Callout>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  If you omit `type`, `FormItem` renders a textbox.\r\n  However, if you nest a custom component into `FormItem`, it behaves as if you set `type` to `custom`.\r\n</Callout>\r\n\r\nThe following sections contain examples of using `FormItem` with different input types.\r\n\r\n### Checkbox\r\n\r\nThe `checkbox` type represents a checkbox input component:\r\n\r\n```xmlui copy {4-6}\r\n<App>\r\n  <Form data=\"{{ option1: true, option2: false, option3: true }}\"\r\n    onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n    <FormItem type=\"checkbox\" bindTo=\"option1\" label=\"Option #1\" />\r\n    <FormItem type=\"checkbox\" bindTo=\"option2\" label=\"Option #2\" />\r\n    <FormItem type=\"checkbox\" bindTo=\"option3\" label=\"Option #3\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Checkbox\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form data=\"{{ option1: true, option2: false, option3: true }}\"\r\n      onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n      <FormItem type=\"checkbox\" bindTo=\"option1\" label=\"Option #1\" />\r\n      <FormItem type=\"checkbox\" bindTo=\"option2\" label=\"Option #2\" />\r\n      <FormItem type=\"checkbox\" bindTo=\"option3\" label=\"Option #3\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### DatePicker\r\n\r\nThe `datePicker` type represents a date picker input component:\r\n\r\n```xmlui copy {5}\r\n<App>\r\n  <Form\r\n    data=\"{{ birthDate: '2021-04-08' }}\"\r\n    onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n    <FormItem type=\"datePicker\" bindTo=\"birthDate\" label=\"Birthdate\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: DatePicker\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form\r\n      data=\"{{ birthDate: '2021-04-08' }}\"\r\n      onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n      <FormItem type=\"datePicker\" bindTo=\"birthDate\" label=\"Birthdate\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### File\r\n\r\nThe `file` type represents an input component allowing you to select one or multiple files:\r\n\r\n```xmlui copy {5}\r\n<App>\r\n  <Form\r\n    data=\"{{ articles: null }}\"\r\n    onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n    <FormItem type=\"file\" bindTo=\"articles\" label=\"Articles file\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: File Input\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form\r\n      data=\"{{ articles: null }}\"\r\n      onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n      <FormItem type=\"file\" bindTo=\"articles\" label=\"Articles file\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### Integer\r\n\r\nThe `integer` type represents an input component for integer values:\r\n\r\n```xmlui copy {5}\r\n<App>\r\n  <Form\r\n    data=\"{{ age: 30 }}\"\r\n    onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n    <FormItem type=\"integer\" bindTo=\"age\" label=\"Age\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Integer Input\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form\r\n      data=\"{{ age: 30 }}\"\r\n      onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n      <FormItem type=\"integer\" bindTo=\"age\" label=\"Age\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### Number\r\n\r\nThe `number` type represents an input component for numeric values (integer or floating-point):\r\n\r\n```xmlui copy {5}\r\n<App>\r\n  <Form\r\n    data=\"{{ distance: 192.5 }}\"\r\n    onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n    <FormItem type=\"number\" bindTo=\"distance\" label=\"Distance in miles\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Number Input\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form\r\n      data=\"{{ distance: 192.5 }}\"\r\n      onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n      <FormItem type=\"number\" bindTo=\"distance\" label=\"Distance in miles\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### RadioGroup\r\n\r\nThe `radioGroup` type represents a group of mutually exclusive radio buttons (only one of them can be selected):\r\n\r\n```xmlui copy {5-10}\r\n<App>\r\n  <Form\r\n    data=\"{{ title: 'Mr.' }}\"\r\n    onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n    <FormItem type=\"radioGroup\" bindTo=\"title\" label=\"Title\">\r\n      <Option label=\"Mr.\" value=\"Mr.\" />\r\n      <Option label=\"Mrs.\" value=\"Mrs.\" />\r\n      <Option label=\"Ms.\" value=\"Ms.\" />\r\n      <Option label=\"Dr.\" value=\"Dr.\" />\r\n    </FormItem>\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: RadioGroup\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form\r\n      data=\"{{ title: 'Mr.' }}\"\r\n      onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n      <FormItem type=\"radioGroup\" bindTo=\"title\" label=\"Title\">\r\n        <Option label=\"Mr.\" value=\"Mr.\" />\r\n        <Option label=\"Mrs.\" value=\"Mrs.\" />\r\n        <Option label=\"Ms.\" value=\"Ms.\" />\r\n        <Option label=\"Dr.\" value=\"Dr.\" />\r\n      </FormItem>\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### Select\r\n\r\nThe `select` type represents a dropdown list; only the listed items can be selected:\r\n\r\n```xmlui copy {5-10}\r\n<App>\r\n  <Form\r\n    data=\"{{ size: 'xs' }}\"\r\n    onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n    <FormItem type=\"select\" bindTo=\"size\" label=\"Box size\">\r\n      <Option label=\"Extra small\" value=\"xs\" />\r\n      <Option label=\"Small\" value=\"sm\" />\r\n      <Option label=\"Medium\" value=\"md\" />\r\n      <Option label=\"Large\" value=\"lg\" />\r\n    </FormItem>\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Select\"\r\n  previewOnly\r\n  height={240}\r\n  app={`\r\n  <App>\r\n    <Form\r\n      data=\"{{ size: 'xs' }}\"\r\n      onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n      <FormItem type=\"select\" bindTo=\"size\" label=\"Box size\">\r\n        <Option label=\"Extra small\" value=\"xs\" />\r\n        <Option label=\"Small\" value=\"sm\" />\r\n        <Option label=\"Medium\" value=\"md\" />\r\n        <Option label=\"Large\" value=\"lg\" />\r\n      </FormItem>\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### Switch\r\n\r\nThe `switch` type represents a switch component to toggle a boolean value:\r\n\r\n```xmlui copy {5-7}\r\n<App>\r\n  <Form\r\n    data=\"{{ showBorder: true, showText: false, hideShadow: true }}\"\r\n    onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n    <FormItem type=\"switch\" bindTo=\"showBorder\" label=\"Show border\" labelPosition=\"right\" />\r\n    <FormItem type=\"switch\" bindTo=\"showText\" label=\"Show text\" labelPosition=\"right\" />\r\n    <FormItem type=\"switch\" bindTo=\"hideShadow\" label=\"Hide shadow\" labelPosition=\"right\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Switch\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form\r\n      data=\"{{ showBorder: true, showText: false, hideShadow: true }}\"\r\n      onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n      <FormItem type=\"switch\" bindTo=\"showBorder\" label=\"Show border\" labelPosition=\"right\" />\r\n      <FormItem type=\"switch\" bindTo=\"showText\" label=\"Show text\" labelPosition=\"right\" />\r\n      <FormItem type=\"switch\" bindTo=\"hideShadow\" label=\"Hide shadow\" labelPosition=\"right\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### Text\r\n\r\nThe `text` type represents a textbox to enter textual data:\r\n\r\n```xmlui copy {5}\r\n<App>\r\n  <Form\r\n    data=\"{{ name: 'Joe' }}\"\r\n    onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n    <FormItem type=\"text\" bindTo=\"name\" label=\"Name\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Text Input\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form\r\n      data=\"{{ name: 'Joe' }}\"\r\n      onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n      <FormItem type=\"text\" bindTo=\"name\" label=\"Name\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### TextArea\r\n\r\nThe `textarea` type represents a multiline textbox to enter textual data:\r\n\r\n```xmlui copy {5}\r\n<App>\r\n  <Form\r\n    data=\"{{ description: 'This is a description' }}\"\r\n    onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n    <FormItem type=\"textarea\" bindTo=\"description\" label=\"Description\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: TextArea\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form\r\n      data=\"{{ description: 'This is a description' }}\"\r\n      onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n      <FormItem type=\"textarea\" bindTo=\"description\" label=\"Description\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### Custom Input Components\r\n\r\nYou can create your custom input component leveraging the XMLUI forms infrastructure.\r\nYou can nest your custom component's markup into the wrapping `FormItem` as the following sample shows:\r\n\r\n```xmlui copy {5-13}\r\n<App>\r\n  <Form\r\n    data=\"{{ userAvailable: false }}\"\r\n    onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n    <FormItem bindTo=\"userAvailable\">\r\n      <HStack>\r\n        <Button\r\n          label=\"Toggle\"\r\n          backgroundColor=\"{$value === false ? 'red' : 'green'}\"\r\n          onClick=\"$setValue(!$value)\"\r\n        />\r\n      </HStack>\r\n    </FormItem>\r\n  </Form>\r\n</App>\r\n```\r\n\r\nCustom input fields can use a simple API to communicate with the form infrastructure.\r\nThe `$value` identifier represents the current value of the component.\r\nThe custom component can use the `$setValue` method to change the component value.\r\n\r\nThe following example shows a toggle button created using a regular `Button` component using the form API:\r\n\r\n<Playground\r\n  name=\"Example: Custom Input Field\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form\r\n      data=\"{{ userAvailable: false }}\"\r\n      onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n      <FormItem bindTo=\"userAvailable\">\r\n        <HStack>\r\n          <Button\r\n            label=\"Toggle\"\r\n            backgroundColor=\"{$value === false ? 'red' : 'green'}\"\r\n            onClick=\"$setValue(!$value)\"\r\n          />\r\n        </HStack>\r\n      </FormItem>\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Referencing the Form Data\r\n\r\nWhen you work with forms, the UI's appearance and behavior often depends on the current field values.\r\nThe `$data` context variable allows you to access the current data within the form.\r\n\r\nThe following example demonstrates how you can enable a field according to another's value.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Form data=\"{{ isEnabled: true, name: 'Joe' }}\">\r\n    <FormItem label=\"Enable name\" bindTo=\"isEnabled\" type=\"switch\" />\r\n    <FormItem enabled=\"{$data.isEnabled}\" label=\"Name\" bindTo=\"name\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Referencing Data\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form data=\"{{ isEnabled: true, name: 'Joe' }}\">\r\n      <FormItem label=\"Enable name\" bindTo=\"isEnabled\" type=\"switch\" />\r\n      <FormItem enabled=\"{$data.isEnabled}\" label=\"Name\" bindTo=\"name\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\nYou can reference field values in any other component within the form as well:\r\n\r\n```xmlui copy {5}\r\n<App>\r\n  <Form data=\"{{ firstname: 'John', lastname: 'Doe' }}\">\r\n    <FormItem label=\"Firstname\" bindTo=\"firstname\" />\r\n    <FormItem label=\"Lastname\" bindTo=\"lastname\" />\r\n    <Text>Full name: {$data.firstname} {$data.lastname}</Text>\r\n  </Form>\r\n</App>\r\n```\r\n\r\nBy updating any input field, the text with the full name will update accordingly:\r\n\r\n<Playground\r\n  name=\"Example: Referencing Field Values\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form data=\"{{ firstname: 'John', lastname: 'Doe' }}\">\r\n      <FormItem label=\"Firstname\" bindTo=\"firstname\" />\r\n      <FormItem label=\"Lastname\" bindTo=\"lastname\" />\r\n      <Text>Full name: {$data.firstname} {$data.lastname}</Text>\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Managing Data\r\n\r\nThe XMLUI forms infrastructure helps you manage the form data easily.\r\nThe `data` property can be accessed directly and you can drill down to relevant data attributes:\r\n\r\n```xmlui copy /street/\r\n<App>\r\n  <Form\r\n    data=\"{{\r\n      name: 'John smith',\r\n      address: { street: '96th Ave N', city: 'Seattle', zip: '98005' }\r\n    }}\"\r\n    onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n    <FormItem bindTo=\"name\" label=\"Name\" />\r\n    <FormItem bindTo=\"address.street\" label=\"Street\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Using Data\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form\r\n      data=\"{{\r\n        name: 'John smith',\r\n        address: { street: '96th Ave N', city: 'Seattle', zip: '98005' }\r\n      }}\"\r\n      onSubmit=\"(toSave) => toast.success(JSON.stringify(toSave))\">\r\n      <FormItem bindTo=\"name\" label=\"Name\" />\r\n      <FormItem bindTo=\"address.street\" label=\"Street\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\nThere are two ways to provide data to an XMLUI component.\r\nThe first is by defining the data directly:\r\n\r\n```xmlui copy\r\n<Form data=\"{{ name: 'Joe', age: 43 }}\" />\r\n```\r\n\r\nThe second is to use a URL to get data from an API endpoint:\r\n\r\n```xmlui\r\n<Form data=\"/path/to/resource\" />\r\n```\r\n\r\nThe attributes of the provided data can be accessed using the `FormItem` component via the `bindTo` property.\r\nThe `FormItem` is designed to work with the `Form` component and access the value that it is \"bound to\" from an arbitrary depth in the component tree under the `Form`.\r\n\r\n```xmlui {2} copy\r\n<Form data=\"{{ name: 'Joe' }}\">\r\n  <FormItem bindTo=\"name\" />\r\n</Form>\r\n```\r\n\r\n## Submitting Data\r\n\r\nBy default, the `Form` component provides a submit button to save the modified data.\r\nHow this data will be used can be customized via the `onSubmit` event.\r\nAll examples below are equal:\r\n\r\n```xmlui copy\r\n<App>\r\n  <Form onSubmit=\"toast('Saved!')\" />\r\n  <Form event:submit=\"toast('Saved!')\" />\r\n  <Form>\r\n    <event name=\"submit\" value=\"toast('Saved!')\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\nThe event accepts either a block of code or a callback function.\r\nIn both cases, you use our Javascript-like scripting language to describe the logic.\r\n\r\nWhen working with the callback function, you can access a `toSave` function parameter that contains the form data:\r\n\r\n```xmlui copy\r\n<Form\r\n  data=\"{{ name: 'Joe', age: 43 }}\"\r\n  onSubmit=\"(toSave) => toast(JSON.stringify(toSave))\" />\r\n```\r\n\r\n## Validation\r\n\r\nThe `Form` handles client-side validation as you edit the form and shows any issues under the input fields.\r\nServer-side validation happens when the form data is sent to the server.\r\nThe `Form` handles the server-side validation response and displays it in a summary or below input fields (depends on response).\r\n\r\nA `FormItem` has several properties related to validation, all of which will be outlined in the following sections.\r\n\r\n### `minLength`\r\n\r\nThis property defines the minimum length of a text input value.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Form data=\"{{ name: 'Billy Bob' }}\">\r\n    <FormItem bindTo=\"name\" minLength=\"10\" label=\"minLength\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\nDelete at least 5 characters from the input field below and click outside the field.\r\n\r\n<Playground\r\n  name=\"Field Validation: minLength\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form data=\"{{ name: 'Billy Bob' }}\">\r\n      <FormItem bindTo=\"name\" minLength=\"10\" label=\"minLength\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `maxLength`\r\n\r\nThis property defines the maximum length of a text input value.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Form data=\"{{ name: 'Billy Bob' }}\">\r\n    <FormItem bindTo=\"name\" maxLength=\"11\" label=\"maxLength\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\nThe input must be no longer than the specified length.\r\nTry to enter more than 11 characters in the input field below - the input field will not let you.\r\n\r\n<Playground\r\n  name=\"Validation Example: maxLength\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form data=\"{{ name: 'Billy Bob' }}\">\r\n      <FormItem bindTo=\"name\" maxLength=\"11\" label=\"maxLength\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\nSometimes, you do not want to constrain the number of characters in the text box; however, you want longer text to be marked as invalid.\r\nSet the `syncToValidation` property to \"false\" in order to do so.\r\n\r\n```xmlui copy /syncToValidation=\"false\"/\r\n<App>\r\n  <Form data=\"{{ name: 'Billy Bob' }}\">\r\n    <FormItem bindTo=\"name\" maxLength=\"11\" syncToValidation=\"false\" label=\"maxLength\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\nNow, you can type more than 11 characters into the box.\r\nHowever, as you click outside, the validation message will indicate that the text is longer than expected.\r\n\r\n<Playground\r\n  name=\"Validation Example: maxLength with syncToValidation off\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form data=\"{{ name: 'Billy Bob' }}\">\r\n      <FormItem bindTo=\"name\" maxLength=\"11\" syncToValidation=\"false\" label=\"maxLength\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `minValue`\r\n\r\nThe input value must be at least the specified value. The given value is inclusive.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Form data=\"{{ age: 30 }}\">\r\n    <FormItem bindTo=\"age\" type=\"number\" minValue=\"32\" label=\"minValue\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Validation Example: minValue\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form data=\"{{ age: 30 }}\" >\r\n      <FormItem bindTo=\"age\" type=\"number\" minValue=\"32\" label=\"minValue\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `maxValue`\r\n\r\nThe input value must be smaller than the specified value. The given value is inclusive.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Form data=\"{{ age: 30 }}\" >\r\n    <FormItem bindTo=\"age\" type=\"number\" maxValue=\"29\" label=\"maxValue\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Validation Example: maxValue\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form data=\"{{ age: 30 }}\" >\r\n      <FormItem bindTo=\"age\" type=\"number\" maxValue=\"29\" label=\"maxValue\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### `pattern`\r\n\r\nEvaluate predefined regex patterns. These patterns are the following: \"email\", \"url\", \"phone\".\r\n\r\n```xmlui copy\r\n<App>\r\n  <Form data=\"{{\r\n      mobile: '+13456123456',\r\n      website: 'http://www.blogsite.com',\r\n      email: 'myemail@mail.com'\r\n    }}\">\r\n    <FormItem bindTo=\"mobile\" pattern=\"phone\" label=\"mobilePattern\" />\r\n    <FormItem bindTo=\"website\" pattern=\"url\" label=\"websitePattern\" />\r\n    <FormItem bindTo=\"email\" pattern=\"email\" label=\"emailPattern\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Validation Example: pattern\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form data=\"{{\r\n      mobile: '+13456123456',\r\n      website: 'http://www.blogsite.com',\r\n      email: 'myemail@mail.com'\r\n    }}\">\r\n      <FormItem bindTo=\"mobile\" pattern=\"phone\" label=\"mobilePattern\" />\r\n      <FormItem bindTo=\"website\" pattern=\"url\" label=\"websitePattern\" />\r\n      <FormItem bindTo=\"email\" pattern=\"email\" label=\"emailPattern\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\nSee the <SmartLink href={COMPONENT_FORMITEM}>pattern property of the FormItem</SmartLink> for details.\r\n\r\n### `regex`\r\n\r\nEvaluate a user-defined custom regex pattern.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Form data=\"{{ password: 'hello' }}\">\r\n    <!-- Only all uppercase letters are accepted -->\r\n    <FormItem bindTo=\"password\" regex=\"/^[A-Z]+$/\" label=\"regex\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Validation Example: regex\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form data=\"{{ password: 'hello' }}\">\r\n      <FormItem bindTo=\"password\" regex=\"/^[A-Z]+$/\" label=\"regex\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"warning\" emoji=\"⚠️\">\r\n  When setting custom regular expressions, be sure only set the pattern itself.\r\n  There is no need to provide dashes, which may result in incorrect validation.\r\n</Callout>\r\n\r\n### Combining Multiple Validations\r\n\r\nYou also can combine more than one validation on a `FormItem`:\r\n\r\n```xmlui copy\r\n<App>\r\n  <Form data=\"{{ site: 'http://www.example.com' }}\">\r\n    <FormItem bindTo=\"site\" minLength=\"10\" maxLength=\"30\" pattern=\"url\" label=\"Multiple Validations\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Multiple Validations\"\r\n  previewOnly\r\n  app={`\r\n  <App>\r\n    <Form data=\"{{ site: 'http://www.example.com' }}\">\r\n      <FormItem bindTo=\"site\" minLength=\"10\" maxLength=\"30\" pattern=\"url\" label=\"Multiple Validations\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Other Validation Properties\r\n\r\n### Validation-specific Severity\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  By default, all validations have a severity level of **\"error\"**.\r\n  You can set whether a validation should have a level of **\"warning\"** or **\"error\"**.\r\n</Callout>\r\n\r\nEvery validation type has a corresponding severity associated with it.\r\nSee the <SmartLink href={COMPONENT_FORMITEM}>FormItem article</SmartLink> for each.\r\n\r\n```xmlui copy /patternInvalidSeverity/\r\n<App>\r\n  <Form data=\"{{ mobile: '+13456123456', website: 'http://www.blogsite.com' }}\" >\r\n    <FormItem\r\n      bindTo=\"mobile\"\r\n      pattern=\"phone\"\r\n      patternInvalidSeverity=\"warning\"\r\n      label=\"mobilePattern\" />\r\n    <FormItem\r\n      bindTo=\"website\"\r\n      pattern=\"url\"\r\n      patternInvalidSeverity=\"error\"\r\n      label=\"websitePattern\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Validation Severity\"\r\n  app={`\r\n  <App>\r\n    <Form data=\"{{ mobile: '+13456123456', website: 'http://www.blogsite.com' }}\" >\r\n      <FormItem bindTo=\"mobile\" pattern=\"phone\" patternInvalidSeverity=\"warning\" label=\"mobilePattern\" />\r\n      <FormItem bindTo=\"website\" pattern=\"url\" patternInvalidSeverity=\"error\" label=\"websitePattern\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### Validation-specific Messages\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Sets what message to display as the result of validation.\r\n  Predefined validations already have a built-in message but you can customize it as necessary.\r\n</Callout>\r\n\r\nEvery validation type has a corresponding severity associated with it.\r\nSee the <SmartLink href={COMPONENT_FORMITEM}>FormItem article</SmartLink> for each.\r\n\r\n```xmlui copy {7}\r\n<App>\r\n  <Form data=\"{{ age: 20 }}\" >\r\n    <FormItem\r\n      bindTo=\"age\"\r\n      type=\"number\"\r\n      minValue=\"21\"\r\n      rangeInvalidMessage=\"The given age is too low!\"\r\n      label=\"Invalid Message\" />\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Validation Message\"\r\n  app={`\r\n  <App>\r\n    <Form data=\"{{ age: 20 }}\" >\r\n      <FormItem\r\n        bindTo=\"age\"\r\n        type=\"number\"\r\n        minValue=\"21\"\r\n        rangeInvalidMessage=\"The given age is too low!\"\r\n        label=\"Invalid Message\" />\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### Server-side Validation\r\n\r\nThe `Form` component can receive and display a server-side validation response.\r\n\r\n- Field related issues are shown just like client-side validation errors, removed when a field is edited.\r\n- Non-field related issues are displayed in a validation summary view.\r\n\r\n<br/>\r\n<Image alt=\"Server-side Validation\" src=\"/resources/images/create-apps/using-forms.png\" />\r\n\r\n## User Feedback with APICall\r\n\r\nSubmitting the form via the `APICall` component triggers a visual confirmation of the operation's success.\r\nIf the submission is successful, a success `Toast` component will appear for a few seconds.\r\nOtherwise, an error `Toast` component will show the error that occured.\r\n\r\n```xmlui copy {3-8, 15-20}\r\n<App>\r\n  <Form data=\"{{ name: 'Joe' }}\">\r\n    <event name=\"submit\">\r\n      <APICall\r\n        url=\"/api/contacts/name\"\r\n        method=\"POST\"\r\n        body=\"{$param}\" />\r\n    </event>\r\n    <FlowLayout>\r\n      <H3>Customer Name</H3>\r\n      <FormItem bindTo=\"name\" label=\"Customer name\" />\r\n    </FlowLayout>\r\n  </Form>\r\n  <Form data=\"{{ age: 43 }}\">\r\n    <event name=\"submit\">\r\n      <APICall\r\n        url=\"/api/contacts/age\"\r\n        method=\"POST\"\r\n        body=\"{$param}\" />\r\n    </event>\r\n    <FlowLayout>\r\n      <H3>Customer Age</H3>\r\n      <FormItem bindTo=\"age\" label=\"Age\" type=\"integer\" zeroOrPositive=\"true\" />\r\n    </FlowLayout>\r\n  </Form>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  previewOnly\r\n  name=\"Example: Feedback\"\r\n  app={`\r\n  <App>\r\n    <Form data=\"{{ name: 'Joe' }}\" onSubmit=\"(toSave) => toast.success('Data saved!')\">\r\n      <FlowLayout>\r\n        <H3>Customer Name</H3>\r\n        <FormItem bindTo=\"name\" label=\"Customer name\" />\r\n      </FlowLayout>\r\n    </Form>\r\n    <Form data=\"{{ age: 43 }}\" onSubmit=\"(toSave) => toast.error('Network error!')\">\r\n      <FlowLayout>\r\n        <H3>Customer Age</H3>\r\n        <FormItem bindTo=\"age\" label=\"Age\" type=\"integer\" zeroOrPositive=\"true\" />\r\n      </FlowLayout>\r\n    </Form>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Using in Modal Dialogs\r\n\r\nThe `ModalDialog` component supports `Form`s as a first-class citizen component:\r\nif a `Form` is provided as a direct child to a `ModalDialog`, it dialog's button row is replaced with the form's own button row.\r\n\r\nSee a working example in <SmartLink href={USING_MODAL_DIALOGS_INTEROPERABILITY_WITH_FORMS}>this article</SmartLink>.\r\n\r\n### Submitting with Warnings\r\n\r\nIt is possible to save and submit a form with warnings present.\r\nIf this is the case, the user will be prompted by a confirmation dialog to proceed with sending the data to the backend.\r\n\r\n<br/>\r\n<Image alt=\"Submitting with Warnings\" src=\"/resources/images/create-apps/using-forms-warning-dialog.png\" width={416} />\r\n",
  "create-apps/layout-props":"import { COMMON_VISUAL_PROPERTY_UNITS, COMMON_VISUAL_PROPERTY_UNITS_ALIGNMENT, COMMON_VISUAL_PROPERTY_UNITS_BOOLEAN, COMMON_VISUAL_PROPERTY_UNITS_BORDER, COMMON_VISUAL_PROPERTY_UNITS_BORDER_ROUNDING, COMMON_VISUAL_PROPERTY_UNITS_COLOR, COMMON_VISUAL_PROPERTY_UNITS_CURSOR, COMMON_VISUAL_PROPERTY_UNITS_FONT_FAMILY, COMMON_VISUAL_PROPERTY_UNITS_FONT_STYLE, COMMON_VISUAL_PROPERTY_UNITS_FONT_WEIGHT, COMMON_VISUAL_PROPERTY_UNITS_ORIENTATION, COMMON_VISUAL_PROPERTY_UNITS_OVERFLOW, COMMON_VISUAL_PROPERTY_UNITS_SHADOW, COMMON_VISUAL_PROPERTY_UNITS_SIZE, COMMON_VISUAL_PROPERTY_UNITS_TEXT_ALIGNMENT, COMMON_VISUAL_PROPERTY_UNITS_TEXT_DECORATION, COMMON_VISUAL_PROPERTY_UNITS_TEXT_TRANSFORM, COMMON_VISUAL_PROPERTY_UNITS_USER_SELECT, COMPONENT_HEADING, COMPONENT_TEXT } from \"../../meta/pages\";\r\nimport { Callout } from 'nextra/components';\r\n\r\n# Layout Properties\r\n\r\nEach component has a particular visual appearance by default; this default display is often the best the component can have in a particular context.\r\n\r\nHowever, as you change an application's layout, you may need to change some visual properties of components.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nLayout properties allow you to set up the visual appearance of components on a component instance basis.\r\n</Callout>\r\n\r\nThis code snippet renders a text:\r\n\r\n```xmlui copy\r\n<App>\r\n  <Text>I'm a Text without explicit layout properties</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Text without layout properties\"\r\n  app={`\r\n    <App>\r\n      <Text>I'm a Text without explicit layout properties</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nThis sample explicitly sets a few layout properties of Text:\r\n\r\n```xmlui copy\r\n<App>\r\n  <Text\r\n    backgroundColor=\"cyan\"\r\n    width=\"320px\"\r\n    padding=\"2rem\">\r\n    I'm a Text with explicit layout properties\r\n  </Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Setting a few layout properties of Text\"\r\n  app={`\r\n    <App>\r\n      <Text\r\n        backgroundColor=\"cyan\"\r\n        width=\"320px\"\r\n        padding=\"2rem\">\r\n        I'm a Text with explicit layout properties\r\n      </Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nIn this article, you will learn about available layout properties. Before treating them, learn how to use layout properties correctly to avoid unnecessary maintenance chores.\r\n\r\n## Proper Use of Layout Properties\r\n\r\nLayout properties are easy to use; adding simple property values can quickly change the visuals of a particular component.\r\n\r\nHowever, this ease comes at a high price: the more individual layout properties there are, the more tedious the application maintenance is if you need to change the app's appearance.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nWhenever possible, avoid using layout properties on component instances. If you use them frequently, maintaining them may lead to a nightmare, as you might need to change many occurrences of a particular layout property value in the app. XMLUI offers straightforward tools to avoid the maintenance nightmare: **use reusable components and themes.**\r\n</Callout>\r\n\r\nIn this section, you will learn how to use this toolset.\r\n\r\n### App with Layout Properties\r\n\r\nIn the following example, all properties of the `HStack` and `CHStack` components are layout properties. Some of them set dimensions; others set colors or other style elements:\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack height=\"100%\">\r\n    <CHStack border=\"1px dotted blue\" color=\"black\" width=\"80px\" height=\"40px\">Black</CHStack>\r\n    <CHStack backgroundColor=\"red\" color=\"white\" width=\"80px\" height=\"40px\">Red</CHStack>\r\n    <CHStack backgroundColor=\"blue\" color=\"white\" width=\"80px\" height=\"40px\">Blue</CHStack>\r\n    <CHStack backgroundColor=\"purple\" color=\"white\" width=\"80px\" height=\"40px\">Purple</CHStack>\r\n    <CHStack backgroundColor=\"green\" color=\"white\" width=\"80px\" height=\"40px\">Green</CHStack>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\nAlso, the `height` property of `HStack` is a layout property. However, its \"100%\" value represents a layout constraint (use the full application height for the stack), so it is not likely to change.\r\n\r\n<Playground\r\n\r\n  name=\"Example: Styling with layout properties\"\r\n  horizontal={true}\r\n  app={`\r\n    <App>\r\n      <HStack height=\"100%\">\r\n        <CHStack border=\"1px dotted blue\" color=\"black\" width=\"80px\" height=\"40px\">Black</CHStack>\r\n        <CHStack backgroundColor=\"red\" color=\"white\" width=\"80px\" height=\"40px\">Red</CHStack>\r\n        <CHStack backgroundColor=\"blue\" color=\"white\" width=\"80px\" height=\"40px\">Blue</CHStack>\r\n        <CHStack backgroundColor=\"purple\" color=\"white\" width=\"80px\" height=\"40px\">Purple</CHStack>\r\n        <CHStack backgroundColor=\"green\" color=\"white\" width=\"80px\" height=\"40px\">Green</CHStack>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nIf you need to change the dimensions of boxes (80 x 40 pixels is not the right size), you need to modify the `width` and `height` properties for all `CHStack` instances.\r\n\r\n### App with Reusable Components\r\n\r\nReusable components may help such maintenance nightmares. You can extract the common style traits of individual components into a reusable component.\r\n\r\nTo remove the pain of setting all `width` and `height` occurrences in the previous example (when using layout properties), define a reusable component instead. This new component will be called `MyBox` with preset dimension values. However, border and color values are allowed to be changed from the outside via properties:\r\n\r\n```xmlui copy filename=\"MyBox.xmlui\"\r\n<Component name=\"MyBox\">\r\n  <CHStack\r\n    border=\"{$props.border}\"\r\n    backgroundColor=\"{$props.bgColor}\"\r\n    color=\"{$props.color}\"\r\n    width=\"80px\" height=\"40px\">\r\n    <Slot />\r\n  </CHStack>\r\n</Component>\r\n```\r\n\r\nNow, with the `MyBox` component, the previous UI declaration is more straightforward:\r\n\r\n```xmlui copy filename=\"main.xmlui\"\r\n<App>\r\n  <HStack height=\"100%\">\r\n    <MyBox border=\"1px dotted blue\" color=\"black\">Black</MyBox>\r\n    <MyBox bgColor=\"red\">Red</MyBox>\r\n    <MyBox bgColor=\"blue\">Blue</MyBox>\r\n    <MyBox bgColor=\"purple\">Purple</MyBox>\r\n    <MyBox bgColor=\"green\">Green</MyBox>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\nLet's assume, we need to change the dimensions from 80x40 to 60x60 pixels. Altering the `width` and `height` properties within `MyBox` has its effect on all boxes:\r\n\r\n```xmlui copy {6} filename=\"MyBox.xmlui\"\r\n<Component name=\"MyBox\">\r\n  <CHStack\r\n    border=\"{$props.border}\"\r\n    backgroundColor=\"{$props.bgColor}\"\r\n    color=\"{$props.color ?? 'white'}\"\r\n    width=\"60px\" height=\"60px\">\r\n    <Slot />\r\n  </CHStack>\r\n</Component>\r\n```\r\n\r\n<Playground\r\n\r\n  name=\"Example: Styling with reusable components\"\r\n  horizontal={true}\r\n  components={[\r\n    `\r\n    <Component name=\"MyBox\">\r\n      <CHStack\r\n        border=\"{$props.border}\"\r\n        backgroundColor=\"{$props.bgColor}\"\r\n        color=\"{$props.color ?? 'white'}\"\r\n        width=\"60px\" height=\"60px\">\r\n        <Slot />\r\n      </CHStack>\r\n    </Component>\r\n    `,\r\n  ]}\r\n  app={`\r\n    <App>\r\n      <HStack height=\"100%\">\r\n        <MyBox border=\"1px dotted blue\" color=\"black\">Black</MyBox>\r\n        <MyBox bgColor=\"red\">Red</MyBox>\r\n        <MyBox bgColor=\"blue\">Blue</MyBox>\r\n        <MyBox bgColor=\"purple\">Purple</MyBox>\r\n        <MyBox bgColor=\"green\">Green</MyBox>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### App with Theme Variables\r\n\r\nXMLUI uses themes. A theme is a set of theme variables with their actual values, which influence an app's appearance. A single app can be shipped with multiple themes; users can select their current theme from the available ones.\r\n\r\nYou can extract the values of layout properties into theme variables. For example, the hard-wired dimensions of `MyBox` can be put into theme variables:\r\n\r\n```xmlui copy /$width-MyBox/ /$height-MyBox/\r\n<Component name=\"MyBox\">\r\n  <CHStack\r\n    border=\"{$props.border}\"\r\n    backgroundColor=\"{$props.bgColor}\"\r\n    color=\"{$props.color}\"\r\n    width=\"$width-MyBox\"\r\n    height=\"$height-MyBox\">\r\n    <Slot />\r\n  </CHStack>\r\n</Component>\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nA `$` prefix in a layout property value indicates that the value will be obtained from a theme variable.\r\n</Callout>\r\n\r\nHere, `$width-MyBox` and `$height-MyBox` declare two theme variables. When you build and deploy an app, you can set these theme variables in a theme definition. When you change that definition, the app will update the layout properties referencing the altered theme variables.\r\n\r\nChanging the dimensions of `MyBox` is pretty straightforward by setting the appropriate theme variables:\r\n\r\n```json filename=\"theme.ts\"\r\n{\r\n  // ... Other theme props omitted\r\n  \"themeVars\": {\r\n    // ...\r\n    \"width-MyBox\": \"100px\",\r\n    \"height-MyBox\": \"30px\"\r\n    // ...\r\n  }\r\n}\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Reusable components with theme variables\"\r\n  horizontal={true}\r\n  defaultTheme=\"custom\"\r\n  themes={[\r\n    {\r\n      id: \"custom\",\r\n      name: \"Custom Theme\",\r\n      themeVars: {\r\n        \"width-MyBox\": \"100px\",\r\n        \"height-MyBox\": \"30px\",\r\n      },\r\n    },\r\n  ]}\r\n  components={[\r\n    `\r\n    <Component name=\"MyBox\">\r\n      <CHStack\r\n        border=\"{$props.border}\"\r\n        backgroundColor=\"{$props.bgColor}\"\r\n        color=\"{$props.color ?? 'white'}\"\r\n        width=\"$width-MyBox\" height=\"$height-MyBox\">\r\n        <Slot />\r\n      </CHStack>\r\n    </Component>\r\n    `,\r\n  ]}\r\n  app={`\r\n    <App>\r\n      <HStack height=\"100%\">\r\n        <MyBox border=\"1px dotted blue\" color=\"black\">Black</MyBox>\r\n        <MyBox bgColor=\"red\">Red</MyBox>\r\n        <MyBox bgColor=\"blue\">Blue</MyBox>\r\n        <MyBox bgColor=\"purple\">Purple</MyBox>\r\n        <MyBox bgColor=\"green\">Green</MyBox>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n\r\n## Dimensions\r\n\r\nWhen the engine renders particular components, it determines their dimensions according to the type of a particular component and its explicitly set dimension properties.\r\n\r\n### Specifying Dimensions\r\n\r\nYou can explicitly specify several dimensions of a particular component with the `width`, `height`, `minWidth`, `minHeight`, `maxWidth`, and `maxHeight` layout properties.\r\n\r\nThe dimension properties use <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size values</SmartLink>, which contain a value and a unit that together determine the actual size. Here are a few examples of size values:\r\n\r\n```text\r\n12px\r\n0.25rem\r\n50%\r\n0\r\n125mm\r\n```\r\n\r\nThe XMLUI percentage value is relative to the size of the viewport a parent container offers for a particular child element. Here is an example to demonstrate how percentage values are used:\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    <Stack width=\"20%\" height=\"36px\" backgroundColor=\"red\" />\r\n    <Stack width=\"40%\" height=\"36px\" backgroundColor=\"green\" />\r\n    <Stack width=\"20%\" height=\"36px\" backgroundColor=\"blue\" />\r\n  </HStack>\r\n  <HStack gap=\"1rem\">\r\n    <Stack width=\"20%\" height=\"36px\" backgroundColor=\"red\" />\r\n    <Stack width=\"33.3%\" height=\"36px\" backgroundColor=\"green\" />\r\n    <Stack width=\"10%\" height=\"36px\" backgroundColor=\"blue\" />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Using percentage size values\"\r\n  app={`\r\n  <App>\r\n    <HStack>\r\n      <Stack width=\"20%\" height=\"36px\" backgroundColor=\"red\" />\r\n      <Stack width=\"40%\" height=\"36px\" backgroundColor=\"green\" />\r\n      <Stack width=\"20%\" height=\"36px\" backgroundColor=\"blue\" />\r\n    </HStack>\r\n    <HStack gap=\"1rem\">\r\n      <Stack width=\"20%\" height=\"36px\" backgroundColor=\"red\" />\r\n      <Stack width=\"33.3%\" height=\"36px\" backgroundColor=\"green\" />\r\n      <Stack width=\"10%\" height=\"36px\" backgroundColor=\"blue\" />\r\n    </HStack>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### Component Width and Height [#component-width-height]\r\n\r\nYou can change the default component width and height with these layout properties:\r\n\r\n| Prop | Description |\r\n|-|-|\r\n| `width` | The width (horizontal dimension) of the component. |\r\n| `height` | The height (vertical dimension) of the component. |\r\n| `minWidth` | The minimum width of an element. It prevents the current value of the width property from becoming smaller than the value specified. |\r\n| `minHeight` | The minimum height of an element. It prevents the current value of the height property from becoming smaller than the value specified. |\r\n| `maxWidth` | The maximum width of an element. It prevents the current value of the width property from becoming larger than the value specified. |\r\n| `maxHeight` | The maximum height of an element. It prevents the current value of the height property from becoming larger than the value specified. |\r\n\r\nThe following sample demonstrates the width-related properties.\r\n\r\n```xmlui copy\r\n<App>\r\n  <VStack width=\"50%\" height=\"36px\" backgroundColor=\"red\" />\r\n  <VStack width=\"30%\" minWidth=\"200px\" height=\"36px\" backgroundColor=\"green\" />\r\n  <VStack width=\"75%\" minWidth=\"200px\" maxWidth=\"300px\" height=\"36px\" backgroundColor=\"blue\" />\r\n</App>\r\n```\r\n\r\nResize the screen to see how the sizes of colored boxes change.\r\n\r\n<Playground\r\n  name=\"width, minWidth, and maxWidth\"\r\n  app={`\r\n    <App>\r\n      <VStack width=\"50%\" height=\"36px\" backgroundColor=\"red\" />\r\n      <VStack width=\"30%\" minWidth=\"200px\" height=\"36px\" backgroundColor=\"green\" />\r\n      <VStack width=\"75%\" minWidth=\"200px\" maxWidth=\"300px\" height=\"36px\" backgroundColor=\"blue\" />\r\n    </App>\r\n  `}\r\n  height={220}\r\n/>\r\n\r\n## Overflow\r\n\r\nA component may not fit into the area its parent provides. This is called overflow.\r\nXMLUI provides a few properties to define how a particular component should behave in situations like these.\r\nIndividual components, such as <SmartLink href={COMPONENT_TEXT}>`Text`</SmartLink>, <SmartLink href={COMPONENT_HEADING}>`Heading`</SmartLink>, and others, provide further techniques to handle overflow.\r\n\r\n|Property|Description|\r\n|-|-|\r\n|`overflowX`| This property defines the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_OVERFLOW}>overflow</SmartLink> strategy when a component horizontally overflows the UI its parent provides. |\r\n|`overflowY`| This property defines the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_OVERFLOW}>overflow</SmartLink> strategy when a component vertically overflows the UI its parent provides. |\r\n\r\n### Horizontal Overflow\r\n\r\nThe following example demonstrates how the horizontal overflow property works:\r\n\r\n```xmlui copy /overflowX/\r\n<App>\r\n  <VStack width=\"180px\" height=\"40px\" backgroundColor=\"cyan\" overflowX=\"hidden\">\r\n    <Text maxLines=\"1\">\r\n      This is a long text that probably won't fit entirely in a single line.\r\n    </Text>\r\n  </VStack>\r\n  <VStack width=\"180px\" height=\"40px\" backgroundColor=\"lightgreen\" overflowX=\"scroll\">\r\n    <Text color=\"purple\" width=\"1000px\">\r\n      This is a long text that probably won't fit entirely in a single line.\r\n    </Text>\r\n  </VStack>\r\n  <VStack width=\"180px\" height=\"40px\" backgroundColor=\"silver\">\r\n    <Text color=\"purple\">\r\n      This is a long text that probably won't fit entirely in a single line.\r\n    </Text>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\nObserve the second text's width, which is set to 1000px, to ensure it won't be trimmed and closed with ellipses.\r\nDue to the `overflowX=\"scroll\"` setting, you can see a horizontal scrollbar at the bottom of the light green box. The last text has no `overflowX` value or `width` constraint, so the engine breaks it into multiple lines. As it has no `overflowY` value, the engine lets it flow out of its container.\r\n\r\n<Playground\r\n  name=\"Example: overflowX\"\r\n  app={`\r\n  <App>\r\n    <VStack width=\"180px\" height=\"40px\" backgroundColor=\"cyan\" overflowX=\"hidden\">\r\n      <Text maxLines=\"1\">\r\n        This is a long text that probably won't fit entirely in a single line.\r\n      </Text>\r\n    </VStack>\r\n    <VStack width=\"180px\" height=\"40px\" backgroundColor=\"lightgreen\" overflowX=\"scroll\">\r\n      <Text color=\"purple\" width=\"1000px\">\r\n        This is a long text that probably won't fit entirely in a single line.\r\n      </Text>\r\n    </VStack>\r\n    <VStack width=\"180px\" height=\"40px\" backgroundColor=\"silver\">\r\n      <Text color=\"purple\">\r\n        This is a long text that probably won't fit entirely in a single line.\r\n      </Text>\r\n    </VStack>\r\n  </App>\r\n  `}\r\n  height={240}\r\n/>\r\n\r\n### Vertical Overflow\r\n\r\nThe following example demonstrates how the vertical overflow property works:\r\n\r\n```xmlui copy /overflowY/\r\n<App>\r\n  <VStack width=\"180px\" height=\"40px\" backgroundColor=\"cyan\" overflowY=\"hidden\">\r\n    <Text maxLines=\"1\">\r\n      This is a long text that probably won't fit entirely in a single line.\r\n    </Text>\r\n  </VStack>\r\n  <VStack width=\"180px\" height=\"40px\" backgroundColor=\"lightgreen\" overflowY=\"scroll\">\r\n    <Text color=\"purple\">\r\n      This is a long text that probably won't fit entirely in a single line.\r\n    </Text>\r\n  </VStack>\r\n  <VStack width=\"180px\" height=\"40px\" backgroundColor=\"silver\">\r\n    <Text color=\"purple\">\r\n      This is a long text that probably won't fit entirely in a single line.\r\n    </Text>\r\n  </VStack>\r\n</App>\r\n```\r\nEach of the three text fragments is enclosed in a box with a fixed size (180 x 40 pixels). Observe the effect of different `overflowY` values. The last box uses no `overflowY`, which has the same effect as `overflowY=\"visible\"`.\r\n\r\n<Playground\r\n  name=\"Example: overflowY\"\r\n  app={`\r\n    <App>\r\n      <VStack width=\"180px\" height=\"40px\" backgroundColor=\"cyan\" overflowY=\"hidden\">\r\n        <Text maxLines=\"1\">\r\n          This is a long text that probably won't fit entirely in a single line.\r\n        </Text>\r\n      </VStack>\r\n      <VStack width=\"180px\" height=\"40px\" backgroundColor=\"lightgreen\" overflowY=\"scroll\">\r\n        <Text color=\"purple\">\r\n          This is a long text that probably won't fit entirely in a single line.\r\n        </Text>\r\n      </VStack>\r\n      <VStack width=\"180px\" height=\"40px\" backgroundColor=\"silver\">\r\n        <Text color=\"purple\">\r\n          This is a long text that probably won't fit entirely in a single line.\r\n        </Text>\r\n      </VStack>\r\n    </App>\r\n  `}\r\n  height={240}\r\n/>\r\n\r\n## The Box Model\r\n\r\nMost components use a rectangular space (or box) their parent container provides.\r\nSeveral layout properties define how the component should use this rectangular space.\r\nThese properties follow the so-called *box model* which comes from the CSS model of the same name.\r\n\r\nThis model works with the following boxes nested in each other (see an example for each underneath the list):\r\n- **Component box**: The area the parent provides for the component (the size of this box depends on the rendering logic of the parent).\r\n- **Margin box**: Within the component box, the component may define a margin that surrounds the other boxes of the component. The margin box displays the background (background color) the parent component provides.\r\n- **Border box**: Within the margin box, the component may have a border with a particular width. Depending on the border pattern (for example, in the case of a dashed or dotted), the component background may be visible under the border.\r\n- **Padding box**: The component may define a padding surrounding its content. The background of the padding box is set to the component background.\r\n- **Content box**: This is the rectangular area where the component will render its child components.\r\n\r\nThe engine defines several layout properties to set up the box model of a particular component. Here is an example:\r\n\r\n```xmlui copy\r\n<App height=\"100%\" backgroundColor=\"cyan\">\r\n  <VStack height=\"85%\"\r\n    backgroundColor=\"red\"\r\n    margin=\"20px\"\r\n    padding=\"60px\"\r\n    border=\"8px dashed blue\">\r\n    <VStack width=\"100%\" height=\"100%\" backgroundColor=\"green\" />\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  height={250}\r\n  name=\"Box Model\"\r\n  app={`\r\n    <App height=\"100%\" backgroundColor=\"cyan\">\r\n      <VStack height=\"85%\"\r\n        backgroundColor=\"red\"\r\n        margin=\"20p\"\r\n        padding=\"60p\"\r\n        border=\"8px dashed blue\">\r\n        <VStack width=\"100%\" height=\"100%\" backgroundColor=\"green\" />\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nThe point of interest in the code snippet is the red rectangle; the markup contains styling to showcase all parts of the box model:\r\n\r\n`App` has a cyan background and encompasses the whole app area because its height is set to `100%` and being a block level element, it fills in the available horizontal space as well.\r\n\r\nThe child with the red background has a margin of `20px` and is smaller than its parent (its height is also 85% of its parent). This child also has a dashed border (`border=\"8 dashed blue\"`), and has a padding of `60px` that squishes its own child to occupy less space inside of it (the one with the green background).\r\n\r\nFinally, the `VStack` with the green background fills in the available content area defined by its parent with the red background.\r\n\r\n### Margin\r\n\r\n<Callout type=\"warning\" emoji=\"💡\">\r\nUsing both margins and paddings complicates layout arrangements due to side effects (such as margin collapse applied by HTML). Though you can use margins when creating your components, use them as a last resort. For most layouts, paddings must be enough.\r\n</Callout>\r\n\r\nYou can use these properties to define component margins:\r\n\r\n| Property | Description |\r\n|-|-|\r\n| `margin` | Sets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> of the margin area; uses the same value for the left, top, right, and bottom margins. |\r\n| `marginHorizontal` | Sets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> of the horizontal margins (left and right) to the specified value. |\r\n| `marginVertical` | Sets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> of the vertical margins (top and bottom) to the specified value. |\r\n| `marginLeft` | Sets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> of the left margin to the specified value. |\r\n| `marginTop` | Sets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> of the top margin to the specified value. |\r\n| `marginRight` | Sets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> of the right margin to the specified value. |\r\n| `marginBottom` | Sets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> of the bottom margin to the specified value. |\r\n\r\nWhen you decorate a component with multiple properties setting the same margin, the most specific one prevails. For example, `marginLeft` overrides `marginHorizontal` and `margin`.\r\n\r\n### Border\r\n\r\nYou can use these properties to define component borders:\r\n\r\n| Property | Description |\r\n|-|-|\r\n| `border` | Sets the value of the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_BORDER}>border</SmartLink> area; uses the same value for the left, top, right, and bottom borders. |\r\n| `borderLeft` | Sets the value of the left <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_BORDER}>border</SmartLink> to the specified one. |\r\n| `borderTop` | Sets the value of the top <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_BORDER}>border</SmartLink> to the specified one. |\r\n| `borderRight` | Sets the value of the right <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_BORDER}>border</SmartLink> to the specified one. |\r\n| `borderBottom` | Sets the value of the bottom <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_BORDER}>border</SmartLink> to the specified one. |\r\n\r\nWhen you decorate a component with multiple properties setting the same border segment, the most specific one prevails. For example, `borderLeft` overrides `border`.\r\n\r\nYou can also define the rounding of the border through a set of properties:\r\n\r\n| Property | Description |\r\n|-|-|\r\n| `borderRadius` | This property rounds the corners of a component's outer border edge according to the specified <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_BORDER_ROUNDING}>value</SmartLink>. |\r\n| `radiusTopLeft` | This property rounds the top-left corner of a component's outer border edge according to the specified <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_BORDER_ROUNDING}>value</SmartLink>. |\r\n| `radiusTopRight` | This property rounds the top-right corner of a component's outer border edge according to the specified <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_BORDER_ROUNDING}>value</SmartLink>. |\r\n| `radiusBottomLeft` | This property rounds the bottom-left corner of a component's outer border edge according to the specified <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_BORDER_ROUNDING}>value</SmartLink>. |\r\n| `radiusBottomRight` | This property rounds the bottom-right corner of a component's outer border edge according to the specified <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_BORDER_ROUNDING}>value</SmartLink>. |\r\n\r\nIf you set `borderRadius` and any other properties, the others overwrite `borderRadius` for the particular corner.\r\n\r\n### Padding\r\n\r\nYou can use these properties to define component paddings:\r\n\r\n| Property | Description |\r\n|-|-|\r\n| `padding` | Sets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> of the padding area; uses the same value for the left, top, right, and bottom paddings. |\r\n| `paddingHorizontal` | Sets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> of the horizontal padding (left and right) to the specified value. |\r\n| `paddingVertical` | Sets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> of the vertical paddings (top and bottom) to the specified value. |\r\n| `paddingLeft` | Sets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> of the left padding to the specified value. |\r\n| `paddingTop` | Sets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> of the top padding to the specified value. |\r\n| `paddingRight` | Sets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> of the right padding to the specified value. |\r\n| `paddingBottom` | Sets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> of the bottom padding to the specified value. |\r\n\r\nWhen you decorate a component with multiple properties setting the same padding, the most specific one prevails. For example, `paddingLeft` overrides `paddingHorizontal` and `padding`.\r\n\r\n## Component Appearance\r\n\r\nSeveral layout properties determine the visual appearance of a particular component.\r\n\r\n### Colors\r\n\r\nThe engine supports these layout properties to set component colors:\r\n\r\n|Property|Descrition|\r\n|-|-|\r\n|`backgroundColor`| Sets the background <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_COLOR}>color</SmartLink> of a component. |\r\n|`background`| (Same as `backgroundColor`) |\r\n|`color`| Sets the foreground <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_COLOR}>color</SmartLink> of a component's text and text decorations. |\r\n|`opacity`| This property sets the opacity of an element. Opacity is the degree to which the content behind an element is hidden. The value is a number in the range 0.0 to 1.0, inclusive, or a percentage from 0% to 100%. |\r\n\r\n> **Note**: Besides these colors, <SmartLink href=\"#border\">borders</SmartLink> and <SmartLink href=\"#boxShadow\">shadows</SmartLink> also can declare their display colors.\r\n\r\n```xmlui copy\r\n<App>\r\n  <H2 backgroundColor=\"green\" color=\"white\">The Power of Green Economy</H2>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Setting text colors\"\r\n  app={`\r\n    <App>\r\n      <H2 backgroundColor=\"green\" color=\"white\">The Power of Green Economy</H2>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n```xmlui copy\r\n<App>\r\n  <H2 backgroundColor=\"green\" color=\"white\" opacity=\"0.5\">\r\n    The Power of Green Economy\r\n  </H2>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Setting text colors with 50% opacity\"\r\n  app={`\r\n    <App>\r\n      <H2 backgroundColor=\"green\" color=\"white\" opacity=\"0.5\">\r\n        The Power of Green Economy\r\n      </H2>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Font and Text Properties\r\n\r\nSeveral properties allow you to set the appearance of text elements displayed in the UI:\r\n\r\n|Property|Descrition|\r\n|-|-|\r\n|`fontFamily`|This property specifies a prioritized list of one or more <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_FONT_FAMILY}>font family</SmartLink> names and/or generic family names for the selected component.|\r\n|`fontSize`|This property sets the size of the font. Changing the font <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> also updates the sizes of the font size-relative length units, such as em, ex, and so forth.|\r\n|`fontWeight`|Sets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_FONT_WEIGHT}>weight (or boldness)</SmartLink> of the font. The weights available depend on the `fontFamily` that is currently set.|\r\n|`fontStyle`| This property sets whether a font should be <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_FONT_STYLE}>\"slanted\"</SmartLink> using the following values: normal, italic, or oblique. |\r\n|`letterSpacing`|This property sets the horizontal <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>spacing</SmartLink> behavior between text characters. This value is added to the natural spacing between characters while rendering the text. Positive values cause characters to spread farther apart, while negative values bring characters closer together.|\r\n|`textDecoration`|This property sets the appearance of <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_TEXT_DECORATION}>decorative lines</SmartLink> on text.|\r\n|`textTransform`|This property specifies how to <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_TEXT_TRANSFORM}>capitalize</SmartLink> an element's text.|\r\n|`userSelect`|This property controls whether the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_USER_SELECT}>user can select</SmartLink> text.|\r\n|`lineHeight`|This property sets the height of a line as a number relative to the normal height. For example, 0.5 means half-height; 2 is twice the normal height. It's commonly used to set the distance between lines of text.|\r\n|`textAlign`|This property sets the horizontal <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_TEXT_ALIGNMENT}>alignment</SmartLink> of the inline-rendered content (e.g., text) inside its block-rendered parent.|\r\n|`textAlignLast`|This property sets how the last line of a block or a line, right before a forced line break, is <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_TEXT_ALIGNMENT}>aligned</SmartLink>.|\r\n\r\n```xmlui copy\r\n<App>\r\n  <Text fontFamily=\"'Courier New', monospace\">\r\n    This should be monospace\r\n  </Text>\r\n  <Text fontWeight=\"bold\">\r\n    This is bold text!\r\n  </Text>\r\n  <Text fontStyle=\"italic\" textDecoration=\"green wavy underline\">\r\n    This is italic with decoration!\r\n  </Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Setting text properties\"\r\n  app={`\r\n    <App>\r\n      <Text fontFamily=\"'Courier New', monospace\">\r\n        This should be monospace\r\n      </Text>\r\n      <Text fontWeight=\"bold\">\r\n        This is bold text!\r\n      </Text>\r\n      <Text fontStyle=\"italic\" textDecoration=\"green wavy underline\">\r\n        This is italic with decoration!\r\n      </Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Shadow\r\n\r\nYou can add <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SHADOW}>shadow effects</SmartLink> around a component's frame and set up one or more shadow effects.\r\n\r\n```xmlui copy {2}\r\n<App>\r\n  <VStack width=\"200px\" padding=\"20px\" border=\"2px solid #202020\"\r\n    boxShadow=\"12px 12px 5px orangered\" >\r\n    <Text>This is a box with a shadow around it.</Text>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Using shadow effect\"\r\n  app={`\r\n    <App>\r\n      <VStack width=\"200px\" padding=\"20px\" border=\"2px solid #202020\"\r\n        boxShadow=\"12px 12px 5px orangered\" >\r\n        <Text>This is a box with a shadow around it.</Text>\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Other Layout Properties\r\n\r\nA few layout properties are used for miscellaneous purposes.\r\n\r\n### Content Alignment\r\n\r\nComponents that lay out their children according to their strategy (such as `Stack`, `FlowLayout`, and others utilize these properties to influence the rendering logic.\r\n\r\n|Property|Description|\r\n|-|-|\r\n|horizontalAlignment| Specifies the horizontal <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_ALIGNMENT}>alignment</SmartLink> of child component within its parent. |\r\n|verticalAlignment| Specifies the vertical <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_ALIGNMENT}>alignment</SmartLink> of child component within its parent. |\r\n\r\n### Direction\r\n\r\nThis property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages). By default, the prop's value is `ltr`.\r\n\r\n```xmlui copy {6}\r\n<App>\r\n  <Text width=\"300px\" backgroundColor=\"cyan\">\r\n    This goes from left to right\r\n  </Text>\r\n  <Text width=\"300px\" backgroundColor=\"cyan\"\r\n    direction=\"rtl\">\r\n    This goes from right to left\r\n  </Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Using direction\"\r\n  app={`\r\n    <App>\r\n      <Text width=\"300px\" backgroundColor=\"cyan\">\r\n        This goes from left to right\r\n      </Text>\r\n      <Text width=\"300px\" backgroundColor=\"cyan\"\r\n        direction=\"rtl\">\r\n        This goes from right to left\r\n      </Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n\r\n### Gap\r\n\r\nLayout components use this property to define the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> of space separating child components.\r\n\r\n### Cursor\r\n\r\nThis layout property sets the mouse <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_CURSOR}>cursor</SmartLink>, if any, to show when the mouse pointer is over a particular component.\r\n\r\n### Orientation\r\n\r\nThis property specifies a particular component's <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_ORIENTATION}>orientation</SmartLink> when displaying its child components.\r\n\r\n### Z-Index\r\n\r\nThis layout property sets the z-order of a positioned component and its children. Overlapping components with a larger z-index cover those with a smaller one.\r\n",
  "create-apps/layout":"import { COMMON_VISUAL_PROPERTY_UNITS, COMMON_VISUAL_PROPERTY_UNITS_ALIGNMENT, COMMON_VISUAL_PROPERTY_UNITS_SIZE, COMPONENT_SPLITTER, LAYOUT_PROPERTIES, LAYOUT_PROPERTIES_COMPONENT_WIDTH_HEIGHT, REUSABLE_COMPONENTS, THEME_VARIABLES_SPACING_IN_LAYOUT_CONTAINERS } from \"../../meta/pages\";\r\nimport { Callout } from 'nextra/components';\r\n\r\n# Layout\r\n\r\nAn XMLUI app is a **hierarchical component tree** where parent components nest their children. While displaying children, each component arranges them with a particular strategy. For example, it puts children from in the same row horizontally, providing some gap among them.\r\n\r\nSome components' only role is to arrange their nested children in a particular layout. We call them **layout components**. They can nest other layout components in arbitrary depths. This arrangement allows the creation of complex app and component layouts.\r\n\r\nIn this article, you will learn the basics of the XMLUI layout system and get acquainted with the fundamental layout components.\r\n\r\n## Layout Terminology\r\n\r\nWe use a few terms to help us understand the topics quickly when discussing layout.\r\n\r\n### Viewport\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nEach component has a rectangular UI patch for rendering its content (and nested children). **This is the component's viewport**. The component decides (according to its rendering strategy) how it places its contents into the viewport. It may fill that partially, stretch the content for the entire viewport, or even overflow it vertically and horizontally.\r\n</Callout>\r\n\r\nThe following app contains two components, an `App`, and a `Text`:\r\n\r\n```xmlui copy\r\n<App>\r\n  <Text>Hello from XMLUI</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Component viewports\"\r\n  horizontal={true}\r\n  app={`\r\n    <App border=\"2px dotted red\">\r\n      <Text border=\"2px dotted green\">Hello from XMLUI</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nThe borders mark the viewport boundaries of the components:\r\n\r\n- `App`: The dotted red border is the app's viewport boundary. An `App` has the entire browser window as its viewport; however, it reserves some space to the left and right for scrollbars (to avoid viewport resizing when a vertical scrollbar appears or gets removed).\r\n- `Text`: The dotted green border is the text's viewport boundary. Its parent, `App`, uses some padding around its children.\r\n\r\n### Orientation\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nWhen rendering its children, a component may render them with vertical or horizontal orientation.\r\n</Callout>\r\n\r\n- Vertical orientation: Each child enters a new row when its parent displays it.\r\n- Horizontal orientation: Each child gets to the same row as its previous sibling. The component can decide when to enter a child component into a new row. For example, when the child does not fit into the remaining part of the row, the parent may enter it into a new row.\r\n\r\n`App` uses vertical orientation, while `HStack` (horizontal stack) applies horizontal orientation.\r\n\r\n```xmlui copy\r\n<App>\r\n  <Text>First item</Text>\r\n  <HStack>\r\n    <Text>Second item</Text>\r\n    <Text>Third item</Text>\r\n    <Text>Fourth item</Text>\r\n  </HStack>\r\n  <Text>Fifth item</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Orientation\"\r\n  horizontal={true}\r\n  app={`\r\n    <App>\r\n      <Text>First item</Text>\r\n      <HStack>\r\n        <Text>Second item</Text>\r\n        <Text>Third item</Text>\r\n        <Text>Fourth item</Text>\r\n      </HStack>\r\n      <Text>Fifth item</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Direction\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nSome languages (such as Hebrew and Arabic) are read from right to left. XMLUI components use this information to change their children's rendering direction.\r\n</Callout>\r\n\r\nThis example shows what happens when the browser uses right-to-left direction:\r\n\r\n```xmlui copy /direction=\"rtl\"/\r\n<App direction=\"rtl\">\r\n  <Text>First item</Text>\r\n  <HStack>\r\n    <Text>Second item</Text>\r\n    <Text>Third item</Text>\r\n    <Text>Fourth item</Text>\r\n  </HStack>\r\n  <Text>Fifth item</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Right-to-left direction\"\r\n  horizontal={true}\r\n  app={`\r\n    <App direction=\"rtl\">\r\n      <Text>First item</Text>\r\n      <HStack>\r\n        <Text>Second item</Text>\r\n        <Text>Third item</Text>\r\n        <Text>Fourth item</Text>\r\n      </HStack>\r\n      <Text>Fifth item</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Paddings and Gaps\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nEach component may apply padding and constrain the viewport its children can use. They can also add gaps between adjacent children.\r\n</Callout>\r\n\r\nThe following sample demonstrates it:\r\n\r\n```xmlui copy\r\n<App>\r\n  <Text>First item</Text>\r\n  <HStack>\r\n    <Text>Second item</Text>\r\n    <Text>Third item</Text>\r\n    <Text>Fourth item</Text>\r\n  </HStack>\r\n  <Text>Fifth item</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Paddings and gaps\"\r\n  height={200}\r\n  horizontal={true}\r\n  app={`\r\n    <App border=\"2px dotted red\">\r\n      <Text border=\"2px dotted green\">First item</Text>\r\n      <HStack border=\"2px dotted green\">\r\n        <Text border=\"2px dotted purple\">Second item</Text>\r\n        <Text border=\"2px dotted purple\">Third item</Text>\r\n        <Text border=\"2px dotted purple\">Fourth item</Text>\r\n      </HStack>\r\n      <Text border=\"2px dotted green\">Fifth item</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n- `App` applies vertical and horizontal padding, which is why the top left corner of the red border and the green border do not meet. It also adds gaps, which are the spaces between the green border areas.\r\n- `HStack` uses zero paddings; thus, the top-left corner of its green border and the first item's top-left corner (the purple border) meet. Similarly to `App`, `HStack` adds gaps, which are the spaces between the purple border areas.\r\n\r\n### Margins\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nMost web and desktop UI frameworks use another concept of spacing  (margins) when establishing the layout. **XMLUI layout components do not use margins**; they only use paddings and gaps.\r\n</Callout>\r\n\r\n<Callout type=\"warning\" emoji=\"💡\">\r\nUsing both margins and paddings complicates layout arrangements due to side effects (such as margin collapse applied by HTML). Though you can use margins when creating your components, use them as a last resort. For most layouts, paddings must be enough.\r\n</Callout>\r\n\r\n### Dimensions\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nEach component has a strategy for determining its contents' dimensions (height and width). You can change the component dimensions if this default strategy is unsuitable for your particular layout.\r\n</Callout>\r\n\r\nBy default, the VStack component determines its dimensions according to its content. However, if we want to display a 40px high and 60px wide orange-red box with empty content, we must explicitly set dimensions (and background color), as the default strategy won't work.\r\n\r\n```xmlui copy\r\n<App>\r\n  <VStack height=\"40px\" width=\"60px\" backgroundColor=\"orangered\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Dimensions\"\r\n  height={100}\r\n  horizontal={true}\r\n  app={`\r\n    <App>\r\n      <VStack height=\"40px\" width=\"60px\" backgroundColor=\"orangered\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Alignment\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nComponents can align their children in the viewport both vertically and horizontally.\r\n</Callout>\r\n\r\nThe following sample demonstrates it:\r\n\r\n<Playground\r\n  name=\"Alignment\"\r\n  horizontal={true}\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <VStack width=\"50%\" border=\"2px dotted red\" height=\"200px\" horizontalAlignment=\"end\">\r\n          <Text>Item #1</Text>\r\n          <Text>Item #2</Text>\r\n          <Text>Item #3</Text>\r\n        </VStack>\r\n        <VStack width=\"50%\" border=\"2px dotted green\" height=\"200px\" verticalAlignment=\"center\">\r\n          <Text>Item #1</Text>\r\n          <Text>Item #2</Text>\r\n          <Text>Item #3</Text>\r\n        </VStack>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nThe component with the red border aligns its children vertically to the start and horizontally to the end. The green-bordered component aligns its children vertically to the center and horizontally to the start.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nLater in this article, you will learn how to establish the markup for such a layout.\r\n</Callout>\r\n\r\n## Fundamental Layout Containers\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nXMLUI uses only two fundamental layout containers, `Stack`, and `FlowLayout`. All other container-like components (such as `Card`, `List`, and others) apply these to establish more sophisticated layout arrangements.\r\n</Callout>\r\n\r\n`Stack` is a layout container that uses a particular orientation (vertical or horizontal) to render its children in a single column or row. If the children do not fit into the viewport, they overflow. `Stack` has two specialized variants, `HStack` (horizontal stack) and `VStack` (vertical stack), the orientation of which is suggested by their names.\r\n\r\n`FlowLayout` is a layout container that renders its children horizontally while they fit into the current row; otherwise, the child enters a new row. If the children do not fit into the viewport, they overflow.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nYour application markup must have a single root component. The browser window is an implicit `VStack` layout container with that root element as its single child.\r\n</Callout>\r\n\r\nThere are two other components used frequently with these layout containers, `SpaceFiller`, and `Splitter`. In this article, you will learn how to use them.\r\n\r\n### Dimension Units [#dimension-units]\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nLayout containers use a particular strategy to render their child components; they calculate their children's dimensions.\r\n</Callout>\r\n\r\nIn specific layouts, you want to set a child's dimensions explicitly (and not determined by the content of the particular child). You can set one or more of these component properties to set a particular <SmartLink href={LAYOUT_PROPERTIES_COMPONENT_WIDTH_HEIGHT}>dimension</SmartLink>: `width`, `height`, `minWidth`, `minHeight`, `maxWidth`, and `maxHeight`.\r\n\r\nA child can declare one of these kind of <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>values</SmartLink> for a specific dimension:\r\n\r\n- **No value**. The layout container determines the default size of the child element according to its strategy.\r\n- **Container-independent size value**. All sizes except percentage (`%`) and star sizes (`*`) belong to this category. The container respects the child's requested size.\r\n- **Percentage size**. The container calculates the child's requested size as a percentage of the viewport's corresponding dimension.\r\n- **Star size**. The child provides a weight the parent container utilizes when distributing the _remaining space_ among its children. The remaining space is the parent viewport's size minus the sum sizes of child components within the first two categories (no value, container-independent size value).\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  The article includes examples of these dimension value categories in the sections discussing a particular layout container.\r\n</Callout>\r\n\r\nWhile rendering the child components within the parent's viewport, specific components may overflow the provided viewport size. The layout container's strategy determines how to display (or hide) the exceeding child components.\r\n\r\n### Gaps\r\n\r\nAll fundamental layout containers apply a default gap, ensuring that child components have some space between them.\r\n\r\nThe following sample shows how a `HStack` renders button children:\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    <Button>First button</Button>\r\n    <Button>Second button</Button>\r\n    <Button>Third button</Button>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Layout containers use default gaps\"\r\n  horizontal={true}\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Button>First button</Button>\r\n        <Button>Second button</Button>\r\n        <Button>Third button</Button>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nYou can remove the gaps if you intend to omit them entirely:\r\n\r\n```xmlui copy /gap=\"0\"/\r\n<App>\r\n  <HStack gap=\"0\">\r\n    <Button>First button</Button>\r\n    <Button>Second button</Button>\r\n    <Button>Third button</Button>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Layout containers with no gaps\"\r\n  horizontal={true}\r\n  app={`\r\n    <App>\r\n      <HStack gap=\"0\">\r\n        <Button>First button</Button>\r\n        <Button>Second button</Button>\r\n        <Button>Third button</Button>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nXMLUI offers several predefined gap values. Instead of inline literals (such as \"16px\", \"0.5rem\", etc.), use these values, as they can be themed, and it ensures a consistent design. You can learn about them <SmartLink href={THEME_VARIABLES_SPACING_IN_LAYOUT_CONTAINERS}>here</SmartLink>.\r\n\r\nThe following sample demonstrated using them:\r\n\r\n```xmlui copy /gap=\"$gap-tight\"/ /gap=\"$gap-loose\"/\r\n<App>\r\n  <VStack>\r\n    <HStack gap=\"$gap-tight\">\r\n      <Button>First button</Button>\r\n      <Button>Second button</Button>\r\n      <Button>Third button</Button>\r\n    </HStack>\r\n    <HStack gap=\"$gap-loose\">\r\n      <Button>First button</Button>\r\n      <Button>Second button</Button>\r\n      <Button>Third button</Button>\r\n    </HStack>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Layout containers with theme-controlled gaps\"\r\n  horizontal={true}\r\n  app={`\r\n    <App>\r\n      <VStack>\r\n        <HStack gap=\"$gap-tight\">\r\n          <Button>First button</Button>\r\n          <Button>Second button</Button>\r\n          <Button>Third button</Button>\r\n        </HStack>\r\n        <HStack gap=\"$gap-loose\">\r\n          <Button>First button</Button>\r\n          <Button>Second button</Button>\r\n          <Button>Third button</Button>\r\n        </HStack>\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n\r\n### Rendering Children\r\n\r\nAll layout container renders their children in declaration order; they consider the current page direction (left-to-right or right-to-left).\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  You should know a few additional layout-related things about <SmartLink href={REUSABLE_COMPONENTS + \"#reusable-components-in-layout-containers\"}>reusable components</SmartLink>.\r\n</Callout>\r\n\r\nLet's see a few samples to see how they work! The samples use the following code (replacing `Some_Container`) with a particular layout container:\r\n\r\n```xmlui copy /Some_Container/ /width=\"80%\"/\r\n<App>\r\n  <Some_Container>\r\n    <Stack height=\"20px\" width=\"20%\" backgroundColor=\"orangered\" />\r\n    <Stack height=\"20px\" width=\"20%\" backgroundColor=\"orangered\" />\r\n    <Stack height=\"20px\" width=\"80%\" backgroundColor=\"orangered\" />\r\n    <Stack height=\"20px\" width=\"20%\" backgroundColor=\"orangered\" />\r\n    <Stack height=\"20px\" width=\"20%\" backgroundColor=\"orangered\" />\r\n  </Some_Container>\r\n</App>\r\n```\r\n\r\nThis markup displays five boxes; the third is four times wider than the others.\r\n\r\n**Vertical stack**: Each child takes a new row.\r\n\r\n<Playground\r\n  name=\"Example: Vertical stack (VStack)\"\r\n  horizontal={true}\r\n  app={`\r\n    <App>\r\n      <VStack>\r\n        <Stack height=\"20px\" width=\"20%\" backgroundColor=\"orangered\" />\r\n        <Stack height=\"20px\" width=\"20%\" backgroundColor=\"orangered\" />\r\n        <Stack height=\"20px\" width=\"80%\" backgroundColor=\"orangered\" />\r\n        <Stack height=\"20px\" width=\"20%\" backgroundColor=\"orangered\" />\r\n        <Stack height=\"20px\" width=\"20%\" backgroundColor=\"orangered\" />\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n**Horizontal stack**: All children take a single row.\r\n\r\nObserve that the content overflows the width of a single row, and the app displays a horizontal scrollbar.\r\n\r\n<Playground\r\n  name=\"Example: Horizontal stack (HStack)\"\r\n  horizontal={true}\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Stack height=\"20px\" width=\"20%\" backgroundColor=\"orangered\" />\r\n        <Stack height=\"20px\" width=\"20%\" backgroundColor=\"orangered\" />\r\n        <Stack height=\"20px\" width=\"80%\" backgroundColor=\"orangered\" />\r\n        <Stack height=\"20px\" width=\"20%\" backgroundColor=\"orangered\" />\r\n        <Stack height=\"20px\" width=\"20%\" backgroundColor=\"orangered\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n**FlowLayout**: The component breaks a child into a new row when it does not fit into the remaining part of the row.\r\n\r\n<Playground\r\n  name=\"Example: FlowLayout\"\r\n  horizontal={true}\r\n  app={`\r\n    <App>\r\n      <FlowLayout>\r\n        <Stack height=\"20px\" width=\"20%\" backgroundColor=\"orangered\" />\r\n        <Stack height=\"20px\" width=\"20%\" backgroundColor=\"orangered\" />\r\n        <Stack height=\"20px\" width=\"80%\" backgroundColor=\"orangered\" />\r\n        <Stack height=\"20px\" width=\"20%\" backgroundColor=\"orangered\" />\r\n        <Stack height=\"20px\" width=\"20%\" backgroundColor=\"orangered\" />\r\n      </FlowLayout>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Container Height\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nIf you set an explicit height (with the `height` layout property), the layout container will use that height; otherwise, it accommodates its content (children) height.\r\n</Callout>\r\n\r\nCheck these examples:\r\n\r\n```xmlui copy\r\n<VStack\r\n  backgroundColor=\"cyan\"\r\n  horizontalAlignment=\"center\"\r\n  verticalAlignment=\"center\">\r\n  This is some text within a VStack\r\n</VStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: VStack with implicit height\"\r\n  app={`\r\n    <VStack\r\n      backgroundColor=\"cyan\"\r\n      horizontalAlignment=\"center\"\r\n      verticalAlignment=\"center\">\r\n      This is some text within a VStack\r\n    </VStack>\r\n  `}\r\n/>\r\n\r\n```xmlui copy /height=\"160px\"/\r\n<VStack\r\n  height=\"160px\"\r\n  backgroundColor=\"cyan\"\r\n  horizontalAlignment=\"center\"\r\n  verticalAlignment=\"center\">\r\n  This is some text within a VStack\r\n</VStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: VStack with *explicit* height\"\r\n  app={`\r\n    <VStack\r\n      height=\"160px\"\r\n      backgroundColor=\"cyan\"\r\n      horizontalAlignment=\"center\"\r\n      verticalAlignment=\"center\">\r\n      This is some text within a Stack\r\n    </VStack>\r\n  `}\r\n/>\r\n\r\nCheck how the stack height changed (the cyan background) between the two examples!\r\n\r\nWhen you explicitly set the height of a layout container, and the content is taller, that will overflow from the container:\r\n\r\n```xmlui copy /height=\"40px\"/\r\n<VStack height=\"40px\" backgroundColor=\"cyan\">\r\n  <Text fontSize=\"3rem\">This is some text within a Stack</Text>\r\n</VStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: VStack with vertical content overflow\"\r\n  height={120}\r\n  app={`\r\n    <VStack height=\"40px\" backgroundColor=\"cyan\">\r\n      <Text fontSize=\"3rem\">This is some text within a Stack</Text>\r\n    </VStack>\r\n  `}\r\n/>\r\n\r\n### Container Width\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nUnless you use an explicit width, a layout container uses the entire width of its viewport.\r\n</Callout>\r\n\r\nCheck these examples:\r\n\r\n```xmlui copy\r\n<VStack\r\n  backgroundColor=\"cyan\"\r\n  horizontalAlignment=\"center\"\r\n  verticalAlignment=\"center\">\r\n  This is some text within a VStack\r\n</VStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: VStack with implicit width\"\r\n  app={`\r\n    <VStack\r\n      backgroundColor=\"cyan\"\r\n      horizontalAlignment=\"center\"\r\n      verticalAlignment=\"center\">\r\n      This is some text within a VStack\r\n    </VStack>\r\n  `}\r\n/>\r\n\r\n```xmlui copy /width=\"400px\"/\r\n<VStack\r\n  width=\"400px\"\r\n  backgroundColor=\"cyan\"\r\n  horizontalAlignment=\"center\"\r\n  verticalAlignment=\"center\">\r\n  This is some text within a VStack\r\n</VStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: VStack with *explicit* width\"\r\n  app={`\r\n    <VStack\r\n      width=\"400px\"\r\n      backgroundColor=\"cyan\"\r\n      horizontalAlignment=\"center\"\r\n      verticalAlignment=\"center\">\r\n      This is some text within a Stack\r\n    </VStack>\r\n  `}\r\n/>\r\n\r\nCheck how the stack width changed (the cyan background) between the two examples!\r\n\r\nWhen you explicitly set the width of a layout container, and the content is wider, that will either break or overflow from the container.\r\n\r\nFor example, when you use text, the content can be broken into multiple lines, like in the following example:\r\n\r\n```xmlui copy /width=\"400px\"/\r\n<VStack width=\"400px\" backgroundColor=\"cyan\">\r\n  <Text fontSize=\"2rem\">This is some text within a Stack</Text>\r\n</VStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: VStack and text with *explicit* width\"\r\n  app={`\r\n    <VStack width=\"300px\" backgroundColor=\"cyan\">\r\n      <Text fontSize=\"2rem\">This is some text within a Stack</Text>\r\n    </VStack>\r\n  `}\r\n/>\r\n\r\nOther components, such as a box, may overflow horizontally:\r\n\r\n```xmlui copy /width=\"300px\"/ /width=\"400px\"/\r\n<VStack width=\"300px\" backgroundColor=\"cyan\">\r\n  <HStack height=\"40px\" border=\"2px solid red\" width=\"400px\"/>\r\n</VStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: HStack with *explicit* width\"\r\n  app={`\r\n    <VStack width=\"300px\" backgroundColor=\"cyan\">\r\n      <HStack height=\"40px\" border=\"2px solid red\" width=\"400px\"/>\r\n    </VStack>\r\n  `}\r\n/>\r\n\r\n## Stack\r\n\r\nThe `Stack` component is an essential layout container. It renders its child items horizontally or vertically according to its `orientation` property, optionally providing some gap between child components.\r\n\r\nYou can assign the `horizontal` or `vertical` values to the `Stack` component's `orientation` property to declare its rendering orientation. The default value is `vertical`.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nUse the Stack component when its `orientation` property comes from an expression evaluated run time. If the orientation is static (it does not change run time), use `VStack` (equivalent with `<Stack orientation=\"vertical\">`) and `HStack` (`<Stack orientation=\"horizontal\">`). This style is straightforward and concise.\r\n</Callout>\r\n\r\n### Content Alignment\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nWith the `horizontalAlignment` and `verticalAlignment` properties, you can define the corresponding alignment of children within a stack.\r\n</Callout>\r\n\r\nYou can find more information about the values of `horizontalAlignment` and `verticalAlignment` <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_ALIGNMENT}>here</SmartLink>.\r\n\r\nHere are a few samples. The following aligns the children of an `HStack` horizontally in the center:\r\n\r\n```xmlui copy /horizontalAlignment=\"center\"/\r\n<HStack horizontalAlignment=\"center\">\r\n  <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"green\" height=\"36px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"blue\" height=\"36px\" width=\"36px\" />\r\n</HStack>\r\n```\r\n\r\n<Playground\r\n  name=\"HStack with centered contents\"\r\n  horizontal={true}\r\n  app={`\r\n    <HStack horizontalAlignment=\"center\">\r\n      <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"green\" height=\"36px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"blue\" height=\"36px\" width=\"36px\" />\r\n    </HStack>\r\n  `}\r\n/>\r\n\r\nThis sample aligns the children of a `VStack` horizontally to the end (right edge):\r\n\r\n```xmlui copy /horizontalAlignment=\"end\"/\r\n<VStack  horizontalAlignment=\"end\">\r\n  <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"green\" height=\"36px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"blue\" height=\"36px\" width=\"36px\" />\r\n</VStack>\r\n```\r\n\r\n<Playground\r\n\r\n  name=\"VStack with right-aligned contents\"\r\n  horizontal={true}\r\n  app={`\r\n    <VStack  horizontalAlignment=\"end\">\r\n      <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"green\" height=\"36px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"blue\" height=\"36px\" width=\"36px\" />\r\n    </VStack>\r\n  `}\r\n/>\r\n\r\nThis sample aligns the children of an `HStack` vertically in the center:\r\n\r\n```xmlui copy /verticalAlignment=\"center\"/\r\n<HStack verticalAlignment=\"center\">\r\n  <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"green\" height=\"72px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"blue\" height=\"48px\" width=\"36px\" />\r\n</HStack>\r\n```\r\n\r\n<Playground\r\n\r\n  name=\"HStack with vertically centered contents\"\r\n  horizontal={true}\r\n  app={`\r\n    <HStack verticalAlignment=\"center\">\r\n      <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"green\" height=\"72px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"blue\" height=\"48px\" width=\"36px\" />\r\n    </HStack>\r\n  `}\r\n/>\r\n\r\n### Reverse Child Order\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n`Stack` has a property, `reverse`, which you can use to reverse the rendering order.\r\n</Callout>\r\n\r\nWith this flag set, a `HStack` renders its items in the opposite reading order of the current (for example, instead of left-to-right, it uses right-to-left). `VStack` starts rendering the last items and moves toward the first.\r\n\r\nSee the following example for `HStack`:\r\n\r\n```xmlui copy /reverse=\"true\"/\r\n<HStack reverse=\"true\">\r\n  <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"green\" height=\"36px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"blue\" height=\"36px\" width=\"36px\" />\r\n</HStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Horizontal Stack with the reverse flag\"\r\n  horizontal={true}\r\n  app={`\r\n    <HStack reverse=\"true\">\r\n      <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"green\" height=\"36px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"blue\" height=\"36px\" width=\"36px\" />\r\n    </HStack>\r\n  `}\r\n/>\r\n\r\nThis example uses a `VStack`:\r\n\r\n```xmlui copy /reverse=\"true\"/\r\n\r\n```xmlui copy /reverse=\"true\"/\r\n<VStack reverse=\"true\">\r\n  <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"green\" height=\"36px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"blue\" height=\"36px\" width=\"36px\" />\r\n</VStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Vertical Stack with the reverse flag\"\r\n  horizontal={true}\r\n  app={`\r\n    <VStack reverse=\"true\">\r\n      <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"green\" height=\"36px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"blue\" height=\"36px\" width=\"36px\" />\r\n    </VStack>\r\n  `}\r\n/>\r\n\r\n## VStack\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nA `VStack` component displays each of its children in a new row. If a child has no explicit (or component-specific) width, the `VStack` stretches the component to the entire viewport width. `VStack` keeps the child components' heights intact.\r\n</Callout>\r\n\r\nHere is an example:\r\n\r\n```xmlui copy\r\n<VStack>\r\n  <H2 backgroundColor=\"orangered\">I'm a heading with colored background</H2>\r\n  <Button>I'm a button</Button>\r\n</VStack>\r\n```\r\n\r\nThe `H2` component has no explicit size, so its width is set to the width of the text content (as the background color indicates). Though the `Button` component has no explicit size, it has a component-specific one (according to its content), so it is not stretched horizontally. The button is taller than the `VStack`, so its height determines the `VStack` height, and the text height is stretched to that.\r\n\r\n<Playground\r\n  name=\"Example: VStack children width\"\r\n  app={`\r\n    <VStack>\r\n      <H2 backgroundColor=\"orangered\">I'm a heading with colored background</H2>\r\n      <Button>I'm a button</Button>\r\n    </VStack>\r\n  `}\r\n/>\r\n\r\n### VStack with Percentage Height\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nWhen you use a `VStack` child with percentage height, the effective height is calculated from the entire stack height.\r\n</Callout>\r\n\r\nSuch a setup may cause overflow if the sum of percentages equals 100%, as the gaps between children are also included in the stack height. The following example demonstrates an overflow:\r\n\r\n```xmlui copy\r\n<VStack height=\"200px\" border=\"4px dotted green\">\r\n  <Stack backgroundColor=\"cyan\" height=\"50%\" />\r\n  <Stack backgroundColor=\"orangered\" height=\"50%\" />\r\n</VStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: VStack with percentage height (with gaps)\"\r\n  app={`\r\n    <VStack height=\"200px\" border=\"4px dotted green\">\r\n      <Stack backgroundColor=\"cyan\" height=\"50%\" />\r\n      <Stack backgroundColor=\"orangered\" height=\"50%\" />\r\n    </VStack>\r\n  `}\r\n/>\r\n\r\nWhen the stack does not apply gaps, there is no overflow:\r\n\r\n```xmlui copy /gap=\"0\"/\r\n<VStack gap=\"0\" height=\"200px\" border=\"4px dotted green\">\r\n  <Stack backgroundColor=\"cyan\" height=\"50%\" />\r\n  <Stack backgroundColor=\"orangered\" height=\"50%\" />\r\n</VStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: VStack with percentage height (no gaps)\"\r\n  app={`\r\n    <VStack gap=\"0\" height=\"200px\" border=\"4px dotted green\">\r\n      <Stack backgroundColor=\"cyan\" height=\"50%\" />\r\n      <Stack backgroundColor=\"orangered\" height=\"50%\" />\r\n    </VStack>\r\n  `}\r\n/>\r\n\r\n### VStack with Star Height\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nWhen you use a `VStack` child height with star-sizing, the effective height is calculated from the remaining height of the entire stack after subtracting the heights of explicitly sized children and gaps.\r\n</Callout>\r\n\r\nSuch a configuration will not cause overflow. Here is a sample:\r\n\r\n```xmlui copy\r\n<VStack height=\"240px\" border=\"4px dotted green\">\r\n  <Stack backgroundColor=\"cyan\" height=\"*\" />\r\n  <H3>I'm a heading</H3>\r\n  <Stack backgroundColor=\"orangered\" height=\"2*\" />\r\n</VStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: VStack with percentage height (with gaps)\"\r\n  app={`\r\n    <VStack height=\"240px\" border=\"4px dotted green\">\r\n      <Stack backgroundColor=\"cyan\" height=\"*\" />\r\n      <H3>I'm a heading</H3>\r\n      <Stack backgroundColor=\"orangered\" height=\"2*\" />\r\n    </VStack>\r\n  `}\r\n/>\r\n\r\n## HStack\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nA `HStack` component displays each of its children in a single row. If a child has no explicit (or component-specific) width, the `HStack` fits the component width to its content. `HStack` sets the child components' heights to the stack's viewport height.\r\n</Callout>\r\n\r\nHere is an example:\r\n\r\n```xmlui copy\r\n<HStack>\r\n  <H2 backgroundColor=\"orangered\">I'm a heading with colored background</H2>\r\n  <Button>I'm a button</Button>\r\n</HStack>\r\n```\r\n\r\nThe `H2` component has no explicit size, so it's stretched to the viewport width (as the background color indicates). Though `Button` has no explicit size, it has a component-specific one (according to its content), so it is not stretched.\r\n\r\n<Playground\r\n  name=\"Example: HStack children width\"\r\n  app={`\r\n    <HStack>\r\n      <H2 backgroundColor=\"orangered\">I'm a heading with colored background</H2>\r\n      <Button>I'm a button</Button>\r\n    </HStack>\r\n  `}\r\n/>\r\n\r\n### HStack with Percentage Width\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nWhen you use a `HStack` child with percentage width, the effective width is calculated from the stack's viewport width.\r\n</Callout>\r\n\r\nSuch a setup may cause horizontal overflow if the sum of percentages equals 100%, as the gaps between children are also included in the stack height. The following example demonstrates this effect:\r\n\r\n```xmlui copy\r\n<HStack border=\"4px dotted green\" height=\"200px\">\r\n  <Stack backgroundColor=\"cyan\" width=\"50%\" />\r\n  <Stack backgroundColor=\"orangered\" width=\"50%\" />\r\n</HStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: HStack with percentage height (with gaps)\"\r\n  height={240}\r\n  app={`\r\n    <HStack border=\"4px dotted green\" height=\"200px\">\r\n      <Stack backgroundColor=\"cyan\" width=\"50%\" />\r\n      <Stack backgroundColor=\"orangered\" width=\"50%\" />\r\n    </HStack>\r\n  `}\r\n/>\r\n\r\nWhen the stack does not apply gaps, there is no overflow:\r\n\r\n```xmlui copy /gap=\"0\"/\r\n<HStack gap=\"0\" border=\"4px dotted green\" height=\"200px\">\r\n  <Stack backgroundColor=\"cyan\" width=\"50%\" />\r\n  <Stack backgroundColor=\"orangered\" width=\"50%\" />\r\n</HStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: HStack with percentage height (no gaps)\"\r\n  app={`\r\n    <HStack gap=\"0\" border=\"4px dotted green\" height=\"200px\">\r\n      <Stack backgroundColor=\"cyan\" width=\"50%\" />\r\n      <Stack backgroundColor=\"orangered\" width=\"50%\" />\r\n    </HStack>\r\n  `}\r\n/>\r\n\r\n### HStack with Star Width\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nWhen you use a `HStack` child width with star-sizing, the effective height is calculated from the remaining width of the stack's viewport width after subtracting the widths of explicitly sized children and gaps.\r\n</Callout>\r\n\r\nSuch a configuration will not cause overflow. Here is a sample:\r\n\r\n```xmlui copy\r\n<HStack height=\"60px\" border=\"4px dotted green\">\r\n  <Stack backgroundColor=\"cyan\" width=\"*\" />\r\n  <H3>I'm a heading</H3>\r\n  <Stack backgroundColor=\"orangered\" width=\"2*\" />\r\n</HStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: VStack with percentage height (with gaps)\"\r\n  app={`\r\n    <HStack height=\"60px\" border=\"4px dotted green\">\r\n      <Stack backgroundColor=\"cyan\" width=\"*\" />\r\n      <H3>I'm a heading</H3>\r\n      <Stack backgroundColor=\"orangered\" width=\"2*\" />\r\n    </HStack>\r\n  `}\r\n/>\r\n\r\n### Content Wrapping\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n`HStack` has a `wrapContent` property. If you set it to `true`, the engine starts a new line (or column) when the subsequent child to render would overflow in the current line.\r\n</Callout>\r\n\r\nIn the following example, the fourth child does not fit in the first line entirely, so it overflows:\r\n\r\n```xmlui copy {2}\r\n<HStack>\r\n  <Stack backgroundColor=\"red\" height=\"36px\" width=\"25%\" />\r\n  <Stack backgroundColor=\"green\" height=\"36px\" width=\"40%\" />\r\n  <Stack backgroundColor=\"blue\" height=\"36px\" width=\"20%\" />\r\n  <Stack backgroundColor=\"purple\" height=\"36px\" width=\"30%\" />\r\n</HStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Horizontal stack with overflow\"\r\n  horizontal={true}\r\n  app={`\r\n    <HStack>\r\n      <Stack backgroundColor=\"red\" height=\"36px\" width=\"25%\" />\r\n      <Stack backgroundColor=\"green\" height=\"36px\" width=\"40%\" />\r\n      <Stack backgroundColor=\"blue\" height=\"36px\" width=\"20%\" />\r\n      <Stack backgroundColor=\"purple\" height=\"36px\" width=\"30%\" />\r\n    </HStack>\r\n  `}\r\n/>\r\n\r\nBy setting the `wrapContent` flag, the forth child gets into a new line:\r\n\r\n```xmlui copy {2} /wrapContent=\"true\"/\r\n<HStack wrapContent=\"true\">\r\n  <Stack backgroundColor=\"red\" height=\"36px\" width=\"25%\" />\r\n  <Stack backgroundColor=\"green\" height=\"36px\" width=\"40%\" />\r\n  <Stack backgroundColor=\"blue\" height=\"36px\" width=\"20%\" />\r\n  <Stack backgroundColor=\"purple\" height=\"36px\" width=\"30%\" />\r\n</HStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Horizontal Stack with content wrapping\"\r\n  horizontal={true}\r\n  app={`\r\n    <HStack wrapContent=\"true\">\r\n      <Stack backgroundColor=\"red\" height=\"36px\" width=\"25%\" />\r\n      <Stack backgroundColor=\"green\" height=\"36px\" width=\"40%\" />\r\n      <Stack backgroundColor=\"blue\" height=\"36px\" width=\"20%\" />\r\n      <Stack backgroundColor=\"purple\" height=\"36px\" width=\"30%\" />\r\n    </HStack>\r\n  `}\r\n/>\r\n\r\n### Rendering Direction\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nThe `HStack` component respects the reading direction set in the browser and renders its children accordingly.\r\n</Callout>\r\n\r\nThe following example shows how a the right-to-left reading direction renders the Stack:\r\n\r\n```xmlui copy {2} /direction=\"rtl\"/\r\n<HStack direction=\"rtl\">\r\n  <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"green\" height=\"36px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"blue\" height=\"36px\" width=\"36px\" />\r\n</HStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Horizontal Stack with right-to-left reading direction\"\r\n  horizontal={true}\r\n  app={`\r\n    <HStack direction=\"rtl\">\r\n      <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"green\" height=\"36px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"blue\" height=\"36px\" width=\"36px\" />\r\n    </HStack>\r\n  `}\r\n/>\r\n\r\nThe Stack has a property, `reverse`, which you can use to reverse the rendering order suggested by the current reading direction. While the `direction` value affects only the horizontal stack, the `reverse` value affects the vertical one, too.\r\n\r\n```xmlui copy {2}\r\n<HStack padding=\"1rem\" gap=\"1rem\" reverse=\"true\">\r\n  <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"green\" height=\"36px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"blue\" height=\"36px\" width=\"36px\" />\r\n</HStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Horizontal Stack with the reverse flag\"\r\n  horizontal={true}\r\n  app={`\r\n    <HStack padding=\"1rem\" gap=\"1rem\"\r\n      reverse=\"true\">\r\n      <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"green\" height=\"36px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"blue\" height=\"36px\" width=\"36px\" />\r\n    </HStack>\r\n  `}\r\n/>\r\n\r\n```xmlui copy {2}\r\n<VStack padding=\"1rem\" gap=\"1rem\" reverse=\"true\">\r\n  <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"green\" height=\"36px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"blue\" height=\"36px\" width=\"36px\" />\r\n</VStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Vertical Stack with the reverse flag\"\r\n  horizontal={true}\r\n  app={`\r\n    <VStack padding=\"1rem\" gap=\"1rem\" reverse=\"true\">\r\n      <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"green\" height=\"36px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"blue\" height=\"36px\" width=\"36px\" />\r\n    </VStack>\r\n  `}\r\n/>\r\n\r\n### Content Wrapping\r\n\r\nThe Stack has a `wrapContent` property to start a new line (or column) when the subsequent child to render would overflow.\r\n\r\nIn the following example, the fourth child does not fit in the first line entirely, so it overflows:\r\n\r\n```xmlui copy {2}\r\n<HStack padding=\"1rem\" gap=\"1rem\">\r\n  <Stack backgroundColor=\"red\" height=\"36px\" width=\"25%\" />\r\n  <Stack backgroundColor=\"green\" height=\"36px\" width=\"40%\" />\r\n  <Stack backgroundColor=\"blue\" height=\"36px\" width=\"20%\" />\r\n  <Stack backgroundColor=\"purple\" height=\"36px\" width=\"30%\" />\r\n</HStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Horizontal Stack with overflow\"\r\n  horizontal={true}\r\n  app={`\r\n    <HStack padding=\"1rem\" gap=\"1rem\">\r\n      <Stack backgroundColor=\"red\" height=\"36px\" width=\"25%\" />\r\n      <Stack backgroundColor=\"green\" height=\"36px\" width=\"40%\" />\r\n      <Stack backgroundColor=\"blue\" height=\"36px\" width=\"20%\" />\r\n      <Stack backgroundColor=\"purple\" height=\"36px\" width=\"30%\" />\r\n    </HStack>\r\n  `}\r\n/>\r\n\r\nBy setting the `wrapContent` flag, the forth child gets into a new line:\r\n\r\n```xmlui copy {2}\r\n<HStack padding=\"1rem\" gap=\"1rem\" wrapContent=\"true\">\r\n  <Stack backgroundColor=\"red\" height=\"36px\" width=\"25%\" />\r\n  <Stack backgroundColor=\"green\" height=\"36px\" width=\"40%\" />\r\n  <Stack backgroundColor=\"blue\" height=\"36px\" width=\"20%\" />\r\n  <Stack backgroundColor=\"purple\" height=\"36px\" width=\"30%\" />\r\n</HStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Horizontal Stack with content wrapping\"\r\n  horizontal={true}\r\n  app={`\r\n    <HStack padding=\"1rem\" gap=\"1rem\" wrapContent=\"true\">\r\n      <Stack backgroundColor=\"red\" height=\"36px\" width=\"25%\" />\r\n      <Stack backgroundColor=\"green\" height=\"36px\" width=\"40%\" />\r\n      <Stack backgroundColor=\"blue\" height=\"36px\" width=\"20%\" />\r\n      <Stack backgroundColor=\"purple\" height=\"36px\" width=\"30%\" />\r\n    </HStack>\r\n  `}\r\n/>\r\n\r\n> **Note**: Content wrapping is unavailable with the vertical stack.\r\n\r\n## CHStack\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n`CHStack` is a shorthand version of `Stack` with a horizontal orientation with its contents centered.\r\n\r\n```xmlui copy {2-4}\r\n<Stack\r\n  orientation=\"horizontal\"\r\n  verticalAlignment=\"center\"\r\n  horizontalAlignment=\"center\"\r\n/>\r\n```\r\n</Callout>\r\n\r\nHere is an example:\r\n\r\n```xmlui copy\r\n<CHStack height=\"100px\" width=\"200px\" backgroundColor=\"lightgray\">\r\n  <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"green\" height=\"72px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"blue\" height=\"48px\" width=\"36px\" />\r\n</CHStack>\r\n```\r\n\r\n<Playground\r\n  name=\"CHStack example\"\r\n  horizontal={true}\r\n  app={`\r\n    <CHStack height=\"100px\" width=\"200px\" backgroundColor=\"lightgray\">\r\n      <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"green\" height=\"72px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"blue\" height=\"48px\" width=\"36px\" />\r\n    </CHStack>\r\n  `}\r\n/>\r\n\r\n## CVStack\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n`CVStack` is a shorthand version of `Stack` with a vertical orientation with its contents centered.\r\n\r\n```xmlui copy {2-4}\r\n<Stack\r\n  orientation=\"vertical\"\r\n  verticalAlignment=\"center\"\r\n  horizontalAlignment=\"center\"\r\n/>\r\n```\r\n</Callout>\r\n\r\nHere is an example:\r\n\r\n```xmlui copy\r\n<CVStack height=\"200px\" width=\"100px\" backgroundColor=\"lightgray\">\r\n  <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n  <Stack backgroundColor=\"green\" height=\"36px\" width=\"72px\" />\r\n  <Stack backgroundColor=\"blue\" height=\"36px\" width=\"48px\" />\r\n</CVStack>\r\n```\r\n\r\n<Playground\r\n  name=\"CVStack example\"\r\n  horizontal={true}\r\n  app={`\r\n    <CVStack height=\"200px\" width=\"100px\" backgroundColor=\"lightgray\">\r\n      <Stack backgroundColor=\"red\" height=\"36px\" width=\"36px\" />\r\n      <Stack backgroundColor=\"green\" height=\"36px\" width=\"72px\" />\r\n      <Stack backgroundColor=\"blue\" height=\"36px\" width=\"48px\" />\r\n    </CVStack>\r\n  `}\r\n/>\r\n\r\n## FlowLayout\r\n\r\nThe `FlowLayout` component resembles a horizontal stack with content wrapping. Though it implements the same behavior, it has extra features:\r\n\r\n- **Percentage sizing**: `FlowLayout` considers the gaps between child elements when using percentage sizing, unlike `Stack`.\r\n- **Responsiveness**: `FlowLayout` resizes percentage-sized children on mobile devices.\r\n\r\n### Aligned Percentage Sizing\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nWhen you use an `HStack` with percentage sizing and the sum width of children is 100%, an overflow will occur because gaps require extra space.\r\n</Callout>\r\n\r\nThe following sample demonstrates such a situation:\r\n\r\n```xmlui copy\r\n<HStack>\r\n  <Stack backgroundColor=\"red\" height=\"36px\" width=\"25%\" />\r\n  <Stack backgroundColor=\"green\" height=\"36px\" width=\"50%\" />\r\n  <Stack backgroundColor=\"blue\" height=\"36px\" width=\"25%\" />\r\n</HStack>\r\n```\r\n\r\n<Playground\r\n  name=\"HStack with percentage widths and overflow\"\r\n  height={80}\r\n  horizontal={true}\r\n  app={`\r\n      <HStack>\r\n        <Stack backgroundColor=\"red\" height=\"36px\" width=\"25%\" />\r\n        <Stack backgroundColor=\"green\" height=\"36px\" width=\"50%\" />\r\n        <Stack backgroundColor=\"blue\" height=\"36px\" width=\"25%\" />\r\n      </HStack>\r\n    `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nThe `FlowLayout` component handles this sizing issue by adjusting the child component dimensions accounting for the gaps.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<FlowLayout>\r\n  <Stack backgroundColor=\"red\" height=\"36px\" width=\"25%\" />\r\n  <Stack backgroundColor=\"green\" height=\"36px\" width=\"50%\" />\r\n  <Stack backgroundColor=\"blue\" height=\"36px\" width=\"25%\" />\r\n</FlowLayout>\r\n```\r\n\r\n<Playground\r\n  name=\"FlowLayout children with 100% combined widths\"\r\n  horizontal={true}\r\n  app={`\r\n      <FlowLayout>\r\n        <Stack backgroundColor=\"red\" height=\"36px\" width=\"25%\" />\r\n        <Stack backgroundColor=\"green\" height=\"36px\" width=\"50%\" />\r\n        <Stack backgroundColor=\"blue\" height=\"36px\" width=\"25%\" />\r\n      </FlowLayout>\r\n  `}\r\n/>\r\n\r\n### Size Capping\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nThe FlowLayout component caps the size of items exceeding the available width.\r\n</Callout>\r\n\r\nIn the following sample, the red box is too wide. Nonetheless, the `FlowLayout` trims it back to 100% width:\r\n\r\n```xmlui copy /width=\"1000000px\"/\r\n<FlowLayout>\r\n  <Stack backgroundColor=\"red\" height=\"36px\" width=\"1000000px\" />\r\n  <Stack backgroundColor=\"green\" height=\"36px\" width=\"50%\" />\r\n  <Stack backgroundColor=\"blue\" height=\"36px\" width=\"25%\" />\r\n</FlowLayout>\r\n```\r\n\r\nNote how the extreme width of the first child is capped to the space available for the `FlowLayout`, while the other children's sizes remain unmodified:\r\n\r\n<Playground\r\n  name=\"FlowLayout with sum of 100% percentage widths\"\r\n  horizontal={true}\r\n  app={`\r\n      <FlowLayout>\r\n        <Stack backgroundColor=\"red\" height=\"36px\" width=\"1000000px\" />\r\n        <Stack backgroundColor=\"green\" height=\"36px\" width=\"50%\" />\r\n        <Stack backgroundColor=\"blue\" height=\"36px\" width=\"25%\" />\r\n      </FlowLayout>\r\n  `}\r\n/>\r\n\r\n## SpaceFiller\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n`SpaceFiller` is a component that fills the remaining (unused) space in layout containers. Its behavior depends on the layout container in which it is used.\r\n</Callout>\r\n\r\nIn a `Stack`, `SpaceFiller` pushes the children following it to the other end of the container:\r\n\r\n```xmlui copy {3}\r\n<HStack>\r\n  <Stack width=\"36px\" height=\"36px\" backgroundColor=\"red\" />\r\n  <SpaceFiller />\r\n  <Stack width=\"36px\" height=\"36px\" backgroundColor=\"blue\" />\r\n</HStack>\r\n```\r\n\r\n<Playground\r\n  name=\"SpaceFiller in an HStack\"\r\n  app={`\r\n  <HStack>\r\n    <Stack width=\"36px\" height=\"36px\" backgroundColor=\"red\" />\r\n    <SpaceFiller />\r\n    <Stack width=\"36px\" height=\"36px\" backgroundColor=\"blue\" />\r\n  </HStack>\r\n  `}\r\n/>\r\n\r\nIn a `FlowLayout`, `SpaceFiller` acts as a line break for a row. The children following the `SpaceFiller` enters a new line.\r\n\r\n```xmlui copy {3}\r\n<FlowLayout>\r\n  <Stack width=\"20%\" height=\"36px\" backgroundColor=\"red\" />\r\n  <SpaceFiller />\r\n  <Stack width=\"20%\" height=\"36px\" backgroundColor=\"green\" />\r\n  <Stack width=\"20%\" height=\"36px\" backgroundColor=\"blue\" />\r\n</FlowLayout>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: in a FlowLayout\"\r\n  app={`\r\n  <FlowLayout>\r\n    <Stack width=\"20%\" height=\"36px\" backgroundColor=\"red\" />\r\n    <SpaceFiller />\r\n    <Stack width=\"20%\" height=\"36px\" backgroundColor=\"green\" />\r\n    <Stack width=\"20%\" height=\"36px\" backgroundColor=\"blue\" />\r\n  </FlowLayout>\r\n  `}\r\n/>\r\n\r\n## Splitter\r\n\r\nThe `Splitter` component divides a container (such as a window, panel, pane, etc.) into two resizable sections (a primary and a secondary) and puts a draggable bar between them.\r\n\r\n`Splitter` has two specialized variants, `HSplitter` and `VSplitter`, which separate the two sections vertically and horizontally.\r\n\r\nThe following example demonstrates a horizontal splitter, which sets some constraints on the size of the primary section:\r\n\r\n```xmlui copy /orientation=\"horizontal\"/\r\n<HSplitter\r\n  height=\"100%\"\r\n  minPrimarySize=\"10%\"\r\n  maxPrimarySize=\"90%\">\r\n  <CVStack backgroundColor=\"lightblue\" height=\"100%\">Primary</CVStack>\r\n  <CVStack backgroundColor=\"darksalmon\" height=\"100%\">Secondary</CVStack>\r\n</HSplitter>\r\n```\r\n\r\nTry dragging the splitter bar between the sections to experience how it works.\r\n\r\n<Playground\r\n  height={150}\r\n  name=\"HSplitter example\"\r\n  app={`\r\n  <HSplitter\r\n    height=\"100%\"\r\n    minPrimarySize=\"10%\"\r\n    maxPrimarySize=\"90%\">\r\n    <CVStack backgroundColor=\"lightblue\" height=\"100%\">Primary</CVStack>\r\n    <CVStack backgroundColor=\"darksalmon\" height=\"100%\">Secondary</CVStack>\r\n  </HSplitter>\r\n  `}\r\n/>\r\n\r\nSee the <SmartLink href={COMPONENT_SPLITTER}>Splitter reference documentation</SmartLink> to learn more about this component.\r\n",
  "create-apps/resources":"import { FileTree } from 'nextra/components'\r\nimport { Callout } from 'nextra/components'\r\nimport { THEMES, THEMES_WHAT_A_THEME_CONTAINS } from \"../../meta/pages\"\r\nimport xmluiLogo from \"./samples/resources/xmlui-logo.svg\";\r\nimport home from \"./samples/resources/home.svg\";\r\n\r\n# Working with Resources\r\n\r\nAn XMLUI application, being a web application, can use static resources such as images, icons, fonts, etc provided by the application developer.\r\nThe XMLUI framework is then able to load these resources and use them seamlessly without the need to define how to load and manage these resources.\r\n\r\n## Adding Resources to a Project\r\n\r\nThe following guide will walk you through adding different kinds of resources to your application and also how to use them.\r\n\r\n### The `resources` Folder [#the-resource-folder]\r\n\r\nResources are generally stored in the `resources` folder of an XLMUI project, similar how regular websites store static resources in their public folder.\r\n\r\nThe first step of adding static resource files to your XMLUI application is moving or copying relevant files such as images to this folder.\r\nHere is an example of how the folder looks like for a simple project.\r\n\r\n<FileTree>\r\n  <FileTree.Folder name=\"resources\" defaultOpen>\r\n    <FileTree.File name=\"favicon.ico\" />\r\n    <FileTree.File name=\"custom-logo.svg\" />\r\n    <FileTree.File name=\"empty-folder.svg\" />\r\n    <FileTree.File name=\"hero-img.jpg\" />\r\n    <FileTree.File name=\"my-font.woff2\" />\r\n  </FileTree.Folder>\r\n</FileTree>\r\n\r\n### Using Resources Directly\r\n\r\nAfter adding the files you wish to use, you can opt to refer to them directly from code.\r\nThis is a fast way to add any static files to your project:\r\n\r\n```xmlui copy filename=\"Main.xmlui\"\r\n<App\r\n  name=\"Tutorial\"\r\n  logo=\"resources/custom-logo.svg\">\r\n  <AppHeader>\r\n    <H2>Using Resources Tutorial</H2>\r\n  </AppHeader>  \r\n  <Image \r\n    src=\"/resources/breakfast.jpg\" fit=\"contain\" \r\n    width=\"240px\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Using Resources Directly\"\r\n  previewOnly\r\n  resources={{ logo: xmluiLogo }}\r\n  app={`\r\n  <App\r\n    name=\"Tutorial\">\r\n    <AppHeader>\r\n      <H2>Using Resources Tutorial</H2>\r\n    </AppHeader>  \r\n    <Image src=\"/resources/images/components/image/breakfast.jpg\" fit=\"contain\" width=\"240px\"/>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### Configuration File\r\n\r\nThe other way you can refer to resources in your application code is by telling the application where to look for resources and what their handle should be.\r\nThis is done in the project configuration file called `config.json` in the project root.\r\n\r\nContinuing with the example in the <SmartLink href=\"#the-resource-folder\">The resource Folder</SmartLink> section,\r\nthe configuration object in the file gets a `resources` entry which looks like so:\r\n\r\n```json copy filename=\"config.json\"\r\n{\r\n  \"name\": \"Tutorial\",\r\n  \"version\": \"1.0.0\",\r\n  \"resources\": {\r\n    \"favicon\": \"resources/favicon.ico\",\r\n    \"custom-logo\": \"resources/custom-logo.svg\",\r\n    \"icon.empty-folder\": \"resources/empty-folder.svg\",\r\n    \"breakfastImg\": \"resources/breakfast.jpg\"\r\n  }\r\n}\r\n```\r\n\r\n### Using Resources\r\n\r\nFinally, you can access newly added resources by their handles defined in the configuration object.\r\n\r\n```xmlui copy filename=\"Main.xmlui\"\r\n<App\r\n  name=\"Tutorial\"\r\n  logo=\"custom-logo\">\r\n  <AppHeader>\r\n    <H2>Using Resources Tutorial</H2>\r\n  </AppHeader>  \r\n  <Image src=\"resource:breakfastImg\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  previewOnly\r\n  name=\"Example: Using Resources via Config\"\r\n  resources={{ logo: xmluiLogo }}\r\n  app={`\r\n  <App\r\n    name=\"Tutorial\"\r\n    logo=\"custom-logo\">\r\n    <AppHeader>\r\n      <H2>Using Resources Tutorial</H2>\r\n    </AppHeader>  \r\n    <Image src=\"/resources/images/components/image/breakfast.jpg\" fit=\"contain\" width=\"240px\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\nA number of things to note here:\r\n\r\n- Icons need to be prefixed with `icon.` in order for the framework to correctly identify them (as in the case of \"icon.empty-folder\").\r\n- When setting a source for an `Image` component and the source is a resource with a handle, the handle name needs to be prefixed with `resource:` in order to resolve the file location\r\n- The `App` component automatically loads resources identified by the `logo` and `logo-dark` handles, thus setting its `logo` property is optional.\r\n\r\n## Themes and Resources\r\n\r\nResources can be defined in different scopes: either they are global or are scoped to a specific theme.\r\nThemes can have their own resources in their respective `theme files`.\r\n\r\nSee the article discussing <SmartLink href={THEMES_WHAT_A_THEME_CONTAINS}>Theme object structuring</SmartLink> to find out more.\r\n\r\n## Overriding Existing Icons\r\n\r\nThe XMLUI framework has a built-in icon library that can be accessed via the `Icon` component.\r\nThese icons ship with the framwork but it is possible to replace predefined icons as you see fit.\r\n\r\nIn the example below, an icon with the name `home` already exists in the icon library but is overridden by the new `home.svg` file.\r\n\r\n```json copy filename=\"config.json\"\r\n{\r\n  \"name\": \"Tutorial\",\r\n  \"version\": \"1.0.0\",\r\n  \"resources\": {\r\n    \"icon.home\": \"resources/home.svg\"\r\n  }\r\n}\r\n```\r\n\r\n```xmlui copy filename=\"Main.xmlui\"\r\n<App>\r\n  <Icon name=\"home\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  previewOnly\r\n  name=\"Example: Using Resources via Config\"\r\n  resources={{ \"icon.home\": home }}\r\n  app={`\r\n  <App>\r\n    <Icon name=\"home\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\n## Loading Fonts\r\n\r\nIt is also possible to load different kinds of font families in the configuration file and theme files.\r\nThere are two ways to go about loading and using fonts.\r\n\r\nIf you need more information on working with themes before continuing, see <SmartLink href={THEMES}>this article</SmartLink>.\r\n\r\n### Loading from Folder\r\n\r\nThe first method is placing font files into the `resources` folder and referencing those fonts.\r\nFonts contained in font files are automatically added to the project, so you only need to reference them in the config file or theme file.\r\n\r\nYou may have a font file called \"my-font.woff2\" in the `resources` folder like so:\r\n\r\n<FileTree>\r\n  <FileTree.Folder name=\"resources\" defaultOpen>\r\n    <FileTree.File name=\"my-font.woff2\" />\r\n  </FileTree.Folder>\r\n</FileTree>\r\n\r\nThis file contains the \"My Font Family\" font family, which can be referenced in a theme file:\r\n\r\n```ts filename=\"my-theme.ts\" {5-9, 14}\r\nexport const myTheme: ThemeDefinition = {\r\n  name: \"My Theme\",\r\n  id: \"myTheme\",\r\n  resources: {\r\n    \"font.myFont\": {\r\n      fontFamily: \"My Font Family\",\r\n      fontWeight: \"400\",\r\n      src: \"resources/my-font.woff2\",\r\n    },\r\n  },\r\n  themeVars: {\r\n    // ...\r\n    \"fontFamily\": '\"My Font Family\", \"Helvetica Neue\", Arial, Verdana, sans-serif',\r\n    // ...\r\n  }\r\n}\r\n```\r\n\r\n### Loading from a CDN\r\n\r\nThe second method of working with font resources is to load them from a CDN.\r\nIn this case, you have to specify the CDN URL from where to fetch the fonts in the configuration file:\r\n\r\n```ts filename=\"my-theme.ts\" {5, 9}\r\nexport const myTheme: ThemeDefinition = {\r\n  name: \"My Theme\",\r\n  id: \"myTheme\",\r\n  resources: {\r\n    \"font.roboto\": \"https://fonts.googleapis.com/css2?family=Roboto&display=swap\"\r\n  },\r\n  themeVars: {\r\n    // ...\r\n    \"fontFamily\": 'Roboto, Helvetica, Arial, sans-serif',\r\n    // ...\r\n  }\r\n}\r\n```\r\n",
  "create-apps/reusable-components":"import { Callout } from 'nextra/components'\r\n\r\n# Reusable Components\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  XLMUI has been designed with **reusable components** in mind. Besides the components out-of-the box, you can use the markup to create and utilize your reusable components within your app.\r\n</Callout>\r\n\r\nThis article will teach you the gritty-nitty details of component creation and customization.\r\n\r\n## Defining Reusable Components\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Use the `<Component>` tag to declare a reusable component in the markup. This tag has a mandatory attribute, `name`, a unique identifier to the component.\r\n</Callout>\r\n\r\n```xmlui copy filename=\"components/LabeledValue.xmlui\"\r\n<Component name=\"LabeledValue\">\r\n  <HStack>\r\n    <Text>Label:</Text>\r\n    <Text>Value</Text>\r\n  </HStack>\r\n</Component>\r\n```\r\n\r\nYou can immediately use the new component type, `LabeledValue`, putting it into your app using the `<LabeledValue>` tag:\r\n\r\n```xmlui copy filename=\"Main.xmlui\"\r\n<App>\r\n  <LabeledValue />\r\n  -- Separator text --\r\n  <LabeledValue />\r\n</App>\r\n```\r\n\r\nThe XMLUI engine displays all `LabeledValue` component instances:\r\n\r\n<Playground\r\n  name=\"LabeledText\"\r\n  components={[`\r\n    <Component name=\"LabeledValue\">\r\n      <HStack>\r\n        <Text>Label:</Text>\r\n        <Text>Value</Text>\r\n      </HStack>\r\n    </Component>\r\n  `]}\r\n  app={`\r\n    <App>\r\n      <LabeledValue />\r\n      -- Separator text --\r\n      <LabeledValue />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  The component's name must start with an uppercase letter followed by letters, digits, the underscore (`_`), or the dollar sign (`$`) character. Components must be placed into separate files in the `components` folder within the app's root folder. **Use the same name for the component as its filename so that the browser can fetch the component.**\r\n</Callout>\r\n\r\nThe component must have content, at least a single nested tag to define the component's visual representation, and, optionally, it may have variables and methods assigned to the component.\r\n\r\n## Using Properties\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Component definitions can refer to properties passed to component instances.\r\n</Callout>\r\n\r\nThough reusable components with a static appearance may be helpful, the real power comes when you can define component properties to influence the appearance and behavior of a particular reusable component.\r\n\r\nWith a few additions, you can allow `LabeledValue` to receive a `label` and a `value` specification:\r\n\r\n```xmlui copy\r\n<Component name=\"LabeledValue\">\r\n  <HStack>\r\n    <Text>{$props.label}:</Text>\r\n    <Text>{$props.value}</Text>\r\n  </HStack>\r\n</Component>\r\n```\r\n\r\nThe `$props` context value defines the properties passed to the custom component. You can use the `.` operator to access a particular property. So, `$props.label` and `$props.value` mark the `label` and `value` properties, respectively. As you use these names in binding expressions, the engine will display their run time value.\r\n\r\nUse the same markup to pass property values to reusable components as you do for built-in components:\r\n\r\n```xmlui\r\n<App>\r\n  <LabeledValue label=\"Firstname\" value=\"Cameron\" />\r\n  -- Separator text --\r\n  <LabeledValue label=\"Lastname\" value=\"Smith\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"LabeledText with properties\"\r\n  components={[`\r\n    <Component name=\"LabeledValue\">\r\n      <HStack><Text>{$props.label}</Text>:<Text>{$props.value}</Text></HStack>\r\n    </Component>\r\n  `]}\r\n  app={`\r\n    <App>\r\n      <LabeledValue label=\"Firstname\" value=\"Cameron\" />\r\n      -- Separator text --\r\n      <LabeledValue label=\"Lastname\" value=\"Smith\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nXMLUI does not require defining component properties in advance. You just use your property through the `$props` identifier; the engine will immediately understand and render it.\r\n</Callout>\r\n\r\nSometimes, it is helpful to have default values for properties. XMLUI makes it simple using the `??` operator, as you can see in the following component definition:\r\n\r\n```xmlui\r\n<Component name=\"LabeledValue\">\r\n  <HStack>\r\n    <Text>{$props.label ?? '[label]'}:</Text>\r\n    <Text>{$props.value ?? '[none]'}</Text>\r\n  </HStack>\r\n</Component>\r\n```\r\n\r\n<Playground\r\n  name=\"LabeledText with default property values\"\r\n  components={[`\r\n    <Component name=\"LabeledValue\">\r\n      <HStack>\r\n        <Text>{$props.label ?? '[label]'}</Text>:\r\n        <Text>{$props.value ?? '[none]'}</Text>\r\n      </HStack>\r\n    </Component>\r\n  `]}\r\n  app={`\r\n    <App>\r\n      <LabeledValue value=\"Cameron\" />\r\n      -- Separator text --\r\n      <LabeledValue label=\"Lastname\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Using Events\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Similarly to properties, you can harness a reusable component with custom events.\r\n</Callout>\r\n\r\nCreate a new reusable component, `<IncButton>`, which increments its value for every click. This component can notify its environment about increments by firing an event. This event receives the current counter as an event parameter:\r\n\r\n```xmlui copy {4}\r\n<Component name=\"IncButton\">\r\n  <Button\r\n    label=\"Click to increment: {count}\" var.count=\"{0}\"\r\n    onClick=\"count++; emitEvent('incremented', count)\" />\r\n</Component>\r\n```\r\n\r\nThe `emitEvent` function emits the `\"incremented\"` event attached to the reusable component's instance and triggers the particular event handler. The first argument of `emitEvent` is the event name, and the subsequent ones are the arguments of the specific event.\r\n\r\nThe following app uses the new event to append the number of clicks to a text. The handler of the `incremented` event (`onIncremented`) declares an arrow function where `v` represents the event value, namely, the count of clicks:\r\n\r\n```xmlui copy\r\n<App var.text=\"\">\r\n  <IncButton onIncremented=\"v => text += ' ' + v\" />\r\n  <Text value=\"{text}\" />\r\n</App>\r\n```\r\n\r\nTry using `<IncButton>` with the `incremented` event:\r\n\r\n<Playground\r\n  name=\"IncButton with an event\"\r\n  components={[`\r\n    <Component name=\"IncButton\">\r\n      <Button\r\n        label=\"Click to increment: {count}\" var.count=\"{0}\"\r\n        onClick=\"count++; emitEvent('incremented', count)\" />\r\n    </Component>\r\n  `]}\r\n  app={`\r\n    <App var.text=\"\">\r\n      <IncButton onIncremented=\"v => text += ' ' + v\" />\r\n      <Text value=\"{text}\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Exposing Component Methods [#exposing-methods]\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  In addition to properties and events, you can expose custom methods from a particular component.\r\n</Callout>\r\n\r\nYou can invoke these methods in other components to execute an operation or query some information in the exposing component.\r\n\r\nThe following code snippet shows a modified `<IncButton>` component that exposes a method, `setValue`, to set the button's counter value from outside the component:\r\n\r\n```xmlui copy {4}\r\n<Component\r\n  name=\"IncButton\"\r\n  var.count=\"{0}\"\r\n  method.setValue=\"v => count = v\">\r\n  <Button label=\"Click to increment: {count}\" onClick=\"count++\" />\r\n</Component>\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  Variables defined within a reusable component are invisible from outside. **However, with methods, you can expose them**.\r\n</Callout>\r\n\r\nThe updated component stores the counter value in a variable belonging to the entire component (and not enclosed within the `<Button>`). This line declares the `setValue` method with an arrow function with the parameter receiving the new value (`v`).\r\n\r\nThe following app adds a second button to set the current value of `<IncButton>` to 123 on a click. Here, we provide an `id` for `<IncButton>` to refer to it from the second button:\r\n\r\n```xmlui copy {3,6}\r\n<App>\r\n  <HStack>\r\n    <IncButton id=\"myIncButton\" />\r\n    <Button\r\n      label=\"Set count to 123!\"\r\n      onClick=\"myIncButton.setValue(123)\" />\r\n  </HStack>\r\n</App>\r\n```\r\nThe click event handler (`onClick`) of the second button uses the `myIncButton.setValue()` expression to invoke the `setValue` method associated with the `myIncButton` instance.\r\n\r\nTry using this simple app:\r\n\r\n<Playground\r\n  name=\"IncButton with an exposed method\"\r\n  components={[`\r\n    <Component name=\"IncButton\" var.count=\"{0}\" method.setValue=\"v => count = v\">\r\n      <Button label=\"Click to increment: {count}\" onClick=\"count++\" />\r\n    </Component>\r\n  `]}\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <IncButton id=\"myIncButton\" />\r\n        <Button label=\"Set count to 123!\" onClick=\"myIncButton.setValue(123)\" />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## `<Slot>`\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can use the `Slot` placeholder within a reusable component's definition to mark the location when the reusable component's children should be injected.\r\n</Callout>\r\n\r\nHere, `Slot` is nested into `VStack` to mark the location to inject `MyStack` children:\r\n\r\n```xmlui copy {4}\r\n<Component name=\"MyStack\">\r\n  <H2>This is my special Stack</H2>\r\n  <VStack backgroundColor=\"cyan\">\r\n    <Slot/>\r\n  </VStack>\r\n</Component>\r\n```\r\n\r\nThis sample injects children into `MyStack`:\r\n\r\n```xmlui copy {2-4}\r\n<App>\r\n  <MyStack>\r\n  These are the children injected into the\r\n  <H3>MyStack</H3>\r\n  component's Slot placeholder\r\n  </MyStack>\r\n</App>\r\n```\r\n\r\n`MyStack` puts the children into the location designated by `Slot`:\r\n\r\n<Playground\r\n  name=\"Example: Using Slot\"\r\n  horizontal={true}\r\n  components={[`\r\n    <Component name=\"MyStack\">\r\n      <H2>This is my special Stack</H2>\r\n      <VStack padding=\"1rem\" gap=\"0.2rem\" backgroundColor=\"cyan\">\r\n       <Slot/>\r\n      </VStack>\r\n    </Component>\r\n  `,\r\n    ]}\r\n  app={`\r\n    <App>\r\n      <MyStack>\r\n      These are the children injected into the\r\n      <H3>MyStack</H3>\r\n      component's Slot placeholder\r\n      </MyStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Default Slot Content\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nThe `Slot` may display default content when the reusable component instance does not define children.\r\n</Callout>\r\n\r\nIn this example, `Slot` declares a default view:\r\n\r\n```xmlui copy {3}\r\n<Component name=\"MyGreeting\">\r\n  <Slot>\r\n    <H2>Hi There!</H2>\r\n  </Slot>\r\n</Component>\r\n```\r\n\r\nThe following sample displays two `MyGreeting` instances. The first does not define children (content for `Slot`); the second does:\r\n\r\n```xmlui copy\r\n<App>\r\n  <MyGreeting />\r\n  <MyGreeting>\r\n    <H1>Howdy!</H1>\r\n  </MyGreeting>\r\n</App>\r\n```\r\n\r\nThe engine renders the first `MyGreeting` instance with the default content, the second with the content defined in the instance:\r\n\r\n<Playground\r\n  name=\"Example: Default slot\"\r\n  horizontal={true}\r\n  components={[`\r\n    <Component name=\"MyGreeting\">\r\n      <Slot>\r\n        <H2>Hi There!</H2>\r\n      </Slot>\r\n    </Component>\r\n  `,\r\n    ]}\r\n  app={`\r\n    <App>\r\n      <MyGreeting />\r\n      <MyGreeting>\r\n        <H1>Howdy!</H1>\r\n      </MyGreeting>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Slot Context values\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nThe `Slot` in a reusable component may define arbitrary properties it passes as context values to the children of the particular reusable component instance. \r\n</Callout>\r\n\r\nThe following component, `RandomNumberDisplay`, generates a random number between its `minValue` and `maxValue` properties and delegates displaying that number to its consumer.\r\n\r\n```xmlui copy /number=\"{randomNumber}\"/\r\n<Component name=\"RandomNumberDisplay\">\r\n  <variable \r\n    name=\"randomNumber\" \r\n    value=\"{Math.floor(Math.random() * ($props.maxValue - $props.minValue)) + $props.minValue}\" />\r\n  <Slot number=\"{randomNumber}\"/>\r\n</Component>\r\n```\r\n\r\nHere, the app uses `RandomNumberDisplay` to generate a number between 10 and 19, which it displays in a shaded box with 4 times zoom. The app receives the random number passed to the `number` property within the component declaration of `RandomNumberDisplay` in the `$number` context value.\r\n\r\n```xmlui copy {3-7} /$number/\r\n<App>\r\n  <RandomNumberDisplay minValue=\"{10}\" maxValue=\"{20}\">\r\n    <CHStack \r\n      width=\"200px\" \r\n      height=\"100px\" backgroundColor=\"cyan\">\r\n      <Text zoom=\"4\">[{$number}]</Text>\r\n    </CHStack>\r\n  </RandomNumberDisplay>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Slot context values\"\r\n  horizontal={true}\r\n  components={[`\r\n    <Component name=\"RandomNumberDisplay\">\r\n      <variable \r\n        name=\"randomNumber\" \r\n        value=\"{Math.floor(Math.random() * ($props.maxValue - $props.minValue)) + $props.minValue}\" />\r\n      <Slot number=\"{randomNumber}\"/>\r\n    </Component>\r\n  `,\r\n    ]}\r\n  app={`\r\n    <App>\r\n      <RandomNumberDisplay minValue=\"{10}\" maxValue=\"{20}\">\r\n        <CHStack \r\n          width=\"200px\" \r\n          height=\"100px\" backgroundColor=\"cyan\">\r\n          <Text zoom=\"4\">[{$number}]</Text>\r\n        </CHStack>\r\n      </RandomNumberDisplay>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Named Slots\r\n\r\nA reusable component may define named `Slot` elements (each having a unique `name` property). The reusable component instance can provide separate content for these named slots. Slot names should end with the `Template` suffix; otherwise, the rendering engine raises an error.\r\n\r\nIn the following example, `FancyCard` has a named slot (`titleTemplate`) with default slot content and a `title` context value, which wraps the title in several asterisks:\r\n\r\n```xmlui copy {4-6}\r\n<Component name=\"FancyCard\">\r\n  <VStack border=\"2px solid orangered\" padding=\"$padding-loose\">\r\n    <variable name=\"fancyTitle\" value=\"*** {$props.title} ***\" />\r\n    <Slot name=\"titleTemplate\" title=\"{fancyTitle}\">\r\n      <H1>{fancyTitle}</H1>\r\n    </Slot>\r\n    <VStack backgroundColor=\"blanchedalmond\" padding=\"$padding-loose\">\r\n      <Slot />\r\n    </VStack>\r\n  </VStack>\r\n</Component>\r\n```\r\n\r\nThe app uses two instances of `FancyCard`. The first does not have a definition for the `titleTemplate`; the engine uses the default content declared in `FancyCard`. The second instance has template content that renders the title in a shaded box. This template content uses the asterisk-wrapped title via the `$title` context value.\r\n\r\n```xmlui copy {6-10}\r\n<App>\r\n  <FancyCard title=\"Demo Card #1\">\r\n    This is my fancy card content #1\r\n  </FancyCard>\r\n  <FancyCard title=\"Demo Card #2\">\r\n    <property name=\"titleTemplate\">\r\n      <VStack padding=\"$padding-tight\" backgroundColor=\"lightblue\">\r\n        <H1>{$title}</H1>\r\n      </VStack>\r\n    </property>\r\n    This is my fancy card content #2\r\n  </FancyCard>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Slot context values\"\r\n  horizontal={true}\r\n  components={[`\r\n    <Component name=\"FancyCard\">\r\n      <VStack border=\"2px solid orangered\" padding=\"$padding-loose\">\r\n        <variable name=\"fancyTitle\" value=\"*** {$props.title} ***\" />\r\n        <Slot name=\"titleTemplate\" title=\"{fancyTitle}\">\r\n          <H1>{fancyTitle}</H1>\r\n        </Slot>\r\n        <VStack backgroundColor=\"blanchedalmond\" padding=\"$padding-loose\">\r\n          <Slot />\r\n        </VStack>\r\n      </VStack>\r\n    </Component>\r\n  `,\r\n    ]}\r\n  app={`\r\n    <App>\r\n      <FancyCard title=\"Demo Card #1\">\r\n        This is my fancy card content #1\r\n      </FancyCard>\r\n      <FancyCard title=\"Demo Card #2\">\r\n        <property name=\"titleTemplate\">\r\n          <VStack padding=\"$padding-tight\" backgroundColor=\"lightblue\">\r\n            <H1>{$title}</H1>\r\n          </VStack>\r\n        </property>\r\n        This is my fancy card content #2\r\n      </FancyCard>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Reusable Components in Layout Containers\r\n\r\nWhen you use reusable components with layout containers wrapping them, displaying a particular markup is not always obvious. The reusable components may nest other layout containers. As you do not see these nested containers from the markup directly, sometimes you may not understand immediately a particular component arrangement.\r\n\r\nIn this section, you will learn a few details about how reusable components are displayed within layout containers.\r\n\r\nLet's create a reusable component, `MyBoxes`, with this markup:\r\n\r\n```xmlui copy\r\n<Component name=\"MyBoxes\">\r\n  <Stack width=\"100px\" height=\"36px\" backgroundColor=\"purple\" />\r\n  <Stack width=\"50px\" height=\"36px\" backgroundColor=\"orange\" />\r\n</Component>\r\n```\r\n\r\n`MyBoxes` displays two boxes with different sizes and background color settings. Its declaration only tells the orange box to follow the purple box.\r\n\r\n### Reusable Components in a Stack\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  When you nest a reusable component into a stack, **the engine ignores all layout-related properties decorating the reusable component instance**.\r\n</Callout>\r\n\r\nNest the `MyBoxes` instances into an `HStack`:\r\n\r\n```xmlui copy /width=\"50%\"/\r\n<App>\r\n  <HStack>\r\n    <MyBoxes width=\"50%\" />\r\n    <MyBoxes />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\nThe engine renders this markup as if your declaration was this (it ignores the `width=\"50%` of the first `MyBoxes`) instance:\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    <Stack width=\"100px\" height=\"36px\" backgroundColor=\"purple\" />\r\n    <Stack width=\"50px\" height=\"36px\" backgroundColor=\"orange\" />\r\n    <Stack width=\"100px\" height=\"36px\" backgroundColor=\"purple\" />\r\n    <Stack width=\"50px\" height=\"36px\" backgroundColor=\"orange\" />\r\n  </HStack> \r\n</App>\r\n```\r\n\r\nThus, the markup with `MyBoxes` results in this output:\r\n\r\n<Playground\r\n  name=\"Example: MyBoxes in a HStack\"\r\n  horizontal={true}\r\n  components={[`\r\n    <Component name=\"MyBoxes\">\r\n      <Stack width=\"100px\" height=\"36px\" backgroundColor=\"purple\" />\r\n      <Stack width=\"50px\" height=\"36px\" backgroundColor=\"orange\" />\r\n    </Component>\r\n  `,\r\n  ]}\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <MyBoxes width=\"50%\" />\r\n        <MyBoxes />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nBecause stacks use a non-zero gap by default, you see this gap between the children of `MyBoxes`.\r\n\r\nWhen you wrap `MyBoxes` into a `VStack`:\r\n\r\n```xmlui copy\r\n<App>\r\n  <VStack>\r\n    <MyBoxes width=\"50%\" />\r\n    <MyBoxes />\r\n  </VStack>\r\n</App>\r\n```\r\n\r\nThe engine renders the markup as if it were this one:\r\n\r\n```xmlui copy\r\n<App>\r\n  <VStack>\r\n    <Stack width=\"100px\" height=\"36px\" backgroundColor=\"purple\" />\r\n    <Stack width=\"50px\" height=\"36px\" backgroundColor=\"orange\" />\r\n    <Stack width=\"100px\" height=\"36px\" backgroundColor=\"purple\" />\r\n    <Stack width=\"50px\" height=\"36px\" backgroundColor=\"orange\" />\r\n  </VStack>\r\n</App>\r\n```\r\n\r\nThus, the markup with `MyBoxes` in a wrapping `VStack` renders this:\r\n\r\n<Playground\r\n    name=\"Example: MyBoxes in a VStack\"\r\n    horizontal={true}\r\n    height={260}\r\n    components={[`\r\n      <Component name=\"MyBoxes\">\r\n        <Stack width=\"100px\" height=\"36px\" backgroundColor=\"purple\" />\r\n        <Stack width=\"50px\" height=\"36px\" backgroundColor=\"orange\" />\r\n      </Component>\r\n    `,\r\n    ]}\r\n    app={`\r\n    <App>\r\n      <VStack>\r\n        <MyBoxes width=\"50%\" />\r\n        <MyBoxes />\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Reusable Components in a FlowLayout\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  `FlowLayout` wraps each direct child in an internal container and removes the child's width settings. This internal container takes the width from the reusable component definition.\r\n</Callout>\r\n\r\nAssume you use `MyBoxes` with a `FlowLayout`, like in this example:\r\n\r\n```xmlui copy\r\n<App>\r\n  <FlowLayout>\r\n    <MyBoxes width=\"50%\" />\r\n    <MyBoxes />\r\n  </FlowLayout>\r\n</App>\r\n```\r\n\r\nBecause of the internal wrapping, the engine renders a markup like this:\r\n\r\n```xmlui copy /width=\"50%\"/\r\n<App>\r\n  <FlowLayout>\r\n    <FlowLayoutItem width=\"50%\">\r\n      <Stack height=\"36px\" backgroundColor=\"purple\" />\r\n      <Stack height=\"36px\" backgroundColor=\"orange\" />\r\n    </FlowLayoutItem>\r\n    <FlowLayoutItem>\r\n      <Stack height=\"36px\" backgroundColor=\"purple\" />\r\n      <Stack height=\"36px\" backgroundColor=\"orange\" />\r\n    </FlowLayoutItem>\r\n  </FlowLayout>\r\n</App>\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  Note that the original `Stack` widths within `MyBoxes` are removed, and the 50% width of the first `MyBoxes` is transposed into the first virtual `FlowLayoutItem`.\r\n</Callout>\r\n\r\n<Playground\r\n  name=\"Example: MyBoxes in FlowLayout\"\r\n  horizontal={true}\r\n  components={[`\r\n    <Component name=\"MyBoxes\">\r\n      <Stack width=\"100px\" height=\"36px\" backgroundColor=\"purple\" />\r\n      <Stack width=\"50px\" height=\"36px\" backgroundColor=\"orange\" />\r\n    </Component>\r\n  `,\r\n  ]}\r\n  app={`\r\n    <App>\r\n      <FlowLayout>\r\n        <MyBoxes width=\"50%\" />\r\n        <MyBoxes />\r\n      </FlowLayout>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  The purple and orange boxes are adjacent because the virtual `FlowLayoutItem` container does not use gaps. XMLUI does not provide a `FlowLayoutItem` component; we use this name here just for explanation.\r\n</Callout>\r\n\r\n### Using Layout Containers Explicitly\r\n\r\nYou can explicitly wrap the children of a reusable component into a layout container to mark your intention regarding their arrangement. For example, if you want the purple and orange boxes in a horizontal layout (within the component), you can explicitly declare that intention:\r\n\r\n```xmlui copy /HStack gap=\"0\" border=\"2px dotted green\"/\r\n<Component name=\"MyBoxes\">\r\n  <HStack gap=\"0\" border=\"2px dotted green\" >\r\n    <Stack width=\"100px\" height=\"36px\" backgroundColor=\"purple\" />\r\n    <Stack width=\"50px\" height=\"36px\" backgroundColor=\"orange\" />\r\n  </HStack>\r\n</Component>\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  This definition adds a dotted green border to the component to display the UI patch it fills for demonstration purposes.\r\n</Callout>\r\n\r\nWrap two `MyBoxes` instances into an `HStack`:\r\n\r\n```xmlui copy\r\n<App>\r\n  <FlowLayout>\r\n    <MyBoxes width=\"50%\" />\r\n    <MyBoxes />\r\n  </FlowLayout>\r\n</App>\r\n```\r\n\r\nThe output differs from the one where you did not have an explicit layout container within `MyBoxes`. There is no gap between the purple and orange boxes as the `HStack` sets the gap explicitly to zero.\r\n\r\n<Playground\r\n  name=\"Example: MyBoxes in a HStack (explicit layout)\"\r\n  horizontal={true}\r\n  components={[`\r\n    <Component name=\"MyBoxes\">\r\n      <HStack gap=\"0\" border=\"2px dotted green\" >\r\n        <Stack width=\"100px\" height=\"36px\" backgroundColor=\"purple\" />\r\n        <Stack width=\"50px\" height=\"36px\" backgroundColor=\"orange\" />\r\n      </HStack>\r\n    </Component>\r\n  `,\r\n  ]}\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <MyBoxes width=\"50%\"/>\r\n        <MyBoxes />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  Remember, an item's width in a horizontal stack (unless explicitly set) accommodates the content's width, which is 100 + 50 = 150 pixels here. The dotted green background signs the boundary of the `HStack` arranging the purple and orange boxes. Do not forget that stacks ignore the layout properties, including the width set on a reusable component.\r\n</Callout>\r\n\r\nYou get this output when you wrap the two `MyBoxes` instances into a `VStack`:\r\n\r\n<Playground\r\n  name=\"Example: MyBoxes in a VStack (explicit layout)\"\r\n  horizontal={true}\r\n  components={[`\r\n    <Component name=\"MyBoxes\">\r\n      <HStack gap=\"0\" border=\"2px dotted green\" >\r\n        <Stack width=\"100px\" height=\"36px\" backgroundColor=\"purple\" />\r\n        <Stack width=\"50px\" height=\"36px\" backgroundColor=\"orange\" />\r\n      </HStack>\r\n    </Component>\r\n  `,\r\n  ]}\r\n  app={`\r\n    <App>\r\n      <VStack>\r\n        <MyBoxes width=\"50%\" />\r\n        <MyBoxes />\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  Remember, an item's width in a vertical stack (unless explicitly set) is the entire width (100%) within the stack's parent. As the dotted green background signs, the `HStack` is as wide as its parent. Within this stack, the boxes still keep their explicit widths. Do not forget that `VStack` ignores the layout properties, including the width set on a reusable component.\r\n</Callout>\r\n\r\nThe display with a `FlowLayout`:\r\n\r\n<Playground\r\n  name=\"Example: MyBoxes in a FlowLayout (explicit layout)\"\r\n  horizontal={true}\r\n  components={[`\r\n    <Component name=\"MyBoxes\">\r\n      <HStack gap=\"0\" border=\"2px dotted green\" >\r\n        <Stack width=\"100px\" height=\"36px\" backgroundColor=\"purple\" />\r\n        <Stack width=\"50px\" height=\"36px\" backgroundColor=\"orange\" />\r\n      </HStack>\r\n    </Component>\r\n  `,\r\n  ]}\r\n  app={`\r\n    <App>\r\n      <FlowLayout>\r\n        <MyBoxes width=\"50%\" />\r\n        <MyBoxes />\r\n      </FlowLayout>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  Remember, an item's width in a `FlowLayout` (unless explicitly set) is the entire width (100%) within the parent.\r\n</Callout>\r\n\r\n\r\n### Using Explicit Component Width\r\n\r\nWhen you use a layout container within a reusable component, you can assign an explicit width to that container, like in this example:\r\n\r\n```xmlui copy /width=\"180px\"/\r\n<Component name=\"MyBoxes\">\r\n  <HStack gap=\"0\" border=\"2px dotted green\" width=\"180px\" >\r\n    <Stack width=\"100px\" height=\"36px\" backgroundColor=\"purple\" />\r\n    <Stack width=\"50px\" height=\"36px\" backgroundColor=\"orange\" />\r\n  </HStack>\r\n</Component>\r\n```\r\n\r\nThe purple and orange boxes are in a horizontal stack set to 180 pixels wide. This definition sets a dotted green border around the horizontal stack for demonstration purposes.\r\n\r\nPlace two `MyBoxes` instances in an `HStack`:\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    <MyBoxes width=\"50%\" />\r\n    <MyBoxes />\r\n  </HStack>\r\n</App>\r\n```\r\n\r\nThe engine renders this output:\r\n\r\n<Playground\r\n  name=\"Example: MyBoxes in a HStack (explicit width)\"\r\n  horizontal={true}\r\n  components={[`\r\n    <Component name=\"MyBoxes\">\r\n      <HStack gap=\"0\" border=\"2px dotted green\" width=\"180px\" >\r\n        <Stack width=\"100px\" height=\"36px\" backgroundColor=\"purple\" />\r\n        <Stack width=\"50px\" height=\"36px\" backgroundColor=\"orange\" />\r\n      </HStack>\r\n    </Component>\r\n  `,\r\n  ]}\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <MyBoxes width=\"50%\" />\r\n        <MyBoxes />\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nHere, the dotted green background signs the boundary of the `HStack`, which arranges the purple and orange boxes. The width of this `HStack` is 180 pixels, just as specified.\r\n\r\nNow, place `MyBoxes` into a `VStack`:\r\n\r\n```xmlui copy\r\n<App>\r\n  <VStack>\r\n    <MyBoxes width=\"50%\" />\r\n    <MyBoxes />\r\n  </VStack>\r\n</App>\r\n```\r\n\r\nYou can see that each `MyBoxes` instance is rendered exactly as previously. Nonetheless, they are in a separate row, following a `VStack` rendering logic:\r\n\r\n<Playground\r\n  name=\"Example: MyBoxes in a VStack (explicit width)\"\r\n  horizontal={true}\r\n  components={[`\r\n    <Component name=\"MyBoxes\">\r\n      <HStack gap=\"0\" border=\"2px dotted green\" width=\"180px\">\r\n        <Stack width=\"100px\" height=\"36px\" backgroundColor=\"purple\" />\r\n        <Stack width=\"50px\" height=\"36px\" backgroundColor=\"orange\" />\r\n      </HStack>\r\n    </Component>\r\n  `,\r\n  ]}\r\n  app={`\r\n    <App>\r\n      <VStack>\r\n        <MyBoxes />\r\n        <MyBoxes />\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nTry using `MyBoxes` in a `FlowLayout`:\r\n\r\n```xmlui copy\r\n<App>\r\n  <FlowLayout>\r\n    <MyBoxes width=\"50%\" />\r\n    <MyBoxes />\r\n  </FlowLayout>\r\n</App>\r\n```\r\n\r\nAs you already learned, `FlowLayout` removes its direct children's explicit widths and uses the width assigned to the reusable component. So, even if you use a 180-pixel wide `HStack` within `MyBoxes`, `FlowLayout` ignores that width. Nonetheless, the two stacks within `HStack` are non-direct children, so their width is kept.\r\n\r\n<Playground\r\n\r\n    name=\"Example: MyBoxes in a FlowLayout (explicit width)\"\r\n    horizontal={true}\r\n    height={160}\r\n    components={[`\r\n      <Component name=\"MyBoxes\">\r\n        <HStack gap=\"0\" border=\"2px dotted green\" width=\"180px\" >\r\n          <Stack width=\"100px\" height=\"36px\" backgroundColor=\"purple\" />\r\n          <Stack width=\"50px\" height=\"36px\" backgroundColor=\"orange\" />\r\n        </HStack>\r\n      </Component>\r\n    `,\r\n    ]}\r\n    app={`\r\n    <App>\r\n      <FlowLayout>\r\n        <MyBoxes width=\"50%\" />\r\n        <MyBoxes />\r\n      </FlowLayout>\r\n    </App>\r\n  `}\r\n/>\r\n",
  "create-apps/routing":"import { Callout } from 'nextra/components';\r\nimport { COMPONENT_BOOKMARK, COMPONENT_LINK, COMPONENT_TABLEOFCONTENTS } from '../../meta/pages';\r\n\r\n# Routing and Links\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nXMLUI implements its navigation mechanism using a technique called client-side routing. With this mechanism, you can assign client-side URLs to specific parts of the UI and trigger actions using the particular URL to navigate to the UI.\r\n</Callout>\r\n\r\nThese links work as deep links within your app. You can save the link (send it to someone in an email). Clicking the link opens your browser and navigates directly to the specific part of the UI.\r\n\r\nIn traditional websites, the browser requests a document from a web server, downloads and evaluates CSS and JavaScript assets, and renders the HTML sent from the server. When the user clicks a link, the process starts all over again for a new page.\r\n\r\nClient-side routing allows your app to update the URL from a link click without making another request for another document from the server. Instead, your app can immediately render some new UI.\r\n\r\n## Routing mechanisms\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nYou can use two different routing mechanisms: *standard* and *hash* routing.\r\n</Callout>\r\n\r\nBoth store the current location in the browser's address bar using clean URLs and navigate using the browser's built-in history stack. However, they differ in the URLs they send to the backend server.\r\n\r\n### Standard routing\r\n\r\nWhen you navigate a URL (e.g., refresh the current page), the browser sends the entire path to the web server. XMLUI apps are single-page web apps, and your web server should be configured accordingly.\r\n\r\nFor example, if your app is hosted at the `myComp.com/accountapp` URL (this URL serves the default `index.html` file from the server), it should be configured to retrieve the same `index.html` file even if the browser-sent URL contains path or query segments, such as `myComp.com/accountapp/leads/12` or `myComp.com/accountapp/list?zip=98005`\r\n\r\nIf your web server is not configured this way, you'll receive 404 errors for the latest two (and similar) requests when refreshing the current page.\r\n\r\n<Callout type=\"note\" emoji=\"📔\">\r\nIf you just navigate in an XMLUI app (without manual refresh), you won't get a 404 error. However, the refresh page function may result in 404.\r\n</Callout>\r\n\r\nWe will not discuss server configuration details, as there are many aspects to it. If you want to try a production-grade web server locally, you can download [Nginx](https://nginx.org/) and modify the configuration file in `/etc/nginx/nginx.conf` to match the snippet below. Change the path to root and it will serve your application with standard routing.\r\n\r\n``` copy {10}\r\nevents {\r\n    worker_connections  1024;\r\n}\r\n\r\nhttp {\r\n    include       /etc/nginx/mime.types;\r\n    sendfile      on;\r\n\r\n    server {\r\n        root /path/to/your/project;\r\n\r\n        index index.html index.htm;\r\n\r\n        location ~ \\.(js|css|png|jpg|jpeg|gif|ico|json|woff|woff2|ttf|eot|svg|xs|xmlui)$ {\r\n            add_header Cache-Control \"no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0\";\r\n            expires off;\r\n            try_files $uri =404;\r\n        }\r\n\r\n        location / {\r\n        add_header Cache-Control \"no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0\";\r\n        expires off;\r\n            try_files $uri $uri/ /index.html;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Hash routing\r\n\r\nThere are situations when you should not (or cannot) send the client-side URLs to the server. This may happen when you do not have complete control over the server. For example, you cannot set up the server to always retrieve the `index.html` file like a single-page app requires. Hash routing solves this issue.\r\n\r\nThe URLs (the browser will display in its address bar) contain a hash mark sign. Thus, if your app is hosted at the `myComp.com/accountapp` URL (this URL serves the default `index.html` file from the server), navigation URLs will look like `myComp.com/accountapp/#/leads/12` or `myComp.com/accountapp/#/list?zip=98005`. Even multiple hash marks may show up (for example, if you navigate to a bookmark: `myComp.com/accountapp/#/leads/12#callhistory`).\r\n\r\nThe browser does not send the hash part of the URL to the server. The server receives only the part before the hash mark. The client-side routing mechanism uses the hash part to navigate within the app.\r\n\r\nThus, using hash routing, the server will receive only `myComp.com/accountapp` independently of the app's navigation route.\r\n\r\n<Callout type=\"warning\" emoji=\"⚠️\">\r\nXMLUI turns on hash routing by default.\r\n</Callout>\r\n\r\nYou can turn it off in the app's configuration file, as this example shows:\r\n\r\n```json\r\n{\r\n  \"name\": \"MyHashRoutedApp\",\r\n  \"appGlobals\": {\r\n    \"useHashBasedRouting\": false\r\n  }\r\n};\r\n```\r\n\r\n## Links\r\n\r\nXMLUI uses the specified links as absolute links (starting with a slash) or relative links, as the following example shows:\r\n\r\n```xmlui copy\r\n<App layout=\"vertical\">\r\n  <NavPanel>\r\n    <NavLink to=\"/\">Home</NavLink>\r\n    <NavLink to=\"/contacts\">Contacts</NavLink>\r\n    <NavLink to=\"about\">About</NavLink>\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">\r\n      Home\r\n    </Page>\r\n    <Page url=\"contacts\">\r\n      Contacts\r\n    </Page>\r\n    <Page url=\"about\">\r\n      About\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\nHere, `/` and `/contacts` are absolute links within the app, `about` is a relative link. As then `NavPanel` hierarchy is at the root level within the app, `/contacts` and `contacts` is the same URL.\r\nYou can test it running the app; the `/contacts` link will match the related `Page` object's `contact` URL:\r\n\r\n<Playground\r\n  height={160}\r\n  name=\"Example: Links\"\r\n  app={`\r\n    <App layout=\"vertical\">\r\n      <NavPanel>\r\n        <NavLink to=\"/\">Home</NavLink>\r\n        <NavLink to=\"/contacts\">Contacts</NavLink>\r\n        <NavLink to=\"about\">About</NavLink>\r\n      </NavPanel>\r\n      <Pages>\r\n        <Page url=\"/\">\r\n          Home\r\n        </Page>\r\n        <Page url=\"contacts\">\r\n          Contacts\r\n        </Page>\r\n        <Page url=\"about\">\r\n          About\r\n        </Page>\r\n      </Pages>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Dynamic route segments\r\n\r\nYou can use parameter placeholders in the URLs as part of the route. These placeholders start with a colon and are followed by a valid identifier. In the target, you can query the value of these placeholders through the `$routeParams` context variable:\r\n\r\n```xmlui copy\r\n<App layout=\"vertical\">\r\n  <NavPanel>\r\n    <NavLink to=\"/\">Home</NavLink>\r\n    <NavLink to=\"/account/Cameron\">Cameron</NavLink>\r\n    <NavLink to=\"/account/Joe\">Joe</NavLink>\r\n    <NavLink to=\"/account/Kathy\">Kathy</NavLink>\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">\r\n      Home\r\n    </Page>\r\n    <Page url=\"/account/:id\">\r\n      Account: {$routeParams.id}\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\nThe following example demonstrates using them:\r\n\r\n<Playground\r\n  height={180}\r\n  name=\"Example: dynamic route segments\"\r\n  app={`\r\n    <App layout=\"vertical\">\r\n      <NavPanel>\r\n        <NavLink to=\"/\">Home</NavLink>\r\n        <NavLink to=\"/account/Cameron\">Cameron</NavLink>\r\n        <NavLink to=\"/account/Joe\">Joe</NavLink>\r\n        <NavLink to=\"/account/Kathy\">Kathy</NavLink>\r\n      </NavPanel>\r\n      <Pages>\r\n        <Page url=\"/\">\r\n          Home\r\n        </Page>\r\n        <Page url=\"/account/:id\">\r\n          Account: {$routeParams.id}\r\n        </Page>\r\n      </Pages>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n\r\n### Using query parameters\r\n\r\nBesides rout parameters, XMLUI supports using query parameters with routes, as the following example demonstrates:\r\n\r\n```xmlui copy /{$queryParams.from}-{$queryParams.to}/\r\n<App layout=\"vertical\">\r\n  <NavPanel>\r\n    <NavLink to=\"/\">Home</NavLink>\r\n    <NavLink to=\"/contacts\">Contacts</NavLink>\r\n    <NavLink to=\"/report?from=December&to=February\">Winter Report</NavLink>\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">\r\n      Home\r\n    </Page>\r\n    <Page url=\"contacts\">\r\n      Contacts\r\n    </Page>\r\n    <Page url=\"/report\">\r\n      Reported period: {$queryParams.from}-{$queryParams.to}\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\nThe third link uses two query parameters, \"from\" and \"to\". The target page uses the `$queryParams` context variable to access them (try clicking the \"Winter Report\" link):\r\n\r\n<Playground\r\n  height={200}\r\n  name=\"Example: query parameters\"\r\n  app={`\r\n    <App layout=\"vertical\">\r\n      <NavPanel>\r\n        <NavLink to=\"/\">Home</NavLink>\r\n        <NavLink to=\"/contacts\">Contacts</NavLink>\r\n        <NavLink to=\"/report?from=December&to=February\">Winter Report</NavLink>\r\n      </NavPanel>\r\n      <Pages>\r\n        <Page url=\"/\">\r\n          Home\r\n        </Page>\r\n        <Page url=\"contacts\">\r\n          Contacts\r\n        </Page>\r\n        <Page url=\"/report\">\r\n          Reported period: {$queryParams.from}-{$queryParams.to}\r\n        </Page>\r\n      </Pages>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Active links\r\n\r\nWhen the app visits a particular target in its available routes, the `NavLink` component matching with the visited route is marked as active, and it gets a visual indication (a blueish left border), like in this example:\r\n\r\n```xmlui copy\r\n<App layout=\"vertical\">\r\n  <NavPanel>\r\n    <NavLink to=\"/\">Home</NavLink>\r\n    <NavLink to=\"/about\">About</NavLink>\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">\r\n      Home\r\n    </Page>\r\n    <Page url=\"/about\">\r\n      About this app\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\nWhen you start the app, the route is \"/\" (by default) and matches the Home page's route specification. Thus, Home is marked as the active link. When you click About, the route changes to \"/about,\" so the active link becomes About (its route specification matches the current route):\r\n\r\n<Playground\r\n  height={120}\r\n  name=\"Example: active links\"\r\n  app={`\r\n    <App layout=\"vertical\">\r\n      <NavPanel>\r\n        <NavLink to=\"/\">Home</NavLink>\r\n        <NavLink to=\"/about\">About</NavLink>\r\n      </NavPanel>\r\n      <Pages>\r\n        <Page url=\"/\">\r\n          Home\r\n        </Page>\r\n        <Page url=\"/about\">\r\n          About this app\r\n        </Page>\r\n      </Pages>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nAs a `NavLink` activity is based on matching, multiple active links may exist simultaneously. The following example demonstrates such a situation:\r\n\r\n```xmlui copy {4-5}\r\n<App layout=\"vertical\">\r\n  <NavPanel>\r\n    <NavLink to=\"/\">Home</NavLink>\r\n    <NavLink to=\"/report?from=December&to=February\">Winter Report</NavLink>\r\n    <NavLink to=\"/report?from=June&to=August\">Summer Report</NavLink>\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/\">\r\n      Home\r\n    </Page>\r\n    <Page url=\"/report\">\r\n      Reported period: {$queryParams.from}-{$queryParams.to}\r\n    </Page>\r\n  </Pages>\r\n</App>\r\n```\r\n\r\nQuery parameters are not considered to be part of the route. So, in this sample, the Winter report and Summer report match the same route, \"/report.\" If you select any of them, both links are marked active:\r\n\r\n<Playground\r\n  height={140}\r\n  name=\"Example: multiples active links simultaneously\"\r\n  app={`\r\n    <App layout=\"vertical\">\r\n      <NavPanel>\r\n        <NavLink to=\"/\">Home</NavLink>\r\n        <NavLink to=\"/report?from=December&to=February\">Winter Report</NavLink>\r\n        <NavLink to=\"/report?from=June&to=August\">Summer Report</NavLink>\r\n      </NavPanel>\r\n      <Pages>\r\n        <Page url=\"/\">\r\n          Home\r\n        </Page>\r\n        <Page url=\"/report\">\r\n          Reported period: {$queryParams.from}-{$queryParams.to}\r\n        </Page>\r\n      </Pages>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nThe semantic meaning of routes is analogous to routes used at the backend. When you send two requests with the same routes but different query parameters, they will reach the same backend endpoint. Of course, that endpoint may consider the query parameters, process them, and respond differently. However, this differentiation is not in the routing but in the processing mechanism.\r\n</Callout>\r\n\r\n### Nested routes\r\n\r\n<Callout type=\"warning\" emoji=\"⚠️\">\r\nXMLUI does not support nested routes. In the future, we may add this functionality to the framework.\r\n</Callout>\r\n\r\n## More about Using Links\r\n\r\n- <SmartLink href={COMPONENT_LINK}>`Link` reference documentation</SmartLink>\r\n- <SmartLink href={COMPONENT_BOOKMARK}>`Bookmark` reference documentation</SmartLink>\r\n- <SmartLink href={COMPONENT_TABLEOFCONTENTS}>`TableOfContents` reference documentation</SmartLink>\r\n",
  "create-apps/text":"import { Callout } from 'nextra/components';\r\nimport {\r\n  COMPONENT_H1,\r\n  COMPONENT_H2,\r\n  COMPONENT_H3,\r\n  COMPONENT_H4,\r\n  COMPONENT_H5,\r\n  COMPONENT_H6,\r\n  COMPONENT_HEADING,\r\n  COMPONENT_MARKDOWN,\r\n  COMPONENT_TEXT,\r\n} from \"../../meta/pages\";\r\n\r\n# Working with Text\r\n\r\nText elements are frequently used in most apps as a part of the UI:\r\nin menu items, titles, headings, labels, descriptions, etc.\r\nThis article goes into the nitty-gritty details of working with text components.\r\n\r\n## Implicit and Explicit Text\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  The engine makes it easy to use text.\r\n  When you nest text in any component that renders its children (such as layout containers and many others), the engine converts them to a body of text.\r\n</Callout>\r\n\r\n```xmlui copy {2, 4}\r\n<App>\r\n  This is a text!\r\n  <Button label=\"I'm just a button\" />\r\n  This is another text!\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Implicit text\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      This is a text!\r\n      Another line\r\n      <Button label=\"I'm just a button\" />\r\n      This is another text!\r\n    </App>\r\n  `}\r\n/>\r\n\r\nThis \"implicit\" text is often unsuitable for a particular context, as you intend to modify the appearance of the text or attach events to it.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Use the `Text` component to explicitly style text.\r\n</Callout>\r\n\r\nThe following example shows how you can use the `Text` component:\r\n\r\n```xmlui copy {2, 4}\r\n<App>\r\n  <Text fontSize=\"1.5rem\" color=\"purple\">This is a text!</Text>\r\n  <Button label=\"I'm just a button\" />\r\n  <Text backgroundColor=\"green\">This is another text!</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Explicit text\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <Text fontSize=\"1.5rem\" color=\"purple\">This is a text!</Text>\r\n      <Button label=\"I'm just a button\" />\r\n      <Text backgroundColor=\"green\">This is another text!</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nBesides the `Text` component, other components rendering text do so with custom formatting.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Use the heading family of components (`Heading`, `H1`, `H2`, ..., and `H6`) display the text as headings.\r\n</Callout>\r\n\r\n```xmlui copy {2, 4}\r\n<App>\r\n  <H1>My Main Title</H1>\r\n  This document contains several sections.\r\n  <H2>Section Title</H2>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Explicit text with Headings\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <H1>My Main Title</H1>\r\n      This document contains several sections.\r\n      <H2>Section Title</H2>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Specifying Text Content\r\n\r\nComponents displaying text offer two ways to do so:\r\n\r\n- **Using a component property.** You can set the value of this property to tell the component what to display.\r\n- **Nested text**. You nest the text to display in the component.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  All the examples shown earlier in this article used the nested text approach.\r\n</Callout>\r\n\r\nIn the following example, all text-related components use their corresponding property to set their text:\r\n\r\n```xmlui copy {2, 3}\r\n<App>\r\n  <H2 value=\"Text Content with Properties\" />\r\n  <Text value=\"This text is set in the 'value' property of 'Text'.\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Using Properties for Text Contents\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <H2 value=\"Text Content with Properties\" />\r\n      <Text value=\"This text is set in the 'value' property of 'Text'.\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nThere is a significant difference between the two ways you can define text:\r\n\r\n- The nested text uses HTML whitespace collapsing.\r\n- The `value` property ignores HTML whitespace collapsing.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  If you add extra or consecutive white spaces or newlines to the code, HTML will regard it as one white space.\r\n  This feature is known as HTML whitespace collapsing.\r\n</Callout>\r\n\r\nWhitespace collapsing is a helpful feature. The following code shows how this feature combines text into one continuous text that is broken into multiple lines (this ensures better readability):\r\n\r\n```xmlui copy\r\n<App>\r\n  This is a long text broken into multiple lines\r\n\r\n  to demonstrate HTML whitespace collapsing.  The\r\n\r\n  source markup would be challenging to read if\r\n\r\n  the entire text were specified in a single line.\r\n\r\n  Breaking into lines helps this situation, and the\r\n\r\n  text renders neatly.\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"HTML Whitespace Collapsing\"\r\n    horizontal\r\n    app={`\r\n    <App>\r\n     This is a long text broken into multiple lines\r\n\r\n     to demonstrate HTML whitespace collapsing.  The\r\n\r\n     source markup would be challenging to read if\r\n\r\n     the entire text were specified in a single line.\r\n\r\n     Breaking into lines helps this situation, and the\r\n\r\n     text renders neatly.\r\n    </App>\r\n  `}\r\n/>\r\n\r\nThe following sample demonstrates the differences between the two ways of specifying text content:\r\n\r\n```xmlui copy\r\n<App>\r\n  <H3 value=\"       Text with a lot   of   spaces (property)    \"></H3>\r\n  <H3>     Text with a lot   of\r\n     spaces (nested)\r\n  </H3>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Properties versus Nested text\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <H3 value=\"       Text with a lot   of   spaces (property)    \"></H3>\r\n      <H3>  Text with a lot   of   spaces (nested)  </H3>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Using Binding Expressions\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can utilize binding expressions to define text content.\r\n</Callout>\r\n\r\nSee this in action in the following example:\r\n\r\n```xmlui copy\r\n<App>\r\n  <variable name=\"myValue\"\r\n    value=\"    Text   with   spaces to show   seconds: { getDate().getSeconds() }\"/>\r\n  <H3 value=\"{myValue}\" />\r\n  <H3>{myValue}</H3>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Vertical Stack (by default)\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <variable name=\"myValue\"\r\n        value=\"    Text   with   spaces to show   seconds: { getDate().getSeconds() }\"/>\r\n      <H3 value=\"{myValue}\" />\r\n      <H3>{myValue}</H3>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nYou can use binding expressions in property values and nested content like text literals. They handle whitespace collapsing the same way as if you used text literals.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  You can click the **Reset** button to load the app again.\r\n  You can observe that the `getDate().getSeconds()` expression is evaluated at every load.\r\n</Callout>\r\n\r\n## Inline and Block Rendering\r\n\r\nWhen you render text, it accommodates the current layout context.\r\nIf that context uses inline rendering, the text is rendered inline; otherwise, it renders as a block.\r\n\r\nIn the following sample, `HStack` uses an inline context, so text segments render in a line:\r\n\r\n```xmlui copy\r\n<App>\r\n  <HStack>\r\n    Show me a trash\r\n    <Icon name=\"trash\"/>\r\n    icon!\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Text Rendering in Inline Context\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        Show me a trash\r\n        <Icon name=\"trash\"/>\r\n        icon!\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nIn the following sample, `VStack` uses a block context.\r\nSo, the engine renders text segments as blocks in new lines:\r\n\r\n```xmlui copy\r\n<App>\r\n  <VStack>\r\n    Show me a trash\r\n    <Icon name=\"trash\"/>\r\n    icon!\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Text Rendering in Block Context\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <VStack>\r\n        Show me a trash\r\n        <Icon name=\"trash\"/>\r\n        icon!\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Non-Breakable Spaces\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Use the `&nbsp;` character entity declaration to specify non-breakable spaces within a text.\r\n</Callout>\r\n\r\nThey behave the same way as the `&nbsp;` HTML entity.\r\n\r\n```xmlui copy\r\n<App>\r\n  <H2>Here are four non-breakable spaces between square brackets: [&nbsp;&nbsp;&nbsp;&nbsp;]</H2>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Rendering Non-Breakable Spaces\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <H2>Here are four non-breakable spaces between square brackets: [&nbsp;&nbsp;&nbsp;&nbsp;]</H2>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Working with Long Text\r\n\r\nEverything works intuitively when the text fits in its container (a single line).\r\nHowever, with long text, you need to control how that text is broken into new lines (if at all) and how to handle overflows.\r\n\r\nBy default, a long text breaks into multiple lines (understanding word boundaries):\r\n\r\n```xmlui copy\r\n<App>\r\n  <Text width=\"200px\" backgroundColor=\"olive\">\r\n    This long text does not fit into a width constraint of 200 pixels.\r\n  </Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Rendering Long Text #1\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <Text width=\"200px\" backgroundColor=\"goldenrod\">\r\n        This long text does not fit into a width constraint of 200 pixels.\r\n      </Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nWith very long words, where word boundaries do not work, the text is broken within a word:\r\n\r\n```xmlui copy\r\n<App>\r\n  <Text width=\"200px\" backgroundColor=\"goldenrod\">\r\n    ThisLongTextDoesNotFitInTheGivenContrants of a 200 pixel width (and long words).\r\n  </Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Rendering Long Text #2\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <Text width=\"200px\" backgroundColor=\"goldenrod\">\r\n        ThisLongTextDoesNotFitInTheGivenContrants of a 200 pixel width (and long words).\r\n      </Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Disable Breaking the Text\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can set the `maxLines` property of a `Text` component to **1** to avoid breaking it into multiple lines.\r\n  If the text does not fit into a single line its ending will be cropped and the cropping is indicated by ellipses.\r\n</Callout>\r\n\r\n```xmlui copy {5}\r\n<App>\r\n  <Text\r\n    width=\"200px\"\r\n    backgroundColor=\"goldenrod\"\r\n    maxLines=\"1\">\r\n    Though this long text does not fit into a single line, please do not break it!\r\n  </Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Avoid Breaking Long Text\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <Text\r\n        width=\"200px\"\r\n        backgroundColor=\"goldenrod\"\r\n        maxLines=\"1\">\r\n        Though this long text does not fit into a single line, please do not break it!\r\n      </Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  If you do want to hide the ellipses, set the `ellipses` property to `false`.\r\n</Callout>\r\n\r\n```xmlui copy {6}\r\n<App>\r\n  <Text\r\n    width=\"200px\"\r\n    backgroundColor=\"goldenrod\"\r\n    maxLines=\"1\"\r\n    ellipses=\"false\">\r\n    Though this long text does not fit into a single line, please do not break it!\r\n  </Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: No Ellipses\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <Text\r\n        width=\"200px\"\r\n        backgroundColor=\"goldenrod\"\r\n        maxLines=\"1\"\r\n        ellipses=\"false\">\r\n        Though this long text does not fit into a single line, please do not break it!\r\n      </Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Limiting the Rendered Lines\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Use the `maxLines` property to set the maximum number of lines when displaying long text.\r\n</Callout>\r\n\r\nIf the text fits into the allowed range, it is fully rendered.\r\nOtherwise, it will be cropped at the maximum specified. For example, the following sample allows up to two lines:\r\n\r\n```xmlui copy {2}\r\n<App>\r\n  <Text\r\n    width=\"200px\"\r\n    backgroundColor=\"goldenrod\"\r\n    maxLines=\"2\">\r\n    This long text does not fit into a width constraint of 200 pixels, even with two lines.\r\n  </Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Limiting the Number of Lines\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <Text\r\n        width=\"200px\"\r\n        backgroundColor=\"goldenrod\"\r\n        maxLines=\"2\">\r\n        This long text does not fit into a width constraint of 200 pixels, even with two lines.\r\n      </Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  Remember, you can use the `ellipses` prop to remove the ellipses from the end of the cropped text.\r\n</Callout>\r\n\r\n### Preserving Linebreaks\r\n\r\nOccasionally, you need to preserve linebreaks within a text.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can set the `preserveLinebreaks` property to `true` to preserve line breaks in a text.\r\n</Callout>\r\n\r\n```xmlui copy {4}\r\n<App>\r\n  <Text\r\n    backgroundColor=\"goldenrod\"\r\n    preserveLinebreaks=\"true\"\r\n    value=\"(preserve) This long text\r\nwith several line breaks\r\n        does not fit into its container.\" />\r\n  <Text\r\n    backgroundColor=\"goldenrod\"\r\n    value=\"(do not preserve) This long text\r\nwith several line breaks\r\n        does not fit into its container.\" />\r\n</App>\r\n```\r\nObserve the effect of using `preserveLinebreaks`:\r\n\r\n<Playground\r\n    name=\"Example: Preserve Linebreaks\"\r\n    horizontal\r\n    app={`\r\n    <App>\r\n      <Text\r\n        backgroundColor=\"goldenrod\"\r\n        preserveLinebreaks=\"true\"\r\n        value=\"(preserve) This long text\r\n    with several line breaks\r\n            does not fit into its container.\" />\r\n      <Text\r\n        backgroundColor=\"goldenrod\"\r\n        value=\"(do not preserve) This long text\r\n    with several line breaks\r\n            does not fit into its container.\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  Remember to use the `value` property of `Text`.\r\n  Linebreaks are converted to spaces when nesting text into the `Text` component.\r\n</Callout>\r\n\r\n## Working with Overflowing Text\r\n\r\nIn the previous sections, the text was its own container.\r\nMost containers (e.g., `Stack`) automatically grow in size (like in height) to embed the entire text.\r\nHowever, when the container width and height are constrained, it cannot accommodate the entire text.\r\n\r\nThe following example tries to contain a long text into a 200x60 pixel box:\r\n\r\n```xmlui copy\r\n<App>\r\n  <VStack width=\"200px\" height=\"60px\" backgroundColor=\"goldenrod\" >\r\n    <Text>\r\n      As its container width and height are fixed, this long text does not\r\n      fit into it; it will overflow.\r\n    </Text>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\nThe text does not fit, and it overflows its container.\r\nThis behavior is not a design flaw or a bug; it is intentional.\r\nBy perceiving the overflow, you can decide how to handle it.\r\n\r\n<Playground\r\n  name=\"Example: Text Overflow\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <VStack width=\"200px\" height=\"60px\" backgroundColor=\"goldenrod\" >\r\n        <Text>\r\n          As its container width and height are fixed, this long text does not\r\n          fit into it; it will overflow.\r\n        </Text>\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Hiding the Overflown Text\r\n\r\nThe `overflowY` layout property of container component allows for defining their behavior in case of overflow.\r\nBy default, this value is set to `visible`, so the container displays the overflown text.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Set the `overflowY` property value to `hidden` to make the container crop the overflown part of a text.\r\n</Callout>\r\n\r\nObserve in the sample below, not the text, but how the `overflowY` property of the container is set:\r\n\r\n```xmlui copy {3}\r\n<App>\r\n  <VStack\r\n    overflowY=\"hidden\"\r\n    width=\"200px\" height=\"60px\" backgroundColor=\"goldenrod\">\r\n    <Text>\r\n      As its container width and height are fixed, this long text does not\r\n      fit into it; it will overflow.\r\n    </Text>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Hiding Text Overflow\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <VStack\r\n        overflowY=\"hidden\"\r\n        width=\"200px\" height=\"60px\" backgroundColor=\"goldenrod\">\r\n        <Text>\r\n          As its container width and height are fixed, this long text does not\r\n          fit into it; it will overflow.\r\n        </Text>\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Scrolling the Text\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can set `overflowY` to `scroll` to make the container display a vertical scrollbar to reach the non-visible parts of the overflowing text.\r\n</Callout>\r\n\r\n```xmlui copy {2}\r\n<App>\r\n  <VStack\r\n    overflowY=\"scroll\"\r\n    width=\"200px\" height=\"60px\" backgroundColor=\"goldenrod\">\r\n    <Text>\r\n      As its container width and height are fixed, this long text does not\r\n      fit into it; it will overflow.\r\n    </Text>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Scrolling the Text\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <VStack\r\n        overflowY=\"scroll\"\r\n        width=\"200px\" height=\"60px\" backgroundColor=\"goldenrod\">\r\n        <Text>\r\n          As its container width and height are fixed, this long text does not\r\n          fit into it; it will overflow.\r\n        </Text>\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Overflowing Dimensions\r\n\r\nThe text accommodates the available space of the container if not specified otherwise on the component housing the text.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Change the size constraints of the component to make text adhere to those constraints rather than the ones of the parent component.\r\n</Callout>\r\n\r\n```xmlui copy {4}\r\n<App>\r\n  <VStack height=\"40px\" width=\"300px\" backgroundColor=\"goldenrod\">\r\n    <Text\r\n      width=\"400px\"\r\n      backgroundColor=\"silver\" opacity=\"0.7\">\r\n      This text sets its size explicitly bigger than its container.\r\n      As it does not fit into the space provided by its container - thus it overflows.\r\n    </Text>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\nBehind the semi-transparent background of the text, you can see its container in a silverish shade:\r\n\r\n<Playground\r\n  name=\"Example: Explicit Text Dimensions\"\r\n  horizontal\r\n  height={140}\r\n  app={`\r\n    <App>\r\n      <VStack height=\"40px\" width=\"300px\" backgroundColor=\"goldenrod\">\r\n        <Text\r\n          width=\"400px\"\r\n          backgroundColor=\"silver\" opacity=\"0.7\">\r\n          This text sets its size explicitly bigger than its container.\r\n          As it does not fit into the space provided by its container - thus it overflows.\r\n        </Text>\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Horizontal Scrolling\r\n\r\nBesides `overflowY`, XMLUI containers provide another layout property, `overflowX`, which has the same values (`visible`, `hidden`, `scroll`).\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  To enable and handle horizontal scrolling, use the `overflowX` property.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<App>\r\n  <VStack\r\n    overflowX=\"scroll\"\r\n    height=\"60px\" width=\"300px\" backgroundColor=\"goldenrod\">\r\n    <Text width=\"400px\" backgroundColor=\"silver\" opacity=\"0.7\">\r\n      This text sets its size explicitly bigger than its container.\r\n      As it does not fit into the container, it overflows.\r\n      However, its container supports horizontal scrolling so you can\r\n      see its content.\r\n    </Text>\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  When you set `overflowX` to `scroll,` it will automatically set `overflowY` to `scroll` if the text exceeds its container vertically.\r\n</Callout>\r\n\r\n<Playground\r\n  name=\"Example: Scrolling the Text Horizontally\"\r\n  horizontal\r\n  app={`\r\n    <App>\r\n      <VStack\r\n        overflowX=\"scroll\"\r\n        height=\"60px\" width=\"300px\" backgroundColor=\"goldenrod\">\r\n        <Text width=\"400px\" backgroundColor=\"silver\" opacity=\"0.7\">\r\n          This text sets its size explicitly bigger than its container.\r\n          As it does not fit into the container, it overflows.\r\n          However, its container supports horizontal scrolling so you can\r\n          see its content.\r\n        </Text>\r\n      </VStack>\r\n    </App>\r\n`}\r\n/>\r\n\r\n## Text Components\r\n\r\n### Text\r\n\r\nThe `Text` component is useful to render a body of text.\r\nIt provides a number of style variants for customization, all of which can be set via the `variant` property:\r\n\r\n```xmlui copy\r\n<Text variant=\"paragraph\">This is an example paragraph</Text>\r\n```\r\n\r\nSee some of these styles below:\r\n\r\n<Playground\r\n  name=\"Example: Text Variants\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Text width=\"150px\">default:</Text>\r\n        <Text>This is an example text</Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">paragraph:</Text>\r\n        <Text variant=\"paragraph\">This is an example paragraph</Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">placeholder:</Text>\r\n        <Text variant=\"placeholder\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">secondary:</Text>\r\n        <Text variant=\"secondary\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">code:</Text>\r\n        <Text variant=\"code\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">codefence + code:</Text>\r\n        <Text variant=\"codefence\">\r\n          <Text variant=\"code\">\r\n            This is an example text\r\n          </Text>\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">keyboard:</Text>\r\n        <Text variant=\"keyboard\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">sup:</Text>\r\n        <Text>\r\n          This is an example text\r\n          <Text variant=\"sup\">(with some additional text)</Text>\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">sub:</Text>\r\n        <Text>\r\n          This is an example text\r\n          <Text variant=\"sub\">(with some additional text)</Text>\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">mono:</Text>\r\n        <Text variant=\"mono\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">strong:</Text>\r\n        <Text variant=\"strong\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">small:</Text>\r\n        <Text variant=\"small\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n      <HStack>\r\n        <Text width=\"150px\">caption:</Text>\r\n        <Text variant=\"caption\">\r\n          This is an example text\r\n        </Text>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nSee the <SmartLink href={COMPONENT_TEXT}>Text component reference</SmartLink> for a more comprehensive list of variants and details on the component properties.\r\n\r\n### Heading\r\n\r\nThe `Heading` component renders text as headings and is useful for sectioning a body of text.\r\nIt has the same heading levels as the ones you can find in HTML.\r\n\r\nThe `level` property to sets the level of a heading:\r\n\r\n```xmlui copy\r\n<Heading level=\"h2\" value=\"Heading Level 2\" />\r\n```\r\n\r\nSee all heading levels compared to regular text:\r\n\r\n<Playground\r\n  name=\"Example: Headings with Levels\"\r\n  app={`\r\n  <App>\r\n    <Heading level=\"h1\" value=\"Heading Level 1\" />\r\n    <Text>Text following H1</Text>\r\n    <Heading level=\"h2\" value=\"Heading Level 2\" />\r\n    <Text>Text following H2</Text>\r\n    <Heading level=\"h3\" value=\"Heading Level 3\" />\r\n    <Text>Text following H3</Text>\r\n    <Heading level=\"h4\" value=\"Heading Level 4\" />\r\n    <Text>Text following H4</Text>\r\n    <Heading level=\"h5\" value=\"Heading Level 5\" />\r\n    <Text>Text following H5</Text>\r\n    <Heading level=\"h6\" value=\"Heading Level 6\" />\r\n    <Text>Text following H6</Text>\r\n  </App>\r\n  `}\r\n/>\r\n\r\nSee more in the <SmartLink href={COMPONENT_HEADING}>Heading component reference</SmartLink>.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can also use specialized components named after the levels for a shorthand version.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<App>\r\n  <!-- Both render the a level 2 heading -->\r\n  <Heading level=\"h2\" value=\"Heading Level 2\" />\r\n  <H2 value=\"Heading Level 2\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Specialized Headings\"\r\n  app={`\r\n  <App>\r\n    <Heading level=\"h2\" value=\"Heading Level 2\" />\r\n    <H2 value=\"Heading Level 2\" />\r\n  </App>\r\n  `}\r\n/>\r\n\r\nThe reference documentation of the shorthand versions of the `Heading` can be found here:\r\n<SmartLink href={COMPONENT_H1}>H1</SmartLink>,\r\n <SmartLink href={COMPONENT_H2}>H2</SmartLink>,\r\n <SmartLink href={COMPONENT_H3}>H3</SmartLink>,\r\n <SmartLink href={COMPONENT_H4}>H4</SmartLink>,\r\n <SmartLink href={COMPONENT_H5}>H5</SmartLink>,\r\n <SmartLink href={COMPONENT_H6}>H6</SmartLink>.\r\n\r\n### Markdown\r\n\r\nThis component lets you write text which can be styled using markdown.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  The text needs to be wrapped in `<![CDATA[` and `]]>` XMLUI tags to preserve whitespaces.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<Markdown>\r\n  <![CDATA[\r\n# This is a heading\r\n\r\nJust some plain old text.\r\n\r\n1. List item #1\r\n2. List item #2\r\n  ]]>\r\n</Markdown>\r\n```\r\n\r\nThe example below shows all supported markdown syntax elements:\r\n\r\n<Playground\r\n  height={500}\r\n  horizontal\r\n  name=\"Example: Using Markdown\"\r\n  app={`\r\n<App>\r\n  <Markdown>\r\n    <![CDATA[\r\n# My Adventure in Markdown Land\r\n\r\n## The Beginning\r\n\r\nIn the bustling city of Markdownville, I embarked on a journey to discover the secrets of Markdown.\r\nMy adventure started in the heart of the city, where the first rule of Markdown was inscribed in stone:\r\n\r\n\"To create a heading, add number signs (#) in front of a word or phrase.\r\nThe number of number signs you use should correspond to the heading level.\"\r\n\r\nHeadings give hierarchy to text but sometimes **emphasizing something with bold is just enough**.\r\n\r\nIf not bold, then simply *italic letters give visual diversity*.\r\n\r\n## Exploring Blockquotes\r\n\r\nAs I journeyed further, I encountered blockquotes that spoke of the beauty of simplicity:\r\n\r\n> Blockquotes can contain multiple paragraphs. Add a > on the blank lines between the paragraphs.\r\n> > Like so\r\n\r\n## The Power of Lists\r\n\r\nI also discovered the power of lists, which were as versatile as the inhabitants of Markdownville:\r\n\r\n- This is the first list item.\r\n- Here's the second list item.\r\n    - A subsection here would look great below the second list item.\r\n- And here's the third list item.\r\n\r\nI found that I can create ordered lists as well:\r\n\r\n1. The first item.\r\n2. The second item.\r\n3. Third item.\r\n\r\n## The Image\r\n\r\nText is not the only thing I found through my journey. The power of images materialized in front of me:\r\n\r\n![Colors image](/resources/images/components/markdown/colors.png)\r\n\r\n## Navigating with Hyperlinks\r\n\r\nHyperlinks, like signposts, marked other paths that branched off from the road I was treading:\r\n- [Source of all truth](https://github.com/xmlui-com/xmlui)\r\n- [Back to where we started](https://ncrm.azurewebsites.net/)\r\n\r\n## The Horizontal Rule\r\n\r\nIn the quiet corners of Markdownville, I found the Horizontal Rule, a line that symbolizes the end of a section:\r\n\r\n***\r\n    ]]>\r\n  </Markdown>\r\n</App>\r\n  `}\r\n/>\r\n\r\nSee the <SmartLink href={COMPONENT_MARKDOWN}>Markdown component reference</SmartLink> docs for details.\r\n",
  "create-apps/themes":"import mySimpleApp from \"./samples/themes/my-simple-app.xmlui\";\r\nimport mySimpleAppLight from \"./samples/themes/my-simple-app-light.xmlui\";\r\nimport gallery from \"./samples/themes/gallery.xmlui\";\r\nimport galleryBrief from \"./samples/themes/theme-gallery-brief.xmlui\";\r\nimport myThemedApp from \"./samples/themes/my-themed-app.xmlui\";\r\nimport inputs from \"./samples/themes/inputs.xmlui\";\r\nimport {\r\n    THEME_VARIABLES,\r\n    THEME_VARIABLES_APP_BOUND_TRAITS,\r\n    THEME_VARIABLES_PROPERTY_NAMES,\r\n    THEME_VARIABLES_VISUAL_STATES,\r\n    COMPONENT_THEME,\r\n    THEMES_REFERENCE,\r\n    THEMES,\r\n    THEMES_DEFINITIONS,\r\n    WORKING_WITH_RESOURCES\r\n} from \"../../meta/pages\";\r\nimport {Callout} from 'nextra/components';\r\nimport {LAYOUT_PROPERTIES} from \"../../meta/pages\";\r\n\r\n# Themes\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n    XMLUI has a powerful theme system that allows you to change the default theme. XMLUI themes are multi-tone: a single\r\n    theme file defines color variants for the light and dark tones.\r\n</Callout>\r\n\r\nXMLUI ships with a few themes; you can check them <SmartLink href={THEMES_DEFINITIONS}>here</SmartLink>.\r\n\r\nIn this article, you will learn the basics of XMLUI's theme management, including the themes' structure, theme variables, and theme inheritance.\r\n\r\n## Theme IDs and Tones\r\n\r\nEach theme has an identifier. To apply a particular theme, change the \"defaultTheme\" property in the app's configuration file to its ID. By default, an app uses the light tone; however, you can change it to dark by setting the \"defaultTone\" property to \"dark\".\r\n\r\nThe following sample uses the default theme (its ID is \"xmlui\") with the default light tone:\r\n\r\n<Playground\r\n    fixedTheme={true}\r\n    name=\"Theme: xmlui (light)\"\r\n    app={`\r\n    <Theme tone=\"light\" themeId=\"xmlui\">\r\n        <ThemeGallery />\r\n      </Theme>\r\n    `}\r\n    components={[galleryBrief]}\r\n    height={280}\r\n/>\r\n\r\nChange the following properties in the configuration file:\r\n\r\n```json\r\n{\r\n  \"defaultTheme\": \"xmlui-purple\",\r\n  \"defaultTone\": \"dark\"\r\n}\r\n```\r\n\r\nNow, you see the purple-shaded XMLUI theme with a dark tone.\r\n\r\n<Playground\r\n    fixedTheme={true}\r\n    name=\"Theme: xmlui (light)\"\r\n    app={`\r\n    <Theme tone=\"dark\" themeId=\"xmlui-purple\">\r\n        <ThemeGallery />\r\n      </Theme>\r\n    `}\r\n    components={[galleryBrief]}\r\n    height={280}\r\n/>\r\n\r\n## What a Theme Contains [#what-a-theme-contains]\r\n\r\nThemes have a simple structure; they have a few properties and define theme variables and resource items. You can define a theme in a JSON file and add it to an app. A theme's JSON file has the following structure:\r\n\r\n```json\r\n{\r\n  \"id\": \"<the unique theme ID>\",\r\n  \"name\": \"<the optional theme name>\",\r\n  \"extends\": [\"<base theme ID 1>, <base theme ID 2>\", \"<...>\"],\r\n  \"themeVars\": {\r\n    \"<theme variable name>\": \"<theme variable value>\",\r\n    \"<...>\": \"<...>\",\r\n    \"light\": {\r\n      \"<light tone specific theme variable name>\": \"<theme variable value>\",\r\n      \"<...>\": \"<...>\"\r\n    },\r\n    \"dark\": {\r\n      \"<dark tone specific theme variable name>\": \"<theme variable value>\",\r\n      \"<...>\": \"<...>\"\r\n    }\r\n  },\r\n  \"resources\": {\r\n    \"<resource name>\": \"<resource value>\",\r\n    \"<...>\": \"<...>\"\r\n  }\r\n}\r\n```\r\n\r\nSimply said, a theme is a set of theme variables and resource definitions. Let's discuss the properties within a theme definition:\r\n- **`id`**: This property is the unique identifier of the theme, a string.\r\n- **`name`**: You can optionally provide a descriptive name for a theme; the framework may use it in the UI.\r\n- **`extends`**: You do not have to define each theme from scratch; a theme can extend existing themes by defining only those theme variables and resources it intends to modify.\r\n- **`themeVars`**: The theme variables that constitute the particular theme.\r\n- **`resources`**: The resources defined in the particular theme.\r\n\r\nIn this article, we discuss only theme variables. You can learn more about resources in <SmartLink href={WORKING_WITH_RESOURCES}>this article</SmartLink>.\r\n\r\nWhen you define theme variables, you can separate tone-independent values from tone-dependent ones. In most cases, tone-dependent variables are colors or color-including values, such as color, background color, shadow, etc. You can separate the color-dependent theme variables by using the \"light\" and \"dark\" property names as the following example shows (using theme variables of a fictional `MyComponent`):\r\n\r\n```json\r\n{\r\n  \"themeVars\": {\r\n    \"fontSize-MyComponent\": \"2rem\",\r\n    \"borderRadius-MyComponent\": \"8px\",\r\n    \"borderStyle-MyComponent\": \"solid\",\r\n    \"light\": {\r\n      \"backgroundColor-MyComponent\": \"white\",\r\n      \"textColor-MyComponent\": \"black\"\r\n    },\r\n    \"dark\": {\r\n      \"backgroundColor-MyComponent\": \"black\",\r\n      \"textColor-MyComponent\": \"white\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Theme Scopes\r\n\r\nYou can quickly change an app's theme by configuring a different theme in the app's configuration file. In addition to using the app-level theme, you can apply other themes for a particular part of the app.\r\n\r\nUse the `Theme` component to wrap a part of the markup and apply a modified theme. With `Theme`, you can change the theme, modify the tone, or even alter particular theme variables.\r\n\r\nLet's see a few samples!\r\n\r\nThe following markup displays the first button's panel with the default theme and the second panel with the \"xmlui-green\" theme:\r\n\r\n```xmlui copy /themeId=\"xmlui-green\"/\r\n  <App>\r\n    <HStack>\r\n      <Button>Button with default theme</Button>\r\n      <Theme themeId=\"xmlui-green\">\r\n        <Button>Button with xmlui-green theme</Button>\r\n      </Theme>\r\n    </HStack>\r\n  </App>\r\n```\r\n\r\n<Playground\r\n    fixedTheme={true}\r\n    name=\"Theme component with a new theme\"\r\n    app={`\r\n    <App>\r\n      <HStack>\r\n        <Button>Button with default theme</Button>\r\n        <Theme themeId=\"xmlui-green\">\r\n          <Button>Button with xmlui-green theme</Button>\r\n        </Theme>\r\n      </HStack>\r\n    </App>\r\n    `}\r\n/>\r\n\r\nThe next sample demonstrates that you can use the `tone` property of `Theme` to set a different tone for a UI patch.\r\n\r\n```xmlui copy /tone=\"dark\"/ /tone=\"light\"/\r\n<App>\r\n  <Theme tone=\"light\">\r\n    <Card title=\"Card with light tone\" />\r\n  </Theme>\r\n  <Theme tone=\"dark\">\r\n    <Card title=\"Card with dark tone\" />\r\n  </Theme>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    fixedTheme={true}\r\n    name=\"Theme component with a new tone\"\r\n    app={`\r\n    <App>\r\n      <Theme tone=\"light\">\r\n        <Card title=\"Card with light tone\" />\r\n      </Theme>\r\n      <Theme tone=\"dark\">\r\n        <Card title=\"Card with dark tone\" />\r\n      </Theme>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nIn addition to theme IDs and tones, you can modify particular theme variables, as the following sample demonstrates:\r\n\r\n```xmlui copy /color-primary=\"orangered\"/ /borderRadius-Card=\"40px\"/ /color-primary=\"mediumpurple\"/\r\n<App>\r\n  <Theme color-primary=\"orangered\" borderRadius-Card=\"40px\">\r\n    <Card title=\"Card with custom text color and border radius\" />\r\n  </Theme>\r\n  <Theme tone=\"dark\" color-primary=\"mediumpurple\">\r\n    <Card title=\"Card with dark tone and custom text color\" />\r\n  </Theme>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    fixedTheme={true}\r\n    name=\"Theme component with modified theme variables\"\r\n    app={`\r\n    <App>\r\n      <Theme color-primary=\"orangered\" borderRadius-Card=\"40px\">\r\n        <Card title=\"Card with custom text color and border radius\" />\r\n      </Theme>\r\n      <Theme tone=\"dark\" color-primary=\"mediumpurple\">\r\n        <Card title=\"Card with dark tone and custom text color\" />\r\n      </Theme>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Creating Themes\r\n\r\nYou can quickly create new themes by adding a theme file (with a `.json` extension and JSON syntax) to the app's `themes` folder. The file name should be the same as the `id` within the theme file.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n    XMLUI fetches theme files automatically using this naming convention and looks for them in the `themes` folder. You\r\n    can change the location and the name of the theme file, but in this case, you need to modify the app's configuration\r\n    file. For more information, see the article.\r\n</Callout>\r\n\r\nEarlier, you learned that an XMLUI theme file contains theme variables with their theme-specific values. Though the framework works with several hundred theme variables, creating a new theme does not require defining each of them!\r\n\r\nWhen you create a new theme, XMLUI automatically inherits from the default theme, and thus, you need to list only the altered theme variable values.\r\n\r\nLet's assume you run this app with the default theme:\r\n\r\n```xmlui copy\r\n<App>\r\n  <H1>AcmeUI App</H1>\r\n  <Text>Welcome to the AcmeUI intranet home page!</Text>\r\n  <Button label=\"Search for more information\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n    fixedTheme={true}\r\n    name=\"Simple app with the default theme\"\r\n    horizontal\r\n    app={myThemedApp}\r\n/>\r\n\r\nCreate a new theme named \"my-brand\" and save it into the `themes/my-brand.json` file within the app's folder:\r\n\r\n```json filename=\"themes/my-brand.json\"\r\n{\r\n  \"id\": \"my-brand\",\r\n  \"name\": \"My Brand Theme\",\r\n  \"themeVars\": {\r\n    \"fontFamily\": \"serif\",\r\n    \"fontSize\": \"1.2rem\",\r\n    \"fontFamily-Heading\": \"sans-serif\",\r\n    \"fontWeight-H1\": \"fontWeight-medium\",\r\n    \"borderRadius\": \"8px\",\r\n    \"light\": {\r\n      \"color-primary\": \"purple\",\r\n      \"color\": \"black\"\r\n    },\r\n    \"dark\": {\r\n      \"color-primary\": \"mediumpurple\",\r\n      \"color\": \"white\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n    This theme definition declares color variants for the light and dark tones. Do not worry if you miss the exact\r\n    meaning of theme variable values. Later in this article, you will learn about how to understand them.\r\n</Callout>\r\n\r\nSet this new theme as the default in your app's configuration file:\r\n\r\n```json\r\n{\r\n  \"defaultTheme\": \"my-brand\"\r\n}\r\n```\r\n\r\nNow, your new theme displays the app in a light tone like this:\r\n\r\n<Playground\r\n    fixedTheme={true}\r\n    name=\"Simple app with the default theme\"\r\n    horizontal\r\n    app={`\r\n    <Theme tone=\"light\">\r\n      <App>\r\n        <H1>AcmeUI App</H1>\r\n        <Text>Welcome to the AcmeUI intranet home page!</Text>\r\n        <Button label=\"Search for more information\" />\r\n      </App>\r\n    </Theme>\r\n  `}\r\n    defaultTheme=\"my-brand\"\r\n    defaultTone=\"light\"\r\n    themes={[\r\n        {\r\n            name: \"My Brand Theme\",\r\n            id: \"my-brand\",\r\n            themeVars: {\r\n                \"space-base\": \"0.35rem\",\r\n                \"fontFamily\": \"serif\",\r\n                \"fontSize\": \"1.2rem\",\r\n                \"fontFamily-Heading\": \"sans-serif\",\r\n                \"fontWeight-H1\": \"fontWeight-medium\",\r\n                borderRadius: \"8px\",\r\n                \"color\": \"black\",\r\n                \"color-primary\": \"purple\",\r\n            },\r\n        }\r\n    ]}\r\n/>\r\n\r\nIt also handles the dark tone:\r\n\r\n<Playground\r\n    fixedTheme={true}\r\n    name=\"Simple app with the default theme\"\r\n    horizontal\r\n    app={`\r\n    <Theme tone=\"dark\">\r\n      <App>\r\n        <H1>AcmeUI App</H1>\r\n        <Text>Welcome to the AcmeUI intranet home page!</Text>\r\n        <Button label=\"Search for more information\" />\r\n      </App>\r\n    </Theme>\r\n  `}\r\n    defaultTheme=\"my-brand\"\r\n    themes={[\r\n        {\r\n            name: \"My Brand Theme\",\r\n            id: \"my-brand\",\r\n            themeVars: {\r\n                \"space-base\": \"0.35rem\",\r\n                \"fontFamily\": \"serif\",\r\n                \"fontSize\": \"1.2rem\",\r\n                \"fontFamily-Heading\": \"sans-serif\",\r\n                \"fontWeight-H1\": \"fontWeight-medium\",\r\n                borderRadius: \"8px\",\r\n                \"color\": \"white\",\r\n                \"color-primary\": \"mediumpurple\",\r\n            },\r\n        }\r\n    ]}\r\n/>\r\n\r\n## Theme Variable Semantics\r\n\r\nThe concept of theme variables is pivotal in XMLUI. When you style an app, a component, or a particular part of the app, you do it with theme variables.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n    XMLUI allows the creation of new themes and the customizing of existing ones with the least amount of effort. To\r\n    support this, theme variables have a unique naming convention that the engine leverages when rendering visual\r\n    components.\r\n</Callout>\r\n\r\nEach theme variable name follows a naming convention to leverage the arsenal of features the theming engine provides:\r\n\r\n```text\r\n<propertyName>-<ComponentId>-<trait1>-<trait2>--<state1>--<state2>--<stateN>\r\n```\r\n\r\nIn this convention, the `<ComponentId>` part is optional.\r\n\r\n- Those theme variables that do not use the `<ComponentId>` segment are _app-bound_ variables, so they define visuals that can be applied to the entire application, including multiple types of components.\r\n- Variables with a `<ComponentId>` segment are _component-bound_ variables, which influence only the component's appearance defined by the corresponding ID.\r\n\r\n<Callout type=\"warning\" emoji=\"💡\">\r\n    You can define theme variables that do not follow this convention; we call them _unbound_ variables. You can still\r\n    use them; however, the theming engine simply replaces their occurrences with their values without utilizing\r\n    intelligent feaures provided for app-bound and component-bound variables.\r\n</Callout>\r\n\r\n### Properties, Traits, and States\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n    Each theme variable is used to define the value of a property influencing the visual appearance of a particular part\r\n    of the UI. The `\r\n    <propertyName>` segment defines such a visual property.\r\n</Callout>\r\n\r\nHere are a few examples:\r\n\r\n- `color`: text color (or forecolor)\r\n- `backgroundColor`: background color\r\n- `text-size`: the size of the text\r\n- `lineHeight`: the height of a text line\r\n- `paddingHorizontal`: The value declaring the horizontal padding space\r\n\r\nThe `<propertyName>` segment should use lowercase letters and dashes.\r\n\r\n    For the complete list of available `\r\n<propertyName>` values, see the <SmartLink href={THEME_VARIABLES_PROPERTY_NAMES}>Theme Property\r\n    Names</SmartLink> article under \"Theme Variables\".\r\n\r\n    The `\r\n<trait1>` and `\r\n<trait2>` segments describe one or two traits regarding a particular component.\r\n\r\n    For example, the `Button` component has two traits that define its appearance. The `themeColor` trait defines theset\r\n    of colors to use with the button; its available values are `primary`, `secondary`, and `attention`. The`variant`\r\n    trait specifies the general appearance of the button (whether it has a border at all, etc.) with thevalues of\r\n    `solid`, `outlined`, or `ghost`. The `themeColor` is the first trait, and `variant` is the second. So, wecan use\r\n    (among others) these theme variables to modify button colors:\r\n\r\n    - `backgroundColor-Button-primary-solid`: Defines the background color of a button that is set up to use the `primary`theme\r\n    color, displayed with the `solid` variant.\r\n    - `borderColor-Button-attention-ghost`: Specifies the border color of a ghost button displayed with the `attention`\r\n    theme color.\r\n\r\n    See the <SmartLink href={THEME_VARIABLES_APP_BOUND_TRAITS}>App-Bount Traits</SmartLink> article under \"Theme\r\n    Variables\" for the complete list of app-bound traits. You can check the traits of a particular component on its\r\n    reference page.\r\n\r\n    The `\r\n<state1>`, ..., `\r\n<stateN>` values define visual states that may modify the appearance of a particular UI element or component (regardinga\r\n    specific trait). Here are a few examples:\r\n\r\n    - `hover`: The mouse is hovered over the component\r\n    - `active`: The particular component is being activated by the user (for example, a user presses down the mouse\r\n    button while over a button element)\r\n    - `focus`: The particular element (e.g., a textbox) currently has the focus\r\n\r\n    When defining a theme variable, you can define multiple state values (in any order). Let's see a few examples:\r\n\r\n    - `backgroundColor-Button-primary-solid--hover`: The background color to use with a `solid` button and with the `primary`\r\n    theme color while the mouse hovers over it.\r\n    - `borderColor-Button-attention-ghost--focus`: Specifies the border color of a focused ghost button displayed with\r\n    the `attention` theme color.\r\n\r\n    For the complete list of available `\r\n<state>` values, see the <SmartLink href={THEME_VARIABLES_VISUAL_STATES}>Visual States</SmartLink> article in the \"Theme\r\n    Variables\" reference.\r\n\r\n    ### Theme Variable Chaining\r\n\r\n    Earlier, you have learned that theme variables following the naming conventions above are either app- or\r\n    component-bound. When the name contains a `<ComponentId>` section, it is bound to the component with that ID. The\r\n    component ID is always the name of the component (with the exact case) as you use them in the markup. For example,\r\n    `Button` for the `<Button>` component, `Card` for the `<Card>` component, and so on.\r\n\r\n    <Callout type=\"info\" emoji=\"📔\">\r\n        The individual XMLUI components are built to leverage as many app-bound theme properties as possible. Their\r\n        design ensures that you can change their visual appearance by modifying only a few theme variables and also\r\n        allows you to fine-tune component styles.\r\n    </Callout>\r\n\r\n    The theming engine uses several techniques to achieve this behavior. One of them is _theme variable chaining_.\r\n\r\n    This approach means that theme variables compose a chain and most fall back to a previous variable on that chain\r\n    that is more generic. For example, here is a chain that sets the border color of a solid button using the primary\r\n    color when the mouse hovers over it:\r\n\r\n    ```text\r\n    color-primary\r\n    textColor-Button\r\n    backgroundColor-Button\r\n    backgroundColor-Button-solid\r\n    backgroundColor-Button-primary\r\n    backgroundColor-Button-primary-solid\r\n    backgroundColor-Button-primary-solid--hover\r\n    ```\r\n\r\n    Theme variable chaining has two significant behaviors:\r\n\r\n    - **Traversal from the chain's last (bottom) element toward the first (top).** When the engine looks for a\r\n    particular theme variable value, it searches it from the bottom toward the top until it finds the particular\r\n    variable value to use.\r\n    - **Tail pruning**. When you set the value of a theme variable somewhere in the chain, the other variables toward\r\n    the bottom of the chain get cleared (they lose their values).\r\n\r\n    <Callout type=\"info\" emoji=\"📔\">\r\n        Components may add logic to generate undefined lower-level theme variable values from upper-level values. For\r\n        example, the `Button` component automaticaly creates fallback colors when the `textColor-Button` theme variable is\r\n        set.\r\n    </Callout>\r\n\r\n    ### Changing App-Bound Variables\r\n\r\n    Let's examine these behaviors with examples! Here, you see a gallery of assorted buttons, a badge, and a few text\r\n    components using the default theme (light):\r\n\r\n    <Playground\r\n        fixedTheme={true}\r\n        name=\"Gallery with the default theme\"\r\n        app={gallery}/>\r\n\r\n    Let's update the value of `color-primary`. This theme variable is at the top of the theme variable chain.\r\n\r\n    ```json\r\n    {\r\n        \"color-primary\": \"orangered\"\r\n    }\r\n    ```\r\n\r\n    Due to the theme variable chaining, all components using the primary color (`Button` instances with their theme\r\n    color property set to `primary` and `Badge` leverage the primary color) immediately change their appearance:\r\n\r\n    <Playground\r\n        fixedTheme={true}\r\n        name=\"Changing 'color-primary'\"\r\n        app={gallery}\r\n        defaultTheme=\"sample\"\r\n        themes={[\r\n            {\r\n                name: \"Sample\",\r\n                id: \"sample\",\r\n                tone: \"light\",\r\n                themeVars: {\r\n                    \"color-primary\": \"orangered\",\r\n                },\r\n            },\r\n        ]}\r\n    />\r\n\r\n    Try moving the mouse over the buttons labeled as primary and click them! You can see that the change in the\r\n    `color-primary` theme variable affects other button colors, like the one used to indicate the hovered and pressed\r\n    states. The theming engine ensures that the changes in `color-primary` update the related visual properties\r\n    automatically. Besides the hover color, the border color changes, too.\r\n\r\n    ### Changing Component-Bound Variables\r\n\r\n    Changing `color-primary` updated the primary color of all components, including the `Badge`. Suppose you want to\r\n    keep the `Badge` component intact, because you intend to change only button colors. In that case, you should use the\r\n    more specific `textColor-Button` theme variable, which (as it is a component-bound theme variable), affects only the\r\n    `Button` component:\r\n\r\n    ```json\r\n    {\r\n        \"color-Button\": \"orangered\"\r\n    }\r\n    ```\r\n\r\n    The result demonstrates that the `Badge` component remained intact. However, all buttons, independently of their\r\n    color theme (`primary`, `secondary`, or `attention`) and variant (`solid`, `outlined`, or `ghost`) use the same\r\n    colors.\r\n\r\n    <Callout type=\"info\" emoji=\"📔\">\r\n        The `Button` component responds to the changes of the `textColor-Button` and updates the background, text, and\r\n        border colors accordingly. It also updates the colors to use with the hover and active states.\r\n    </Callout>\r\n\r\n    <Playground\r\n        fixedTheme={true}\r\n        name=\"Changing 'textColor-Button'\"\r\n        horizontal={true}\r\n        app={gallery}\r\n        defaultTheme=\"sample\"\r\n        themes={[\r\n            {\r\n                name: \"Sample\",\r\n                id: \"sample\",\r\n                tone: \"light\",\r\n                themeVars: {\r\n                    \"textColor-Button\": \"orangered\",\r\n                },\r\n            },\r\n        ]}\r\n    />\r\n\r\n    ### More Specific Variable Changes\r\n\r\n    The single change of `textColor-Button` redefined all button colors, which goes against the intention of having several\r\n    theme colors. If you intend to change only the solid button using the primary color, the best theme variable to\r\n    modify is `textColor-Button-primary-solid`:\r\n\r\n    ```json\r\n    {\r\n        \"textColor-Button-primary-solid\": \"orangered\"\r\n    }\r\n    ```\r\n\r\n    The name of the property tells everything about its effect. Here, you can check that it affects only one of the\r\n    buttons, as expected. Buttons with secondary and attention colors or using the outlined and ghost variants are\r\n    intact.\r\n\r\n    <Playground\r\n        fixedTheme={true}\r\n        name=\"Changing 'textColor-Button-primary-solid'\"\r\n        horizontal={true}\r\n        app={gallery}\r\n        defaultTheme=\"sample\"\r\n        themes={[\r\n            {\r\n                name: \"Sample\",\r\n                id: \"sample\",\r\n                tone: \"light\",\r\n                themeVars: {\r\n                    \"textColor-Button-primary-solid\": \"orangered\",\r\n                },\r\n            },\r\n        ]}\r\n    />\r\n\r\n    Sometimes, you want to override a single visual property of a component, like the background color of the button\r\n    when it is hovered:\r\n\r\n    ```json\r\n    {\r\n        \"backgroundColor-Button--hover\": \"orangered\"\r\n    }\r\n    ```\r\n\r\n    This theme variable works as you expect! Move the mouse over any button to test the hover effect:\r\n\r\n    <Playground\r\n        fixedTheme={true}\r\n        name=\"Changing 'backgroundColor-Button--hover'\"\r\n        horizontal={true}\r\n        app={gallery}\r\n        defaultTheme=\"sample\"\r\n        themes={[\r\n            {\r\n                name: \"Sample\",\r\n                id: \"sample\",\r\n                tone: \"light\",\r\n                themeVars: {\r\n                    \"backgroundColor-Button--hover\": \"orangered\",\r\n                },\r\n            },\r\n        ]}\r\n    />\r\n\r\n    Following this pattern, you can tighten the theme variable to affect only a single button type's hover color, like\r\n    in this sample:\r\n\r\n    ```json\r\n    {\r\n        \"backgroundColor-Button-primary-solid--hover\": \"orangered\"\r\n    }\r\n    ```\r\n\r\n    Try the hover effect now! You can see now it affects only the top-left button (using the primary color theme with\r\n    the solid variant):\r\n\r\n    <Playground\r\n        fixedTheme={true}\r\n        name=\"Changing 'backgroundColor-Button-primary-solid--hover'\"\r\n        horizontal={true}\r\n        app={gallery}\r\n        defaultTheme=\"sample\"\r\n        themes={[\r\n            {\r\n                name: \"Sample\",\r\n                id: \"sample\",\r\n                tone: \"light\",\r\n                themeVars: {\r\n                    \"backgroundColor-Button-primary-solid--hover\": \"orangered\",\r\n                },\r\n            },\r\n        ]}\r\n    />\r\n\r\n    ### Component Theme Classes\r\n\r\n    Components can form a theming hierarchy. For example, many components represent some input fields, as the following\r\n    example shows:\r\n\r\n    ```xmlui {3,4}\r\n    <Form id=\"driveForm\" data=\"{{car: 'Toyota Celica', year: '1999'}}\" padding=1em>\r\n      <FlowLayout paddingBottom=1em gap=1em>\r\n        <FormItem width=\"50%\" label=\"Car Type\" bindTo=\"car\" autoFocus=\"true\" type=\"text\"/>\r\n        <FormItem width=\"50%\" label=\"Year\" bindTo=\"year\" autoFocus=\"true\" type=\"integer\"/>\r\n      </FlowLayout>\r\n    </Form>\r\n    ```\r\n\r\n    <Playground fixedTheme={true} name=\"Input components\" horizontal={true} app={inputs}/>\r\n\r\n    If you want to change their border rounding while keeping other components, such as the buttons intact, you could\r\n    create a derived theme like this:\r\n\r\n    ```json\r\n    {\r\n        \"id\": \"rounded\",\r\n        \"name\": \"Rounded theme\",\r\n        \"themeVars\": {\r\n          \"borderRadius-TextBox\": \"160px\",\r\n          \"borderRadius-NumberBox\": \"160px\"\r\n      }\r\n    }\r\n    ```\r\n\r\n    The new theme works as you expect:\r\n\r\n    <Playground\r\n        fixedTheme={true}\r\n        name=\"Input components with theme #1\"\r\n        horizontal={true}\r\n        app={inputs}\r\n        defaultTheme=\"rounded\"\r\n        themes={[\r\n            {\r\n                name: \"Rounded\",\r\n                id: \"rounded\",\r\n                themeVars: {\r\n                    \"borderRadius-TextBox\": \"160px\",\r\n                    \"borderRadius-NumberBox\": \"160px\",\r\n                },\r\n            },\r\n        ]}\r\n    />\r\n\r\n    Many components function as inputs. When you change some of their more generic visual attributes, such as the\r\n    rounding of borders, you will likely change the same attribute of multiple component types. For example, you changed\r\n    the border rounding of two components in the previous sample.\r\n\r\n    What if you intend to change the rounding of ten input component types? Following the pattern above, you would endup\r\n    with a theme with different `borderRadius-\r\n<component-name>` theme variables.\r\n\r\n    XMLUI provides a faster way to do this. Define the theme like this:\r\n\r\n    ```json\r\n    {\r\n        \"id\": \"rounded\",\r\n        \"name\": \"Rounded theme\",\r\n        \"themeVars\": {\r\n          \"borderRadius-Input\": \"160px\",\r\n          \"backgroundColor-Input\": \"papayawhip\"\r\n        }\r\n    }\r\n    ```\r\n\r\n    This theme changes the rounding and the background color of **all** input components:\r\n\r\n    <Playground\r\n        fixedTheme={true}\r\n        name=\"Input components with theme #2\"\r\n        horizontal={true}\r\n        app={inputs}\r\n        defaultTheme=\"rounded\"\r\n        themes={[\r\n            {\r\n                name: \"Rounded\",\r\n                id: \"rounded\",\r\n                themeVars: {\r\n                    \"borderRadius-Input\": \"160px\",\r\n                    \"backgroundColor-Input\": \"papayawhip\",\r\n                },\r\n            },\r\n        ]}\r\n    />\r\n\r\n    The key to this behavior is the `Input` component name within the `borderRadius-Input` and `backgroundColor-Input` variable\r\n    names.\r\n\r\n    There is no `Input` component. `Input` is just an abstract *theme class name* used from theming. The `TextBox`,\r\n    `NumberBox`, and other input components inherit visual attributes from this abstraction. This abstraction adds new\r\n    theme variables to the theme variable chain of input components.\r\n\r\n    For example, the border rounding-related theme variable chain is the following for the `TextBox`:\r\n\r\n    ```text\r\n    borderRadius\r\n    borderRadius-Input\r\n    borderRadius-TextBox\r\n    ```\r\n\r\n    <Callout type=\"info\" emoji=\"📔\">\r\n        The reference information of components describes the theme classes a particular component inherits from.\r\n    </Callout>\r\n",
  "create-apps/xmlui-code":"import {Callout} from 'nextra/components'\r\nimport {\r\n    GLOBAL_FUNCTIONS_AND_VARIABLES,\r\n    REUSABLE_COMPONENTS,\r\n    REUSABLE_COMPONENTS_EXPOSING_METHODS,\r\n    SCRIPT_SYNTAX,\r\n    SCRIPT_SYNTAX_EVENT_HANDLERS,\r\n    XMLUI_EXPRESSIONS\r\n} from '../../meta/pages'\r\n\r\n# Coding with XMLUI\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  When you create apps, sometimes you need to declare UI logic. The XMLUI components and the framework relieve you of\r\n  many aspects other web UI frameworks require you to add code to.\r\n</Callout>\r\n\r\nHowever, there are a few occasions where you need to add code. XMLUI strives to reduce coding to using expressions instead of utilizing advanced concepts like function declarations, conditional statements, loops, etc.\r\n\r\nThis article will teach you the fundamental concepts and constructs of working with XMLUI code.\r\n\r\n## Fundamental Concepts\r\n\r\nThere are a few fundamental concepts the understanding of which help you add UI logic to your apps.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  XMLUI has a scripting language (XmlUiScript), a **subset of JavaScript** that follows its syntax and semantics.\r\n</Callout>\r\n\r\nDo not feel intimidated if you do not have experience with JavaScript. You *rarely* have to write complex code with XMLUI. In most cases, your intention can be described with short expressions.\r\n\r\nYou can learn more details about the subset of JavaScript supported by XMLUI in these articles:\r\n- <SmartLink href={SCRIPT_SYNTAX}>Script Syntax</SmartLink>\r\n- <SmartLink href={XMLUI_EXPRESSIONS}>XMLUI Expressions</SmartLink>\r\n\r\n### Inline Code Snippets\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can place code snippets inline into component properties, variable values, and event handlers.\r\n</Callout>\r\n\r\nThis technique works well when the code snippets are short and close to the components using them.\r\n\r\n```xmlui copy /onClick=/ /{result}/\r\n<App var.result=\"???\" >\r\n  <Button\r\n    label=\"Calculate the sum of 1 to 100\"\r\n    onClick=\"\r\n      let sum = 0;\r\n      for (let i = 1; i <= 100; i++) sum += i;\r\n      result = sum;\r\n    \" />\r\n  <Text>Result: {result}</Text>\r\n</App>\r\n```\r\n\r\nThis technique works well when the code snippets are short and close to the components using them. In the following markup, the value of the `onClick` attribute is a code snippet just like the `{result}` expression within `Text`. Now, accept them as they are; later, you will learn about their syntax.\r\n\r\n### Code-Behind Files\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can put code (variables, functions) into **code-behind** files. Markup files (`.xmlui` extension) may have a\r\n  code-behind file using the markup file name but the `.xmlui.xs` extension.\r\n</Callout>\r\n\r\nXMLUI **automatically binds component markup** with code-behind files. This technique is helpful when you have long code snippets that would otherwise disturb your understanding of the markup.\r\n\r\n<br/>\r\n<div style={{display: \"flex\", flexDirection: \"row\"}}>\r\n    <div style={{width: \"50%\", paddingRight: \"0.25rem\"}}>\r\n```xmlui copy filename=\"Main.xmlui (markup)\" /showDelay/\r\n<Button \r\n  id=\"calcButton\"\r\n  label=\"Show delay\"\r\n  onClick=\"showDelay()\"/>\r\n```\r\n    </div>\r\n    <div style={{width: \"50%\", paddingLeft: \"0.25rem\"}}>\r\n```js copy filename=\"Main.xmlui.xs (code-behind)\" /showDelay/\r\nfunction showDelay() {\r\n  const delay = 500 * 2;\r\n  toast('Delay calculated: ' + delay);\r\n}\r\n```\r\n    </div>\r\n</div>\r\n\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  The code you declare in a code-behind file is visible in the entire component but not outside.\r\n</Callout>\r\n\r\nLater, you will learn about how you can use scripts in the code-behind files.\r\n\r\n### Component IDs\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  With the **`id` attribute** of a component tag, you can assign an identifier to a component that you can use to refer to that particular component in code (expressions). Component IDs are visible only **in the scope of their markup (and associated code-behind) file**.\r\n</Callout>\r\n\r\nYou can access the exposed methods and properties of the particular component through its component ID. The following section shows a sample.\r\n\r\n### Expressions\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Expressions are the primary tools for binding components to work one with the state of another.\r\n</Callout>\r\n\r\n```xmlui copy /myText/ /myText.value/\r\n<App>\r\n  <TextBox id=\"myText\" initialValue=\"Hello!\" />\r\n  <Text>You typed: {myText.value}</Text>\r\n</App>\r\n```\r\n\r\nType some text into the textbox to discover how this small example works.\r\n\r\n<Playground\r\n  name=\"Example: Binding two components with an expression\"\r\n  horizontal={true}\r\n  app={`\r\n    <App>\r\n      <TextBox id=\"myText\" initialValue=\"Hello!\" />\r\n      <Text>You typed: {myText.value}</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nThe `{myText.value}` part in the Text component is an **expression**. The wrapping braces sign the engine that the content within will be evaluated as the app runs.\r\n\r\nThe TextBox component's identifier is `myText`. You can access the TextBox's exposed values (and methods) through this ID. `myText.value` represents the current text content within the box. **So, this expression binds the TextBox's value to the Text's displayed label**.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  When the XMLUI engine observes that a dependency of an expression changes, it **re-evaluates the expression** and\r\n  re-renders the affected part of the UI (and only that part).\r\n</Callout>\r\n\r\nIn the small app above, when you type something in the text box, every key you press triggers such a change.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  When you set property values, **you can mix** literal strings with expressions.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<App>\r\n  <Text>I am a string literal.</Text>\r\n  <Text>{\"I am\" + \" an \" + \"expression.\"}</Text>\r\n  <Text>I see {2+3} apples and {3*4} oranges.</Text>\r\n</App>\r\n```\r\n\r\nHere, the first text uses a string literal, the second is a sheer expression, and the third combines string literals and expressions.\r\n\r\n<Playground\r\n  name=\"Example: mixing string literals an expressions\"\r\n  horizontal={true}\r\n  app={`\r\n    <App gap=\"$space-tight\">\r\n      <Text>I am a string literal.</Text>\r\n      <Text>{\"I am\" + \" an \" + \"expression.\"}</Text>\r\n      <Text>I see {2+3} apples and {3*4} oranges.</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Variable Declarations\r\n\r\nVariables are indispensable to the UI logic as they store some state. You can use expressions to set a variable's initial value:\r\n\r\n```xmlui copy {2}\r\n<App\r\n  var.myValue=\"{6 * 7}\">\r\n  Life, universe, and everything: {myValue}\r\n</App>\r\n```\r\n\r\nHere, `var.myValue` is a variable declaration with a variable name (`myValue`) and an initial value (`{6 * 7}`). Before displaying the text, the engine initializes the `myValue` variable. Thus, when that is displayed, `{myValue}` is replaced with its current value, 42.\r\n\r\n<Playground\r\n  name=\"Example: Initializing a variable\"\r\n  horizontal={true}\r\n  app={`\r\n    <App\r\n      var.myValue=\"{6 * 7}\">\r\n      Life, universe, and everything: {myValue}\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n    You can move variable declarations into code-behind files.\r\n</Callout>\r\n\r\nThe following code has the same behavior as the previous one.\r\n\r\n<br/>\r\n<div style={{display: \"flex\", flexDirection: \"row\"}}>\r\n    <div style={{width: \"50%\", paddingRight: \"0.25rem\"}}>\r\n```xmlui copy filename=\"Main.xmlui (markup)\" /showDelay/\r\n<App>\r\n  Life, universe, and everything: {myValue}\r\n</App>\r\n```\r\n    </div>\r\n    <div style={{width: \"50%\", paddingLeft: \"0.25rem\"}}>\r\n```js copy filename=\"Main.xmlui.xs (code-behind)\" /showDelay/\r\nvar myValue = 42;\r\n\r\n\r\n```\r\n    </div>\r\n</div>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n    XMLUI attribute values are strings by default. While components transform string attribute values to the expected\r\n    types, there is no such an expected type of the variable so that they will be initialized to a string. Use an\r\n    expression to set the initial variable value to utilize the proper type.\r\n</Callout>\r\n\r\nThe following sample demonstrates this concept:\r\n\r\n```xmlui copy\r\n<App\r\n  var.stringValue=\"true\"\r\n  var.boolValue=\"{true}\"\r\n  var.num1Value=\"123\"\r\n  var.num2Value=\"{123}\">\r\n  <Text>'stringValue' is a {typeof stringValue}, it's value is {stringValue}</Text>\r\n  <Text>'boolValue' is a {typeof boolValue}, it's value is {boolValue}</Text>\r\n  <Text>'num1Value' is a {typeof num1Value}, it's value is {num1Value}</Text>\r\n  <Text>'num2Value' is a {typeof num2Value}, it's value is {num2Value}</Text>\r\n</App>\r\n```\r\n\r\nCheck the variable types in the output:\r\n\r\n<Playground\r\n  name = \"Example: Variables values and types\"\r\n  horizontal = {true}\r\n  app = {`\r\n    <App gap=\"$space-tight\"\r\n      var.stringValue=\"true\"\r\n      var.boolValue=\"{true}\"\r\n      var.num1Value=\"123\"\r\n      var.num2Value=\"{123}\">\r\n      <Text>'stringValue' is a {typeof stringValue}, it's value is {stringValue}</Text>\r\n      <Text>'boolValue' is a {typeof boolValue}, it's value is {boolValue}</Text>\r\n      <Text>'num1Value' is a {typeof num1Value}, it's value is {num1Value}</Text>\r\n      <Text>'num2Value' is a {typeof num2Value}, it's value is {num2Value}</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  XMLUI variables are **reactive**: whenever their dependencies change, their value is reevaluated.\r\n</Callout>\r\n\r\n```xmlui copy /var.countTimes3=\"{3 * count}\"/ /{countTimes3}/\r\n<App var.count=\"{0}\" var.countTimes3=\"{3 * count}\" >\r\n  <Button\r\n    label=\"Click to increment!\"\r\n    onClick=\"count++\" />\r\n  <Text>Click count = {count}</Text>\r\n  <Text>Click count * 3 = {countTimes3}</Text>\r\n</App>\r\n```\r\n\r\nClicking the button increments only the `count` variable. Because `countTimes3` is a reactive variable that depends on `count`, incrementing `count` triggers updating `countTimes3` too.\r\n\r\n<Playground\r\n  name=\"Example: Reactive variables\"\r\n  horizontal={true}\r\n  app={`\r\n    <App var.count=\"{0}\" var.countTimes3=\"{3 * count}\" >\r\n      <Button\r\n        label=\"Click to increment!\"\r\n        onClick=\"count++\" />\r\n      <Text>Click count = {count}</Text>\r\n      <Text>Click count * 3 = {countTimes3}</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Event Handlers\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  When a user interaction or system event occurs, the XMLUI engine executes component **event handlers**. You can\r\n  override the default event handler with your custom event handler.\r\n</Callout>\r\n\r\nIn an event handler, the entire attribute value is an XMLUI Script code snippet, so you do not need to wrap the code into curly braces:\r\n\r\n```xmlui copy {3}\r\n<App>\r\n  <Button\r\n    label=\"Greet me!\"\r\n    onClick=\"toast('Howdy!')\" />\r\n</App>\r\n```\r\n\r\nIf you click the button, the engine executes the `toast('Howdy!')` code and displays a toast message.\r\n\r\n<Playground\r\n  name = \"Example: Declaring an event handler\"\r\n  horizontal = {true}\r\n  height = {200}\r\n  app = {`\r\n    <App>\r\n      <Button\r\n      label=\"Greet me!\"\r\n      onClick=\"toast('Howdy!')\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\nEvent handlers often contain not only expressions but also **statements**.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can use **local variables** within expressions and function declarations. The **`let` keyword** allows using a\r\n  mutable variable; **`const`** declares an immutable one (following the JavaScript semantics). In contrast to `var`,\r\n  local variables declared with `let` and `const` **are not reactive**.\r\n</Callout>\r\n\r\n```xmlui copy /let sum = 0/ /let i = 1/\r\n<App var.result=\"???\" >\r\n  <Button\r\n    label=\"Calculate the sum of 1 to 100\"\r\n    onClick=\"\r\n      let sum = 0;\r\n      for (let i = 1; i <= 100; i++) sum += i;\r\n      result = sum;\r\n    \" />\r\n  <Text>Result: {result}</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Local variables\"\r\n  horizontal={true}\r\n  app={`\r\n    <App var.result=\"???\" >\r\n      <Button\r\n        label=\"Calculate the sum of 1 to 100\"\r\n        onClick=\"\r\n          let sum = 0;\r\n          for (let i = 1; i <= 100; i++) sum += i;\r\n          result = sum;\r\n        \" />\r\n      <Text>Result: {result}</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can move event handler declarations into code-behind files.\r\n</Callout>\r\n\r\nThe following code has the same behavior as the previous one.\r\n\r\n<br/>\r\n<div style={{display: \"flex\", flexDirection: \"row\"}}>\r\n    <div style={{width: \"50%\", paddingRight: \"0.25rem\"}}>\r\n```xmlui copy filename=\"Main.xmlui (markup)\" /calculate/ /result/\r\n<App>\r\n    <Button\r\n        label=\"Calculate the sum of 1 to 100\"\r\n        onClick=\"calculate()\"/>\r\n    <Text>Result: {result}</Text>\r\n</App>\r\n\r\n```\r\n    </div>\r\n    <div style={{width: \"50%\", paddingLeft: \"0.25rem\"}}>\r\n```js copy filename=\"Main.xmlui.xs (code-behind)\" /calculate/ /result/\r\nvar result = \"???\";\r\n\r\nfunction calculate() {\r\n  let sum = 0;\r\n  for (let i = 1; i <= 100; i++) sum += i;\r\n  result = sum;\r\n  }\r\n```\r\n    </div>\r\n</div>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  When your component has an ID, the engine **automatically binds component event handlers** with functions in the\r\n  code-behind file.\r\n</Callout>\r\n\r\nFor example, in the following markup, the button has the id `calcButton`. The engine automatically binds the button's `click` event with the `calcButton_onClick` function in the code-behind file.\r\n\r\n<br/>\r\n<div style={{display: \"flex\", flexDirection: \"row\"}}>\r\n    <div style={{width: \"50%\", paddingRight: \"0.25rem\"}}>\r\n```xmlui copy filename=\"Main.xmlui (markup)\" /result/\r\n<App>\r\n    <Button\r\n        id=\"calcButton\"\r\n        label=\"Calculate the sum of 1 to 100\"/>\r\n    <Text>Result: {result}</Text>\r\n</App>\r\n\r\n```\r\n    </div>\r\n    <div style={{width: \"50%\", paddingLeft: \"0.25rem\"}}>\r\n```js copy filename=\"Main.xmlui.xs (code-behind)\" /result/ /calcButton_onClick/\r\nvar result = \"???\";\r\n\r\nfunction calcButton_onClick() {\r\n  let sum = 0;\r\n  for (let i = 1; i <= 100; i++) sum += i;\r\n  result = sum;\r\n}\r\n```\r\n    </div>\r\n</div>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Some event handlers may have **one or more arguments**.\r\n</Callout>\r\n\r\nIn the following example, the `didChange` event of `TextBox` has a single argument: the new value after the change.\r\n\r\n```xmlui copy\r\n<App var.message=\"(not changed yet)\">\r\n  <TextBox\r\n    initialValue=\"Hello!\"\r\n    onDidChange=\"(newValue) => message = newValue\" />\r\n  <Text>The new TexBox value: {message}</Text>\r\n</App>\r\n```\r\n\r\nThe `(newValue) => message = newValue` expression is an arrow function (with the same syntax as JavaScript). In the expression, `newValue` is the function argument, `message = newValue` is the function's body.\r\n\r\nWhen you change the text in the TextBox, the `message` variable is updated with the new value.\r\n\r\n<Playground\r\n  name=\"Example: An event handler with argument\"\r\n  horizontal={true}\r\n  app={`\r\n    <App var.message=\"(not changed yet)\">\r\n      <TextBox\r\n        initialValue=\"Hello!\"\r\n        onDidChange=\"(newValue) => message = newValue\" />\r\n      <Text id=\"myLabel\">The new TexBox value: {message}</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  XMLUI understands your intention when defining an event handler. In addition to the arrow function syntax, it\r\n  accepts several other alternatives, as here the <SmartLink href={SCRIPT_SYNTAX_EVENT_HANDLERS}>Event\r\n  Handlers</SmartLink> section describes.\r\n</Callout>\r\n\r\n\r\n### Exposed Methods\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n  Reusable components can expose methods to other components.\r\n</Callout>\r\n\r\nThese methods can use XMLUI Script statements like event handler functions. You can learn more about them in the <SmartLink href={REUSABLE_COMPONENTS_EXPOSING_METHODS}>Reusable Components</SmartLink> article.\r\n\r\n## Code-Behind Variables and Functions\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Code-behind files may contain only reactive variables (`var` keyword) and function declarations on their top-level\r\n  scope. Any other statement or expression declaration is forbidden.\r\n</Callout>\r\n\r\nThus, the following code-behind file is valid:\r\n\r\n```js\r\nvar count = 0;\r\n\r\nfunction increment() {\r\n  count++;\r\n}\r\n```\r\n\r\nHowever, this declaration is not, as it contains a local variable and an expression statement:\r\n\r\n```js {3-4}\r\nvar selectedIndex = -1;\r\n\r\nconst MY_LABEL = \"My label\";\r\nselectedIndex++;\r\n\r\nfunction selectItem(index) {\r\n  selectedIndex = index;\r\n}\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Function declarations can be nested in other functions.\r\n</Callout>\r\n\r\nIn this case, markup files can see only the outermost declarations; inner functions are unavailable.\r\n\r\nWhile the following code-behind file exposes the `calculateValue` function, it hides `square`:\r\n\r\n```js\r\nfunction calculateValue(n) {\r\n  function square(x) {\r\n    return x * x;\r\n  }\r\n\r\n  let sum = 0;\r\n  for (let i = 1; i <= n; i++) sum += square(i);\r\n  return sum;\r\n}\r\n```\r\n\r\n<Callout>\r\n  Currently, XMLUI does not implement the concept of imports, so you cannot create code files and import them into\r\n  code-behind files (for example, to share utility functions). This feature is being added to the framework in the\r\n  future.\r\n</Callout>\r\n\r\n## How XMLUI Code Runs\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  The engine does not create JavaScript code to execute it in the browser; it runs **interpreted code created from the\r\n  compiled source script**.\r\n</Callout>\r\n\r\nThese are the main reasons XMLUI prefers this technique:\r\n\r\n- It is easier to avoid potential security breaches and work with the browser's CSP (Content Security Policy)\r\n- XMLUI makes intelligent decisions about when to run the code synchronously and when to opt for asynchronous execution.\r\n- The rendering engine can make the UI responsive without any special care in the code.\r\n\r\n### No Frozen UI\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You do not need to use `async`..`await` constructs.\r\n</Callout>\r\n\r\nThese keywords are not even part of the XMLUI scripting syntax. The framework will ensure that even if you start an infinite loop in the code, the UI remains responsive:\r\n\r\n```xmlui /loopRuns = true; while (loopRuns) count++;/\r\n<App var.count=\"{0}\" var.loopRuns=\"{false}\">\r\n  <HStack>\r\n    <Button enabled=\"{!loopRuns}\"\r\n      label=\"Start infinite loop\"\r\n      themeColor=\"attention\"\r\n      onClick=\"loopRuns = true; while (loopRuns) count++;\"\r\n    />\r\n    <Button\r\n      enabled=\"{loopRuns}\"\r\n      label=\"Exit infinite loop\"\r\n      onClick=\"loopRuns = false;\"/>\r\n  </HStack>\r\n  Counter value: {count}\r\n</App>\r\n```\r\n\r\nThough the first button starts an infinite loop (if it were native JavaScript, it would block the UI), you can still click the other button, which allows the code to break out of the loop, by setting the `loopRuns` variables to `false`.\r\n\r\nThis is the event handler with the infinite while loop:\r\n\r\n```text\r\nloopRuns = true; while (loopRuns) count++;\r\n```\r\n\r\nNow, try the code and break out of the loop by clicking the second button:\r\n\r\n<Playground\r\n  name=\"Example: No frozen UI\"\r\n  horizontal={true}\r\n  app={`\r\n    <App var.count=\"{0}\" var.loopRuns=\"{false}\">\r\n      <HStack>\r\n        <Button enabled=\"{!loopRuns}\"\r\n          label=\"Start infinite loop\"\r\n          themeColor=\"attention\"\r\n          onClick=\"loopRuns = true; while (loopRuns) count++;\"\r\n        />\r\n        <Button\r\n          enabled=\"{loopRuns}\"\r\n          label=\"Exit infinite loop\"\r\n          onClick=\"loopRuns = false;\"/>\r\n      </HStack>\r\n      Counter value: {count}\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Async and Sync Code Execution\r\n\r\nThe engine runs event handler code asynchronously. However, synchronous code immediately gets the expression value to render the component's UI when evaluating expressions.\r\n\r\nThis behavior has a significant consequence: **You cannot use property values of variable initializations that run asynchronously**.\r\n\r\nFor example, in the following markup, using the `delay()` function would raise an error with this message: \"Promises (async function calls) are not allowed in binding expressions\":\r\n\r\n```xmlui copy\r\n<Text value=\"My value {delay(100), 123}\" />\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Property cannot use async evaluation\"\r\n  horizontal={true}\r\n  app={`\r\n    <App>\r\n      <Text value=\"My value {delay(100), 123}\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Identifier Resolution\r\n\r\nWhen you refer to a particular variable, XMLUI starts resolving it from the innermost scope of its usage (exactly like JavaScript). If an identifier cannot be resolved in its local scope (inline expression, inline event handler, or code-behind file), the engine tries to resolve it in other scopes in this order:\r\n\r\n- Context values (such as `$props` for reusable components, `$item` for lists, etc.\r\n- Declarations in the current markup file (for example, the markup file may declare component IDs or variables.\r\n- XMLUI utility functions. The framework provides several <SmartLink href={GLOBAL_FUNCTIONS_AND_VARIABLES}>global utility functions</SmartLink>.\r\n- The global JavaScript scope (`window`).\r\n",
  "create-apps/xmlui-markup":"import {Callout} from 'nextra/components'\r\n\r\n# Markup\r\n\r\nThis section details the XMLUI markup fundamentals. The markup is almost identical to the XML/XHTML; there are only a few points where XMLUI extends them.\r\n\r\n## Comments\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  XMLUI **comments** use the same syntax as XML/XHTML comments.\r\n</Callout>\r\n\r\n```xmlui\r\n<!-- This is an XMLUI comment, it could be an XML or XHTML comment, too -->\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  XMLUI allows you to use **comments within tags**.\r\n</Callout>\r\n\r\n```xmlui\r\n<Button <!-- This is a comment --> label=\"Click me!\" />\r\n```\r\n\r\nXML and XHTML does not allow comments within an element. However, XMLUI does; you can place comments before and after attributes or before an element's closing `>` or `\\>` tag. This feature is helpful for the temporary removal of a particular attribute (wrapped within a comment) during development.\r\n\r\n## Tags\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  XML uses tags for components and helper tags.\r\n  - Each **component tag** represents a particular tag in the app's component hierarchy. These tags use an identifier\r\n  starting with an uppercase letter.\r\n  - Tags starting with a lowercase letter are **helper tags**. Each helper tag has a particular role, and the engine\r\n  transforms them accordingly.\r\n</Callout>\r\n\r\n```xmlui /Button/ /Text/ /VStack/\r\n<!-- Simple tag without nested children -->\r\n<Button label=\"Click Me!\" />\r\n\r\n<!-- With separate opening and closing tags -->\r\n<Button label=\"Click Me!\"></Button>\r\n\r\n<!-- With child items -->\r\n<VStack>\r\n  <Text>Welcome</Text>\r\n  <Button label=\"Click Me!\" />\r\n</VStack>\r\n```\r\n\r\n<Callout emoji=\"📔\">\r\n  XMLUI tag names start with a letter and may be continued with letters, digits, and these characters: dash (`-`),\r\n  underscore (`_`), dollar sign (`$`), and dot (`.`).\r\n</Callout>\r\n\r\nIn the following code, `<property>` is a helper tag. XMLUI uses the `<property>` helper to specify the value of a property, which cannot be represented as a string.\r\n\r\n```xmlui /property/\r\n<DropdownMenu>\r\n  <property name=\"triggerTemplate\">\r\n    <Button label=\"My Menu\" icon=\"chevrondown\" iconPosition=\"right\"/>\r\n  </property>\r\n  <MenuItem>Item 1</MenuItem>\r\n  <MenuItem>Item 2</MenuItem>\r\n  <MenuItem>Item 3</MenuItem>\r\n</DropdownMenu>\r\n```\r\n\r\nThe order of component tags reflects their display order. However, the order of helper tags embedded into other tags is invariant; they can have any order and still resulting the same effect. So, the following markup renders the same UI as the previous one:\r\n\r\n```xmlui\r\n<DropdownMenu>\r\n  <MenuItem>Item 1</MenuItem>\r\n  <MenuItem>Item 2</MenuItem>\r\n  <MenuItem>Item 3</MenuItem>\r\n  <property name=\"triggerTemplate\">\r\n    <Button label=\"My Menu\" icon=\"chevrondown\" iconPosition=\"right\"/>\r\n  </property>\r\n</DropdownMenu>\r\n```\r\n\r\n## Tag Namespaces\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  XMLUI reserves namespaces for future extensions. When you use them, the framework simply ignores them.\r\n</Callout>\r\n\r\n```xmlui\r\n<myPackage:Button label=\"Click me!\" />\r\n```\r\n\r\nThis declaration renders a `Button` as if you used it without a namespace.\r\n\r\n<Callout type=\"warning\">\r\n  Using different namespace prefixes in an opening and the related closing tag is considered an error.\r\n</Callout>\r\n\r\nThe following markup would not compile:\r\n\r\n```xmlui\r\n<some:Text>\r\n  This is wrong.\r\n</other:Text>\r\n```\r\n\r\n## Attributes\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  **XMLUI attributes** have the same role as HTML attributes; they define a particular component trait (e.g.,\r\n  *property*, *event handler*, etc.) or a helper tag's attribute.\r\n</Callout>\r\n\r\nAttribute names start with a letter and may be continued with letters, digits, and these characters: dash (`-`), underscore (`_`), dollar sign (`$`), and dot (`.`). By convention, attributes should always begin with a lowercase letter.\r\n\r\n<Callout emoji=\"📔\">\r\n  XMLUI attribute values may use three types of wrapper characters: single quotes (`'`), double quotes (`\"`), or\r\n  backtick (`` ` ``). The starting and closing delimiter should be the same, so, for example, you cannot start an\r\n  attribute value with a backtick and close it with a double quote.\r\n</Callout>\r\n\r\nIn the following code snippet, all attribute values are accepted:\r\n\r\n```xmlui\r\n<Button label='Click Me!' color=\"#a0a0a0\" width=`50%` padding=\".2rem\" />\r\n```\r\n\r\n### Multi-Line Attribute Values\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Unlike in XML and XHTML, **XMLUI allows you to break an attribute's value into multiple lines** (assuming you use\r\n  delimiter quotes). The engine preserves all whitespaces between the delimiters, including spaces, tabs, and line\r\n  breaks; those characters are part of the attribute value.\r\n</Callout>\r\n\r\nIn the following code snippet, the `onClick` attribute of `<Button>` contains three line breaks (one before `isRunning`, one before `while`, and a third one after `count++;`):\r\n\r\n```xmlui copy\r\n<Button label=\"Infinite loop: {count}\" onClick=\"\r\n  isRunning = true;\r\n  while (isRunning) count++;\r\n\" />\r\n```\r\n\r\n### Key-Only Attributes\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can use **attributes without a value**. XMLUI considers them as attributes with the value of \"true\". These\r\n  key-only attributes help represent the turned-on state of particular component properties.\r\n</Callout>\r\n\r\nFor example, you could use this markup to sign an active menu item:\r\n\r\n```xmlui\r\n<MenuItem label=\"Open\" active=\"true\" />\r\n```\r\n\r\nWith key-only attributes, you can make this markup more concise:\r\n\r\n```xmlui\r\n<MenuItem label=\"Open\" active />\r\n```\r\n### Quoteless Attributes\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can **omit quotes when defining an attribute value**, provided the value does not contain whitespaces and its\r\n  characters are letters, numbers, and one of these characters: dot (`.`), dash (`-`), underscore (`_`), and dollar\r\n  sign (`$`).\r\n</Callout>\r\n\r\nThe following `Text` component's `value` is an expression that matches the \"quoteless\" criterium:\r\n\r\n```xmlui\r\n<Text value=\"re-fetch\" />\r\n```\r\n\r\nThus, you can omit the double quotes when defining it:\r\n\r\n```xmlui\r\n<Text value=re-fetch />\r\n```\r\n\r\n## Entity References\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  In XMLUI text and attribute values, you **do not need to use entity references** (such as `&amp;`, `&gt;`, and\r\n  others. However, **you may use them**, and the XMLUI parser will understand them.\r\n</Callout>\r\n\r\n- `&amp;`: `&` (ampersand)\r\n- `&gt;`: `>` (greater than)\r\n- `&lt;`: `<` (less than)\r\n- `&apos;`: `'` (apostrophe)\r\n- `&quot;`: `\"` (double quote)\r\n- `&nbsp;`: non-breaking space\r\n\r\nSo, each of these text pairs represents the same text:\r\n\r\n```xmlui\r\n<Text>You're so beautiful</Text>\r\n<Text>You&apos;re so beautiful</Text>\r\n\r\n<Text>\"Hello\", she said</Text>\r\n<Text>&quot;Hello&quot;, she said</Text>\r\n\r\n<Text>\"2 < 3\"</Text>\r\n<Text>2 &lt; 3</Text>\r\n\r\n<Text>Go to --> Step #3</Text>\r\n<Text>Go to --&gt; Step #3</Text>\r\n\r\n<Text>Mac & Jack</Text>\r\n<Text>Mac &amp; Jack</Text>\r\n\r\n<Text>Keep&nbsp;going</Text>\r\n<Text>Keep{\"\\\\xa0\"}going</Text>\r\n```\r\n\r\nThis markup will output the following:\r\n\r\n<Playground\r\n  name=\"Using entity references in text\"\r\n  horizontal={true}\r\n  app={`\r\n    <App gap=\"$gap-tight\">\r\n      <Text>You're so beautiful</Text>\r\n      <Text>You&apos;re so beautiful</Text>\r\n      <Text>\"Hello\", she said</Text>\r\n      <Text>&quot;Hello&quot;, she said</Text>\r\n      <Text>\"2 < 3\"</Text>\r\n      <Text>2 &lt; 3</Text>\r\n      <Text>Go to --> Step #3</Text>\r\n      <Text>Go to --&gt; Step #3</Text>\r\n      <Text>Mac & Jack</Text>\r\n      <Text>Mac &amp; Jack</Text>\r\n      <Text>Keep&nbsp;going</Text>\r\n      <Text>Keep{\"\\\\xa0\"}going</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Nesting Child Items\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  In the markup, you can **nest child items into any component**. Each of these children can be a tag or a text value.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<VStack>\r\n  This is a text segment before a Button component.\r\n  <Button label=\"I'm a non-functional Button\"/>\r\n  This is a text segment after a Button and before an Icon\r\n  <Icon name=\"user\" />\r\n</VStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Child items\"\r\n  horizontal={true}\r\n  app={`\r\n    <App>\r\n      This is a text segment before a Button component.\r\n      <Button label=\"I'm a non-functional Button\"/>\r\n      This is a text segment after a Button and before an Icon\r\n      <Icon name=\"user\"/>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Tag Text Values\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Unlike attribute values, **tag text values do not preserve whitespaces**; they use the same whitespace collapsing\r\n  that HTML applies. The engine removes extra spaces, tabs, and line breaks:\r\n</Callout>\r\n\r\n```xmlui copy\r\n<Text>\r\n  Though      this is a multiline text     declaration (with several line breaks),\r\n  the engine        collapses whitespaces.\r\n\r\n</Text>\r\n```\r\n\r\nThe engine will display the following text after collapsing whitespaces:\r\n\r\n<Playground\r\n  name=\"Whitespace collapsing\"\r\n  horizontal={true}\r\n  app={`\r\n    <App>\r\n      <Text>\r\n        Though      this is a multiline text     declaration (with several line breaks),\r\n        the engine        collapses whitespaces.\r\n      </Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n<Callout emoji=\"📔\">\r\n  There are several characters you have to handle with care. The left angle (`\r\n  <\r\n  `) is a delimiter character used as the start character of an opening XMLUI tag. If you want to display it, wrap the\r\n  text into quotes.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<Text>\r\n  \"I'm a text containing a left angle: <\"\r\n</Text>\r\n```\r\n\r\nYou can use double quotes (`\"`), single quotes (`'`), or backticks (`` ` ``) as wrappers; the starting and ending characters should be the same.\r\n\r\n<Playground\r\n  name=\"Wrapped text value\"\r\n  horizontal={true}\r\n  app={`\r\n    <App>\r\n      <Text>\r\n        \"I'm a text containing a left angle: <\"\r\n      </Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### `CDATA` section\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  The **`CDATA` section** (using the same syntax as in XML) ensures that text value within an XMLUI tag preserves all\r\n  characters (prevents whitespace collapsing).\r\n</Callout>\r\n\r\n```xmlui\r\n<MarkDown>\r\n  <![CDATA[\r\n# Who's that then?\r\n\r\nWell, she turned me into a newt. Burn her! We want a shrubbery!! Well, I got better.\r\nListen. __Strange women lying in ponds distributing swords is no basis for a system of\r\ngovernment.__ *Supreme executive power derives from a mandate from the masses, not from\r\nsome farcical aquatic ceremony.* The swallow may fly south with the sun, and the house\r\nmartin or the plover may seek warmer climes in winter, yet these are not strangers to our\r\nland.\r\n\r\n## Well, Mercia's a temperate zone!\r\n\r\nYou don't frighten us, English pig-dogs! Go and boil your bottoms, sons of a silly person!\r\nI blow my nose at you, so-called Ah-thoor Keeng, you and all your silly English\r\nK-n-n-n-n-n-n-n-niggits! A newt?\r\n  ]]>\r\n</Markdown>\r\n```\r\n\r\nThis sample uses the `Markdown` components where whitespaces are essential to display the desired text format.\r\n\r\n<Playground\r\n  name = \"CDATA section\"\r\n  horizontal = {true}\r\n  app = {`\r\n    <App>\r\n      <Markdown>\r\n        <![CDATA[\r\n# Who's that then?\r\n\r\nWell, she turned me into a newt. Burn her! We want a shrubbery!! Well, I got better.\r\nListen. __Strange women lying in ponds distributing swords is no basis for a system of\r\ngovernment.__ *Supreme executive power derives from a mandate from the masses, not from\r\nsome farcical aquatic ceremony.* The swallow may fly south with the sun, and the house\r\nmartin or the plover may seek warmer climes in winter, yet these are not strangers to our\r\nland.\r\n\r\n## Well, Mercia's a temperate zone!\r\n\r\nYou don't frighten us, English pig-dogs! Go and boil your bottoms, sons of a silly person!\r\nI blow my nose at you, so-called Ah-thoor Keeng, you and all your silly English\r\nK-n-n-n-n-n-n-n-niggits! A newt?\r\n    ]]>\r\n  </Markdown>\r\n</App>\r\n  `}\r\n/>\r\n\r\n### Child Hierarchy\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n</Callout>\r\n\r\n```xmlui\r\n<HStack>\r\n  <VStack width=\"25%\">\r\n    This is Button #1!\r\n    <Button label=\"Button #1\" />\r\n  </VStack>\r\n  <VStack width=\"25%\">\r\n    This is Button #2!\r\n    <Button label=\"Button #2\" />\r\n  </VStack>\r\n  <VStack width=\"25%\">\r\n    Three Boxes\r\n    <HStack>\r\n      <Stack backgroundColor=\"red\" width=\"36\" height=\"36\" />\r\n      <Stack backgroundColor=\"green\" width=\"36\" height=\"36\" />\r\n      <Stack backgroundColor=\"blue\" width=\"36\" height=\"36\" />\r\n    </HStack>\r\n  </VStack>\r\n</HStack>\r\n```\r\n\r\n<Playground\r\n  name=\"Child Hierarchy\"\r\n  horizontal={true}\r\n  app={`\r\n    <HStack padding=\"$padding-normal\">\r\n      <VStack width=\"25%\">\r\n        This is Button #1!\r\n        <Button label=\"Button #1\" />\r\n      </VStack>\r\n      <VStack width=\"25%\">\r\n        This is Button #2!\r\n        <Button label=\"Button #2\" />\r\n      </VStack>\r\n      <VStack width=\"25%\">\r\n        Three Boxes\r\n        <HStack>\r\n          <Stack backgroundColor=\"red\" width=\"36\" height=\"36\" />\r\n          <Stack backgroundColor=\"green\" width=\"36\" height=\"36\" />\r\n          <Stack backgroundColor=\"blue\" width=\"36\" height=\"36\" />\r\n        </HStack>\r\n      </VStack>\r\n    </HStack>\r\n  `}\r\n/>\r\n\r\n## Declaring Apps\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  When you describe an app, you use the XMLUI markup to declare an app or a reusable component. Whether you define an\r\n  app or a component, your **definition must have a single root tag**.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<App>\r\n  <!-- You can nest child components into this slot -->\r\n</App>\r\n```\r\n\r\n<Callout emoji=\"📔\">\r\n  Recall that component names start with uppercase letters.\r\n</Callout>\r\n\r\nThe engine raises an error if the app or component markup contains multiple root tags:\r\n\r\n```xmlui copy\r\n<!-- This markup is not valid -->\r\n<Button label=\"Click me!\" />\r\n<Text>Clicked!</Text>\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  If you do not have a better solution, you can enclose multiple tags into a `<Fragment>` tag. This tag does not add\r\n  any visual or functional overhear to your app.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<!-- Now, this markup is valid -->\r\n<Fragment>\r\n  <Button label=\"Click me!\"/>\r\n  <Text>Clicked!</Text>\r\n</Fragment>\r\n```\r\n\r\n### Properties\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  XMLUI uses markup attributes to represent **component properties**. Attributes have the same name as the particular\r\n  property.\r\n</Callout>\r\n\r\n```xmlui\r\n<Button label=\"Click me!\"/>\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  When properties cannot be represented with a string, you nest them into their related component with the **`\r\n  <property>` tag**. Use the tag's **`name` attribute** to identify the property.\r\n</Callout>\r\n\r\n```xmlui {2 - 4} /property/\r\n<DropdownMenu>\r\n  <property name=\"triggerTemplate\">\r\n    <Button label=\"My Menu\" icon=\"chevrondown\" iconPosition=\"right\"/>\r\n  </property>\r\n  <MenuItem>Item 1</MenuItem>\r\n  <MenuItem>Item 2</MenuItem>\r\n  <MenuItem>Item 3</MenuItem>\r\n</DropdownMenu>\r\n```\r\n\r\n`triggerTemplate` is a property of the `DropdownMenu` component that defines the UI for the trigger that opens the dropdown menu.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  If you prefer explicitly using the `\r\n  <property>` tag, you can use it to represent string data; specify that with the `value` attribute.\r\n</Callout>\r\n\r\n```xmlui /property/ /name/ /value/\r\n<Button>\r\n  <property name=\"label\" value=\"Click me!\"/>\r\n</Button>\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can use the `\r\n  <property>` tag with nested text as an alternative to the `value` attribute.\r\n</Callout>\r\n\r\n\r\n### Event Handlers\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can use the `event` tag to define event handlers for these situations:\r\n</Callout>\r\n\r\n\r\n**Connect Button click to APICall**\r\n\r\n```xmlui copy /onClick/\r\n<Button label=\"Change Name\">\r\n  <event name=\"click\">\r\n    <APICall\r\n      url=\"/api/shopping-list-slow/{$item.id}\"\r\n      method=\"put\"\r\n      body=\"{{ name: itemName.value }}\"\r\n      inProgressNotificationMessage=\"Name change pending...\"\r\n      completedNotificationMessage=\"Name change successful!\"\r\n    />\r\n  </event>\r\n</Button>\r\n```\r\n\r\n**Connect MenuItem click to APICall**\r\n\r\n\r\n```xmlui copy /onClick/\r\n<MenuItem label=\"Delete\">\r\n  <event name=\"click\">\r\n    <APICall\r\n      url=\"/api/contacts/{$item.id}\"\r\n      method=\"delete\"\r\n      confirmTitle=\"Delete Contact {$item.fullName}\"\r\n      confirmMessage=\"Are you sure you want to delete this contact?\"\r\n      confirmButtonLabel=\"Delete\" />\r\n  </event>\r\n</MenuItem>\r\n```\r\n\r\n**Connect Form submit to APICall**\r\n\r\n\r\n```xmlui copy /onClick/\r\n<Form data=\"{{ age: 43 }}\">\r\n  <event name=\"submit\">\r\n    <APICall\r\n      url=\"/api/contacts/age\"\r\n      method=\"POST\"\r\n      body=\"{$param}\" />\r\n  </event>\r\n  <FlowLayout>\r\n    <H3>Customer Age</H3>\r\n    <FormItem bindTo=\"age\" label=\"Age\" type=\"integer\" zeroOrPositive=\"true\" />\r\n  </FlowLayout>\r\n</Form>\r\n```\r\n\r\n**Connect Checkbox change to APICall**\r\n\r\n```xmlui copy /onClick/\r\n<Column header = \"fave\">\r\n  <Checkbox initialValue=\"{$item.fave}\">\r\n    <event name=\"didChange\">\r\n      <APICall\r\n        method=\"post\"\r\n        url=\"{ window.xmluiHost + '/query' }\"\r\n        body=\"{ window.favorite($item.id, $item.fave ? 0 : 1) }\"\r\n        />\r\n    </event>\r\n  </Checkbox>\r\n</Column>\r\n```\r\n\r\n### Variable declarations\r\n\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Besides code-behind files, you can use inline variable declarations in the markup. The most concise way is to use an\r\n  attribute with the `var.` prefix followed by the variable's name.\r\n</Callout>\r\n\r\n```xmlui /var./\r\n<Button label=\"Click me!\" var.greeting=\"Hello!\"/>\r\n```\r\n\r\nThis markup assigns a variable named `greeting` to the `Button` with the initial value of \"Hello!\".\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You may prefer more explicit variable declarations. You can do it with the `var` tag, too.\r\n</Callout>\r\n\r\n\r\n```xmlui /var./\r\n<Button label=\"Click me!\">\r\n  <variable name=\"greeting\" value=\"Hello!\">\r\n</Button>\r\n```\r\n\r\nAnd similarly to `<property>`, XMLUI accepts nested text for the variable's initial value.\r\n\r\n```xmlui /var./\r\n<Button label=\"Click me!\">\r\n  <variable name=\"greeting\">Hello!</variable>\r\n</Button>\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  The type of a variable's value is significant when working with code. When you initialize variables, their value\r\n  is a string (as tag attributes are strings). **If you want to be sure a variable value is initialized with the\r\n  intended type, use binding expressions.**\r\n</Callout>\r\n\r\n```xmlui\r\n<!-- count is a string, \"0\" -->\r\n<Button label=\"Click me!\">\r\n  <variable name=\"count\" value=\"0\"/>\r\n</Button>\r\n\r\n<!-- count is a number, 0 -->\r\n<Button label=\"Click me!\">\r\n  <variable name=\"count\" value=\"{0}\"/>\r\n</Button>\r\n\r\n<!-- isOpen is a string, \"true\" -->\r\n<Button label=\"Click me!\">\r\n  <variable name=\"isOpen\" value=\"true\"/>\r\n</Button>\r\n\r\n<!-- isOpen is a boolean, true -->\r\n<Button label=\"Click me!\" var.isOpen=\"{true}\"/>\r\n```\r\n\r\n<Callout emoji=\"📔\">\r\n  Components are smart enough to convert the string values of properties to the appropriate type they expect.\r\n</Callout>\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can use a binding expression to define a **compound value**.\r\n</Callout>\r\n\r\n```xmlui /{x: 100, y: 40}/\r\n<Fragment>\r\n  <variable name=\"origin\" value=\"{{x: 100, y: 40}}\"/>\r\n</Fragment>\r\n```\r\n\r\nIn the `{{x: 100, y: 40}}` binding expression, the outer curly braces are the delimiters; the `{x: 100, y: 40}`\r\nobject literal defines a hash object with `x` and `y` properties.\r\n\r\n## Reusable Components\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can define reusable components with the `<Component>` tag. These declarations should go into a separate file\r\n  within the app's `components` folder. Use the `name` attribute to assign a unique name to the component.\r\n</Callout>\r\n\r\n```xmlui copy /Component name=\"IncButton\"/ /Component/\r\n<Component name=\"IncButton\">\r\n  <variable name=\"count\" value=\"{0}\"/>\r\n  <Button label=\"Click to increment: {count}\" onClick=\"count++\"/>\r\n</Component>\r\n```\r\n\r\n<Callout emoji=\"📔\">\r\n  The `name` attribute of the component should start with an uppercase letter.\r\n</Callout>\r\n\r\nYou can add the new component to your app with the `<IncButton>` tag.\r\n\r\n```xmlui /IncButton/\r\n<App>\r\n  <!-- Other components -->\r\n  <IncButton/>\r\n</App>\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Reusable components can expose custom methods from a particular component.\r\n</Callout>\r\n\r\nTo declare them, you can use two notations (according to your preference):\r\n\r\nWith `method.` prefix:\r\n\r\n```xmlui copy {4} /method.setValue/\r\n<Component\r\n  name=\"IncButton\"\r\n  var.count=\"{0}\"\r\n  method.setValue=\"v => count = v\">\r\n  <Button label=\"Click to increment: {count}\" onClick=\"count++\"/>\r\n</Component>\r\n```\r\n\r\nWith the `<method>` tag:\r\n\r\n```xmlui copy {3} /value=\"v => count = v\"/ /setValue/\r\n<Component name=\"IncButton\"\r\n  <variable name=\"count\" value=\"{0}\"/>\r\n  <method name=\"setValue\" value=\"v => count = v\"/>\r\n  <Button label=\"Click to increment: {count}\" onClick=\"count++\"/>\r\n</Component>\r\n```\r\n\r\nThese two notations are equivalent.\r\n",
  "extension-components/xmlui-animations":"## Xmlui Animations Package\r\n\r\nThis package contains components that deal with different sorts of animations.\r\nThese components can wrap other components and provide different sorts of animations that run when the child component visibility changes.\r\n\r\n## Package Components\r\n\r\n| Component | Description | Status |\r\n| :---: | --- | :---: |\r\n| [Animation](./xmlui-animations/Animation.mdx) |  | experimental |\r\n| [FadeAnimation](./xmlui-animations/FadeAnimation.mdx) | The `FadeAnimation` component represents an animation that fades the content with adjustable opacity values. | experimental |\r\n| [FadeInAnimation](./xmlui-animations/FadeInAnimation.mdx) | The `FadeInAnimation` component represents an animation that fades in the content. | experimental |\r\n| [FadeOutAnimation](./xmlui-animations/FadeOutAnimation.mdx) | The `FadeOutAnimation` component represents an animation that fades out the content. | experimental |\r\n| [ScaleAnimation](./xmlui-animations/ScaleAnimation.mdx) | The `ScaleAnimation` component represents an animation that scales the content. | experimental |\r\n| [SlideInAnimation](./xmlui-animations/SlideInAnimation.mdx) | The `SlideInAnimation` component represents an animation that slides in the content from the left. | experimental |\r\n",
  "extension-components/xmlui-animations/Animation":"import { Callout } from \"nextra/components\";\r\n\r\n# Animation [#component-animation]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\n## Properties\r\n\r\n### `animateWhenInView`\r\n\r\nIndicates whether the animation should start when the component is in view\r\n\r\n### `animation`\r\n\r\nThe animation object to be applied to the component\r\n\r\n### `delay (default: 0)`\r\n\r\nThe delay before the animation starts in milliseconds\r\n\r\n### `duration`\r\n\r\nThe duration of the animation in milliseconds\r\n\r\n### `loop (default: false)`\r\n\r\nIndicates whether the animation should loop\r\n\r\n### `once (default: false)`\r\n\r\nIndicates whether the animation should only run once\r\n\r\n### `reverse (default: false)`\r\n\r\nIndicates whether the animation should run in reverse\r\n\r\n## Events\r\n\r\n### `started`\r\n\r\nEvent fired when the animation starts\r\n\r\n### `stopped`\r\n\r\nEvent fired when the animation stops\r\n\r\n## Exposed Methods\r\n\r\n### `start`\r\n\r\nStarts the animation\r\n\r\n### `stop`\r\n\r\nStops the animation\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "extension-components/xmlui-animations/FadeAnimation":"import { Callout } from \"nextra/components\";\r\n\r\n# FadeAnimation [#component-fadeanimation]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `FadeAnimation` component represents an animation that fades the content with adjustable opacity values.\r\n\r\n## Properties\r\n\r\n### `animateWhenInView`\r\n\r\nIndicates whether the animation should start when the component is in view\r\n\r\n### `delay (default: 0)`\r\n\r\nThe delay before the animation starts in milliseconds\r\n\r\n### `duration`\r\n\r\nThe duration of the animation in milliseconds\r\n\r\n### `from (default: 0)`\r\n\r\nSets the initial opacity of the content.If the `to` property is not set, the initial opacity set here will be used as the final opacity.\r\n\r\n### `loop (default: false)`\r\n\r\nIndicates whether the animation should loop\r\n\r\n### `reverse (default: false)`\r\n\r\nIndicates whether the animation should run in reverse\r\n\r\n### `to (default: 1)`\r\n\r\nSets the final opacity of the content.If the `from` property is not set, the initial opacity set here will be used as the final opacity.\r\n\r\n## Events\r\n\r\n### `started`\r\n\r\nEvent fired when the animation starts\r\n\r\n### `stopped`\r\n\r\nEvent fired when the animation stops\r\n\r\n## Exposed Methods\r\n\r\n### `start`\r\n\r\nStarts the animation\r\n\r\n### `stop`\r\n\r\nStops the animation\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "extension-components/xmlui-animations/FadeInAnimation":"import { Callout } from \"nextra/components\";\r\n\r\n# FadeInAnimation [#component-fadeinanimation]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `FadeInAnimation` component represents an animation that fades in the content.\r\n\r\n## Properties\r\n\r\n### `animateWhenInView`\r\n\r\nIndicates whether the animation should start when the component is in view\r\n\r\n### `delay (default: 0)`\r\n\r\nThe delay before the animation starts in milliseconds\r\n\r\n### `duration`\r\n\r\nThe duration of the animation in milliseconds\r\n\r\n### `loop (default: false)`\r\n\r\nIndicates whether the animation should loop\r\n\r\n### `reverse (default: false)`\r\n\r\nIndicates whether the animation should run in reverse\r\n\r\n## Events\r\n\r\n### `started`\r\n\r\nEvent fired when the animation starts\r\n\r\n### `stopped`\r\n\r\nEvent fired when the animation stops\r\n\r\n## Exposed Methods\r\n\r\n### `start`\r\n\r\nStarts the animation\r\n\r\n### `stop`\r\n\r\nStops the animation\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "extension-components/xmlui-animations/FadeOutAnimation":"import { Callout } from \"nextra/components\";\r\n\r\n# FadeOutAnimation [#component-fadeoutanimation]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `FadeOutAnimation` component represents an animation that fades out the content.\r\n\r\n## Properties\r\n\r\n### `animateWhenInView`\r\n\r\nIndicates whether the animation should start when the component is in view\r\n\r\n### `delay (default: 0)`\r\n\r\nThe delay before the animation starts in milliseconds\r\n\r\n### `duration`\r\n\r\nThe duration of the animation in milliseconds\r\n\r\n### `loop (default: false)`\r\n\r\nIndicates whether the animation should loop\r\n\r\n### `reverse (default: false)`\r\n\r\nIndicates whether the animation should run in reverse\r\n\r\n## Events\r\n\r\n### `started`\r\n\r\nEvent fired when the animation starts\r\n\r\n### `stopped`\r\n\r\nEvent fired when the animation stops\r\n\r\n## Exposed Methods\r\n\r\n### `start`\r\n\r\nStarts the animation\r\n\r\n### `stop`\r\n\r\nStops the animation\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "extension-components/xmlui-animations/ScaleAnimation":"import { Callout } from \"nextra/components\";\r\n\r\n# ScaleAnimation [#component-scaleanimation]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `ScaleAnimation` component represents an animation that scales the content.\r\n\r\n## Properties\r\n\r\n### `animateWhenInView`\r\n\r\nIndicates whether the animation should start when the component is in view.\r\n\r\n### `delay (default: 0)`\r\n\r\nThe delay before the animation starts in milliseconds\r\n\r\n### `duration`\r\n\r\nThe duration of the animation in milliseconds.\r\n\r\n### `from (default: 0)`\r\n\r\nThe initial scale of the content.\r\n\r\n### `loop (default: false)`\r\n\r\nIndicates whether the animation should loop\r\n\r\n### `reverse (default: false)`\r\n\r\nIndicates whether the animation should run in reverse\r\n\r\n### `to (default: 1)`\r\n\r\nThe final scale of the content.\r\n\r\n## Events\r\n\r\n### `started`\r\n\r\nEvent fired when the animation starts\r\n\r\n### `stopped`\r\n\r\nEvent fired when the animation stops\r\n\r\n## Exposed Methods\r\n\r\n### `start`\r\n\r\nStarts the animation\r\n\r\n### `stop`\r\n\r\nStops the animation\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "extension-components/xmlui-animations/SlideInAnimation":"import { Callout } from \"nextra/components\";\r\n\r\n# SlideInAnimation [#component-slideinanimation]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `SlideInAnimation` component represents an animation that slides in the content from the left.\r\n\r\n## Properties\r\n\r\n### `animateWhenInView`\r\n\r\nIndicates whether the animation should start when the component is in view.\r\n\r\n### `delay (default: 0)`\r\n\r\nThe delay before the animation starts in milliseconds\r\n\r\n### `direction (default: \"left\")`\r\n\r\nThe direction of the animation.\r\n\r\n### `duration`\r\n\r\nThe duration of the animation in milliseconds.\r\n\r\n### `loop (default: false)`\r\n\r\nIndicates whether the animation should loop\r\n\r\n### `reverse (default: false)`\r\n\r\nIndicates whether the animation should run in reverse\r\n\r\n## Events\r\n\r\n### `started`\r\n\r\nEvent fired when the animation starts\r\n\r\n### `stopped`\r\n\r\nEvent fired when the animation stops\r\n\r\n## Exposed Methods\r\n\r\n### `start`\r\n\r\nStarts the animation\r\n\r\n### `stop`\r\n\r\nStops the animation\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "extension-components/xmlui-charts":"## Xmlui Charts Package\r\n\r\nThe `Charts` package contains components that display data in a graphical way.All chart components use the same set of properties to receive data.All chart components accept a `LabelLst` component as a child to parametrize display labels.All chart components also accept a `Legend` component as a child to display the legend.\r\n\r\n## Package Components\r\n\r\n| Component | Description | Status |\r\n| :---: | --- | :---: |\r\n| [BarChart](./xmlui-charts/BarChart.mdx) | The `BarChart` component represents a bar chart.Accepts a `LabelLst` component as a child to parametrize display labels. | experimental |\r\n| [DonutChart](./xmlui-charts/DonutChart.mdx) | Represents a derivative of the pie chart that is a donut chart. | experimental |\r\n| [LabelList](./xmlui-charts/LabelList.mdx) | Label list component for a chart component. | experimental |\r\n| [Legend](./xmlui-charts/Legend.mdx) | Legend component to be displayed in a chart component. | experimental |\r\n| [LineChart](./xmlui-charts/LineChart.mdx) | Represents a line chart component. | experimental |\r\n| [PieChart](./xmlui-charts/PieChart.mdx) | Represents a pie chart component. | experimental |\r\n",
  "extension-components/xmlui-charts/BarChart":"import { Callout } from \"nextra/components\";\r\n\r\n# BarChart [#component-barchart]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `BarChart` component represents a bar chart.Accepts a `LabelLst` component as a child to parametrize display labels.\r\n\r\n## Properties\r\n\r\n### `data`\r\n\r\nThis property is used to provide the component with data to display.The data needs to be an array of objects.\r\n\r\n### `dataKeys`\r\n\r\nThis property specifies the keys in the data objects that should be used for rendering the bars.E.g. 'id' or 'key'.\r\n\r\n### `hideTickX (default: false)`\r\n\r\nControls the visibility of the X-axis ticks. If set to `true`, tick labels on the X-axis will be hidden.\r\n\r\n### `hideTickY (default: false)`\r\n\r\nControls the visibility of the Y-axis ticks. If set to `true`, tick labels on the Y-axis will be hidden.\r\n\r\n### `hideX (default: false)`\r\n\r\nDetermines whether the X-axis should be hidden. If set to `true`, the axis will not be rendered.\r\n\r\n### `hideY (default: false)`\r\n\r\nDetermines whether the Y-axis should be hidden. If set to `true`, the axis will not be rendered.\r\n\r\n### `layout (default: \"vertical\")`\r\n\r\nThis property determines the orientation of the bar chart. The `vertical` variant specifies the horizontal axis as the primary and lays out the bars from left to right. The `horizontal` variant specifies the vertical axis as the primary and has the bars spread from top to bottom.\r\n\r\nAvailable values: `horizontal`, `vertical` **(default)**\r\n\r\n### `nameKey`\r\n\r\nSpecifies the key in the data objects that will be used to label the different data series.\r\n\r\n### `showLegend (default: false)`\r\n\r\nDetermines whether the legend should be displayed.\r\n\r\n### `stacked (default: false)`\r\n\r\nThis property determines how the bars are laid out.If set to `true`, bars with the same category will be stacked on top of each other rather than placed side by side.\r\n\r\n### `tickFormatter`\r\n\r\nA function that formats the axis tick labels. It receives a tick value and returns a formatted string.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "extension-components/xmlui-charts/DonutChart":"import { Callout } from \"nextra/components\";\r\n\r\n# DonutChart [#component-donutchart]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nRepresents a derivative of the pie chart that is a donut chart.\r\n\r\n## Properties\r\n\r\n### `data`\r\n\r\nThe data to be displayed in the chart. Needs to be an array of objects.\r\n\r\n### `dataKeys`\r\n\r\nThis property specifies the keys in the data objects that should be used for rendering the bars.\r\n\r\n### `innerRadius (default: 60)`\r\n\r\nSets the inner radius of the donut chart.\r\n\r\n### `nameKey`\r\n\r\nSpecifies the key in the data objects that will be used to label the different data series.\r\n\r\n### `showLabel (default: true)`\r\n\r\nToggles whether to show labels (`true`) or not (`false`).\r\n\r\n### `showLabelList (default: false)`\r\n\r\nWhether to show labels in a list (`true`) or not (`false`).\r\n\r\n### `showLegend (default: false)`\r\n\r\nWhether to show a legend (`true`) or not (`false`).\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "extension-components/xmlui-charts/LabelList":"import { Callout } from \"nextra/components\";\r\n\r\n# LabelList [#component-labellist]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nLabel list component for a chart component.\r\n\r\n## Properties\r\n\r\n### `key`\r\n\r\nThe key that needs to be matched to the data series.\r\n\r\n### `position (default: \"inside\")`\r\n\r\nThe position of the label list\r\n\r\nAvailable values: `top`, `left`, `right`, `bottom`, `inside` **(default)**, `outside`, `insideLeft`, `insideRight`, `insideTop`, `insideBottom`, `insideTopLeft`, `insideBottomLeft`, `insideTopRight`, `insideBottomRight`, `insideStart`, `insideEnd`, `end`, `center`, `centerTop`, `centerBottom`, `middle`\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [textColor](../styles-and-themes/common-units/#color)-LabelList | $textColor-primary | $textColor-primary |\r\n",
  "extension-components/xmlui-charts/Legend":"import { Callout } from \"nextra/components\";\r\n\r\n# Legend [#component-legend]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nLegend component to be displayed in a chart component.\r\n\r\n## Properties\r\n\r\n### `align (default: \"center\")`\r\n\r\nThe alignment of the legend\r\n\r\nAvailable values: `left`, `right`, `center` **(default)**\r\n\r\n### `verticalAlign (default: \"bottom\")`\r\n\r\nThe vertical alignment of the legend\r\n\r\nAvailable values: `top`, `bottom` **(default)**, `middle`\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "extension-components/xmlui-charts/LineChart":"import { Callout } from \"nextra/components\";\r\n\r\n# LineChart [#component-linechart]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nRepresents a line chart component.\r\n\r\n## Properties\r\n\r\n### `data`\r\n\r\nThe data to be displayed in the line chart.It needs to be an array of objects, where each object represents a data point.\r\n\r\n### `dataKeys`\r\n\r\nThis property specifies the keys in the data objects that should be used for rendering the lines.\r\n\r\n### `hideTooltip (default: false)`\r\n\r\nDetermines whether the tooltip should be hidden.If set to (`true`), no tooltip will be shown when hovering over data points.\r\n\r\n### `hideX (default: false)`\r\n\r\nDetermines whether the X-axis should be hidden. If set to (`true`), the axis will not be displayed.\r\n\r\n### `nameKey`\r\n\r\nThe key in the data objects used for labeling different data series.\r\n\r\n### `showLegend (default: false)`\r\n\r\nDetermines whether the legend should be displayed.\r\n\r\n### `tickFormatter`\r\n\r\nA function that formats the axis tick labels. It receives a tick value and returns a formatted string.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "extension-components/xmlui-charts/PieChart":"import { Callout } from \"nextra/components\";\r\n\r\n# PieChart [#component-piechart]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nRepresents a pie chart component.\r\n\r\n## Properties\r\n\r\n### `data`\r\n\r\nThe data to be displayed in the chart. Needs to be an array of objects.\r\n\r\n### `dataKeys`\r\n\r\nThis property specifies the keys in the data objects that should be used for rendering the bars.\r\n\r\n### `height`\r\n\r\nThe height of the chart\r\n\r\n### `labelListPosition (default: \"inside\")`\r\n\r\nThe position of the label list.\r\n\r\nAvailable values: `top`, `left`, `right`, `bottom`, `inside` **(default)**, `outside`, `insideLeft`, `insideRight`, `insideTop`, `insideBottom`, `insideTopLeft`, `insideBottomLeft`, `insideTopRight`, `insideBottomRight`, `insideStart`, `insideEnd`, `end`, `center`, `centerTop`, `centerBottom`, `middle`\r\n\r\n### `nameKey`\r\n\r\nSpecifies the key in the data objects that will be used to label the different data series.\r\n\r\n### `showLabel (default: true)`\r\n\r\nToggles whether to show labels (`true`) or not (`false`).\r\n\r\n### `showLabelList (default: false)`\r\n\r\nWhether to show labels in a list (`true`) or not (`false`).\r\n\r\n### `width`\r\n\r\nThe width of the chart\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [textColor](../styles-and-themes/common-units/#color)-labelList-PieChart | $textColor-primary | $textColor-primary |\r\n",
  "extension-components/xmlui-devtools":"## Xmlui Devtools Package\r\n\r\n## Package Components\r\n\r\n| Component | Description | Status |\r\n| :---: | --- | :---: |\r\n",
  "extension-components/xmlui-pdf":"## Xmlui Pdf Package\r\n\r\nThis package provides components for working with pdf files.\r\n\r\n## Package Components\r\n\r\n| Component | Description | Status |\r\n| :---: | --- | :---: |\r\n| [Pdf](./xmlui-pdf/Pdf.mdx) | The `Pdf` component provides a read-only preview of a pdf document's contents. | experimental |\r\n",
  "extension-components/xmlui-pdf/Pdf":"import { Callout } from \"nextra/components\";\r\n\r\n# Pdf [#component-pdf]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nThe `Pdf` component provides a read-only preview of a pdf document's contents.\r\n\r\n## Properties\r\n\r\n### `src`\r\n\r\nThis property defines the source URL of the pdf document to display.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\n### Theme Variables\r\n\r\n| Variable | Default Value (Light) | Default Value (Dark) |\r\n| --- | --- | --- |\r\n| [boxShadow](../styles-and-themes/common-units/#boxShadow)-page-Pdf | $boxShadow-md | $boxShadow-md |\r\n| [gap](../styles-and-themes/common-units/#size)-pages-Pdf | $space-4 | $space-4 |\r\n",
  "extension-components/xmlui-spreadsheet":"## Xmlui Spreadsheet Package\r\n\r\nThis package provides an experimental spreadsheet component for XMLUI.\r\n\r\n## Package Components\r\n\r\n| Component | Description | Status |\r\n| :---: | --- | :---: |\r\n| [Spreadsheet](./xmlui-spreadsheet/Spreadsheet.mdx) | XMLUI Spreadsheet | experimental |\r\n",
  "extension-components/xmlui-spreadsheet/Spreadsheet":"import { Callout } from \"nextra/components\";\r\n\r\n# Spreadsheet [#component-spreadsheet]\r\n\r\n<Callout type=\"warning\" emoji=\"📔\">This component is in an **experimental** state; you can use it in your app. However, we may modify it, and it may even have breaking changes in the future.</Callout>\r\n\r\nXMLUI Spreadsheet\r\n\r\n## Properties\r\n\r\n### `worksheets`\r\n\r\nThis property sets the initial value of the spreadsheet's worksheets.\r\n\r\n## Events\r\n\r\nThis component does not have any events.\r\n\r\n## Exposed Methods\r\n\r\nThis component does not expose any methods.\r\n\r\n## Styling\r\n\r\nThis component does not have any styles.\r\n",
  "faq":"import { Callout } from 'nextra/components'\r\n\r\n# Frequently Asked Questions\r\n\r\n<Callout type=\"warning\">\r\nThis page is under construction.\r\n</Callout>\r\n\r\n### What is XMLUI?\r\n\r\nXMLUI is a framework for building user interfaces using a specialized XML-based markup language, along with optional inline scripting. It provides a structured approach to defining components, styling, data handling, and user interactions, all within a simple and extensible environment.\r\n\r\n### Do I need to know JavaScript to use XMLUI?\r\n\r\nNot necessarily. XMLUI’s scripting language is a lightweight subset of JavaScript and is only used sparingly for specific UI logic. In most cases, you can build functional interfaces with just XMLUI markup and optional code-behind files. Full JavaScript knowledge is not required.\r\n\r\n### How do I create a new component?\r\n\r\nComponents are defined directly in XMLUI markup by using tags that represent the component type. You can also customize their properties, attach event handlers, and even define reusable templates to tailor the component’s appearance and behavior.\r\n\r\n### What is the difference between a property and a template property?\r\n\r\nA property configures a single aspect of a component’s appearance, behavior, or functionality. A template property holds a component definition itself, allowing you to specify how child elements—like items in a list—are rendered.\r\n\r\n### How do I handle events, such as button clicks?\r\n\r\nComponents handle certain events by default, but you can add custom event handlers using attributes prefixed with on, or by declaring event logic in code-behind files. This lets you implement particular app logic in response to user actions or system events.\r\n\r\n### Can I reuse components across my application?\r\n\r\nYes. XMLUI supports creating reusable components that can be declared once and then integrated in multiple places. You can also share them as third-party components for others to use.\r\n\r\n### How do I style my application?\r\n\r\nXMLUI offers themes and layout properties to style your application. Themes define global and component-specific visual settings, while layout properties control traits like colors, padding, and borders. Theme variables let you adjust styles consistently, and changing a theme variable instantly updates all components that use it.\r\n\r\n### Is it possible to fetch and display data from backend APIs?\r\n\r\nYes. XMLUI’s data binding mechanism allows you to provide a URL to a backend API endpoint. The framework then fetches and makes the data available to components automatically, without additional scripting.\r\n\r\n### What if my data changes over time?\r\n\r\nXMLUI includes automatic data change detection. When data updates, affected parts of the UI refresh automatically. This means that if you add items to a list or modify data behind the scenes, the UI will update accordingly without requiring extra scripting.\r\n\r\n### How can I reference external assets like images or icons?\r\n\r\nXMLUI supports resources, which can be defined via URLs and referenced in your markup or themes. This makes it easy to incorporate icons, images, fonts, or other external assets into your application.\r\n\r\n### Where can I put my custom logic if the markup becomes too complex?\r\n\r\nFor logic that doesn’t fit directly in markup, you can use a code-behind file. This file, associated with a particular component, contains scripting logic separate from the markup, helping maintain a clean structure and better organization of your application’s code.\r\n",
  "getting-started":"import { Callout } from 'nextra/components'\r\nimport { GETTING_STARTED } from \"../meta/downloads\";\r\nimport themeGallery from \"./styles-and-themes/samples/theme-gallery-brief.xmlui\";\r\n\r\n# Getting Started with XMLUI\r\n\r\nXMLUI is a declarative UI framework with a simple markup allowing you to create web apps directly bound to web APIs on the backend.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  - XMLUI applications have a **simple structure**. You can copy the app files into your web server's static files folder, and they are ready to be hosted instantly.\r\n  - In contrast to other UI frameworks, XMLUI offers **simple concepts** to create apps quickly **without coping with the cumbersome peculiarities of web development**.\r\n  - It integrates with **web APIs** out of the box.\r\n  - You can create **reusable app components** to avoid markup repetition and improve maintainability.\r\n  - You can change an app's visual appearance by selecting a **built-in theme or creating or deriving a new one**.\r\n</Callout>\r\n\r\nAfter trying our Starter App, visit the [Dive Deeper](#dive-deeper) section of this article for suggestions on further steps to get acquainted with XMLUI.\r\n\r\n## Try the Starter App\r\n\r\nWe have a starter app you can use to get acquainted with XMLUI. Download its zip file from <DownloadLink href={GETTING_STARTED}>here</DownloadLink> and unzip it into a working folder.\r\n\r\nYou need only a couple of things to try it:\r\n- Your favorite text (code) editor.\r\n- A local web server to run the XMLUI app. \r\n\r\nInstall the LTS version of Node.js on your machine (https://nodejs.org/en). Then, you will use the HTTP Node package to host the tutorial.\r\n\r\nOpen a command line prompt and select the unzipped sample folder as your working folder (you must find `index.html` in the working folder). Type this command line to start the web server and open your default browser with the app:\r\n\r\n```bash copy\r\nnpx -y http-server -o\r\n```\r\n\r\nWhen your app starts, it displays this page:\r\n\r\n<br/>\r\n<Image alt=\"App start\" src=\"/resources/images/get-started/app-start.png\" />\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nLater, when you modify the code, refresh the browser page to reload the page with the changes. In some cases, depending on your settings, the browser caches the page, so the refresh will not respond to your markup changes. If you experience this, the browser caching may be turned on; turn it off.\r\n\r\nCheck your browser's documentation for details. If you use Chrome, turn on Developer Tools (F12), go to the Network tab, and set the \"Disable cache\" checkbox.\r\n</Callout>\r\n\r\nYou can try some simple and cool XMLUI features with the menu items.\r\n\r\nIn the following sections, you will change and extend the app. During these slight changes, you will also learn some simple XMLUI concepts.\r\n\r\n## Modify the Displayed Text\r\n\r\nThe sample's root folder contains a `Main.xmlui` file, which is the app's entry point. Open this file in your code editor. Scroll down to the bottom of this file and modify the `<Footer>` element's content by changing the \"Powered by XMLUI\" text to something else:\r\n\r\n```xmlui copy /I modified it!!!/ filename=\"Main.xmlui\"\r\n<App \r\n  name=\"Tutorial\"\r\n  logo=\"resources/xmlui-logo.svg\"\r\n  logo-dark=\"resources/xmlui-logo-dark.svg\">\r\n  <AppHeader>\r\n    <!-- ... -->\r\n  </AppHeader>\r\n  <NavPanel>\r\n    <!-- ... -->\r\n  </NavPanel>\r\n  <Pages>\r\n    <!-- ... -->\r\n  </Pages>  \r\n  <Footer>\r\n    Powered by XMLUI -- I modified it!!!\r\n  </Footer>\r\n</App>\r\n```\r\n\r\nSave the `Main.xmlui` file and refresh the app's page in the browser. The app now displays the modified footer.\r\n\r\n<br/>\r\n<Image alt=\"App modified\" src=\"/resources/images/get-started/app-modified.png\" />\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Each tag (`<App>`, `<AppHeader>`, `<NavPanel>`, `<Pages>`, `<Footer>`, and the others) in the markup represents a **component**. Components are the basic building blocks of XMLUI apps. You can **nest them** to represent the hierarchy of UI elements.\r\n</Callout>\r\n\r\n(Later, when we refer to a component, we omit the wrapping angle brackets and use only the name.)\r\n\r\n## Modify a List's Display\r\n\r\nWhen you click the \"SpaceX List\" menu item, the app displays a list with data fetched from the SpaceX API.\r\n\r\n<br/>\r\n<Image alt=\"App modified\" src=\"/resources/images/get-started/spacex-list.png\" />\r\n\r\nThe SpaceX API endpoint in this sample retrieves other data fields, including links. After observing the markup, you will modify the UI to display those links and allow navigating to their targets.\r\n\r\nThis functionality is a cooperation of a couple of components within `App`: `NavLink`, and `Page`:\r\n\r\n```xmlui filename=\"Main.xmlui\" {6,10-14} /NavLink/ /Page/\r\n<App \r\n  name=\"Tutorial\"\r\n  logo=\"resources/xmlui-logo.svg\"\r\n  logo-dark=\"resources/xmlui-logo-dark.svg\">\r\n  <NavPanel>\r\n    <NavLink label=\"SpaceX List\" to=\"/spacexlist\" />\r\n    <!-- Other menu items omitted -->\r\n  </NavPanel>\r\n  <Pages>\r\n    <Page url=\"/spacexlist\">\r\n      <List data=\"https://api.spacexdata.com/v3/history\">\r\n        <Card title=\"{$item.title}\" subtitle=\"{$item.details}\" />\r\n      </List>\r\n    </Page>\r\n    <!-- Other Page items omitted -->\r\n  </Pages>\r\n  <!-- Other components omitted -->\r\n</App>\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Components have **properties** that determine their appearance and behavior. Properties are declared as XML attributes when they can be represented with strings.\r\n</Callout>\r\n\r\nComponents work together declaratively. `App` connects the `to` property of `NavLink` with the `url` property of `Page`. As a result, the particular page is displayed when you click the \"SpaceX List\" menu item.\r\n\r\n### Components with Children\r\n\r\n`List` is a component that works with data items and renders them into a scrollable list. You can define the UI for a particular item with its nested children. \r\n\r\n```xmlui copy {2} filename=\"Main.xmlui\" /data/\r\n<List data=\"https://api.spacexdata.com/v3/history\">\r\n  <Card title=\"{$item.title}\" subtitle=\"{$item.details}\" />\r\n</List>\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can use **expressions** in property values. Expressions are wrapped in curly braces.\r\n</Callout>\r\n\r\nThe `title` and `subtitle` property values of `Card` are expressions, `{$item.title}` and `{$item.details}`, respectively.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  The component definitions within the template properties can access information in the hosting component (the one using the template's content) through identifiers starting with `$`. We call them **context values**.\r\n</Callout>\r\n\r\nThe list uses a `Card` component to display a particular item. `Card` has a `title` and a `subtitle` property to display two data entries. The `$item` context value represents the current item of the list to be displayed. So, `$item.title` and `$item.details` represent the current item's `title` and `details` fields in the fetched data list.\r\n\r\n### Fetching Data from API Endpoints\r\n\r\nThe specific endpoint of the SpaceX API (given in the `data` property of `List`) retrieves a list of event history items. A single item has this structure:\r\n\r\n```json\r\n{\r\n  \"id\": \"<Record ID>\",\r\n  \"title\": \"<Short title>\",\r\n  \"event_date_utc\": \"<Event date>\",\r\n  \"event_date_unix\": \"<Event date in Unix format>\",\r\n  \"details\": \"<Event details>\",\r\n  \"links\": {\r\n    \"reddit\": \"<Reddit URL>\",\r\n    \"article\": \"<Article URL>\",\r\n    \"wikipedia\": \"<Wikipedia URL>\"\r\n  }\r\n}\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Components working with data **can be bound to API endpoints** as well.\r\n  Many XMLUI components handle data fetching from an API (using GET) in the `data` property.\r\n</Callout>\r\n\r\n### Updating the Item Template\r\n\r\nChange the `Card` component to display the SpaceX and Wikipedia links and allow the user to navigate to them:\r\n\r\n```xmlui copy {2-3} filename=\"Main.xmlui\"\r\n<Card title=\"{$item.title}\" subtitle=\"{$item.details}\">\r\n  <Link to=\"{$item.links.article}\" target=\"_blank\">SpaceX</Link>\r\n  <Link to=\"{$item.links.wikipedia}\" target=\"_blank\">Wikipedia</Link>\r\n</Card>\r\n```\r\n\r\nWhen you refresh the app in the browser, it will display the links. Click a link to open it in a new browser tab.\r\n\r\n<br/>\r\n<Image alt=\"App modified\" src=\"/resources/images/get-started/spacex-list-with-links.png\" />\r\n\r\n## Extend the App\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  You can **easily extend** an XMLUI working app.\r\n</Callout>\r\n\r\nIn this section, you will add a new component to your app's page to display three boxes. Their markup is similar; however, each has its particular color and text.\r\n\r\n### Define a Reusable Component\r\n\r\nCreate a new file in the `components` folder named `MyBox.xmlui`, and copy this contents to it:\r\n\r\n```xmlui copy filename=\"components/MyBox.xmlui\"\r\n<Component name=\"MyBox\">\r\n  <Stack \r\n    padding=\"$padding-normal\"\r\n    borderColor=\"{$props.color}\"\r\n    borderWidth=\"8px\">\r\n    {$props.label}\r\n  </Stack>\r\n</Component>\r\n```\r\n\r\n### Use the Reusable Component\r\n\r\nThis code declares a reusable component named `MyBox` with two properties, `color` and `title`. You add a page displaying three instances of `MyBox` to the menu with a few steps:\r\n\r\n1. Open the `Main.xmlui` file and navigate to the `<NavPanel>` section. It contains several `<NavLink>` child items, each representing a menu item that can navigate to its corresponding UI page. Append a new one:\r\n\r\n```xmlui copy {5}\r\n<!-- ... -->\r\n  <NavPanel>\r\n    <NavLink label=\"Home\" to=\"/\" icon=\"home\"/>\r\n    <NavLink label=\"SpaceX List\" to=\"/spacexlist\" />\r\n    <NavLink label=\"My Boxes\" to=\"/myboxes\" />\r\n  </NavPanel>\r\n<!-- ... -->\r\n```\r\n\r\n2. Scroll down to the `<Pages>` section, which contains `<Page>` items. These items declare how the UI belonging to a particular navigation link should display.\r\n3. Append a new `<Page>` item to the bottom of the `<Pages>` section:\r\n\r\n```xmlui copy {5-7}\r\n  <Pages>\r\n    <!-- Previous <Page> tags omitted -->\r\n    <Page url=\"/myboxes\">\r\n      <HStack>\r\n        <MyBox color=\"red\" label=\"Red box\" />\r\n        <MyBox color=\"green\" label=\"My green box\" />\r\n        <MyBox color=\"blue\" label=\"Our blue box\" />\r\n      </HStack>\r\n    </Page>\r\n  </Pages>\r\n```\r\n\r\nReturn to the browser and refresh the current page. Click the \"My Boxes\" item in the menu. You will see the newly added component works:\r\n\r\n<br/>\r\n<Image alt=\"App modified\" src=\"/resources/images/get-started/app-with-boxes.png\" />\r\n\r\n### Respond to an Event\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Components handle **user and system events**. You can declare **event handlers** to change how components respond to particular events. Handling events may change some components' properties. XMLUI observes these changes and refreshes the UI accordingly.\r\n</Callout>\r\n\r\nExtend the `MyBox` component to display a toast when the box is clicked.\r\n\r\n```xmlui copy filename=\"components/MyBox.xmlui\" /onClick/ {6}\r\n<Component name=\"MyBox\">\r\n  <Stack \r\n    padding=\"$padding-normal\"\r\n    borderColor=\"{$props.color}\"\r\n    borderWidth=\"8px\"\r\n    onClick=\"toast('You clicked ' + $props.label)\">\r\n    {$props.label}\r\n  </Stack>\r\n</Component>\r\n```\r\n\r\nYou can add event handlers to a component using an attribute with the `on` prefix followed by the event name (camel-casing). The attribute value is the script for the event handler code.\r\n\r\nIn the code above, the `onClick` attribute is added to the `Stack` component. When the user clicks the stack, the `toast` function is called with a message.\r\n\r\nThe code above executes the `toast('You clicked' + $props.label)` event handler, which displays a notification in the app's top-right corner.\r\n\r\nWhen you refresh the app in the browser and click a box, a toast will appear:\r\n\r\n<br/>\r\n<Image alt=\"App modified\" src=\"/resources/images/get-started/app-with-toast.png\" />\r\n\r\n## Diving Deeper into XMLUI [#dive-deeper]\r\n\r\nThe Starter App introduced the framework's fundamental concepts. As you learned, everything revolves around the building blocks of an XMLUI app: components.\r\n\r\nHere are a few more actions you can take to dive deeper into XMLUI:\r\n\r\n- Try the [Contact List Tutorial](/cl-app). This article will teach you a few helpful components and simple patterns for creating apps.\r\n- Visit the articles in the [Create XMLUI Apps](/create-apps) topic to learn in-depth information about specific concepts and components of the framework.\r\n- Observe the [How-to](/howto) section to learn about patterns that help you in a particular scenario.",
  "glossary":"import { Callout } from 'nextra/components'\r\n\r\n# Glossary of Terms\r\n\r\n| Term | Definition |\r\n| ---- | ---------- |\r\n| **Markup** | The **XMLUI markup** is the language used to define the structure and layout of an application. |\r\n| **Scripting language** | The **scripting language of XMLUI** is a lightweight subset of JavaScript used to implement specific UI logic. |\r\n| **Component** | A **component** is a fundamental building block of the XMLUI system, **represented by a tag in the markup**.  |\r\n| **Component ID** | A component ID is **an optional identifier** defined using the `id` markup attribute. It allows you to access the component's exposed properties and methods directly. |\r\n| **Property** | An XMLUI component **property** defines a component's appearance, behavior, or functionality. |\r\n| **Template property** | A template property in XMLUI is a component property whose **value is a component definition**. You can declare its value using the `<property>` helper tag. |\r\n| **Inline Expression** | An inline expression is a dynamically evaluated snippet of code that can be used in properties (markup attributes) or text elements. It is wrapped in curly braces (`{` and `}`).\r\n| **String interpolation** | This mechanism allows you to **mix multiple literal string segments with inline expressions** in attributes and text elements. |\r\n| **Event handler** | An **event handler** in XMLUI responds to user or system events. You can change the component's default behavior by declaring an event handler. |\r\n| **Variable** | XMLUI variables store state like programming language variables, but they are reactive and automatically update when their dependencies change. |\r\n| **Code-behind file** | This optional file is associated with an XMLUI component that contains scripting logic separate from the markup. |\r\n| **Exposed Properties and Methods** | A component may have exposed methods and properties that **allow you to query its state or initiate actions**. |\r\n| **Component Binding** | **Component binding** in XMLUI allows components to interact by using properties with inline scripting expressions. |\r\n| **Context value** | A context value is an **internal, read-only property** associated with a specific component context, which is usually a template property or an event handler. |\r\n| **Data Binding** | This mechanism **fetches data from backend API endpoints** and makes it available to components. In most cases, you only need to provide a URL, and the framework handles the rest, ensuring the data is readily accessible. |\r\n| **Data Change Detection** | XMLUI automatically tracks data changes and refreshes affected parts of the UI. |\r\n| **Reusable Components** | The framework allows declaring reusable components **using XMLUI markup and scripts, without requiring JavaScript**. These components can be used within the application or shared as third-party components. |\r\n| **Theme** | An XMLUI theme is a coherent set of application-wide and component-specific style settings that define the overall visual appearance of an app. |\r\n| **Theme variable** | A theme variable is a **single setting within a theme definition**. Changing the value of a theme variable causes all components that use it to automatically refresh their UI. |\r\n| **Resources** | Resources in XMLUI are **external assets**, such as icons, images, fonts, and more, that can be defined and referenced within the application, typically through a URL. |\r\n| **Layout Property** | Layout properties define **specific visual traits of a component**, such as text color, padding, shadows, font style, border rounding, and more. |\r\n\r\n",
  "howto":"# How-to Guides\r\n\r\nThese articles contain short guides on different features in XMLUI and some real-world ideas and examples of how to build software using the framework.\r\n\r\nIf you want longer, step-by-step tutorials on the most important features, see the [Tutorials](./tutorials.mdx).\r\n",
  "howto/App":"# Using App\r\n\r\nIn this article, you will learn how to use the `App` component in some frequently used scenarios.\r\n\r\n## Using the Full Viewport\r\n\r\nBy default, `App` displays some space to the left and right of the browser's window reserved for scrollbars. This technique avoids app window resizing when a scrollbar is displayed or removed.\r\n\r\n```xmlui copy\r\n<App border=\"2px dotted red\">\r\n  <Text>The app's viewport has space reserved for scrollbars</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"App window with scrollbar gutters\"\r\n  height={108}\r\n  horizontal={true}\r\n  app={`\r\n    <App border=\"2px dotted red\">\r\n      <Text>The app's viewport has space reserved for scrollbars</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nIf you do not want these spaces there, set the `noScrollbarGutters` property of `App` to `true`.\r\n\r\n```xmlui copy\r\n<App border=\"2px dotted red\" noScrollbarGutters>\r\n  <Text>The app's viewport fills the entire browser window</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"App window with scrollbar gutters\"\r\n  height={108}\r\n  horizontal={true}\r\n  app={`\r\n    <App border=\"2px dotted red\" noScrollbarGutters>\r\n      <Text>The app's viewport fills the entire browser window</Text>\r\n    </App>\r\n  `}\r\n/>\r\n",
  "howto/AppHeader":"import { Callout } from 'nextra/components'\r\n\r\n# AppHeader\r\n\r\nThis article will teach you how to use the `AppHeader` component in particular scenarios.\r\n\r\n<Callout type=\"warning\">\r\nThis page is under construction.\r\n</Callout>\r\n",
  "howto/DatePicker":"# Apply Selection Limits to DatePicker\r\n\r\nYou can control the selectable dates with a number of properties:\r\n- `fromDate`: specify the date from when the user can select dates (default is undefined)\r\n- `toDate`: specify the date until when the user can select dates (default is undefined)\r\n- `disabledDates`: specify a list of dates that are unselectable in the available date range (governed by `fromDate` and `toDate`)\r\n\r\n```xmlui copy\r\n<App>\r\n  <DatePicker\r\n    initialValue=\"25/05/2024\"\r\n    fromDate=\"20/05/2024\"\r\n    toDate=\"30/05/2024\"\r\n    disabledDates=\"{['22/05/2024', '27/05/2024']}\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: DatePicker Restrictions\"\r\n  height={160}\r\n  app={`\r\n    <App>\r\n      <DatePicker\r\n        initialValue=\"25/05/2024\"\r\n        fromDate=\"20/05/2024\"\r\n        toDate=\"30/05/2024\"\r\n        disabledDates=\"{['22/05/2024', '27/05/2024']}\" />\r\n    </App>\r\n  `}\r\n/>\r\n",
  "howto/Footer":"import { Callout } from 'nextra/components'\r\n\r\n# Footer\r\n\r\nThis article will teach you how to use the `Footer` component in particular scenarios.\r\n\r\n<Callout type=\"warning\">\r\nThis page is under construction.\r\n</Callout>\r\n",
  "howto/RadioGroup":"import { Callout } from 'nextra/components'\r\n\r\n# RadioGroup\r\n\r\n## Complex RadioGroup Layouts\r\n\r\n`RadioGroupOptions` always store their value in the nearest `RadioGroup` parent and can be placed in elaborate layouts.\r\n\r\n```xmlui copy\r\n<App>\r\n  <RadioGroup initialValue=\"first\">\r\n    Group #1\r\n    <Card gap=\"$space-2\">\r\n      <Option label=\"First Item\" value=\"first\"/>\r\n      <Stack backgroundColor=\"$backgroundColor-overlay\">\r\n        <Option label=\"Second Item\" value=\"second\"/>\r\n      </Stack>\r\n      <Option label=\"Third Item\" value=\"third\"/>\r\n      <RadioGroup initialValue=\"second\">\r\n        Group #2\r\n        <Card gap=\"$space-2\">\r\n          <Option label=\"First Item\" value=\"first\"/>\r\n          <Option label=\"Second Item\" value=\"second\"/>\r\n        </Card>\r\n      </RadioGroup>\r\n    </Card>\r\n  </RadioGroup>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: RadioGroup Layout\"\r\n  app={`\r\n    <App>\r\n      <RadioGroup initialValue=\"first\">\r\n        Group #1\r\n        <Card gap=\"$space-2\">\r\n          <Option label=\"First Item\" value=\"first\"/>\r\n          <Stack backgroundColor=\"$backgroundColor-overlay\">\r\n            <Option label=\"Second Item\" value=\"second\"/>\r\n          </Stack>\r\n          <Option label=\"Third Item\" value=\"third\"/>\r\n          <RadioGroup initialValue=\"second\">\r\n            Group #2\r\n            <Card gap=\"$space-2\">\r\n              <Option label=\"First Item\" value=\"first\"/>\r\n              <Option label=\"Second Item\" value=\"second\"/>\r\n            </Card>\r\n          </RadioGroup>\r\n        </Card>\r\n      </RadioGroup>\r\n    </App>\r\n  `}\r\n/>\r\n",
  "howto/component-icons":"import data from \"../../component-samples/Table/list-component-data.js\";\r\nimport {COMPONENT_TABLE, THEMES_AND_STYLING} from \"../../meta/pages.js\";\r\nimport arrowIcon from \"../../public/resources/files/howto/component-icons/up-arrow.svg\";\r\nimport {Callout} from 'nextra/components'\r\n\r\n# Using Table-specific Icons\r\n\r\nChanging the graphical element displayed by an `Icon` component is as easy as entering a different name in the `name` property:\r\n\r\n```xmlui copy\r\n<Icon name=\"email\" />\r\n```\r\n\r\nSome components have icons already built into them like the ones in the `Table` component indicating sorting by a specific column.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\n    The following examples all use the same dataset that the `Table` component <SmartLink href={COMPONENT_TABLE}>reference\r\n    documentation</SmartLink> uses.\r\n</Callout>\r\n\r\n<Playground\r\n    name=\"Example: Sorting icons in Table column headers\"\r\n    height={340}\r\n    app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data)}}'>\r\n        <Column bindTo=\"name\" canSort=\"true\"/>\r\n        <Column bindTo=\"quantity\" canSort=\"true\"/>\r\n        <Column bindTo=\"unit\" canSort=\"true\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nThe `Table` uses three icons to indicate the sorting order for the three possible icon options:\r\n- ascending: `sortasc`\r\n- descending: `sortdesc`\r\n- not sorted by the column: `nosort`\r\n\r\nIf you want to use your own icons instead of the ones already provided,\r\nyou would add an entry with the icon name to the configuration file like so:\r\n\r\n```js\r\n{\r\n  name: \"My Project\",\r\n  resources: {\r\n    \"icon.arrowup\": \"resources/arrow-up.svg\",\r\n  },\r\n}\r\n```\r\n\r\nHowever, this would change all icons using the name `arrowup`.\r\n\r\n## Component-specific Custom Icons\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n    In situations where you would want to change only the icon(s) of a particular component, like the `Table`,\r\n    you can use icon names scoped specifically to that component.\r\n</Callout>\r\n\r\nComponent-scoped icon names follow the same signature:\r\n\r\n```\r\n<icon-name>:<component-name>\r\n```\r\n\r\nIcons in the `Table` component using this signature are the following icons:\r\n- `sortasc:Table`\r\n- `sortdesc:Table`\r\n- `nosort:Table`\r\n\r\nUse the same method for overwriting these icons as you would do with other icons:\r\n\r\n```js /icon.sortasc:Table/\r\n{\r\n  name: \"My Project\",\r\n  resources: {\r\n    \"icon.sortasc:Table\": \"resources/arrow-up.svg\",\r\n  },\r\n}\r\n```\r\n\r\nThis ensures that only the `sortasc` icon found in the `Table` component is affected by the change.\r\n\r\n<Playground\r\n    name=\"Example: Component-specific icon customization\"\r\n    height={360}\r\n    resources={{\"icon.sortasc:Table\": arrowIcon}}\r\n    app={`\r\n    <App>\r\n      <Table data='{${JSON.stringify(data)}}'>\r\n        <Column bindTo=\"name\" canSort=\"true\"/>\r\n        <Column bindTo=\"quantity\" canSort=\"true\"/>\r\n        <Column bindTo=\"unit\" canSort=\"true\"/>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Instance-specific Custom Icons\r\n\r\nAnother scenario regarding icon change is where only one instance of the `Table` component on a particular page needs to have different sorting icons.\r\nThe `Table` component also supports this case by providing the following properties:\r\n- `iconSortAsc`: overwrites the \"sortasc:Table\" icon\r\n- `iconSortDesc`: overwrites the \"sortdesc:Table\" icon\r\n- `iconNoSort`: \"overwrites the \"nosort:Table\" icon\r\n\r\nIn the next example, the first `Table` component to the left retains the default sort by ascending order icon,\r\nwhile the second `Table` to the right uses the `chevronup` icon instead.\r\n\r\n```xmlui copy /iconSortAsc=\"chevronup\"/\r\n<App>\r\n  <HStack>\r\n    <VStack width=\"50%\">\r\n      Default icon:\r\n      <Table data='{...}' sortBy=\"name\">\r\n        <Column bindTo=\"name\" canSort=\"true\"/>\r\n        <Column bindTo=\"quantity\" canSort=\"true\"/>\r\n      </Table>\r\n    </VStack>\r\n    <VStack width=\"50%\">\r\n      Instance-specific icon:\r\n      <Table data='{...}' iconSortAsc=\"chevronup\" sortBy=\"name\">\r\n        <Column bindTo=\"name\" canSort=\"true\"/>\r\n        <Column bindTo=\"quantity\" canSort=\"true\"/>\r\n      </Table>\r\n    </VStack>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: Instance-specific icon customization\"\r\n    height={380}\r\n    app={`\r\n    <App>\r\n      <HStack>\r\n        <VStack width=\"50%\">\r\n          Default icon:\r\n          <Table data='{${JSON.stringify(data)}}' sortBy=\"name\">\r\n            <Column bindTo=\"name\" canSort=\"true\"/>\r\n            <Column bindTo=\"quantity\" canSort=\"true\"/>\r\n          </Table>\r\n        </VStack>\r\n        <VStack width=\"50%\">\r\n          Instance-specific icon:\r\n          <Table data='{${JSON.stringify(data)}}' iconSortAsc=\"chevronup\" sortBy=\"name\">\r\n            <Column bindTo=\"name\" canSort=\"true\"/>\r\n            <Column bindTo=\"quantity\" canSort=\"true\"/>\r\n          </Table>\r\n        </VStack>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Fallbacks\r\n\r\nScoped icons always fall back to a more generic alternative if a particular name is not found.\r\nXMLUI uses the same concept here as it does regarding <SmartLink href={THEMES_AND_STYLING + \"#theme-variable-chaining\"}>theme variable chaining</SmartLink>.\r\nFrom the most specific to the most generic the chain looks like the following for the Table's `sortasc` icon:\r\n\r\n1. XMLUI looks for the `sortasc:Table` icon name in the resources of the application config\r\n2. If (1) is not found, XMLUI checks the same resources entry in the config file for an icon name `sortasc`\r\n3. If (2) is not found, XMLUI browses the icon registry for an icon name `sortasc`\r\n4. If none of the above is found, XMLUI renders an empty icon\r\n\r\nThis also means that if more than one icon is set, the icon that is more specific will overwrite a more generic icon.\r\nIn the following example, we will override the `icon.sortasc:Table` resource with a custom one and also set the `iconSortAsc` property.\r\nNote, how the icon resource only appears in the left `Table` and not on the right one which has the property set:\r\n\r\n```js copy filename=\"config.ts\"\r\n{\r\n  name: \"My Project\",\r\n  resources: {\r\n    \"icon.sortasc:Table\": \"resources/arrow-up.svg\",\r\n  },\r\n}\r\n```\r\n\r\n```xmlui copy /iconSortAsc=\"chevronup\"/ filename=\"Main.xmlui\"\r\n<HStack>\r\n  <VStack width=\"50%\">\r\n    Component-specific icon:\r\n    <Table data='{[...]}' sortBy=\"name\">\r\n      <Column bindTo=\"name\" canSort=\"true\"/>\r\n      <Column bindTo=\"quantity\" canSort=\"true\"/>\r\n    </Table>\r\n  </VStack>\r\n  <VStack width=\"50%\">\r\n    Instance-specific icon:\r\n    <Table data='{[...]}' iconSortAsc=\"chevronup\" sortBy=\"name\">\r\n      <Column bindTo=\"name\" canSort=\"true\"/>\r\n      <Column bindTo=\"quantity\" canSort=\"true\"/>\r\n    </Table>\r\n  </VStack>\r\n</HStack>\r\n```\r\n\r\n<Playground\r\n    name=\"Example: Instance- and Component-specific icon customizations\"\r\n    height={380}\r\n    resources={{\"icon.sortasc:Table\": arrowIcon}}\r\n    app={`\r\n    <App>\r\n      <HStack>\r\n        <VStack width=\"50%\">\r\n          Component-specific icon:\r\n          <Table data='{${JSON.stringify(data)}}' sortBy=\"name\">\r\n            <Column bindTo=\"name\" canSort=\"true\"/>\r\n            <Column bindTo=\"quantity\" canSort=\"true\"/>\r\n          </Table>\r\n        </VStack>\r\n        <VStack width=\"50%\">\r\n          Instance-specific icon:\r\n          <Table data='{${JSON.stringify(data)}}' iconSortAsc=\"chevronup\" sortBy=\"name\">\r\n            <Column bindTo=\"name\" canSort=\"true\"/>\r\n            <Column bindTo=\"quantity\" canSort=\"true\"/>\r\n          </Table>\r\n        </VStack>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n",
  "howto/create-apps":"import { Callout } from 'nextra/components'\r\nimport { XMLUI_EMPTY, XMLUI_STARTER } from \"../../meta/downloads\";\r\n\r\n# Creating XMLUI Apps\r\n\r\n1. Unless already installed, set up Node.js on your machine (https://nodejs.org/en).\r\n2. Download the <DownloadLink href={XMLUI_STARTER}>XMLUI starter app</DownloadLink>.\r\n3. Unzip the downloaded zip file.\r\n4. Start a command prompt and select the unzipped folder as the current working directory\r\n5. Execute `start.bat` (Windows), or `./start.sh` (MacOs, Linux), or run `npx -y http-server -o` (any platform)\r\n\r\nFor example, if your unzipped folder is in `C:\\Users\\Mary\\work\\xmlui-starter` (Windows), use these commands:\r\n\r\n```bat\r\ncd C:\\Users\\Mary\\work\\xmlui-starter\r\nstart.bat\r\n```\r\n\r\nThe XMLUI starter app creates a small app. In step 2, download the <DownloadLink href={XMLUI_EMPTY}>empty XMLUI app</DownloadLink> to create an empty app.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nThe empty app will display some text to let you be sure that the app works.\r\n</Callout>\r\n",
  "howto/customize-input-fields":"import { COMPONENT_COMBOBOX, COMPONENT_TEXTBOX } from \"../../meta/pages\";\r\n\r\n# Customizing Input Fields\r\n\r\nComponents with an input field, like <SmartLink href={COMPONENT_TEXTBOX}>TextBox</SmartLink>\r\ncan be customized with icons and adornment texts.\r\n\r\nAutoComplete example:\r\n\r\n```xmlui copy\r\n<App>\r\n  <AutoComplete\r\n    initialValue=\"js\"\r\n    placeholder=\"Select a user\"\r\n    startIcon=\"user\"\r\n    endIcon=\"globe\"\r\n    endText=\"Globally\"\r\n    readOnly=\"false\">\r\n    <Option label=\"Jane Arrington\" value=\"ja\" />\r\n    <Option label=\"John Sniper\" value=\"js\" />\r\n    <Option label=\"Emily Gold\" value=\"eg\" />\r\n  </AutoComplete>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: AutoComplete Input Field Customization\"\r\n  height={260}\r\n  app={`\r\n    <App>\r\n      <AutoComplete\r\n        initialValue=\"js\"\r\n        placeholder=\"Select a user\"\r\n        startIcon=\"user\"\r\n        endIcon=\"globe\"\r\n        endText=\"Globally\"\r\n        readOnly=\"false\">\r\n        <Option label=\"Jane Arrington\" value=\"ja\" />\r\n        <Option label=\"John Sniper\" value=\"js\" />\r\n        <Option label=\"Emily Gold\" value=\"eg\" />\r\n      </AutoComplete>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nNumberBox example:\r\n\r\n```xmlui copy\r\n<App>\r\n  <NumberBox\r\n    placeholder=\"Enter amount\"\r\n    startText=\"Global Stocks\"\r\n    startIcon=\"globe\"\r\n    endText=\"HUF\"\r\n    readOnly=\"false\" />\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: NumberBox Adornments\"\r\n  app={`\r\n    <App>\r\n      <NumberBox\r\n        placeholder=\"Enter amount\"\r\n        startText=\"Global Stocks\"\r\n        startIcon=\"globe\"\r\n        endText=\"HUF\"\r\n        readOnly=\"false\" />\r\n    </App>\r\n  `}\r\n/>\r\n",
  "howto/events":"# How-To: Events\r\n\r\nAs XMLUI runs events asynchronously, you cannot be sure when the event handler has completed. There are several situations when you should know whether an event handler is still in progress or you must do something after it has been completed.\r\n\r\nIn this article, you will learn how to manage a few typical situations related to event handlers.\r\n\r\n## Test if an event is in progress\r\n\r\nIn the following example, a button's click event handler runs for 3 seconds. Nonetheless, you can click the button several times before the 3 seconds expires:\r\n\r\n```xmlui copy\r\n<App var.logClick=\"\">\r\n  <Button label=\"I'm running for 3 seconds, click me!\"\r\n    onClick=\"\r\n      logClick += '+';\r\n      delay(3000);\r\n    \" />\r\n  <Text>Clicks: {logClick}</Text>\r\n</App>\r\n```\r\n\r\nClick the button several times quickly:\r\n\r\n<Playground\r\n    name=\"Simultaneously running event handlers\"\r\n    height={140}\r\n    horizontal={true}\r\n    app={`\r\n      <App var.logClick=\"\">\r\n        <Button label=\"I'm running for 3 seconds, click me!\"\r\n          onClick=\"\r\n            logClick += '+';\r\n            delay(3000);\r\n          \" />\r\n        <Text>Clicks: {logClick}</Text>\r\n      </App>\r\n  `}\r\n/>\r\n\r\nYou can see that each click immediately logs a \"+\" sign. It means that multiple event handlers run simultaneously.\r\n\r\nXMLUI has built-in support to check if a particular event handler is in progress. Each component supports an API property named `<eventName>InProgress` set to true while the event handler runs.\r\n\r\nThe following sample demonstrates how you can use it. Here, the button is enabled only if the click event handler is not running:\r\n\r\n```xmlui copy {4} /clickInProgress/\r\n<App var.logClick=\"\">\r\n  <Button\r\n    id=\"myButton\"\r\n    enabled=\"{!myButton.clickInProgress}\"\r\n    label=\"I'm running for 3 seconds, click me!\"\r\n    onClick=\"\r\n      logClick += '+';\r\n      delay(3000);\r\n    \" />\r\n  <Text>Clicks: {logClick}</Text>\r\n</App>\r\n```\r\n\r\nWhen you click the button, it remains disabled while the event handler runs, so you cannot start simultaneous click events.\r\n\r\n<Playground\r\n    name=\"Howto: Test if an event handler is in progress\"\r\n    height={140}\r\n    horizontal={true}\r\n    app={`\r\n    <App var.logClick=\"\">\r\n      <Button\r\n        id=\"myButton\"\r\n        enabled=\"{!myButton.clickInProgress}\"\r\n        label=\"I'm running for 3 seconds, click me!\"\r\n        onClick=\"\r\n          logClick += '+';\r\n          delay(3000);\r\n        \" />\r\n      <Text>Clicks: {logClick}</Text>\r\n    </App>\r\n`}\r\n/>\r\n\r\n## Tracking event progress\r\n\r\nThough the `<event>InProgress` property (see <SmartLink href=\"#test-if-an-event-is-in-progress\">here</SmartLink>) helps check if an event handler is currently running, it does not allow reporting event progress.\r\n\r\nFor this purpose, you must use a variable tracking the progress as the following sample demonstrates:\r\n\r\n```xmlui copy /phase/\r\n<App var.phase=\"n/a\">\r\n  <Button\r\n    id=\"myButton\"\r\n    enabled=\"{!myButton.clickInProgress}\"\r\n    label=\"I'm running a long operation, click me!\"\r\n    onClick=\"\r\n      phase = 'Initializing';\r\n      delay(1000);\r\n      phase = 'Working';\r\n      delay(1000);\r\n      phase = 'Cleaning up';\r\n      delay(1000);\r\n      phase = 'Completed';\r\n    \" />\r\n  <Text>Current phase: {phase}</Text>\r\n</App>\r\n```\r\n\r\nClick the button and check how it reports progress:\r\n\r\n<Playground\r\n    name=\"Howto: reporting progress\"\r\n    height={140}\r\n    horizontal={true}\r\n    app={`\r\n    <App var.phase=\"n/a\">\r\n      <Button\r\n        id=\"myButton\"\r\n        enabled=\"{!myButton.clickInProgress}\"\r\n        label=\"I'm running a long operation, click me!\"\r\n        onClick=\"\r\n          phase = 'Initializing';\r\n          delay(1000);\r\n          phase = 'Working';\r\n          delay(1000);\r\n          phase = 'Cleaning up';\r\n          delay(1000);\r\n          phase = 'Completed';\r\n        \" />\r\n      <Text>Current phase: {phase}</Text>\r\n    </App>\r\n`}\r\n/>\r\n\r\n## Catching progress changes\r\n\r\nYou can combine the report progress mechanism with a `ChangeListener` component to catch progress change events:\r\n\r\n```xmlui copy\r\n<App var.phase=\"n/a\" var.logEntries=\"\">\r\n  <ChangeListener\r\n    listenTo=\"{phase}\"\r\n    onDidChange=\"() => logEntries += myButton.clickInProgress ? ' ' + phase : ''\" />\r\n  <Button\r\n    id=\"myButton\"\r\n    enabled=\"{!myButton.clickInProgress}\"\r\n    label=\"I'm running a long operation, click me!\"\r\n    onClick=\"\r\n      phase = 'Initializing';\r\n      delay(1000);\r\n      phase = 'Working';\r\n      delay(1000);\r\n      phase = 'Cleaning up';\r\n      delay(1000);\r\n      phase = 'Completed';\r\n    \" />\r\n  <Text>Current phase: {phase}</Text>\r\n  <Text>Log: {logEntries}</Text>\r\n</App>\r\n```\r\n\r\nThe code collects progress phase changes in the `logEntries` variable and displays them:\r\n\r\n<Playground\r\n    name=\"Howto: reporting progress\"\r\n    height={180}\r\n    horizontal={true}\r\n    app={`\r\n    <App var.phase=\"n/a\" var.logEntries=\"\">\r\n      <ChangeListener\r\n        listenTo=\"{phase}\"\r\n        onDidChange=\"() => logEntries += myButton.clickInProgress ? ' ' + phase : ''\" />\r\n      <Button\r\n        id=\"myButton\"\r\n        enabled=\"{!myButton.clickInProgress}\"\r\n        label=\"I'm running a long operation, click me!\"\r\n        onClick=\"\r\n          phase = 'Initializing';\r\n          delay(1000);\r\n          phase = 'Working';\r\n          delay(1000);\r\n          phase = 'Cleaning up';\r\n          delay(1000);\r\n          phase = 'Completed';\r\n        \" />\r\n      <Text>Current phase: {phase}</Text>\r\n      <Text>Log: {logEntries}</Text>\r\n    </App>\r\n`}\r\n/>\r\n\r\n",
  "howto/layout":"import data from \"../../examples/list-component-data\";\r\nimport { COMPONENT_APP, LAYOUT_COMPONENTS } from \"../../meta/pages\";\r\nimport { Callout } from 'nextra/components'\r\n\r\n# How-To: Layout\r\n\r\nThe <SmartLink href={LAYOUT_COMPONENTS}>Layout Components</SmartLink> article explains the fundamentals of `Stack` and `FlowLayout` (and their derivatives), which are the primary layout components in XMLUI.\r\n\r\nIn this article, you will learn more subtle details to help you establish well-controlled layouts.\r\n\r\n## Setting vertical alignment\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nA stack can align its contents vertically to the start (the default alignment), the end (bottom), or the center.\r\nHowever, these alignments seem to be ignored if the stack does not have an explicit size!\r\n</Callout>\r\n\r\nIn this case, the stack's height is the same as its contents, so all vertical alignments (start, end, and center) will display the child component as it is. The following sample demonstrates this:\r\n\r\n```xmlui copy /verticalAlignment=\"center\"/\r\n<App backgroundColor=\"lightgray\">\r\n  <VStack verticalAlignment=\"center\" backgroundColor=\"cyan\">\r\n    This is some text within a Stack\r\n  </VStack>\r\n</App>\r\n```\r\n\r\nThough you expect the text to be aligned vertically in the middle of the app, it is not: the stack's height is the height of the text.\r\n\r\n<Playground\r\n  name=\"Example: VStack with implicit height and vertical alignment\"\r\n  height={180}\r\n  app={`\r\n    <App backgroundColor=\"lightgray\">\r\n      <VStack verticalAlignment=\"center\" backgroundColor=\"cyan\">\r\n        This is some text within a Stack\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nWith an explicit size, you will see the effect of `verticalAlignment`:\r\n\r\n```xmlui copy /height=\"100px\"/\r\n<App backgroundColor=\"lightgray\">\r\n  <VStack verticalAlignment=\"center\" height=\"100px\" backgroundColor=\"cyan\">\r\n    This is some text within a Stack\r\n  </VStack>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: VStack with *explicit* height and vertical alignment\"\r\n  height={180}\r\n  app={`\r\n    <App backgroundColor=\"lightgray\">\r\n      <VStack verticalAlignment=\"center\" height=\"100px\" backgroundColor=\"cyan\">\r\n        This is some text within a Stack\r\n      </VStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Setting vertical alignment with nested components\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nWhen you nest components into each other, the vertical alignment may produce surprising effects. Though you expect something else, they produce the effect because you may forget explicit sizing.\r\n</Callout>\r\n\r\nHere is an example using a Table. The unexpected result is when you click Clear data, as the \"Nothing here!\" text appears at the top of the table's placeholder, though you use this definition for `noDataTemplate`:\r\n\r\n```xmlui copy /height=\"100%\"/ /verticalAlignment=\"center\"/\r\n<property name=\"noDataTemplate\">\r\n  <VStack height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n    Nothing here!\r\n  </VStack>\r\n</property>\r\n```\r\n\r\nClick the Clear data (and the Reload data) buttons to check the issue:\r\n\r\n<Playground\r\n  name=\"Example: issue with vertical alignment in nested components\"\r\n  height={380}\r\n  app={`\r\n    <App\r\n      backgroundColor=\"cyan\"\r\n      height=\"100%\"\r\n      var.tableData='{[]}'\r\n      var.savedData='{${JSON.stringify(data)}}'\r\n    >\r\n      <HStack gap=\"0.5rem\">\r\n        <Button onClick=\"tableData = []\">Clear data</Button>\r\n        <Button onClick=\"tableData = savedData\">Reload data</Button>\r\n      </HStack>\r\n      <Table data='{tableData}' backgroundColor=\"lightgreen\">\r\n        <Column bindTo=\"name\"/>\r\n        <Column bindTo=\"quantity\"/>\r\n        <Column bindTo=\"unit\"/>\r\n        <property name=\"noDataTemplate\">\r\n          <VStack height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n            Nothing here!\r\n          </VStack>\r\n        </property>\r\n      </Table>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nWhen you look at the markup, you can see that the outermost `VStack` has an explicit height, set to \"100%\":\r\n\r\n```xmlui copy /height=\"100%\"/\r\n<App\r\n  backgroundColor=\"cyan\"\r\n  height=\"100%\"\r\n  var.tableData='{[]}'\r\n  var.savedData='{${JSON.stringify(data)}}' >\r\n  <HStack gap=\"0.5rem\">\r\n    <Button onClick=\"tableData = []\">Clear data</Button>\r\n    <Button onClick=\"tableData = savedData\">Reload data</Button>\r\n  </HStack>\r\n  <Table data='{tableData}' backgroundColor=\"lightgreen\">\r\n    <Column bindTo=\"name\"/>\r\n    <Column bindTo=\"quantity\"/>\r\n    <Column bindTo=\"unit\"/>\r\n    <property name=\"noDataTemplate\">\r\n      <VStack height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n        Nothing here!\r\n      </VStack>\r\n    </property>\r\n  </Table>\r\n</App>\r\n```\r\n\r\nThe cause of the issue is that the `noDataTemplate` is within the `Table` component. A `Table` is a layout container, too; it arranges its children (data rows). Vertical content alignment works the same way as described earlier. If you do not set the table height explicitly, the height of the `noDataTemplate` container is based on the contents. When the table displays the empty content template, the height is the line height of the \"Nothing here!\" text.\r\n\r\nYou can quickly fix this issue by specifying the table height explicitly:\r\n\r\n```xmlui /height=\"*\"/\r\n<Table data='{tableData}' height=\"*\" backgroundColor=\"lightgreen\">\r\n  <!-- Unchanged -->\r\n</Table>\r\n```\r\n\r\nCheck this out; now the `noDataTemplate` is rendered as expected:\r\n\r\n<Playground\r\n  name=\"Example: fix the issue with vertical alignment in nested components\"\r\n  height={240}\r\n  app={`\r\n    <VStack\r\n      backgroundColor=\"cyan\"\r\n      height=\"100%\"\r\n      padding=\"1rem\"\r\n      gap=\"0.5rem\"\r\n      var.tableData='{[]}'\r\n      var.savedData='{${JSON.stringify(data)}}'\r\n    >\r\n      <HStack gap=\"0.5rem\">\r\n        <Button onClick=\"tableData = []\">Clear data</Button>\r\n        <Button onClick=\"tableData = savedData\">Reload data</Button>\r\n      </HStack>\r\n      <Table data='{tableData}' height=\"*\" backgroundColor=\"lightgreen\">\r\n        <Column bindTo=\"name\"/>\r\n        <Column bindTo=\"quantity\"/>\r\n        <Column bindTo=\"unit\"/>\r\n        <property name=\"noDataTemplate\">\r\n          <VStack height=\"100%\" verticalAlignment=\"center\" horizontalAlignment=\"center\">\r\n            Nothing here!\r\n          </VStack>\r\n        </property>\r\n      </Table>\r\n    </VStack>\r\n  `}\r\n/>\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nThe \"*\" is start sizing. It means that the container should stretch itself to its parent's remaining (available) size. Using 100% would mean the entire parent (`VStack`) height and not just the available.\r\n</Callout>\r\n\r\n## Desktop-like layout with resizable panels\r\n\r\nYou can easily create complex layouts with a few layout containers within `App`, as the following sample demonstrates:\r\n\r\n```xmlui copy\r\n<App height=\"100%\" scrollWholePage=\"false\">\r\n  <Theme thickness-resizer-Splitter=\"4px\" backgroundColor-resizer-Splitter=\"blue\">\r\n    <VStack height=\"100%\" gap=\"0\">\r\n      <!-- Custom header -->\r\n      <HStack\r\n        height=\"$space-10\"\r\n        paddingHorizontal=\"$space-4\"\r\n        verticalAlignment=\"center\"\r\n        backgroundColor=\"lightblue\">\r\n        MenuBar\r\n        <SpaceFiller />\r\n        <Icon name=\"close\"/>\r\n      </HStack>\r\n      <!-- Main content -->\r\n      <HSplitter\r\n        height=\"*\"\r\n        floating=\"true\"\r\n        initialPrimarySize=\"25%\"\r\n        minPrimarySize=\"10%\"\r\n        maxPrimarySize=\"90%\">\r\n        <VStack height=\"100%\" backgroundColor=\"cyan\">\r\n          <H3>Left panel</H3>\r\n        </VStack>\r\n        <VSplitter\r\n          height=\"100%\"\r\n          floating=\"true\"\r\n          initialPrimarySize=\"20%\"\r\n          minPrimarySize=\"10%\"\r\n          maxPrimarySize=\"90%\">\r\n          <VStack height=\"100%\" backgroundColor=\"lightcoral\">\r\n            <H3>Upper right panel</H3>\r\n          </VStack>\r\n          <VStack height=\"100%\" backgroundColor=\"lightyellow\">\r\n            <H3>Lower right panel</H3>\r\n          </VStack>\r\n        </VSplitter>\r\n      </HSplitter>\r\n      <!-- Custom footer -->\r\n      <HStack\r\n        height=\"$space-10\"\r\n        paddingHorizontal=\"$space-4\"\r\n        verticalAlignment=\"center\"\r\n        backgroundColor=\"lightblue\">\r\n        StatusBar\r\n      </HStack>\r\n    </VStack>\r\n  </Theme>\r\n</App>\r\n```\r\n\r\nTry the example! When you move the mouse to the boundary between the panels, you can drag the splitters to resize them.\r\n\r\n<Playground\r\n  name=\"Example: desktop-like layout with resizable panels\"\r\n  height={400}\r\n  app={`\r\n    <App height=\"100%\" scrollWholePage=\"false\">\r\n      <Theme thickness-resizer-Splitter=\"4px\" backgroundColor-resizer-Splitter=\"blue\">\r\n        <VStack height=\"100%\" gap=\"0\">\r\n          <!-- Custom header -->\r\n          <HStack\r\n            height=\"$space-10\"\r\n            paddingHorizontal=\"$space-4\"\r\n            verticalAlignment=\"center\"\r\n            backgroundColor=\"lightblue\">\r\n            MenuBar\r\n            <SpaceFiller />\r\n            <Icon name=\"close\"/>\r\n          </HStack>\r\n          <!-- Main content -->\r\n          <HSplitter\r\n            height=\"*\"\r\n            floating=\"true\"\r\n            initialPrimarySize=\"25%\"\r\n            minPrimarySize=\"10%\"\r\n            maxPrimarySize=\"90%\">\r\n            <VStack height=\"100%\" backgroundColor=\"cyan\">\r\n              <H3>Left panel</H3>\r\n            </VStack>\r\n            <VSplitter\r\n              height=\"100%\"\r\n              floating=\"true\"\r\n              initialPrimarySize=\"20%\"\r\n              minPrimarySize=\"10%\"\r\n              maxPrimarySize=\"90%\">\r\n              <VStack height=\"100%\" backgroundColor=\"lightcoral\">\r\n                <H3>Upper right panel</H3>\r\n              </VStack>\r\n              <VStack height=\"100%\" backgroundColor=\"lightyellow\">\r\n                <H3>Lower right panel</H3>\r\n              </VStack>\r\n            </VSplitter>\r\n          </HSplitter>\r\n          <!-- Custom footer -->\r\n          <HStack\r\n            height=\"$space-10\"\r\n            paddingHorizontal=\"$space-4\"\r\n            verticalAlignment=\"center\"\r\n            backgroundColor=\"lightblue\"\r\n          >\r\n            StatusBar\r\n          </HStack>\r\n        </VStack>\r\n      </Theme>\r\n    </App>\r\n  `}\r\n/>\r\n",
  "howto/menus":"import { Callout } from 'nextra/components'\r\n\r\n# Menus\r\n\r\nThis article will teach you how to create and use menus in an application.\r\n\r\n<Callout type=\"warning\">\r\nThis page is under construction.\r\n</Callout>\r\n",
  "howto/stacks":"import { Callout } from 'nextra/components'\r\n\r\n# Using Stacks\r\n\r\n## Use a vertical stack\r\n\r\n```xmlui copy\r\n<VStack>\r\n  <Text value=\"First\" /> <!-- Displays on top -->\r\n  <Text value=\"Second\" /> <!-- Displays in the middle -->\r\n  <Text value=\"Third\" /> <!-- Displays at the bottom -->\r\n</VStack>\r\n```\r\n\r\n## Use a horizontal stack\r\n\r\n```xmlui copy\r\n<HStack>\r\n  <Text value=\"First\" /> <!-- Displays on the left -->\r\n  <Text value=\"Second\" /> <!-- Displays in the middle -->\r\n  <Text value=\"Third\" /> <!-- Displays on the right -->\r\n</HStack>\r\n```\r\n\r\n## Use Stack orientation programmatically\r\n\r\nThe orientation toggles between vertical and horizontal when you click within the stack (any child item).\r\n\r\n```xmlui copy\r\n<Stack \r\n  var.isVertical=\"{true}\"\r\n  orientation=\"{isVertical ? 'vertical' : 'horizontal'}\"\r\n  onClick=\"isVertical = !isVertical\">\r\n  <Text value=\"First\" />\r\n  <Text value=\"Second\" />\r\n  <Text value=\"Third\" />\r\n</Stack>\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nUse `VStack` or `HStack` explicitly whenever possible. Use `Stack` when you need to set the orientation programmatically.\r\n</Callout>\r\n\r\n## Reverse the order of stack items\r\n\r\n```xmlui copy /reverse=\"true\"/\r\n<VStack reverse=\"true\">\r\n  <Text value=\"First\" /> <!-- Displays at the bottom -->\r\n  <Text value=\"Second\" /> <!-- Displays in the middle -->\r\n  <Text value=\"Third\" /> <!-- Displays on top -->\r\n</VStack>\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nThe `reverse` property also works with `HStack` using the same analogy.\r\n</Callout>\r\n\r\n## Remove the gap between items\r\n\r\nAll stack components, by default, add a (non-zero) gap between adjacent items. If you want to avoid gaps, use `gap=\"0\"`. \r\n\r\n```xmlui copy /gap=\"0\"/\r\n<VStack gap=\"0\">\r\n  <Text value=\"First\" />\r\n  <Text value=\"Second\" />\r\n  <Text value=\"Third\" />  \r\n</VStack>\r\n```\r\n\r\n## Use `HStack` with content wrapping \r\n\r\nThe `HStack` component renders all its child items side-by-side, even if they overflow the current viewport. With content wrapping, children that would otherwise overflow will enter a new row.\r\n\r\n```xmlui copy /wrapContent=\"true\"/\r\n<HStack wrapContent=\"true\">\r\n  <Text value=\"Item #1, longer than usual.\" />\r\n  <Text value=\"Item #2, longer than usual.\" />\r\n  <Text value=\"Item #3, longer than usual.\" />\r\n  <Text value=\"Item #4, this is a very long item, it may not fit into the current line.\" />\r\n</HStack>\r\n```\r\n\r\nDepending on the current browser (viewport) width, Item #4 may enter a new row (on a very narrow screen, each item may have a separate row).\r\n",
  "html-tag-components":"\r\n## HtmlTag Components\r\n\r\n| Num | Component | Description | Status |\r\n| :---: | :---: | --- | :---: |\r\n| 1 | a | This component renders an HTML `a` tag. | experimental |\r\n| 2 | address | This component renders an HTML `address` tag. | experimental |\r\n| 3 | area | This component renders an HTML `area` tag. | experimental |\r\n| 4 | article | This component renders an HTML `article` tag. | experimental |\r\n| 5 | aside | This component renders an HTML `aside` tag. | experimental |\r\n| 6 | audio | This component renders an HTML `audio` tag. | experimental |\r\n| 7 | b | This component renders an HTML `b` tag. | experimental |\r\n| 8 | bdi | This component renders an HTML `bdi` tag. | experimental |\r\n| 9 | bdo | This component renders an HTML `bdo` tag. | experimental |\r\n| 10 | blockquote | This component renders an HTML `blockquote` tag. | experimental |\r\n| 11 | br | This component renders an HTML `br` tag. | experimental |\r\n| 12 | [button](./components/button.mdx) | This component renders an HTML `button` tag. | experimental |\r\n| 13 | canvas | This component renders an HTML `canvas` tag. | experimental |\r\n| 14 | caption | This component renders an HTML `caption` tag. | experimental |\r\n| 15 | cite | This component renders an HTML `cite` tag. | experimental |\r\n| 16 | code | This component renders an HTML `code` tag. | experimental |\r\n| 17 | CODE | This component renders an HTML `code` tag. | experimental |\r\n| 18 | col | This component renders an HTML `col` tag. | experimental |\r\n| 19 | colgroup | This component renders an HTML `colgroup` tag. | experimental |\r\n| 20 | data | This component renders an HTML `data` tag. | experimental |\r\n| 21 | datalist | This component renders an HTML `datalist` tag. | experimental |\r\n| 22 | dd | This component renders an HTML `dd` tag. | experimental |\r\n| 23 | del | This component renders an HTML `del` tag. | experimental |\r\n| 24 | details | This component renders an HTML `details` tag. | experimental |\r\n| 25 | dfn | This component renders an HTML `dfn` tag. | experimental |\r\n| 26 | dialog | This component renders an HTML `dialog` tag. | experimental |\r\n| 27 | div | This component renders an HTML `div` tag. | experimental |\r\n| 28 | dl | This component renders an HTML `dl` tag. | experimental |\r\n| 29 | dt | This component renders an HTML `dt` tag. | experimental |\r\n| 30 | em | This component renders an HTML `em` tag. | experimental |\r\n| 31 | EM | This component renders an HTML `em` tag. | experimental |\r\n| 32 | embed | This component renders an HTML `embed` tag. | experimental |\r\n| 33 | fieldset | This component renders an HTML `fieldset` tag. | experimental |\r\n| 34 | figcaption | This component renders an HTML `figcaption` tag. | experimental |\r\n| 35 | figure | This component renders an HTML `figure` tag. | experimental |\r\n| 36 | [footer](./components/footer.mdx) | This component renders an HTML `footer` tag. | experimental |\r\n| 37 | [form](./components/form.mdx) | This component renders an HTML `form` tag. | experimental |\r\n| 38 | [h1](./components/h1.mdx) | This component renders an HTML `h1` tag. | experimental |\r\n| 39 | [h2](./components/h2.mdx) | This component renders an HTML `h2` tag. | experimental |\r\n| 40 | [h3](./components/h3.mdx) | This component renders an HTML `h3` tag. | experimental |\r\n| 41 | [h4](./components/h4.mdx) | This component renders an HTML `h4` tag. | experimental |\r\n| 42 | [h5](./components/h5.mdx) | This component renders an HTML `h5` tag. | experimental |\r\n| 43 | [h6](./components/h6.mdx) | This component renders an HTML `h6` tag. | experimental |\r\n| 44 | header | This component renders an HTML `header` tag. | experimental |\r\n| 45 | hr | This component renders an HTML `hr` tag. | experimental |\r\n| 46 | i | This component renders an HTML `i` tag. | experimental |\r\n| 47 | iframe | This component renders an HTML `iframe` tag. | experimental |\r\n| 48 | img | This component renders an HTML `img` tag. | experimental |\r\n| 49 | input | This component renders an HTML `input` tag. | experimental |\r\n| 50 | ins | This component renders an HTML `ins` tag. | experimental |\r\n| 51 | kbd | This component renders an HTML `kbd` tag. | experimental |\r\n| 52 | label | This component renders an HTML `label` tag. | experimental |\r\n| 53 | legend | This component renders an HTML `legend` tag. | experimental |\r\n| 54 | li | This component renders an HTML `li` tag. | experimental |\r\n| 55 | main | This component renders an HTML `main` tag. | experimental |\r\n| 56 | map | This component renders an HTML `map` tag. | experimental |\r\n| 57 | mark | This component renders an HTML `mark` tag. | experimental |\r\n| 58 | menu | This component renders an HTML `menu` tag. | experimental |\r\n| 59 | meter | This component renders an HTML `meter` tag. | experimental |\r\n| 60 | nav | This component renders an HTML `nav` tag. | experimental |\r\n| 61 | object | This component renders an HTML `object` tag. | experimental |\r\n| 62 | ol | This component renders an HTML `ol` tag. | experimental |\r\n| 63 | optgroup | This component renders an HTML `optgroup` tag. | experimental |\r\n| 64 | [option](./components/option.mdx) | This component renders an HTML `option` tag. | experimental |\r\n| 65 | output | This component renders an HTML `output` tag. | experimental |\r\n| 66 | p | This component renders an HTML `p` tag. | experimental |\r\n| 67 | param | This component renders an HTML `param` tag. | experimental |\r\n| 68 | picture | This component renders an HTML `picture` tag. | experimental |\r\n| 69 | pre | This component renders an HTML `pre` tag. | experimental |\r\n| 70 | progress | This component renders an HTML `progress` tag. | experimental |\r\n| 71 | q | This component renders an HTML `q` tag. | experimental |\r\n| 72 | rp | This component renders an HTML `rp` tag. | experimental |\r\n| 73 | rt | This component renders an HTML `rt` tag. | experimental |\r\n| 74 | ruby | This component renders an HTML `ruby` tag. | experimental |\r\n| 75 | s | This component renders an HTML `s` tag. | experimental |\r\n| 76 | samp | This component renders an HTML `samp` tag. | experimental |\r\n| 77 | section | This component renders an HTML `section` tag. | experimental |\r\n| 78 | [select](./components/select.mdx) | This component renders an HTML `select` tag. | experimental |\r\n| 79 | small | This component renders an HTML `small` tag. | experimental |\r\n| 80 | source | This component renders an HTML `source` tag. | experimental |\r\n| 81 | span | This component renders an HTML `span` tag. | experimental |\r\n| 82 | strong | This component renders an HTML `strong` tag. | experimental |\r\n| 83 | sub | This component renders an HTML `sub` tag. | experimental |\r\n| 84 | summary | This component renders an HTML `summary` tag. | experimental |\r\n| 85 | sup | This component renders an HTML `sup` tag. | experimental |\r\n| 86 | [table](./components/table.mdx) | This component renders an HTML `table` tag. | experimental |\r\n| 87 | tbody | This component renders an HTML `tbody` tag. | experimental |\r\n| 88 | td | This component renders an HTML `td` tag. | experimental |\r\n| 89 | template | This component renders an HTML `template` tag. | experimental |\r\n| 90 | [textarea](./components/textarea.mdx) | This component renders an HTML `textarea` tag. | experimental |\r\n| 91 | tfoot | This component renders an HTML `tfoot` tag. | experimental |\r\n| 92 | th | This component renders an HTML `th` tag. | experimental |\r\n| 93 | thead | This component renders an HTML `thead` tag. | experimental |\r\n| 94 | time | This component renders an HTML `time` tag. | experimental |\r\n| 95 | tr | This component renders an HTML `tr` tag. | experimental |\r\n| 96 | track | This component renders an HTML `track` tag. | experimental |\r\n| 97 | u | This component renders an HTML `u` tag. | experimental |\r\n| 98 | ul | This component renders an HTML `ul` tag. | experimental |\r\n| 99 | var | This component renders an HTML `var` tag. | experimental |\r\n| 100 | video | This component renders an HTML `video` tag. | experimental |\r\n| 101 | wbr | This component renders an HTML `wbr` tag. | experimental |\r\n",
  "index":"import { Callout } from 'nextra/components'\r\nimport themeGallery from \"./styles-and-themes/samples/theme-gallery-brief.xmlui\";\r\n\r\n# Introduction\r\n\r\n**XMLUI is a framework for building UIs declaratively with XML/XHTML markup, optional lightweight scripting, and flexible theming.**\r\n\r\n## No Build Required\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  XMLUI applications can be served directly as static files. Simply host them on a standard web server and load them in\r\n  a browser—no bundling, compiling, or build pipeline needed.\r\n</Callout>\r\n\r\n## Declarative Markup\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  With an XML-based approach, your UI’s structure and appearance are clearly defined in markup, making it easy to\r\n  understand, modify, and maintain without digging through complex scripts.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<App>\r\n  Hello, World from XMLUI!\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Hello, World!\"\r\n  app={`\r\n    <App>\r\n      Hello, World from XMLUI!\r\n    </App>\r\n  `}\r\n/>\r\n\r\nYou can **bind components to work together**.\r\n\r\n```xmlui copy /myTextBox/ /myTextBox.value/\r\n<App>\r\n  <TextBox id=\"myTextBox\" placeholder=\"Type something\" />\r\n  <Text>You typed: {myTextBox.value}</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Bind components\"\r\n  app={`\r\n    <App>\r\n      <TextBox id=\"myTextBox\" placeholder=\"Type something\" />\r\n      <Text>You typed: {myTextBox.value}</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Minimal Scripting Needs\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  While XMLUI supports a lightweight scripting layer, most of your app’s behavior can be handled through markup, themes,\r\n  and properties. This reduces dependency on heavy JavaScript frameworks and lowers the learning curve.\r\n</Callout>\r\n\r\n```xmlui copy\r\n<!-- Add a concise sample here -->\r\n```\r\n\r\n## Reactive Data Handling\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  The UI automatically updates whenever underlying data changes. This built-in reactivity means you don’t have to\r\n  manually trigger refreshes or write additional logic, streamlining the development process.\r\n</Callout>\r\n\r\n```xmlui copy /countTimes3=\"{3 * count}\"/ /countTimes3/\r\n<App\r\n  var.count=\"{0}\"\r\n  var.countTimes3=\"{3 * count}\" >\r\n  <Button label=\"Click to increment!\" onClick=\"count++\" />\r\n  <Text>Click count = {count}</Text>\r\n  <Text>Click count * 3 = {countTimes3}</Text>\r\n</App>\r\n```\r\n\r\nEach time the button is clicked, `count` is incremented, causing `countTimes3` to automatically recalculate and the UI to update accordingly.\r\n\r\n<Playground\r\n  name=\"Example: Reactive variables\"\r\n  app={`\r\n    <App\r\n      var.count=\"{0}\"\r\n      var.countTimes3=\"{3 * count}\" >\r\n      <Button\r\n        label=\"Click to increment!\"\r\n        onClick=\"count++\" />\r\n      <Text>Click count = {count}</Text>\r\n      <Text>Click count * 3 = {countTimes3}</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n```xmlui copy\r\n<!-- Add a concise sample here that uses backend data with the reactive nature -->\r\n```\r\n\r\n## Flexible Theming and Styling\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  XMLUI themes and theme variables let you adjust colors, fonts, spacing, and more from a central location. Change a\r\n  single theme variable, and the updated look cascades throughout the entire interface automatically.\r\n</Callout>\r\n\r\n```xmlui copy {5, 9}\r\n<App>\r\n  <HStack verticalAlignment=\"center\">\r\n    <Button label=\"First\" />\r\n    <ProgressBar width=\"80px\" value=\"0.6\" />\r\n    <Theme color-primary=\"purple\">\r\n      <Button label=\"Second\" />\r\n      <ProgressBar width=\"80px\" value=\"0.6\" />\r\n    </Theme>\r\n    <Theme textColor-Button=\"orange\">\r\n      <Button label=\"Third\" />\r\n      <ProgressBar width=\"80px\" value=\"0.6\" />\r\n    </Theme>\r\n  </HStack>\r\n</App>\r\n```\r\n\r\nThe `color-primary` theme variable affects all components using the primary color; `textColor-Button` affects only the `Button` component's appearance.\r\n\r\n<Playground\r\n  name=\"Example: Flexible themes\"\r\n  app={`\r\n    <App>\r\n      <HStack verticalAlignment=\"center\">\r\n        <Button label=\"First\" />\r\n        <ProgressBar width=\"80px\" value=\"0.6\" />\r\n        <Theme color-primary=\"purple\">\r\n          <Button label=\"Second\" />\r\n          <ProgressBar width=\"80px\" value=\"0.6\" />\r\n        </Theme>\r\n        <Theme textColor-Button=\"orange\">\r\n          <Button label=\"Third\" />\r\n          <ProgressBar width=\"80px\" value=\"0.6\" />\r\n        </Theme>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Reusable Components\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Define a component once and reuse it across different parts of your app or even share it as a third-party component.\r\n  This modular approach saves development time, ensures consistency, and simplifies maintenance.\r\n</Callout>\r\n\r\nReusable components are in a separate markup file:\r\n\r\n```xmlui copy filename=\"components/MySquare.xmlui\" /MySquare/\r\n<Component name=\"MySquare\">\r\n  <Stack\r\n    width=\"{$props.size}\"\r\n    height=\"{$props.size}\"\r\n    backgroundColor=\"{$props.color}\"\r\n    onClick=\"emitEvent('click')\"/>\r\n</Component>\r\n```\r\n\r\nThe app can immediately leverage the reusable component:\r\n\r\n```xmlui copy filename=\"Main.xmlui\" /MySquare/\r\n<App var.lastClicked=\"none\">\r\n  <HStack>\r\n    <MySquare size=\"24px\" color=\"red\" onClick=\"lastClicked = 'red'\" />\r\n    <MySquare size=\"36px\" color=\"green\" onClick=\"lastClicked = 'green'\" />\r\n    <MySquare size=\"48px\" color=\"blue\" onClick=\"lastClicked = 'blue'\" />\r\n  </HStack>\r\n  <Text>Last clicked: {lastClicked}</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Hello, World!\"\r\n  components={[\r\n    `\r\n      <Component name=\"MySquare\">\r\n        <Stack\r\n          width=\"{$props.size}\"\r\n          height=\"{$props.size}\"\r\n          backgroundColor=\"{$props.color}\"\r\n          onClick=\"emitEvent('click')\"/>\r\n      </Component>\r\n    `\r\n  ]}\r\n  app={`\r\n    <App var.lastClicked=\"none\">\r\n      <HStack>\r\n        <MySquare size=\"24px\" color=\"red\" onClick=\"lastClicked = 'red'\" />\r\n        <MySquare size=\"36px\" color=\"green\" onClick=\"lastClicked = 'green'\" />\r\n        <MySquare size=\"48px\" color=\"blue\" onClick=\"lastClicked = 'blue'\" />\r\n      </HStack>\r\n      <Text>Last clicked: {lastClicked}</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Seamless Data Integration\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\n  Connecting your UI to backend APIs is as simple as providing a URL. The framework fetches and presents the data\r\n  without extra tooling, ensuring that dynamic content is readily available and easy to incorporate.\r\n</Callout>\r\n\r\n```xmlui copy /data=/\r\n<App>\r\n  <List data=\"https://api.spacexdata.com/v4/history\">\r\n    <Card title=\"{$item.title}\" subtitle=\"{$item.details}\"/>\r\n  </List>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: Fetch and display data\"\r\n  app={`\r\n    <App>\r\n      <List data=\"https://api.spacexdata.com/v4/history\">\r\n        <Card title=\"{$item.title}\" subtitle=\"{$item.details}\"/>\r\n      </List>\r\n    </App>\r\n  `}\r\n  height={300}\r\n/>\r\n",
  "js-library-devs":"import { Callout } from 'nextra/components'\r\n\r\n# Using JavaScript Libraries\r\n\r\n<Callout type=\"warning\">\r\nThis page is under construction.\r\n</Callout>",
  "overview-devs":"import { Callout } from 'nextra/components'\r\n\r\n# XMLUI Extensibility Overview\r\n\r\n<Callout type=\"warning\">\r\nThis page is under construction.\r\n</Callout>",
  "scripting-basics":"import { Callout } from 'nextra/components'\r\n\r\n# Scripting Basics\r\n\r\n<Callout type=\"warning\">\r\nThis page is under construction.\r\n</Callout>",
  "scripting":"# XMLUI Scripting Reference\r\n\r\nThis section contains reference information about using XMLUI scripts.",
  "scripting/globals":"# Global Functions and Variables\r\n\r\nXMLUI offers dozens of global functions and properties for use in XMLScript code. This document provides a detailed description of them.\r\n\r\n## Actions Namespace\r\n\r\nXMLUI provides an `Actions` namespace to collect frequently used application actions you can invoke from scripts. When calling them, use the `Actions` namespace like in the following example:\r\n\r\n```ts\r\nActions.callApi({ url: \"/api/contacts/123\", method: \"delete\" });\r\n```\r\n\r\n### `Actions.callApi`\r\n\r\n```ts\r\nfunction Actions.callApi(options: { \r\n  method: \"get\" | \"post\" | \"put\" | \"delete\";\r\n  url: string;\r\n  rawBody?: any;\r\n  body?: any;\r\n  queryParams?: Record<string, any>;\r\n  headers?: Record<string, any>;\r\n  payloadType?: string;\r\n  invalidates?: string | string[];\r\n  updates?: string | string[];\r\n  confirmTitle?: string;\r\n  confirmMessage?: string;\r\n  confirmButtonLabel?: string;\r\n  beforeRequest?: string;\r\n  onSuccess?: string;\r\n  onProgress?: string;\r\n  onError?: string;\r\n  params: any;\r\n  optimisticValue: any;\r\n  when: string;\r\n  getOptimisticValue: string;\r\n  inProgressNotificationMessage?: string;\r\n  completedNotificationMessage?: string;\r\n  errorNotificationMessage?: string;\r\n  uid?: string;\r\n}): Promise<any>;\r\n```\r\n\r\nThis function invokes an API endpoint with the specified options.\r\n\r\n### `Actions.download`\r\n\r\n```ts\r\nfunction Actions.download(options: { \r\n  fileName: string;\r\n  params: any;\r\n  method: \"get\" | \"post\" | \"put\" | \"delete\";\r\n  url: string;\r\n  rawBody?: any;\r\n  body?: any;\r\n  queryParams?: Record<string, any>;\r\n  headers?: Record<string, any>;\r\n  payloadType?: string;\r\n}): Promise<any>;\r\n```\r\n\r\nThis function downloads a file from the specified URL.\r\n\r\n### `Actions.upload`\r\n\r\n```ts \r\nfunction Actions.upload(options: { \r\n  file: File;\r\n  formParams?: Record<string, any>;\r\n  asForm?: boolean;\r\n  method: \"get\" | \"post\" | \"put\" | \"delete\";\r\n  url: string;\r\n  rawBody?: any;\r\n  body?: any;\r\n  queryParams?: Record<string, any>;\r\n  headers?: Record<string, any>;\r\n  payloadType?: string;\r\n  invalidates?: string | string[];\r\n  params: any;\r\n  chunkSizeInBytes?: number;\r\n  onError?: string;\r\n  onProgress?: (...args: any) => void;\r\n}): Promise<any>;\r\n```\r\n\r\nThis function uploads a file to the specified URL.\r\n\r\n## App-Specific Globals\r\n\r\n### `appGlobals`\r\n\r\n```ts\r\nget appGlobals: Record<string, any>;\r\n```\r\n\r\nThis property returns a hash object containing all application-global settings defined in the app's configuration file.\r\n\r\n### `environment`\r\n\r\n```ts\r\nget environment: {\r\n  isWindowFocused: boolean;\r\n};\r\n```\r\n\r\nReturns an object with some properties of the current environment.\r\n\r\n### `mediaSize`\r\n\r\n```ts\r\nget mediaSize: {\r\n  phone: boolean;\r\n  landscapePhone: boolean;\r\n  tablet: boolean;\r\n  desktop: boolean;\r\n  largeDesktop: boolean;\r\n  xlDesktop: boolean;\r\n  smallScreen: boolean;\r\n  largeScreen: boolean;\r\n  size: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"xxl\";\r\n};\r\n```\r\n\r\nThis property returns an object with information about the current media size. The `phone`, `landscapePhone`, `tablet`, `desktop`, `largeDesktop`, and `xlDesktop` flogs indicate the current app window's viewport size. Only one of these flags is `true`; the others are `false`.\r\n`smallScreen` is set to `true` if the current size is less than `desktop`. `largeScreen` is set to `true` if the current size is `desktop` or bigger.\r\n\r\n### `standalone`\r\n\r\n```ts\r\nget standalone: boolean;\r\n```\r\n\r\nThis property returns `true` if the app is a standalone XMLUI app; otherwise (for example, as part of a website), it returns `false`.\r\n\r\n## Date Utilities\r\n\r\n### `differenceInMinutes`\r\n\r\n```ts\r\nfunction differenceInMinutes: (date1: number | Date, date2: number | Date): number;\r\n```\r\n\r\nThis function returns the difference between the two date parameters in minutes.\r\n\r\n### `formatDate`\r\n\r\n```ts\r\nfunction formatDate(date: string | Date): string;\r\n```\r\n\r\nThis function formats the specified value's date part into a local date string (according to the machine's local settings).\r\n\r\n### `formatDateTime`\r\n\r\n```ts\r\nfunction formatDateTime(date: string | Date): string;\r\n```\r\n\r\nThis function formats the specified value into a local date and time string (according to the machine's local settings).\r\n\r\n### `formatDateWithoutYear`\r\n\r\n```ts\r\nfunction formatDateWithoutYear(date: string | Date): string;\r\n```\r\n\r\nThis function formats the specified value's date part (without year) into a local date string (according to the machine's local settings).\r\n\r\n### `formatTime`\r\n\r\n```ts\r\nfunction formatTime(date: string | Date): string;\r\n```\r\n\r\nThis function formats the specified value's time part into a local date string (according to the machine's local settings).\r\n\r\n### `formatTimeWithoutSeconds`\r\n\r\n```ts\r\nfunction formatTimeWithoutSeconds(date: string | Date): string;\r\n```\r\n\r\nFormat the specified value's time part (without seconds) into a local date string (according to the machine's local settings).\r\n\r\n### `getDate`\r\n\r\n```ts\r\nfunction function getDate(date?: string | number | Date): Date;\r\n```\r\n\r\nThis function creates a date from the specified input value. If no input is provided, it returns the current date and time.\r\n\r\n### `getDateUntilNow`\r\n\r\n```ts\r\nfunction function getDateUntilNow(date?: string | number | Date): string;\r\n```\r\n\r\nThis function calculates the difference between the current date and the provided one and returns it in a human-readable form, such as \"1 month\", \"2 weeks\", etc.\r\n\r\n### `isoDateString`\r\n\r\n```ts\r\nfunction isoDateString(date?: string): string;\r\n```\r\n\r\nThis function converts the input string into a date value and returns the ISO 8601 string representation of the date. It can pass dates between the UI and backend APIs in a standard format.\r\n\r\n### `differenceInMinutes`\r\n\r\n```ts\r\nfunction differenceInMinutes: (date1: number | Date, date2: number | Date): number;\r\n```\r\n\r\nThis function returns the difference between the two date parameters in minutes.\r\n\r\n### `isSameDay`\r\n\r\n```ts\r\nfunction isSameDay: (dateLeft: number | Date, dateRight: number | Date): boolean;\r\n```\r\n\r\nThis function checks if the two dates specified in the parameters are on the same calendar day.\r\n\r\n### `isThisYear`\r\n\r\n```ts\r\nfunction (date: Date | number): boolean;\r\n```\r\n\r\nThis function checks if the specified date is in this calendar year.\r\n\r\n### `isTomorrow`\r\n\r\n```ts\r\nfunction isTomorrow(date?: string | Date): boolean;\r\n```\r\n\r\nThis function checks if the specified date is tomorrow.\r\n\r\n### `isYesterday`\r\n\r\n```ts\r\nfunction isYesterday(date?: string | number | Date): boolean;\r\n```\r\n\r\nThis function checks if the specified date is yesterday.\r\n\r\n### `smartFormatDate`\r\n\r\n```ts\r\nfunction function smartFormatDate(date?: string | number | Date): string;\r\n```\r\n\r\nThis function checks the date value provided for some particular values and returns accordingly. Otherwise, returns it as `formatDate` would. Special values returned:\r\n- No date value provided: \"-\"\r\n- The date is today: returns only the date value with `formatDate`\r\n- The date is this week: return the relative time difference, such as \"last Monday\"\r\n\r\n### `smartFormatDateTime`\r\n\r\n```ts\r\nfunction function smartFormatDateTime(date?: string | number | Date): string;\r\n```\r\n\r\nThis function checks the date value provided for some particular values and returns accordingly. Otherwise, returns it as `formatDateTime` would. Special values returned:\r\n- No date value provided: \"-\"\r\n- The date is today: returns only the time value with `formatTime`\r\n- The date is this week: return the relative time difference, such as \"last Monday at 2:00 AM\"\r\n\r\n## Engine-Related Globals\r\n\r\n### `version`\r\n\r\n```ts\r\nget version: string;\r\n```\r\n\r\nThis property retrieves the version of the XMLUI engine.\r\n\r\n\r\n## File Utilities\r\n\r\n### `formatFileSizeInBytes`\r\n\r\n```ts\r\nfunction formatFileSizeInBytes(size?: number): string;\r\n```\r\n\r\nThis function returns the specified file size in a compact form, such as \"112 B\", \"2.0 KiB\", \"23.4 KiB\", \"2.3 MiB\", etc.\r\n\r\n### `getFileExtension`\r\n\r\n```ts\r\nfunction getFileExtension(filename: string, mimetype?: string): string;\r\n```\r\n\r\nThis function returns the type of the specified file.  \r\n- If only `filename` is specified, return the extension inferred from the file name. \r\n- If only `mime-type` is specified, it returns the type inferred from the type name.\r\n- If both are specified, and the inferred file extension equals the inferred mime type, that value is returned.\r\n- Otherwise, it returns undefined.\r\n\r\n## Math Utilities\r\n\r\n### `avg`\r\n\r\n```ts \r\nfunction avg(numbers: number[], decimals?: number): number;\r\n```\r\n\r\nThis function calculates the average of the specified numbers and rounds it to the specified number of `decimals`. If `decimals` is not specified, the result is not rounded.\r\n\r\n### `sum`\r\n\r\n```ts\r\nfunction sum(numbers: number[]): number;\r\n```\r\n\r\nThis function calculates the sum of the specified numbers.\r\n\r\n## Navigation Utilities\r\n\r\n### `navigate`\r\n\r\n```ts\r\nfunction navigate(url: string): void;\r\n```\r\n\r\nThis function navigates to the specified `url`.\r\n\r\n### `routerBaseName`\r\n\r\n```ts\r\nget routerBaseName: string;\r\n```\r\n\r\nThis property gets the base name used for the router. \r\n\r\n## Notifications and Dialogs\r\n\r\n### `confirm`\r\n\r\n```ts\r\nfunction confirm: (title: string, message?: string, actionLabel?: string): boolean\r\n```\r\n\r\nInstructs the browser to display a dialog with a confirmation message, and to wait until the user either confirms or cancels the dialog. It returns a boolean indicating whether OK (`true`) or Cancel (`false`) was selected.\r\n\r\n- `title`: The title of the dialog\r\n- `message`: The message to display\r\n- `actionLabel`: The label of the action button\r\n\r\n### `signError`\r\n\r\n```ts\r\nfunction signError(error: Error | string): void;\r\n```\r\n\r\nThis method displays the specified `error` (error message) on the UI.\r\n\r\n### `toast`\r\n\r\n```ts\r\nfunction toast(message: string, options: ToastOptions): void;\r\n```\r\n\r\nThis function displays a neutral toast with the specified `message`.\r\n\r\nAll toast methods allow the using an option object (`ToastOptions`) with these properties:\r\n- `id` (string): an optional ID. This identifier can be used to remove the toast programmatically.\r\n- `duration` (number): The timeout of the notification (in milliseconds). After this timeout, the notification is removed from the screen.\r\n- `position` (string): The notification's position; one of these values: `top-left`, `top-center`, `top-right`,  `bottom-left`, `bottom-center`, or `bottom-right`.\r\n\r\nExamples:\r\n```js\r\n// --- Message for 2 seconds\r\ntoast(\"Hello, world!\", { duration: 2000 });\r\n\r\n// --- Message at the top-left corner\r\ntoast(\"Hello, world!\", { position: \"top-left\" });\r\n```\r\n\r\n### `toast.error`\r\n\r\n```ts\r\nfunction toast.error(message: string, options: ToastOptions): void;\r\n```\r\n\r\nThis function displays a toast with the specified error notification `message`.\r\n\r\n### `toast.loading`\r\n\r\n```ts\r\nfunction toast.loading(message: string, options: ToastOptions): void;\r\n```\r\n\r\nThis function displays a toast with the specified notification `message` indicating an operation's in-progress state.\r\n\r\n### `toast.remove`\r\n\r\n```ts\r\nfunction toast.remove(id: string): void;\r\n```\r\n\r\nThis function removes the toast with the specified `id`.\r\n\r\n### `toast.success`\r\n\r\n```ts\r\nfunction toast.success(message: string, options: ToastOptions): void;\r\n```\r\n\r\nThis function displays a toast with the specified success notification `message`.\r\n\r\n## Theme-Related\r\n\r\n### `activeThemeId`\r\n\r\n```ts\r\nget activeThemeId: string;\r\n```\r\n\r\nThis property returns the ID of the currently active theme.\r\n\r\n### `activeThemeTone`\r\n\r\n```ts\r\nget activeThemeTone: string;\r\n```\r\n\r\nThis property returns the tone of the currently active theme (\"light\" or \"dark\").\r\n\r\n### `availableThemeIds`\r\n\r\n```ts\r\nget availableThemeIds: string[];\r\n```\r\n\r\nThis property returns an array of all available theme IDs.\r\n\r\n### `setTheme`\r\n\r\n```ts\r\nsetTheme: (themId: string): void;\r\n```\r\n\r\nThis function sets the current theme to the one with the specified `themeId`.\r\n\r\n### `setThemeTone`\r\n\r\n```ts\r\nsetThemeTone: (tone: string): void;\r\n```\r\n\r\nThis function sets the current theme tone to the specified `tone` value (\"light\" or \"dark\").\r\n\r\n### `toggleThemeTone`\r\n\r\n```ts\r\ntoggleThemeTone: (): void;\r\n```\r\n\r\nThis function toggles the current theme tone from \"light\" to \"dark\" or vice versa.\r\n\r\n## Users\r\n\r\nXMLUI does not constrain what user information may contain; it may be a single identifier or a set of user-specific properties. The app is responsible for processing and displaying this information.\r\n\r\n### `loggedInUser`\r\n\r\n```ts\r\nget loggedInUser: any | null;\r\n```\r\n\r\nThis property gets the information about the logged-in user. If `null`, no user is logged in.\r\n\r\n\r\n### `setLoggedInUser`\r\n\r\n```ts\r\nsetLoggedInUser: (loggedInUser: any): void;\r\n```\r\n\r\nThis function sets the information about the logged-in user.\r\n\r\n## Various Functions\r\n\r\n### `capitalize`\r\n\r\n```ts\r\nfunction capitalize(input?: string): string;\r\n```\r\n\r\nConverts the first character of string to upper case and the remaining to lower case.\r\n\r\n### `defaultTo`\r\n\r\n```ts\r\nfunction defaultTo(value: any, defaultValue: any): any;\r\n```\r\n\r\nProvides a fallback value (`defaultValue`) if the specified `value` is null or undefined.\r\n\r\n### `delay`\r\n\r\n```ts\r\nfunction delay(ms: number): Promise<void>;\r\n```\r\n\r\nDelays the execution of the next line of code by the specified number of milliseconds.\r\n\r\n### `distinct`\r\n\r\n```ts\r\nfunction distinct(arr: any[]): any[];\r\n```\r\n\r\nReturns an array with all duplicate values removed.\r\n\r\n### `getPropertyByPath`\r\n\r\n```ts\r\nfunction getPropertyByPath(obj: any, path: string): any;\r\n```\r\n\r\nGets the property of `obj` at the specified `path`. `path` is a string with the chained property names separated by dots.\r\n\r\n### `pluralize`\r\n\r\n```ts\r\nfunction pluralize(value: number, singular: string, plural: string): string;\r\n```\r\n\r\nWhen the value is equal to one, returns `singular`; otherwise, `plural.`\r\n\r\n### `toHashObject`\r\n\r\n```ts\r\nfunction toHashObject(arr: any[], keyProp: string, valueProp: string): any;\r\n```\r\n\r\nThis function converts an array of objects into a hash object.\r\n- `keyProp`: The name of the object property that acts as the key\r\n- `valueProp`: The name of the object property that acts as the value\r\n\r\nLet's assume the following array of objects:\r\n```json\r\n[\r\n  { \"key\": \"key1\", \"value\": \"value1\" },\r\n  { \"key\": \"key2\", \"value\": \"value2\" },\r\n  { \"key\": \"key3\", \"value\": \"value3\" }\r\n]\r\n\r\nInvoking `toHashObject` with the following parameters:\r\n\r\n```ts\r\ntoHashObject(arr, \"key\", \"value\");\r\n```\r\n\r\nReturns the following object:\r\n\r\n```json\r\n{\r\n  \"key1\": \"value1\",\r\n  \"key2\": \"value2\",\r\n  \"key3\": \"value3\"\r\n}\r\n```\r\n",
  "scripting/xmlui-syntax":"import { Callout } from 'nextra/components';\r\nimport { GLOBAL_FUNCTIONS_AND_VARIABLES, XMLUI_EXPRESSIONS, XMLUI_EXPRESSIONS_ARROW_FUNCTIONS, XMLUI_SCRIPTING_REFERENCE } from \"../../meta/pages\";\r\n\r\n# Scripts in XMLUI\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nXMLUI uses a scripting language, which is a **subset of JavaScript**. \r\n</Callout>\r\n\r\nWhen an application runs, the framework precompiles scripts into an intermediate representation and processes (interprets) that. It uses the same expression evaluation and statement executing semantics as JavaScript.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nWhen we designed scripting, we opted to create the scripting language as a subset of JavaScript because of these primary reasons:\r\n- JavaScript is an easy language to learn at the level needed to productively use XMLUI; its language constructs are mature and proven.\r\n- Using JavaScript semantics allows us to leverage the entire JS runtime and utilize them with the original semantics; we do not need to create a separate runtime library.\r\n</Callout>\r\n\r\n## Sync and Async Evaluation\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nThe scripting engine is smart about using sync and async evaluation.\r\n</Callout>\r\n\r\nWhen resolving property values, the engine uses sync evaluation; event handlers are asynchronous. You do not have to know how it happens; they just get the operation result.\r\n\r\nYou do not need to use `async` or `await` keywords or do anything to manage asynchronous execution. More accurately, these keywords are not part of the scripting language.\r\n\r\nWhen evaluating the initial value of variables or setting and changing property values, the engine expects sync evaluation. It needs the initial values instantly to render the UI. Thus, the engine raises an error message if the initial variable evaluation contains async parts.\r\n\r\nThe UI remains responsive even if you create an infinite loop with an event handler.\r\n\r\n## Language Constraints\r\n\r\nThe scripting language is just a subset of JavaScript. This section describes what is not implemented in XMLUI.\r\n\r\n**No `import` and `export` statements**\r\n\r\nXMLUI does not support modules, so the language does not yet include the `import` and `export` keywords.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nWe are already working on implementing simplified module handling within the framework. So, you will be able to separate some utility code into separate files and use them similarly to JavaScript modules. Nonetheless, this feature is not available yet.\r\n</Callout>\r\n\r\n**No labels**\r\n\r\nYou cannot use labels: no label declarations; the `break` and `continue` statements do not accept labels.\r\n\r\n**No class declarations**\r\n\r\nXMLUI does not allow declaring classes.\r\n\r\n**No `debugger` statement**\r\n\r\nXMLUI does not support using the `debugger` statement.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nWhen we have debugging tools for XMLUI, we may implement this statement.\r\n</Callout>\r\n\r\n**No default value and rest syntax with destructuring constructs**\r\n\r\nYou can use destructure operators with variable declarations and function arguments with a syntax matching JavaScript. However, the current implementation does not support extracting rest values and providing default values.\r\n\r\nSo, these example constructs work in XMLUI:\r\n\r\n```js\r\nconst {a, b} = someObject;\r\n\r\nval {a, b, other: { c, d }} = someObject;\r\n\r\nlet {a, b:myB} = someObject;\r\n\r\nfunction example ({a, b, other: { c:myC }}) {\r\n  // ...\r\n}\r\n```\r\n\r\nHowever, these constructs are not supported:\r\n\r\n```js\r\nconst {a, b, ...rest} = someObject;\r\n\r\nlet {a, b = 0} = someObject;\r\n```\r\n\r\n**Destructuring with left-hand value is unavailable**\r\n\r\nWhile destructuring works with left-hand values in JavaScript, XMLUI does not support this construct. For example, swapping two variables with this construct is available in JavaScript but not in XMLUI:\r\n\r\n```js\r\nlet a = 1, b = 2;\r\n[a, b] = [b, a];\r\n```\r\n\r\n**The `new`, `instanceof`, `void`, `yield`, and `await` operators are unavailable**\r\n\r\nYou cannot instantiate objects with the `new` operator. This feature is missing for code security reasons.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nWe plan to relax this constraint in a future release, at least allowing the new operator for the core, frequently used JavaScript object types.\r\n</Callout>\r\n\r\nWe opted to omit `the void` and `yield` operators as we guess they do not add value to the XMLUI scripting. Not only `yield` but generator functions are unavailable.\r\n\r\nAs you learned earlier, XMLUI handles async execution, so there is no need for `async` or `await`. Async functions and loops are not available.\r\n\r\n**Restricted use of the optional chaining operator**\r\n\r\nXMLUI supports using the optional chaining operator(`?.`) only for member access but not for calculated member access (`?.[]`) and function invocation (`?.()`).\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nWe plan to add these operators in a future release.\r\n</Callout>\r\n\r\n## Semantic differences\r\n\r\nThere are a few semantic differences between JavaScript and XMLUI that you should consider when working with scripts.\r\n\r\n### Standard and optional member access operators\r\n\r\nIn the current version, the member access operator `.` and its optional pair, `?.` both work with the semantics as the optional operator. \r\n\r\nSo, using the `myResult.customerName` expression, it is evaluated as if it were `myResult?.customerName`. In JavaScript, the first would give an error if `myResult` were `undefined`, while the second would result in undefined without raising an error.\r\n\r\nIn XMLUI, both would retrieve `undefined`.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nWe decided on this implementation because we have experienced that it relaxes the syntax and makes it easier to code with `null` and `undefined` values. In the future, we will include configurable switches for the scripting engine to turn this behavior on or off. \r\n</Callout>\r\n\r\n### Variable declarations\r\n\r\nLike JavaScript, XMLUI supports declaring variables with the keywords `var`, `let`, and `const`. However, XMLUI restricts their usage:\r\n\r\n`var` can be used only in the top code level behind files; it is not allowed within function declarations or event handlers.\r\n`let` and `const` can be used only within event handlers and function declarations.\r\n\r\n### Reactive Variables\r\n\r\nVariables declared with `var` are reactive. **They automatically update when their dependencies (in the expression the variable is initialized with) change, such as components or other variables they rely on**. \r\n\r\nLook at these variable declarations:\r\n\r\n```js\r\nlet count = 0;\r\nlet countTimesThree = count * 3;\r\n```\r\n\r\nIf you change the `count` variable, the `countTimesThree` variable will automatically update:\r\n\r\n```js\r\ncount = 5;\r\n```\r\n\r\nThis statement will update the `countTimesThree` variable to 15 even without explicitly assigning the value due to the reactive nature of XMLUI variables.\r\n\r\nHowever, the first time you assign a runtime-evaluated value to the `countTimesThree` variable, it will lose its dependency on `count`:\r\n\r\n```js\r\ncountTimesThree = 12;\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nObserve that this statement is an assignment, not a variable declaration.\r\n</Callout>\r\n\r\nAfter that assignment, changing the value of `counter` will never modify `counterTimesThree`; you cannot restore its reactive behavior. If you assign this value to `countTimesThree` somewhere in an event handler:\r\n\r\n```js\r\ncountTimesThree = count * 3;\r\n```\r\n\r\n`countTimesThree` will have three times the current value of `count` but will no longer depend on `count`.  Any future updates to count will not update `countTimesThree` automatically.\r\n\r\nThis article contains a [How Reactiveness Works](#reactiveness) section where you can learn more details about this topic.\r\n\r\n### No `Error` object\r\n\r\nXMLUI supports the `throw` statement and the `try..catch..finally` block. However, you cannot throw native JavaScript `Error` objects; you should provide your error objects (even strings, numbers, or other composite object values).\r\n\r\nHere are a few examples:\r\n\r\n```js copy {3}\r\nfunction sum(values) => {\r\n  if (values.some(function (v) {typeof v !== \"number\"})) {\r\n    throw \"Can only add numbers\";\r\n  }\r\n  let sum = 0;\r\n  for (let v of values) {\r\n    sum += v;\r\n  }  \r\n  return sum;\r\n}\r\n```\r\n\r\n```js copy {3}\r\ntry {\r\n  readData(); // may throw three types of exceptions\r\n} catch (e) {\r\n  if (e === \"DataReadError\") {\r\n    // Statements to handle data read errors\r\n  } else if (typeof e === \"number\") {\r\n    // Statements to handle a particular numeric error code\r\n  } else if (e.errorType) {\r\n    // Statements to handle some other error\r\n  } else {\r\n    // Statements to handle any unspecified exceptions\r\n    console.log(e);\r\n  }\r\n}\r\n```\r\n\r\n## Expressions Syntax\r\n\r\nWhen you declare an inline expression within a component property (markup attribute) or in a markup text element, XMLUI parses that with the *expression syntax*.\r\n\r\n### Identifiers\r\n\r\nXMLUI identifiers may start with one of these characters: `$`, `_`, or any English alphabet letters (from `a` to `z` and from `A` to `Z`). The continuation characters can be of the same set as the start character, and you can also use decimal digits (from `0` to `9`). Other characters (such as Unicode letters, symbols, or emojis) are not allowed in identifiers.\r\n\r\nHere are a few examples of valid identifiers:\r\n\r\n```js\r\nsaveButton\r\n$item\r\n$saveCommand\r\n_a123\r\n```\r\n\r\nIdentifier resolution has the same semantics as in JavaScript. Identifier search starts from the innermost scope and traverses until the global scope is reached unless the id can be resolved in one of the previous scopes.\r\n\r\nXMLUI changes this by injecting a unique scope between the global JavaScript scope and the others. This scope contains global XMLUI functions (mostly helpers) and objects. You can learn more about them <SmartLink href={GLOBAL_FUNCTIONS_AND_VARIABLES}>here</SmartLink>.\r\n\r\n### Literals\r\n\r\nYou can use the same numbers (integers and floating-point numbers) as in JavaScript, and also the `NaN` value\r\n(not-a-number) and `Infinity` (the result coming from a divide by zero).\r\n\r\nArray and object literals also allow you the same syntax as in JavaScript. Here are a few samples:\r\n\r\n```js\r\n[1, 2, 3] // An array of three numbers\r\n[\"Hello\", \"World\", 42, true] // An array of four values\r\n{a: 1, b: 2, c: 3} // An object with three properties\r\n{\r\n  hey: 123,\r\n  ho: false,\r\n  hi: 123.e-2,\r\n  what: NaN,\r\n  is: [\"this\", \"object-like\"],\r\n  thing: {\r\n      that: null,\r\n      seems: \"completely\",\r\n      stupid: \"?\"\r\n  }\r\n} // A compound object literal\r\n```\r\n\r\nStrings allow the same characters as JavaScript, including inline Unicode and the following escape characters:\r\n\r\n- `\\b`: Backspace\r\n- `\\f`: Form Feed\r\n- `\\n`: New Line\r\n- `\\r`: Carriage Return\r\n- `\\t`: Horizontal Tabulator\r\n- `\\v`: Vertical Tabulator\r\n- `\\S`: Non-breaking Space\r\n- `\\\\`: Backslash\r\n- `\\'`: Single quote\r\n- `\\\"`: Double quote\r\n- `\\xhh`: Hexadecimal character (here, `hh` represents two hexadecimal digits).\r\n- `\\uhhhh`: Unicode code point between `U+0000` and `U+FFFF` (here `hhhh` represents four hexadecimal digits).\r\n- `\\u{hHHHHH}`: Unicode code point between `U+0000` and `U+10FFFF` (here `hHHHHH` represents one to six hexadecimal\r\ndigits).\r\n\r\nXMLUI supports [template strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals); however, it does not allow using [tagged templates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates).\r\n\r\n### Available operators\r\n\r\nThe operators are grouped according to their precedence, starting with the highest one:\r\n\r\n| Operator | Notation | Examples | Group |\r\n| --- | --- | --- | --: |\r\n| **Grouping** | `( … )` | `(a + b) * c` | 1 |\r\n| **Member Access** | `… . …` | `object.property` | 2 |\r\n| **Optional Member Access** | `… ?. …` | `object?.property` | 2 |\r\n| **Calculated Member Access** | `… [ … ]` | `object[property]` | 2 |\r\n| **Function Invocation** | `… ( … )` | `function(arg1, arg2)` | 2 |\r\n| **Postfix Increment** | `… ++` | `a++` | 3 |\r\n| **Postfix Decrement** | `… --` | `a--` | 3 |\r\n| **Prefix Increment** | `++ …` | `++a` | 4 |\r\n| **Prefix Decrement** | `-- …` | `--a` | 4 |\r\n| **Logical NOT** | `! …` | `!a` | 4 |\r\n| **Bitwise NOT** | `~ …` | `~a` | 4 |\r\n| **Unary Plus** | `+ …` | `+a` | 4 |\r\n| **Unary Negation** | `- …` | `-a` | 4 |\r\n| **Typeof** | `typeof …` | `typeof a` | 4 |\r\n| **Delete** | `delete …` | `delete a` | 4 |\r\n| **Exponentiation** | `… ** …` | `a ** b` | 5 |\r\n| **Multiplication** | `… * …` | `a * b` | 6 |\r\n| **Division** | `… / …` | `a / b` | 6 |\r\n| **Remainder** | `… % …` | `a % b` | 6 |\r\n| **Addition** | `… + …` | `a + b` | 7 |\r\n| **Subtraction** | `… - …` | `a - b` | 7 |\r\n| **Bitwise Left Shift** | `… << …` | `a << b` | 8 |\r\n| **Bitwise Right Shift** | `… >> …` | `a >> b` | 8 |\r\n| **Bitwise Unsigned Right Shift** | `… >>> …` | `a >>> b` | 8 |\r\n| **Less Than** | `… < …` | `a < b` | 9 |\r\n| **Less Than or Equal** | `… <= …` | `a <= b` | 9 |\r\n| **Greater Than** | `… > …` | `a > b` | 9 |\r\n| **Greater Than or Equal** | `… >= …` | `a >= b` | 9 |\r\n| **Inclusion Test** | `… in …` | `a in b` | 9 |\r\n| **Equality** | `… == …` | `a == b` | 10 |\r\n| **Inequality** | `… != …` | `a != b` | 10 |\r\n| **Strict Equality** | `… === …` | `a === b` | 10 |\r\n| **Strict Inequality** | `… !== …` | `a !== b` | 10 |\r\n| **Bitwise AND** | `… & …` | `a & b` | 11 |\r\n| **Bitwise XOR** | `… ^ …` | `a ^ b` | 12 |\r\n| **Bitwise OR** | `… \\| …` | `a \\| b` | 13 |\r\n| **Logical AND** | `… && …` | `a && b` | 14 |\r\n| **Logical OR** | `… \\|\\| …` | `a \\|\\| b` | 15 |\r\n| **Nullish Coalescing** | `… ?? …` | `a ?? b` | 15 |\r\n| **Assignment** | `… = …` | `a = b` | 16 |\r\n| **Addition Assignment** | `… += …` | `a += b` | 16 |\r\n| **Subtraction Assignment** | `… -= …` | `a -= b` | 16 |\r\n| **Multiplication Assignment** | `… *= …` | `a *= b` | 16 |\r\n| **Division Assignment** | `… /= …` | `a /= b` | 16 |\r\n| **Remainder Assignment** | `… %= …` | `a %= b` | 16 |\r\n| **Exponentiation Assignment** | `… **= …` | `a **= b` | 16 |\r\n| **Bitwise Left Shift Assignment** | `… <<= …` | `a <<= b` | 16 |\r\n| **Bitwise Right Shift Assignment** | `… >>= …` | `a >>= b` | 16 |\r\n| **Bitwise Unsigned Right Shift Assignment** | `… >>>= …` | `a >>>= b` | 16 |\r\n| **Bitwise AND Assignment** | `… &= …` | `a &= b` | 16 |\r\n| **Bitwise XOR Assignment** | `… ^= …` | `a ^= b` | 16 |\r\n| **Bitwise OR Assignment** | `… \\|= …` | `a \\|= b` | 16 |\r\n| **Nullish Coalescing Assignment** | `… ??= …` | `a ??= b` | 16 |\r\n| **Conditional** | `… ? … : …` | `a ? b : c` | 17 |\r\n| **Arrow Function** | `() => …` | `() => a` | 18 |\r\n| **Comma** | `… , …` | `a, b` | 19 |\r\n\r\n### Function Declaration as Expressions\r\n\r\nYou can use functions as variable values. XMLUI accepts both an arrow expression (arrow function) or a standard JavaScript function declaration as an expression. So, these variable declarations are valid in XMLUI:\r\n\r\n```xmlui copy /x => x*x/ /function(x) { return x * x; }/\r\n<App \r\n  var.mySqr=\"{x => x*x}\"\r\n  var.mySqrOther=\"{function(x) { return x * x; }}\">\r\n  <Text>Square of 5 is {mySqr(5)}</Text> <!-- Displays 25 -->\r\n  <Text>Square of 8 is {mySqrOther(8)}</Text> <!-- Displays 64 -->\r\n</App>\r\n```\r\n\r\nFunction declarations support the rest parameters:\r\n\r\n```xmlui copy {2, 3}\r\n<App \r\n  var.myArgs=\"{(a, b, ...others) => { return others.length + 2; }}\"\r\n  var.myArgsOther=\"{function(a, b, ...others) { return others.length + 2; }}\">\r\n  <Text>Number of arguments is {myArgs(1, 2, 3, 4, 5)}</Text> <!-- Displays 5 -->\r\n  <Text>Number of arguments is {myArgsOther(1, 2, 3, 4)}</Text> <!-- Displays 4 -->\r\n</App>\r\n```\r\n\r\nYou can use arrow expressions and function declarations with immediate invocations:\r\n\r\n```xmlui copy {2, 3}\r\n<App>\r\n  <Text>5**3 is {(n => n ** 3)(5)}</Text> <!-- Displays 125 -->\r\n  <Text> <!-- Displays 81 -->\r\n    3**4 is {(function(n){ return n ** 4})(3)}\r\n  </Text> \r\n  <Text> <!-- Displays 120 -->\r\n    5! is{(function fact(n) { return n &lt; 2 ? 1 : n * fact(n - 1); })(5)}\r\n  </Text>\r\n</App>\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nThe function name in the expression is optional. However, you must name the function if you want to refer to its name (for example, you use recursion, like above in the `fact` function).\r\n</Callout>\r\n\r\n## Statements Syntax\r\n\r\nWhile expressions are parsed using only the expression syntax (they can contain statements only within function declaration or arrow function bodies), event handlers and code-behind files can use statements.\r\n\r\nXMLUI supports these statements:\r\n\r\n| Category | Statement | Description |\r\n| --- | --- | --- |\r\n| Declaration | `var`, `let`, `const` | Variable declarations |\r\n| Declaration | `function` | Function declarations |\r\n| Control Flow | `if`, `else`, `switch`, `case`, `default`, `break`, `continue`, `return` | Conditional and switch-case statements |\r\n| Loops | `for`, `while`, `do..while`, `for..in`, `for..of` | Looping statements |\r\n| Exception Handling | `throw` `try..catch..finally` | Exception raising and handling statements |\r\n| Expressions | `<expression>` | Expression statement |\r\n| Block | `{ ... }` | Block statement |\r\n| Other | `;` | Empty statement |\r\n\r\n## Event Handlers [#event-handlers]\r\n\r\nEvent handlers are functions that can receive and process arguments. When the engine invokes an event handler, it passes the event's parameters to the function.\r\n\r\nThe engine is smart enough to create a function from your script. Even if it is not a fully declared function, after parsing the script, the engine transforms it into an invokable function.\r\n\r\n**Empty code**\r\n\r\nThe engine creates a no-op function:\r\n\r\n```js\r\nfunction () {}\r\n```\r\n\r\n**Identifier**\r\n\r\nThe engine considers an identifier to be a function name. It transforms this id into arrow functions with as many arguments as the corresponding event. Provided you use the identifier `myFuncion` and the event has *N* arguments (*N* can be zero), the engine applies this transformation:\r\n\r\n```js\r\nfunction eventHandlerFunction(arg1, arg2, /* ... */, argN) {\r\n  myFunction(arg1, arg2, /* ... */, argN)\r\n}\r\n```\r\n\r\n**Member Access Chain**\r\n\r\nThe engine considers the member access chains to refer to a function. It transforms the chain into a function declaration, similar to how it does with identifiers. \r\n\r\nFor example, if you have a member access chain, `myArr[3].method`, it is transformed the following way:\r\n\r\n```js\r\nfunction eventHandlerFunction(arg1, arg2, /* ... */, argN) {\r\n  myArr[3].method(arg1, arg2, /* ... */, argN)\r\n}\r\n```\r\n\r\nThese member access chains can be arbitrarily long. Here are a few examples:\r\n\r\n```js\r\naction.execute\r\noperation[0].handler.fire\r\noperation[\"do-it\"].handler.fire\r\n```\r\n\r\nWith the calculated member access (`[` ... `]`) operator, you can use only literals (strings or numbers); otherwise, the engine wraps considers the expression an *expression statement* and wraps it accordingly.\r\n\r\nFor example, all of the following member access chains are considered expression statements because the `[` ... `]` operators contain a non-literal:\r\n\r\n```js\r\noperation[index + 3].handler.fire\r\noperation[\"do\" + \"it\"].handler.fire\r\n```\r\n\r\n**Expression statements**\r\n\r\nWhen the event handler script is an expression statement, the engine transforms it into a function returning the particular expression. For example, `count++` is transformed into this function:\r\n\r\n```js\r\nfunction () { return count++; }\r\n```\r\n\r\n***Code Blocks with Single Expression***\r\n\r\nThough inline expressions are wrapped into curly braces (e.g., `{doThis()}`), event handlers are not.Nonetheless, users often forget about this fact. The engine recognizes the braces as block statement delimiters and transforms code blocks into the appropriate arrow function:\r\n\r\nFor example, if the event handler is `{count++;}`, the engine transforms it into this function:\r\n\r\n```js\r\nfunction () { return count++; }\r\n```\r\n***Code Blocks with Multiple Statement***\r\n\r\nIf the block statement contains a single non-expression statement or multiple statements, the engine provides a different transformation. It wraps the block into a function and separates the statements with semicolons.\r\n\r\nLet's assume the event handler script is the following:\r\n\r\n\r\n```js\r\n{ if (x) counter++; return counter + 10; }\r\n```\r\n\r\nThe engine replaces it with this function definition:\r\n\r\n```js\r\nfunction () { \r\n  if (x) counter++; \r\n  return counter + 10;\r\n}\r\n```\r\n\r\n**Multiple Statements**\r\n\r\nThe engine recognizes multiple statements and transforms them similarly to the body of block statements:\r\n\r\nOriginal event handler:\r\n\r\n```js\r\nif (x) counter++; return counter + 10;\r\n```\r\n\r\nTransformed event handler:\r\n\r\n```js\r\nfunction () { \r\n  if (x) counter++; \r\n  return counter + 10;\r\n}\r\n```\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nBe aware of using the `return` statement explicitly to retrieve a value from an event handler.\r\n</Callout>\r\n\r\n## Runtime\r\n\r\nAs described earlier in this article, XMLUI entirely conceals that it runs the code asynchronously without any explicit hint from the script. The script language does not contain the `async` and `await` keywords.\r\n\r\nTo implement this \"magic\", the scripting engine provides two mechanisms:\r\nIt prevents some JavaScript runtime functions from calling\r\nProvides asynchronous replacements for some JavaScript runtime functions that support only sync operations\r\n\r\n### Banned Functions\r\n\r\nA few functions in the JavaScript runtime manage the JavaScript event loop and animation frames at a low level or may derail script management. XMLUI does not allow their use:\r\n\r\n- [`cancelAnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame)\r\n- [`cancelIdleCallback`](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelIdleCallback)\r\n- [`clearInterval`](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)\r\n- [`clearImmediate`](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearImmediate)\r\n- [`clearTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)\r\n- [`eval`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval)\r\n- [`queueMicrotask`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/queueMicrotask)\r\n- [`requestAnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame)\r\n- [`requestIdleCallback`](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback)\r\n- [`setImmediate`](https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate)\r\n- [`setInterval`](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\r\n- [`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\r\n\r\nWhen you invoke these functions, XMLUI stops with an error.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nWe may extend this list in the future.\r\n</Callout>\r\n\r\n### Async Replacements\r\n\r\nXMLUI replaces several functions with its implementation that supports async execution:\r\n\r\n- [`Array.prototype.every`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every)\r\n- [`Array.prototype.filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\r\n- [`Array.prototype.find`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\r\n- [`Array.prototype.findIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex)\r\n- [`Array.prototype.flatMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap)\r\n- [`Array.prototype.forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n- [`Array.prototype.map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n- [`Array.prototype.some`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nWe may extend this list in the future.\r\n</Callout>\r\n\r\n## Appendix: How Reactiveness Works [#reactiveness]\r\n\r\nThe reactive feature works with XMLUI-managed objects such as variables and components. However, it does not work with objects managed by other entities.\r\n\r\nFor example, the following variable declaration assigns the current timestamp to the `thisIsNow` variable:\r\n\r\n```js\r\nlet thisIsNow = getDate();\r\n```\r\n\r\nThe timestamp continuously changes; nonetheless, `this is now` (though it is still a reactive variable) does not have any dependencies, as the execution of the body of the `getDate()` function is managed by the JavaScript runtime and not XMLUI. \r\n\r\nThe exact time at which this automatic update occurs is indeterministic. Updating a value and all reactive variables depending on it is far from atomic. If there are more dependencies of paticular value, the order of updating them is also indeterministic.\r\n\r\nWithout the exact details, this is what happens when you modify a dependency of a reactive variable:\r\n- After completing the execution of an operation (for example, an assignment), the engine detects the update in a dependency (or even more dependencies).\r\n- The engine initiates a UI refresh.\r\n- This UI refresh evaluates all reactive variables that depend on the updated dependency (or dependencies). The UI is displayed accordingly.\r\n\r\nYou can create circular dependencies among reactive variables that could cause an infinite loop. However, the mechanism above (based on UI refresh) will settle down the value of such variables and avoid infinite updates.\r\n\r\nBecause the update mechanism triggers only after executing an entire XMLUI statement, after processing all statements in an event handler, there is no more trigger, so there is no chance for an infinite loop.\r\n\r\nLook at this example, where variables `b` and `c` form a circular reference and depend on variable `a`. Clicking the button increments `a` and triggers the update mechanism:\r\n\r\n```xmlui\r\n<App \r\n  var.a=\"{0}\" \r\n  var.b=\"{a + (c ?? 0) * 2}\" \r\n  var.c=\"{a + (b ?? 0) * 2}\">\r\n  <Button label=\"Increment 'a'\" onClick=\"a++\"/>\r\n  <Text>a = {a}</Text>\r\n  <Text>b = {b}</Text>\r\n  <Text>c = {c}</Text>\r\n</App>\r\n```\r\n\r\n<Playground\r\n  name=\"Example: No infinite updates\"\r\n  app={`\r\n    <App \r\n      var.a=\"{0}\" \r\n      var.b=\"{a + (c ?? 0) * 2}\" \r\n      var.c=\"{a + (b ?? 0) * 2}\">\r\n      <Button label=\"Increment 'a'\" onClick=\"a++\"/>\r\n      <Text>a = {a}</Text>\r\n      <Text>b = {b}</Text>\r\n      <Text>c = {c}</Text>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nThe values you see are displayed after two UI updates:\r\n- The completion of `a++` statements in `onClick` event handler triggers a UI update.\r\n- The completion of the entire event handler triggers another UI update.\r\n\r\nOnly the value of `a` is deterministic; it is one after a single click. The other variable values are indeterministic due to the circular reference between them and the unknown order of re-evaluating `b` and `c`. This order may be different for the two UI refreshes. \r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nA future release of XMLUI may display different values for `b` and `c`. However, it will not change the fact that there are now infinite update loops.\r\n</Callout>",
  "styles-and-themes":"# Themes Reference\r\n\r\nThis section contains reference information about XMLUI styling features, including layout properties and values, theme variables, and themes shipped with XMLUI.",
  "styles-and-themes/common-units":"import { COMMON_VISUAL_PROPERTY_UNITS_BORDER_STYLE, COMMON_VISUAL_PROPERTY_UNITS_COLOR, COMMON_VISUAL_PROPERTY_UNITS_SIZE } from \"../../meta/pages\";\r\nimport colorValues from \"./samples/color-values.xmlui\";\r\nimport { Callout } from \"nextra/components\";\r\n\r\n# Common Visual Property Units\r\n\r\nThis article describes common values that you can use in layout properties.\r\n\r\n## Boolean Values [#boolean]\r\n\r\nYou can represent the `true` and `false` values with multiple keywords:\r\n\r\n|Value|Description|\r\n|---|---|\r\n|true|Use a particular style feature. Accepted keywords: `true`, `yes`, or `on`.|\r\n|false|Do not use a particular style feature. Accepted keywords: `false`, `no`, or `off`.|\r\n\r\n## Border Values [#border]\r\n\r\nWhen you specify the border of a component, you can use these three border properties:\r\n- **Border width**. The stroke <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>width</SmartLink> to draw the border.\r\n- **Border style**. The border <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_BORDER_STYLE }>style pattern</SmartLink> to apply.\r\n- **Border color**. The <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_COLOR }>color</SmartLink> of the border.\r\nYou must specify at least one of these properties to display a border. You can specify the border properties in any order; however, you can specify a property only once. All of these border specifications are correct:\r\n\r\n```text\r\n1px solid blue\r\n3px\r\ndashed 4px #f0cccc\r\n#f0cccc 4 dashed\r\n#f0f dotted\r\n```\r\n\r\n## Border Rounding [#border-rounding]\r\n\r\nYou can define border rounding values to round the corners of a component's outer border edge. You can set a single radius to make circular corners or two radii to make elliptical ones. Radius values use the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>size value</SmartLink> syntax and semantics.\r\n\r\nWhen you specify multiple radii, the first value determines the horizontal rounding, and the second the vertical rounding.\r\n\r\n<Playground\r\n  name=\"Border styles\"\r\n  app={`\r\n    <App>\r\n    <FlowLayout gap=\"8\" padding=\"8\">\r\n      <CVStack width=\"25%\" height=\"64px\" border=\"solid 4px #202020\" borderRadius=\"20px\"><Text value=\"20px\" /></CVStack>\r\n      <CVStack width=\"25%\" height=\"64px\" border=\"solid 4px #202020\" borderRadius=\"20px 40px\"><Text value=\"20px 40px\" /></CVStack>\r\n      <CVStack width=\"25%\" height=\"64px\" border=\"solid 4px #202020\" borderRadius=\"25% 20px\"><Text value=\"25% 20px\" /></CVStack>\r\n      <CVStack width=\"25%\" height=\"64px\" border=\"solid 4px #202020\" borderRadius=\"50%\"><Text value=\"50%\" /></CVStack>\r\n    </FlowLayout>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Border Style Values [#border-style]\r\n\r\nThe engine supports these border style values:\r\n\r\n| Value | Description |\r\n|-|-|\r\n| `dashed` | Displays a series of short square-ended dashes or line segments. |\r\n| `dotted` | Displays a series of rounded dots. |\r\n| `double` | Displays two straight lines that add up to the pixel size defined by the border width. |\r\n| `groove` | Displays a border with a carved appearance. It is the opposite of `ridge`. |\r\n| `inset` | Displays a border that makes the element appear embedded. It is the opposite of `outset`. |\r\n| `ouset` | Displays a border that makes the element appear embossed. It is the opposite of `inset`. |\r\n| `ridge` | Displays a border with an extruded appearance. It is the opposite of `groove`. |\r\n| `solid` | Displays a single, straight, solid line. |\r\n\r\n<Playground\r\n  name=\"Border styles\"\r\n  app={`\r\n    <App>\r\n      <FlowLayout>\r\n        <CVStack width=\"25%\" height=\"64px\" border=\"dashed 8px #202020\"><Text value=\"dashed\" /></CVStack>\r\n        <CVStack width=\"25%\" height=\"64px\" border=\"dotted 8px #202020\"><Text value=\"dotted\" /></CVStack>\r\n        <CVStack width=\"25%\" height=\"64px\" border=\"double 8px #202020\"><Text value=\"double\" /></CVStack>\r\n        <CVStack width=\"25%\" height=\"64px\" border=\"groove 8px #202020\"><Text value=\"groove\" /></CVStack>\r\n        <CVStack width=\"25%\" height=\"64px\" border=\"inset 8px #202020\"><Text value=\"inset\" /></CVStack>\r\n        <CVStack width=\"25%\" height=\"64px\" border=\"outset 8px #202020\"><Text value=\"outset\" /></CVStack>\r\n        <CVStack width=\"25%\" height=\"64px\" border=\"ridge 8px #202020\"><Text value=\"ridge\" /></CVStack>\r\n        <CVStack width=\"25%\" height=\"64px\" border=\"solid 8px #202020\"><Text value=\"solid\" /></CVStack>\r\n      </FlowLayout>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Color Values [#color]\r\n\r\nThe engine accepts several color value types:\r\n- **Hexadecimal RGB/RGBA color definitions**. You can specify color values with RGB or ARGB codes using a `#` prefix and 3, 4, 6, or 8 hexadecimal digits.\r\n- **The `rgb` function**. Use the `rgb` function with three arguments representing the red, green, and blue components. Each component can be specified as a value between 0 and 255 or as a percentage value between 0% and 100%. You must use the same value type for all colors (numeric value or percentage); they cannot be mixed.\r\n- **The `rgba` function**. Use the `rgba` function with four arguments. The first three arguments represent the color channels (see the `rgb` function). The alpha channel can have a percentage value (0% - 100%) or a float number between 0 and 1.\r\n- **The `hsl` function**. Describe a color with the `hsl` function with three arguments representing the Hue angle (units are `deg`, `rad`, `grad`, or `turn`), the Saturation percentage (0% - 100%), and the Lightness percentage(0% - 100%).\r\n- **The `hsla` function**. Describe a color with the `hsla` function with three arguments representing the H, S, and L values (see `hsl`) and the alpha channel (a percentage value (0% - 100%) or a float number between 0 and 1).\r\n- **Named colors**. You can use standard CSS color names (all lowercase letters). See the <SmartLink href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/named-color\">MDN documentation</SmartLink> for more details.\r\n\r\n<Playground\r\n    name=\"Color values\"\r\n    app={colorValues}\r\n/>\r\n\r\n## Cursor Values [#cursor]\r\n\r\nThis type of value sets the mouse cursor, if any, to show when the mouse pointer is over a particular component.\r\n\r\n### General\r\n\r\n|Value|Description|\r\n|-|-|\r\n|`auto`|The engine will determine the cursor to display based on the current context.|\r\n|`default`|The platform-dependent default cursor. Typically, an arrow.|\r\n|`none`|No cursor is rendered.|\r\n\r\n### Links and Status\r\n\r\n|Value|Description|\r\n|-|-|\r\n|`context‑menu`|A context menu is available.|\r\n|`help`|Help information is available.|\r\n|`pointer`|The cursor is a pointer that indicates a link. Typically, it is an image of a pointing hand.|\r\n|`progress`|The program is busy in the background, but the user can still interact with the interface (in contrast to `wait`).|\r\n|`wait`|The program is busy, and the user can't interact with the interface (in contrast to `progress`). Sometimes an image of an hourglass or a watch.|\r\n\r\n### Selection\r\n\r\n|Value|Description|\r\n|-|-|\r\n|`cell`|The table cell or set of cells can be selected.|\r\n|`crosshair`|Cross cursor, often used to indicate selection in a bitmap.|\r\n|`text`|The text can be selected. Typically, the shape of an I-beam.|\r\n|`vertical‑text`|The vertical text can be selected. Typically, the shape of a sideways I-beam.|\r\n\r\n### Drag and Drop\r\n\r\n|Value|Description|\r\n|-|-|\r\n|`alias`|An alias or shortcut is to be created.|\r\n|`copy`|Something is to be copied.|\r\n|`move`|Something is to be moved.|\r\n|`no‑drop`|An item may not be dropped at the current location. <SmartLink href=\"https://bugzil.la/275173\">Firefox bug 275173</SmartLink>: On Windows and macOS, no-drop is the same as not-allowed.|\r\n|`not‑allowed`|The requested action will not be carried out.|\r\n|`grab`|Something can be grabbed (dragged to be moved).|\r\n|`grabbing`|Something is being grabbed (dragged to be moved).|\r\n\r\n### Resizing and Scrolling\r\n\r\n|Value|Description|\r\n|-|-|\r\n|`all‑scroll`|Something can be scrolled in any direction (panned). <SmartLink href=\"https://bugzil.la/275174\">Firefox bug 275174</SmartLink>: On Windows, all-scroll is the same as move.|\r\n|`col‑resize`|The item/column can be resized horizontally. Often rendered as arrows pointing left and right with a vertical bar separating them.|\r\n|`row‑resize`|The item/row can be resized vertically. Often rendered as arrows pointing up and down with a horizontal bar separating them.|\r\n|`n‑resize`, `e‑resize`, `s‑resize`, `w‑resize`, `ne‑resize`, `nw‑resize`, `se‑resize`, `sw‑resize`, `ew‑resize`, `ns‑resize`, `nesw‑resize`, `nwse‑resize`|Some edge is to be moved. For example, the `se‑resize` cursor is used when the movement starts from the south-east corner of the box. In some environments, an equivalent bidirectional resize cursor is shown. For example, `n‑resize` and `s‑resize` are the same as `ns‑resize`.|\r\n\r\n### Zooming\r\n\r\n|Value|Description|\r\n|-|-|\r\n|`zoom‑in`, `zoom‑out`|Something can be zoomed (magnified) in or out.|\r\n\r\n### Cursor Examples\r\n\r\nMove the mouse over the rectangles in the following example to check what the cursor looks like.\r\n\r\n<Playground\r\n    name=\"Cursor values\"\r\n    app={`\r\n    <App>\r\n      <FlowLayout>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"auto\" border=\"solid 1 #202020\">auto</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"default\" border=\"solid 1 #202020\">default</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"none\" border=\"solid 1 #202020\">none</CVStack>\r\n      </FlowLayout>\r\n      <FlowLayout>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"context-menu\" border=\"solid 1 #202020\">context-menu</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"help\" border=\"solid 1 #202020\">help</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"pointer\" border=\"solid 1 #202020\">pointer</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"progress\" border=\"solid 1 #202020\">progress</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"wait\" border=\"solid 1 #202020\">wait</CVStack>\r\n      </FlowLayout>\r\n      <FlowLayout>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"cell\" border=\"solid 1 #202020\">cell</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"crosshair\" border=\"solid 1 #202020\">crosshair</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"text\" border=\"solid 1 #202020\">text</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"vertical-text\" border=\"solid 1 #202020\">vertical-text</CVStack>\r\n      </FlowLayout>\r\n      <FlowLayout>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"alias\" border=\"solid 1 #202020\">alias</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"copy\" border=\"solid 1 #202020\">copy</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"move\" border=\"solid 1 #202020\">move</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"no-drop\" border=\"solid 1 #202020\">no-drop</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"not-allowed\" border=\"solid 1 #202020\">not-allowed</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"grab\" border=\"solid 1 #202020\">grab</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"grabbing\" border=\"solid 1 #202020\">grabbing</CVStack>\r\n      </FlowLayout>\r\n      <FlowLayout>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"alt-scroll\" border=\"solid 1 #202020\">all-scroll</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"col-resize\" border=\"solid 1 #202020\">col-resize</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"row-resize\" border=\"solid 1 #202020\">row-resize</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"n-resize\" border=\"solid 1 #202020\">n-resize</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"e-resize\" border=\"solid 1 #202020\">e-resize</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"s-resize\" border=\"solid 1 #202020\">s-resize</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"w-resize\" border=\"solid 1 #202020\">w-resize</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"ne-resize\" border=\"solid 1 #202020\">ne-resize</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"nw-resize\" border=\"solid 1 #202020\">nw-resize</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"se-resize\" border=\"solid 1 #202020\">se-resize</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"sw-resize\" border=\"solid 1 #202020\">sw-resize</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"ew-resize\" border=\"solid 1 #202020\">ew-resize</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"ns-resize\" border=\"solid 1 #202020\">ns-resize</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"nesw-resize\" border=\"solid 1 #202020\">nesw-resize</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"nwse-resize\" border=\"solid 1 #202020\">nwse-resize</CVStack>\r\n      </FlowLayout>\r\n      <FlowLayout>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"zoom-in\" border=\"solid 1 #202020\">zoom-in</CVStack>\r\n        <CVStack width=\"20%\" height=\"36px\" cursor=\"zoom-out\" border=\"solid 1 #202020\">zoom-out</CVStack>\r\n      </FlowLayout>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Font Family Values [#fontFamily]\r\n\r\nFont family values are a prioritized list of one or more font family names and/or generic family names. Multiple names should be separated by commas. Font family names containing whitespace should be quoted.\r\nThese are the generic family names:\r\n\r\n|Name|Description|\r\n|-|-|\r\n|`serif`| Glyphs have finishing strokes, flared or tapering ends, or have actual serifed endings. |\r\n|`sans‑serif`| Glyphs have stroke endings that are plain. |\r\n|`monospace`| All glyphs have the same fixed width. |\r\n|`cursive`| Glyphs in cursive fonts generally have either joining strokes or other cursive characteristics beyond those of italic typefaces. The glyphs are partially or completely connected, and the result looks more like handwritten pen or brush writing than printed letter work. |\r\n|`fantasy`| fantasy fonts are primarily decorative fonts that contain playful representations of characters. |\r\n|`system‑ui`| Glyphs are taken from the default user interface font on a given platform. Because typographic traditions vary widely across the world, this generic is provided for typefaces that don't map cleanly into the other generics. |\r\n|`ui‑serif`| The default user interface serif font. |\r\n|`ui‑sans‑serif`| The default user interface sans-serif font. |\r\n|`ui‑monospace`| The default user interface monospace font. |\r\n|`ui‑rounded`| The default user interface font that has rounded features. |\r\n|`math`| This is for the particular stylistic concerns of representing mathematics: superscript and subscript, brackets that cross several lines, nesting expressions, and double struck glyphs with distinct meanings. |\r\n|`emoji`| Fonts that are specifically designed to render emoji. |\r\n|`fangsong`| A particular style of Chinese characters that are between serif-style Song and cursive-style Kai forms. This style is often used for government documents. |\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nA generic font family should be the last item in the list of font family names.\r\n</Callout>\r\n\r\nExamples:\r\n\r\n```text\r\nHelvetica\r\n\"Times New Roman\"\r\nBookville, \"Times New Roman\", serif\r\n```\r\n\r\n## Font Weight Values [#fontWeight]\r\n\r\nFont weight values set the font's weight (or boldness); the available values depend on the currently selected font family.\r\n\r\nWeight values can be numbers between 1 and 1000. The hundreds (100, 200, 300, ..., 900) are conventionally used. You can use a few identifiers to specify the font weights:\r\n\r\n|Value|Description|\r\n|-|-|\r\n|`normal`| Normal font weight. Same as `400`. |\r\n|`bold`| Bold font weight. Same as `700`. |\r\n|`lighter`| One relative font weight lighter than the parent element. |\r\n|`bolder`| One relative font weight heavier than the parent element. |\r\n\r\n## Font Style Values [#fontStyle]\r\n\r\nThis property determines whether a font should be styled with a normal, italic, or oblique face from its font family.\r\n\r\n|Value|Description|\r\n|-|-|\r\n|`normal`| Selects a font that is classified as normal within a font family. |\r\n|`italic`| Selects a font that is classified as italic. If no italic version of the face is available, one classified as oblique is used instead. If neither is available, the style is artificially simulated. |\r\n|`oblique`| Selects a font that is classified as oblique. If no oblique version of the face is available, one classified as italic is used instead. If neither is available, the style is artificially simulated. |\r\n\r\n## Font Stretch Values [#fontStretch]\r\n\r\nThis property selects a regular, condensed, or expanded face from a font. Its value can be specified as a percentage value or as one of the following:\r\n\r\n|Value|Description|\r\n|-|-|\r\n|`normal`| Specifies a normal font face. |\r\n|`semi‑condensed`, `condensed`, `extra‑condensed`, `ultra‑condensed`| Specifies a more condensed font face than normal, with `ultra‑condensed` as the most condensed. |\r\n|`semi‑expanded`, `expanded`, `extra‑expanded`, `ultra‑expanded`| Specifies a more expanded font face than normal, with `ultra‑expanded` as the most expanded. |\r\n\r\n## Opacity [#opacity]\r\n\r\nThis property sets an element's opacity. Opacity is the degree to which the content behind an element is hidden, and it is the opposite of transparency. \r\n\r\nThe property value is a number in the range of 0.0 to 1.0, inclusive, or a percentage in the range of 0% to 100%, inclusive, representing the opacity of the channel (that is, the value of its alpha channel). Any value outside the interval, though valid, is clamped to the nearest limit in the range.\r\n\r\n## Overflow Values [#overflow]\r\n\r\nA component may not fit into the viewport its parent provides. An overflow value specifies the engine's strategy in such a case.\r\n\r\n|Value|Description|\r\n|-|-|\r\n|`visible`| (**default**) Overflow content is not clipped and may be visible outside the element's padding box. |\r\n|`hidden`| Overflow content is clipped at the element's padding box. There are no scroll bars, and the clipped content is not visible (i.e., clipped content is hidden), but the content still exists. |\r\n|`scroll`| Overflow content is clipped at the element's padding box, and overflow content can be scrolled into view using scroll bars. |\r\n\r\n## Outline Values [#outline]\r\n\r\nWhen you specify the outline of a component, you can use these three properties:\r\n- **Outline width**. The stroke <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>width</SmartLink> to draw the outline.\r\n- **Outline style**. The outline <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_BORDER_STYLE }>style pattern</SmartLink> to apply.\r\n- **Outline color**. The <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_COLOR }>color</SmartLink> of the outline.\r\n\r\nYou must specify all of these properties to display an outline. You can specify the outline properties in any order; however, you can specify a property only once. All of these outline specifications are correct:\r\n\r\n```text\r\n1px solid blue\r\ndashed 4px #f0cccc\r\n#f0cccc 4 dashed\r\n```\r\n\r\n\r\n\r\n## Shadow Values [#boxShadow]\r\n\r\nYou can define shadow values with one or more shadow effects. If you use more than one effect, you must separate them with a comma. A shadow effect is composed of these parts:\r\n\r\n- Horizontal offset of the effect\r\n- Vertical offset of the effect\r\n- Blur radius\r\n- Spread radius\r\n- Optional color\r\n\r\nThe first up to four <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>size value</SmartLink>\r\nsegments are followed by the optional <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_COLOR }>color value</SmartLink>.\r\n\r\nYou can use two, three, or four size values.\r\n\r\n- If only two values are given, the engine interprets them as the horizontal and vertical offsets.\r\n- If a third value is given, it is interpreted as a blur radius.\r\n- If a fourth value is given, it is interpreted as a spread radius.\r\n\r\nWhen you prefix the shadow value with `inset`, it changes the shadow from an outer box shadow to an inner box shadow (as if the content is pressed into the box).\r\n\r\n<Playground\r\n    name=\"Shadow Values\"\r\n    app={`\r\n    <FlowLayout gap=\"24\">\r\n      <Stack margin=\"16px\" padding=\"16px\" width=\"80%\" border=\"2px solid #202020\"\r\n        boxShadow=\"12px 12px 5px orangered\" >\r\n        <Text>12px 12px 5px orangered</Text>\r\n      </Stack>\r\n      <Stack margin=\"16px\" padding=\"16px\" width=\"80%\" border=\"2px solid #202020\"\r\n        boxShadow=\"inset 12px 12px 5px #808080\" >\r\n        <Text>inset 12px 12px 5px orangered</Text>\r\n      </Stack>\r\n      <Stack margin=\"16px\" padding=\"16px\" width=\"80%\" border=\"2px solid #202020\"\r\n        boxShadow=\"16px 8px green\" >\r\n        <Text>16px 8px green</Text>\r\n      </Stack>\r\n      <Stack margin=\"16px\" padding=\"16px\" width=\"80%\" border=\"2px solid #202020\"\r\n        boxShadow=\"-8px -6px green\" >\r\n        <Text>\"inset 12px 12px 5px orangered\"</Text>\r\n      </Stack>\r\n      <Stack margin=\"16px\" padding=\"16px\" width=\"80%\" border=\"2px solid #202020\"\r\n        boxShadow=\"16px 8px 12px blue\" >\r\n        <Text>16px 8px 12px blue</Text>\r\n      </Stack>\r\n      <Stack margin=\"16px\" padding=\"16px\" width=\"80%\" border=\"2px solid #202020\"\r\n        boxShadow=\"16px 8px 8px 4px blue\" >\r\n        <Text>16px 8px 8px 4px blue</Text>\r\n      </Stack>\r\n      <Stack margin=\"16px\" padding=\"16px\" width=\"80%\" border=\"2px solid #202020\"\r\n        boxShadow=\"12px 12px 5px orangered, inset 8px 6px green\" >\r\n        <Text>12px 12px 5px orangered, inset 8px 6px green</Text>\r\n      </Stack>\r\n      <Stack margin=\"16px\" padding=\"16px\" width=\"80%\" border=\"2px solid #202020\"\r\n        boxShadow=\"8px 4px 2px blue, -8px -6px green\" >\r\n        <Text>12px 12px 5px blue, -8px -6px green</Text>\r\n      </Stack>\r\n    </FlowLayout>\r\n  `}\r\n    height={360}\r\n/>\r\n\r\n## Size Values [#size]\r\n\r\nSize values are composed of a numeric value and an optional unit. Here are a few examples:\r\n\r\n```text\r\n12px\r\n0.25rem\r\n50%\r\n0\r\n125mm\r\n```\r\n\r\nUI Engine uses these units with the CSS semantics:\r\n\r\n| Unit | Description |\r\n|-|-|\r\n| `cm` | Centimeters (1cm = 37.8px = 25.2/64in) |\r\n| `mm` | Millimeters (1mm = 1/10th of 1cm) |\r\n| `in` | Inches (1in = 2.54cm = 96px) |\r\n| `pc` | Picas (1pc = 1/6th of 1in) |\r\n| `pt` | Points (1pt = 1/72nd of 1in) |\r\n| `px` | Pixels (1px = 1/96th of 1in) |\r\n| `em` | Relative to the font size of the parent component, in the case of typographical properties (like the font size), and font size of the element itself, in the case of other properties like (width). |\r\n| `ex` | x-height (the height of a normal lowercase \"x\") of the element's font. |\r\n| `ch` | The advance measure (width) of the glyph \"0\" of the element's font. |\r\n| `ch` | The advance measure (width) of the glyph \"0\" of the element's font. |\r\n| `rem` | Font size of the root element. |\r\n| `vw` | 1% of the viewport's width. |\r\n| `vh` | 1% of the viewport's height. |\r\n| `vmin` | 1% of the viewport's smaller dimension. |\r\n| `vmax` | 1% of the viewport's smaller dimension. |\r\n| `%` | The percentage value is relative to the parent container's viewport size offered for the particular child element. |\r\n| `*` | Start sizing: The size weight used when calculating the dimension of the particular child element. The base of the calculation is the remaining space size in the parent's viewport. |\r\n\r\n## Text Alignment Values [#textAlign]\r\n\r\nThis value sets the horizontal alignment of the inline-rendered content (e.g., text) inside its block-rendered parent.\r\n\r\n|Value|Description|\r\n|-|-|\r\n| `start` | The same as `left` if direction is left-to-right and `right` if direction is right-to-left. |\r\n| `end` | The same as `right` if direction is left-to-right and `left` if direction is right-to-left. |\r\n| `left` | The inline contents are aligned to the left edge of the line box. |\r\n| `right` | The inline contents are aligned to the right edge of the line box. |\r\n| `center` | The inline contents are centered within the line box. |\r\n| `justify` | The inline contents are justified. Text should be spaced to line up its left and right edges to the left and right edges of the line box, except for the last line. |\r\n\r\n<Playground\r\n    name=\"Text Alignment Values\"\r\n    app={`\r\n      <VStack gap=\"8px\" marginVertical=\"8px\" paddingVertical=\"8px\" width=\"600px\" margin=\"auto\" backgroundColor=\"#eee\">\r\n        <Text textAlign=\"left\">This is a long text with several words (left)</Text>\r\n        <Text textAlign=\"right\">This is a long text with several words (right)</Text>\r\n        <Text textAlign=\"center\">This is a long text with several words (center)</Text>\r\n        <Text textAlign=\"justify\">This is a long, long,long, long, long, long, long, very long text with several words that do not fit into a single line (justify). Last line is not justified.</Text>\r\n      </VStack>\r\n  `}\r\n/>\r\n\r\n## Text Decoration Values [#textDecoration]\r\n\r\nA text decoration value is composed of these segments:\r\n\r\n- **color**. The color of the decoration\r\n- **line**. The kind of decoration used\r\n- **style**. The line style to use\r\n\r\nYou can use one, two, or three segments when specifying the text decoration. They can be in any order; however, one segment type can be used only once.\r\n\r\nThese are the available line values:\r\n\r\n|Value|Description|\r\n|-|-|\r\n|`underline`| Each line of text has a decorative line beneath it. |\r\n|`overline`| Each line of text has a decorative line above it. |\r\n|`line-through`| Each line of text has a decorative line going through its middle. |\r\n\r\nYou can use these style values:\r\n\r\n|Value|Description|\r\n|-|-|\r\n|`solid`| Draws a single line. |\r\n|`double`| Draws a double line. |\r\n|`dotted`| Draws a dotted line. |\r\n|`dashed`| Draws a dashed line. |\r\n|`wavy`| Draws a wavy line. |\r\n\r\n<Playground\r\n    name=\"Setting text properties\"\r\n    app={`\r\n  <VStack margin=\"8px\" gap=\"8px\">\r\n    <Text textDecoration=\"underline\">underline</Text>\r\n    <Text textDecoration=\"red wavy underline\">red wavy underline</Text>\r\n    <Text textDecoration=\"line-through\">line-through</Text>\r\n    <Text textDecoration=\"line-through orange\">line-through orange</Text>\r\n    <Text textDecoration=\"double line-through blue\">double line-through blue</Text>\r\n    <Text textDecoration=\"overline\">overline</Text>\r\n    <Text textDecoration=\"dotted overline #808080\">dotted overline #808080</Text>\r\n  </VStack>\r\n  `}\r\n    height={240}\r\n/>\r\n\r\n## Text Transform Values [#text-transform]\r\n\r\nThis value specifies how to capitalize a component's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.\r\n\r\n|Value|Description|\r\n|-|-|\r\n|`none`| Converts the first letter of each word to uppercase. Other characters remain unchanged (they retain their original case as written in the element's text) |\r\n|`capitalize`| Draws a double line. |\r\n|`uppercase`| Converts all characters to uppercase. |\r\n|`lowercase`| Converts all characters to lowercase. |\r\n|`full-width`| Forces the writing of a character — mainly ideograms and Latin scripts — inside a square, allowing them to be aligned in the usual East Asian scripts (like Chinese or Japanese). |\r\n|`full-size-kana`| Generally used for ruby annotation text, the keyword converts all small Kana characters to the equivalent full-size Kana, to compensate for legibility issues at the small font sizes typically used in ruby. |\r\n\r\n## Text Wrap Values [#text-wrap]\r\n\r\nThis value controls how text inside an element is wrapped.\r\n\r\n|Value|Description|\r\n|-|-|\r\n|`wrap`| Text is wrapped across lines at appropriate characters (for example, spaces in languages like English that use space separators) to minimize overflow. (**default**) |\r\n|`nowrap`| The text does not wrap across lines. It will overflow its containing element rather than breaking onto a new line. |\r\n|`balance`| The text is wrapped in a way that best balances the number of characters on each line, enhancing layout quality and legibility. |\r\n|`pretty`| Results in the same behavior as `wrap`, except that the user agent will use a slower algorithm that favors better layout over speed. |\r\n|`stable`| Results in the same behavior as `wrap`, except that when the user is editing the content, the lines that come before the lines they are editing remain static rather than the whole block of text re-wrapping. |\r\n\r\n\r\n## User Select Values [#user-select]\r\n\r\nThese values control whether the user can select text.\r\n\r\n|Value|Description|\r\n|-|-|\r\n|`none`| The text of the component and its children is not selectable. |\r\n|`auto`| Automatically determines the value. |\r\n|`text`| The text can be selected by the user. |\r\n|`all`| The content of the component shall be selected atomically: If a selection would contain part of the component, then the selection must contain the entire component, including all its children. If a double-click or context-click occurs in sub-components, the highest ancestor with this value will be selected. |\r\n|`contains`| Enables selection to start within the component; however, the selection will be contained by the bounds of that component. |\r\n\r\n## Zoom Values [#zoom]\r\n\r\nThe value of the `zoom` property controls the magnification level of a component:\r\n\r\n|Value|Description|\r\n|-|-|\r\n|`normal`| Render the element at its normal size; equal to `1`. |\r\n|`reset`| This resets the value to zoom: 1 and prevents the element from being (de)magnified if the user applies non-pinch-based zooming (e.g., by pressing Ctrl—or Ctrl+ keyboard shortcuts) to the document. |\r\n| percentage value| `100%` is equivalent to normal. Values larger than `100%` zoom in. Values smaller than `100%` zoom out. |\r\n| number | Equivalent to the corresponding percentage (`1.0` = `100%` = `normal`). Values larger than `1.0` zoom in. Values smaller than `1.0` zoom out. |\r\n\r\n<Playground\r\n    name=\"Setting zoom\"\r\n    app={`\r\n  <App>\r\n    <HStack>\r\n      <Card zoom=\"0.75\" width=\"150px\" title=\"Hello!\" subtitle=\"zoom: '0.75' \" height=\"fit-content\"/>\r\n      <Card width=\"150px\" title=\"Hello!\" subtitle=\"zoom: 'normal'\" height=\"fit-content\"/>\r\n      <Card zoom=\"200%\" width=\"150px\" title=\"Hello!\" subtitle=\"zoom: '200%'\" height=\"fit-content\"/>\r\n    </HStack>\r\n  </App>\r\n  `}\r\n/>\r\n",
  "styles-and-themes/layout-props":"import { COMMON_VISUAL_PROPERTY_UNITS, COMMON_VISUAL_PROPERTY_UNITS_ALIGNMENT, COMMON_VISUAL_PROPERTY_UNITS_BOOLEAN, COMMON_VISUAL_PROPERTY_UNITS_BORDER, COMMON_VISUAL_PROPERTY_UNITS_BORDER_ROUNDING, COMMON_VISUAL_PROPERTY_UNITS_BORDER_STYLE, COMMON_VISUAL_PROPERTY_UNITS_COLOR, COMMON_VISUAL_PROPERTY_UNITS_CURSOR, COMMON_VISUAL_PROPERTY_UNITS_FONT_FAMILY, COMMON_VISUAL_PROPERTY_UNITS_FONT_WEIGHT, COMMON_VISUAL_PROPERTY_UNITS_ORIENTATION, COMMON_VISUAL_PROPERTY_UNITS_OVERFLOW, COMMON_VISUAL_PROPERTY_UNITS_SHADOW, COMMON_VISUAL_PROPERTY_UNITS_SIZE, COMMON_VISUAL_PROPERTY_UNITS_TEXT_ALIGNMENT, COMMON_VISUAL_PROPERTY_UNITS_TEXT_DECORATION, COMMON_VISUAL_PROPERTY_UNITS_TEXT_TRANSFORM, COMMON_VISUAL_PROPERTY_UNITS_TEXT_WRAP, COMMON_VISUAL_PROPERTY_UNITS_USER_SELECT } from \"../../meta/pages\";\r\n\r\n# Layout Properties [#layout-summary]\r\n\r\nThis document summarizes the layout properties you can use for UI Engine components.\r\n\r\n## `background`\r\n\r\nSets the background color <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_COLOR}>color value</SmartLink> of a component (shortcut to `backgroundColor`).\r\n\r\n## `backgroundColor`\r\n\r\nSets the background <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_COLOR}>color value</SmartLink> of a component.\r\n\r\n## `border`\r\n\r\nSets the value of the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_BORDER}>border</SmartLink> area; uses the same value for the left, top, right, and bottom borders.\r\n\r\n## `borderBottom`\r\n\r\nSets the value of the bottom <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_BORDER}>border</SmartLink> to the specified one.\r\n\r\n## `borderColor`\r\n\r\nSets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_COLOR}>color value</SmartLink> of the border; uses the same value for the left, top, right, and bottom borders.\r\n\r\n## `borderHorizontal`\r\n\r\nSets the value of the horizontal <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_BORDER}>borders</SmartLink> (left and right) to the specified one.\r\n\r\n## `borderLeft`\r\n\r\nSets the value of the left <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_BORDER}>border</SmartLink> to the specified one.\r\n\r\n## `borderRadius`\r\n\r\nThis property rounds the corners of a component's outer border edge according to the specified <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_BORDER_ROUNDING }>value</SmartLink>.\r\n\r\n## `borderRight`\r\n\r\nSets the value of the right <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_BORDER}>border</SmartLink> to the specified one.\r\n\r\n## `borderStyle`\r\n\r\nSets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_BORDER_STYLE}>style</SmartLink> of the border; uses the same value for the left, top, right, and bottom borders.\r\n\r\n## `borderWidth`\r\n\r\nSets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>width</SmartLink> (thickness) of the border; uses the same value for the left, top, right, and bottom borders.\r\n\r\n## `borderTop`\r\n\r\nSets the value of the top <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_BORDER}>border</SmartLink> to the specified one.\r\n\r\n## `borderVertical`\r\n\r\nSets the value of the vertical <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_BORDER}>borders</SmartLink> (top and bottom) to the specified one.\r\n\r\n## `bottom`\r\n\r\nSets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>bottom</SmartLink> position of the component to the specified value.\r\n\r\n## `boxShadow`\r\n\r\nThis property adds <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SHADOW }>shadow effects</SmartLink> around a component's frame and set up one or more shadow effects.\r\n\r\n## `canShrink`\r\n\r\nThis boolean property indicates if a component can shrink its size when its parent container is resized.\r\n\r\n## `color`\r\n\r\nSets the foreground <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_COLOR}>color value</SmartLink> of a component's text and text decorations.\r\n\r\n## `cursor`\r\n\r\nSets the mouse <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_CURSOR}>cursor</SmartLink>, if any, to show when the mouse pointer is over a particular component\r\n\r\n## `direction`\r\n\r\nThis property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages). By default, the prop's value is `ltr`.\r\n\r\n## `fontFamily`\r\n\r\nThis property specifies a prioritized list of one or more <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_FONT_FAMILY}>font family</SmartLink> names and/or generic family names for the selected component.\r\n\r\n## `fontSize`\r\n\r\nThis property sets the size of the font. Changing the font <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> also updates the sizes of the font size-relative length units, such as em, ex, and so forth.\r\n\r\n## `fontWeight`\r\n\r\nSets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_FONT_WEIGHT}>weight (or boldness)</SmartLink> of the font. The weights available depend on the `fontFamily` that is currently set.\r\n\r\n## `fontStyle`\r\n\r\nThis property sets whether a font should be styled with a normal, italic, or oblique face from its font family.\r\n\r\n## `gap`\r\n\r\nLayout components use this property to define the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>size</SmartLink> of space separating child components.\r\n\r\n## `height`\r\n\r\nSpecifies the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>height</SmartLink> (vertical dimension) of the component.\r\n\r\n## `left`\r\n\r\nSets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>left</SmartLink> position of the component to the specified value.\r\n\r\n## `letterSpacing`\r\n\r\nThis property sets the horizontal <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>spacing</SmartLink> behavior between text characters. This value is added to the natural spacing between characters while rendering the text. Positive values cause characters to spread farther apart, while negative values bring characters closer together.\r\n\r\n## `lineHeight`\r\n\r\nThis property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>height</SmartLink> of a line box. It's commonly used to set the distance between lines of text.\r\n\r\n## `margin`\r\n\r\nSets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>size</SmartLink> of the margin area; uses the same value for the left, top, right, and bottom margins.\r\n\r\n## `marginBottom`\r\n\r\nSets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>size</SmartLink> of the bottom margin to the specified value.\r\n\r\n## `marginHorizontal`\r\n\r\nSets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> of the horizontal margins (left and right) to the specified value.\r\n\r\n## `marginLeft`\r\n\r\nSets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>size</SmartLink> of the left margin to the specified value.\r\n\r\n## `marginRight`\r\n\r\nSets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>size</SmartLink> of the right margin to the specified value.\r\n\r\n## `marginTop`\r\n\r\nSets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>size</SmartLink> of the top margin to the specified value.\r\n\r\n## `marginVertical`\r\n\r\nSets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>size</SmartLink> of the vertical margins (top and bottom) to the specified value.\r\n\r\n## `maxHeight`\r\n\r\nSpecifies the maximum <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>height</SmartLink> of an element. It prevents the current value of the height property from becoming larger than the value specified.\r\n\r\n## `maxWidth`\r\n\r\nSpecifies the maximum <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>width</SmartLink> of an element. It prevents the current value of the width property from becoming larger than the value specified.\r\n\r\n## `minHeight`\r\n\r\nSpecifies the minimum <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>height</SmartLink> of an element. It prevents the current value of the height property from becoming smaller than the value specified.\r\n\r\n## `minWidth`\r\n\r\nSpecifies the minimum <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>width</SmartLink> of an element. It prevents the current value of the width property from becoming smaller than the value specified.\r\n\r\n## `opacity`\r\n\r\nThis property sets the opacity of an element. Opacity is the degree to which the content behind an element is hidden. The value is a number in the range 0.0 to 1.0, inclusive, or a percentage from 0% to 100%.\r\n\r\n## `outline`\r\n\r\nThis property sets most of the outline properties in a single declaration. An outline is a line that is drawn around an element, outside the border.\r\n\r\n## `outlineWidth`\r\n\r\nThis property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the border.\r\n\r\n## `outlineStyle`\r\n\r\nThis property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the border.\r\n\r\n## `outlineColor`\r\n\r\nThis property sets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_COLOR}>color</SmartLink> of an element's outline.\r\n\r\n## `overflowX`\r\n\r\nThis property defines the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_OVERFLOW }>overflow</SmartLink> strategy when a component horizontally overflows the UI its parent provides.\r\n\r\n## `overflowY`\r\n\r\nThis property defines the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_OVERFLOW }>overflow</SmartLink> strategy when a component vertically overflows the UI its parent provides.\r\n\r\n## `padding`\r\n\r\nSets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>size</SmartLink> of the padding area; uses the same value for the left, top, right, and bottom paddings.\r\n\r\n## `paddingBottom`\r\n\r\nSets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>size</SmartLink> of the bottom padding to the specified value.\r\n\r\n## `paddingHorizontal`\r\n\r\nSets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE}>size</SmartLink> of the horizontal padding (left and right) to the specified value.\r\n\r\n## `paddingLeft`\r\n\r\nSets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>size</SmartLink> of the left padding to the specified value.\r\n\r\n## `paddingRight`\r\n\r\nSets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>size</SmartLink> of the right padding to the specified value.\r\n\r\n## `paddingTop`\r\n\r\nSets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>size</SmartLink> of the top padding to the specified value.\r\n\r\n## `paddingVertical`\r\n\r\nSets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>size</SmartLink> of the vertical paddings (top and bottom) to the specified value.\r\n\r\n## `radiusBottomLeft`\r\n\r\nThis property rounds the bottom-left corner of a component's outer border edge according to the specified <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_BORDER_ROUNDING }>value</SmartLink>.\r\n\r\n## `radiusBottomRight`\r\n\r\nThis property rounds the bottom-right corner of a component's outer border edge according to the specified <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_BORDER_ROUNDING }>value</SmartLink>.\r\n\r\n## `radiusTopLeft`\r\n\r\nThis property rounds the top-left corner of a component's outer border edge according to the specified <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_BORDER_ROUNDING }>value</SmartLink>.\r\n\r\n## `radiusTopRight`\r\n\r\nThis property rounds the top-right corner of a component's outer border edge according to the specified <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_BORDER_ROUNDING }>value</SmartLink>.\r\n\r\n## `right`\r\n\r\nSets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>right</SmartLink> position of the component to the specified value.\r\n\r\n## `textAlign`\r\n\r\nThis property sets the horizontal <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_TEXT_ALIGNMENT }>alignment</SmartLink> of the inline-rendered content (e.g., text) inside its block-rendered parent.\r\n\r\n## `textAlignLast`\r\n\r\nThis property sets how the last line of a block or a line, right before a forced line break, is <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_TEXT_ALIGNMENT }>aligned</SmartLink>.\r\n\r\n## `textDecoration`\r\n\r\nThis property sets the appearance of <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_TEXT_DECORATION }>decorative lines</SmartLink> on text.\r\n\r\n## `textDecorationLine`\r\n\r\nThis property sets the kind of decoration that is used on text in an element, such as an underline or overline.\r\n\r\n## `textDecorationColor`\r\n\r\nThis property sets the <SmartLink href={COMMON_VISUAL_PROPERTY_UNITS_COLOR}>color</SmartLink> of decorations added to text by `textDecorationLine`.\r\n\r\n## `textDecorationStyle`\r\n\r\nThis property sets the style of the lines specified by `textDecorationLine`. The style applies to all lines that are set with `textDecorationLine`.\r\n\r\n## `textDecorationThickness`\r\n\r\nThis property sets sets the stroke thickness of the decoration line that is used on text in an element, such as a line-through, underline, or overline.\r\n\r\n## `textTransform`\r\n\r\nThis property specifies how to <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_TEXT_TRANSFORM }>capitalize</SmartLink> an element's text.\r\n\r\n## `textUnderlineOffset`\r\n\r\nThis property specifies the offset distance of an underline text decoration line (applied using `textDecoration`) from its original position.\r\n\r\n## `textWrap`\r\n\r\nThe <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_TEXT_WRAP }>value</SmartLink> of this property controls how text inside an element is wrapped.\r\n\r\n## `top`\r\n\r\nSets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>top</SmartLink> position of the component to the specified value.\r\n\r\n## `userSelect`\r\n\r\nThis property controls whether the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_USER_SELECT }>user can select</SmartLink> text.\r\n\r\n## `whiteSpace`\r\n\r\nThis property sets how white space inside an element is handled. Available values are: `normal`, `pre`, `pre-wrap`, `pre-line`, `wrap`, `collapse`, `nowrap`, and `preserve nowrap`.\r\n\r\n## `width`\r\n\r\nSpecifies the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>width</SmartLink> (horizontal dimension) of the component.\r\n\r\n## `wrapContent`\r\n\r\nThis boolean property indicates if a layout container can wrap its content into multiple lines.\r\n\r\n## `zIndex`\r\n\r\nThis layout property sets the z-order of a positioned component and its children. Overlapping components with a larger z-index cover those with a smaller one.\r\n\r\n## `zoom`\r\n\r\nThis property sets the zoom level of the view. The zoom level is a scaling factor that changes the size of the view.",
  "styles-and-themes/theme-variables":"import { Callout } from 'nextra/components'\r\n\r\nimport spacingSizes from \"./samples/spacing-sizes.xmlui\";\r\nimport shadowSizes from \"./samples/shadow-sizes.xmlui\";\r\nimport swatch from \"./samples/swatch.xmlui\";\r\nimport palette from \"./samples/color-palette.xmlui\";\r\nimport { COMMON_VISUAL_PROPERTY_UNITS, COMMON_VISUAL_PROPERTY_UNITS_BORDER_ROUNDING, COMMON_VISUAL_PROPERTY_UNITS_BORDER_STYLE, COMMON_VISUAL_PROPERTY_UNITS_COLOR, COMMON_VISUAL_PROPERTY_UNITS_FONT_FAMILY, COMMON_VISUAL_PROPERTY_UNITS_FONT_WEIGHT, COMMON_VISUAL_PROPERTY_UNITS_SIZE, COMMON_VISUAL_PROPERTY_UNITS_TEXT_DECORATION } from \"../../meta/pages\";\r\n\r\n# Theme Variables\r\n\r\nThe appearance of an xmlui app can be quickly customized with themes. The basic unit of a theme is a *theme variable*, which sets a particular visual trait of the app or a specific component, such as the background color, text weight, vertical padding, and others.\r\n\r\nTheme variables follow a naming convention: They compose identifier-like segments separated by a simple or double dash. Here are a few examples:\r\n\r\n```text\r\nmaxWidth-content \r\nborderColor-Card\r\nbackgroundColor-checked-Switch\r\noutlineStyle-Checkbox-error--focus\r\nborderColor-Button-secondary-outlined--hover--active\r\n```\r\n\r\nMost theme variables are composed of two segments, like the first two examples. However, more extended theme variables exist with multiple segments, such as the last three above.\r\n\r\nThe following pattern summarizes formally the name of a theme variable:\r\n\r\n```text\r\n<propertyName>-<part-or-aspect>-<ComponentId>-<variant>--<state>\r\n```\r\n\r\n**`propertyName`**\r\n\r\nEach theme variable starts with a name, identifying the visual attribute the particular theme property defines. This segment uses camel-casing, the counterpart of CSS style names with kebab-casing.\r\n\r\nFor example, the `maxWidth` property name has the same semantics as the `max-width` CSS style.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nThough there are exceptions, most theme variables are projected to the counterpart CSS style at the end of the day (using the same syntax and semantics). Also, only about one-tenth of CSS style names have their pair in xmlui.\r\n</Callout>\r\n\r\n**`ComponentId`**\r\n\r\nMost theme variables belong to a specific component (we call them *component-bound theme variables*). A `ComponentId` always starts with an uppercase letter and follows Pascal-casing. If no `ComponentId` is in the variable name, we call it an *app-bound theme variable*.\r\n\r\nFor example, the `borderColor-Card` name uses the `Card` as `ComponentId`, suggesting that it sets the border color of the `Card` component.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nWe call theme variables without a `ComponentId` segment *app-bound* variables, as they do not belong to a particular component. They set some visual traits that belong to the entire app or multiple components.\r\n</Callout>\r\n\r\n\r\n**`aspect-or-part`**\r\n\r\nWhen a particular theme variable belongs to a part (or specific visual aspect) of the component we name in `ComponentId`, this variable name segment refers to that part or aspect. For example, `backgroundColor-checked-Switch` refers to the background color to use when a `Switch` component is checked (turned on).\r\n\r\n**`variant`**\r\n\r\nSome components may have visual variants that use different style attributes. For example, a button has three different variants: `solid` (with background), `outlined` (with a border), and `ghost` (no border or background unless hovered). Adding the *variant* segment after `ComponentId` specifies the theme variable's particular variant.\r\n\r\nFor example, the `borderColor-Button-outlined` theme variable sets the border color only for the `outlined` variant of buttons and keeps the border color of others intact.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nSome components (such as `Button`) have multiple properties representing a variant (it also has a `themeColor`). In this case, you can add multiple `variant` segments to the theme variable.\r\n</Callout>\r\n\r\n\r\n**`state`**\r\n\r\nComponents may have different visual traits according to their state in the UI. For example, a button may have a different background color when the mouse hovers over it.\r\n\r\nThe `state` segment of a theme variable specifies the particular state of the component the theme variable affects; it starts with a double dash. For example, the `backgroundColor-Button-primary-solid--hover` theme variable sets the background color of a button with the `primary` theme color and `solid` variant when the mouse hovers over it.\r\n\r\nThis table summarizes the states you can use with theme variables:\r\n\r\n|Name|Description|\r\n|-|-|\r\n|`‑‑active`|The component is active. For example, the left mouse button is pressed while the pointer is over the component.|\r\n|`‑‑disabled`|The component is disabled; it does not accept user actions|\r\n|`‑‑focus`|The component has the keyboard focus and processes keypress-related events|\r\n|`‑‑hover`|Indicates the state when the mouse (pointer) hovers above the component's client area|\r\n\r\nYou can add multiple state segments to a theme variable to define a combined state. For example, the `‑‑active‑‑hover` combination defines a visual trait when the component is activated and hovered.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nYou can use your custom state names for your components.\r\n</Callout>\r\n\r\n## Theme Property Names [#property-names]\r\n\r\nYou can refer to numerous visual properties via the `propertyName` segment. The following table summarizes their names and descriptions:\r\n\r\n|Name|Description|\r\n|-|-|\r\n| **`backgroundColor`** | This property sets the background <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_COLOR }>color</SmartLink> of an element. | \r\n| **`borderBottom`** | This property is a shorthand to set an element's bottom border. It sets the values of `borderBottomWidth`, `borderBottomStyle` and `borderBottomColor`. | \r\n| **`borderBottomColor`** | Sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_COLOR }>color</SmartLink> of an element's bottom border. | \r\n| **`borderBottomStyle`** | Sets the line <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_BORDER_STYLE }>style</SmartLink> of an element's bottom border. | \r\n| **`borderBottomWidth`** | Sets the width of an element's bottom border. | \r\n| **`borderColor`** | This property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_COLOR }>color</SmartLink> of an element's border. | \r\n| **`borderEndEndRadius`** | This property defines a logical border radius on an element, which maps to the bottom-right radius with a left-to-right rendering direction and to the bottom-left radius with a right-to-left. | \r\n| **`borderEndStartRadius`** | This property defines a logical border radius on an element, which maps to the bottom-left radius with a left-to-right rendering direction and to the bottom-right radius with a right-to-left. | \r\n| **`borderHorizontal`** | This property sets the traits of the left and right borders. | \r\n| **`borderHorizontalColor`** | This property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_COLOR }>color</SmartLink> of the left and right borders. | \r\n| **`borderHorizontalStyle`** | This property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_BORDER_STYLE }>style</SmartLink> of the left and right borders. | \r\n| **`borderHorizontalWidth`** | This property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>width</SmartLink> of the left and right borders. | \r\n| **`borderRadius`** | This property property <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_BORDER_ROUNDING }>rounds</SmartLink> the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners. | \r\n| **`borderLeft`** | This property is a shorthand to set an element's left border. It sets the values of `borderLeftWidth`, `borderLeftStyle` and `borderLeftColor`. | \r\n| **`borderLeftColor`** | Sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_COLOR }>color</SmartLink> of an element's left border. | \r\n| **`borderLeftStyle`** | Sets the line <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_BORDER_STYLE }>style</SmartLink> of an element's left border. | \r\n| **`borderLeftWidth`** | Sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>width</SmartLink> of an element's left border. | \r\n| **`borderRight`** | This property is a shorthand to set an element's right border. It sets the values of `borderRightWidth`, `borderRightStyle` and `borderRightColor`. | \r\n| **`borderRightColor`** | Sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_COLOR }>color</SmartLink> of an element's right border. | \r\n| **`borderRightStyle`** | Sets the line <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_BORDER_STYLE }>style</SmartLink> of an element's right border. | \r\n| **`borderRightWidth`** | Sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>width</SmartLink> of an element's right border. | \r\n| **`borderStartEndRadius`** | This property defines a logical border radius on an element, which maps to the top-right radius with a left-to-right rendering direction and to the top-left radius with a right-to-left. | \r\n| **`borderStartStartRadius`** | This property defines a logical border radius on an element, which maps to the top-left radius with a left-to-right rendering direction and to the top-right radius with a right-to-left. | \r\n| **`borderStyle`** | This property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_BORDER_STYLE }>style</SmartLink> of an element's border. | \r\n| **`borderTop`** | This property is a shorthand to set an element's top border. It sets the values of `borderTopWidth`, `borderTopStyle` and `borderTopColor`. | \r\n| **`borderTopColor`** | Sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_COLOR }>color</SmartLink> of an element's top border. | \r\n| **`borderTopStyle`** | Sets the line <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_BORDER_STYLE }>style</SmartLink> of an element's top border. | \r\n| **`borderTopWidth`** | Sets the width of an element's top border. | \r\n| **`borderVertical`** | This property sets the traits of the top and bottom borders. | \r\n| **`borderVerticalColor`** | This property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_COLOR }>color</SmartLink> of the top and bottom borders. | \r\n| **`borderVerticalStyle`** | This property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_BORDER_STYLE }>style</SmartLink> of the top and bottom borders. | \r\n| **`borderVerticalWidth`** | This property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>width</SmartLink> of the top and bottom borders. | \r\n| **`borderWidth`** | This property sets the width of an element's border. | \r\n| **`boxShadow`** | This property adds shadow effects around an element's frame. | \r\n| **`fontFamily`** | Specifies a prioritized list of one or more <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_FONT_FAMILY }>font family</SmartLink> names and/or generic family names for the selected element. | \r\n| **`fontSize`** | This property sets the size of the font. | \r\n| **`fontStyle`** | This property sets whether a font should be styled with a normal, italic, or oblique face from its `fontFamily`. | \r\n| **`fontWeight`** | Sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_FONT_WEIGHT }>weight</SmartLink> (or boldness) of the font. | \r\n| **`fontStretch`** | This property selects a normal, condensed, or expanded face from a font. | \r\n| **`letterSpacing`** | This property sets the horizontal spacing behavior between text characters. This value is added to the natural spacing between characters while rendering the text. Positive values cause characters to spread farther apart, while negative values bring characters closer together. | \r\n| **`lineHeight`** | Sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>height</SmartLink> of a line box in which the text is displayed. | \r\n| **`marginBottom`** | This property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>height</SmartLink> of the margin area on the bottom of an element. | \r\n| **`marginHorizontal`** | This property combines setting the values of the `marginLeft` and `marginRight` properties. | \r\n| **`marginLeft`** | This property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>width</SmartLink> of the margin area on the left of an element. | \r\n| **`marginRight`** | This property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>width</SmartLink> of the margin area on the right of an element. | \r\n| **`marginTop`** | This property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>height</SmartLink> of the margin area on the top of an element. | \r\n| **`marginVertical`** | This property combines setting the values of the `marginTop` and `marginBottom` properties. | \r\n| **`maxHeight`** | This property sets the maximum <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>height</SmartLink> of an element. It prevents the used value of the height property from becoming larger than the value specified for `maxHeight`. | \r\n| **`maxWidth`** | This property sets the maximum <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>width</SmartLink> of an element. It prevents the used value of the width property from becoming larger than the value specified for `maxWidth`. | \r\n| **`minHeight`** | This property sets the minimum <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>height</SmartLink> of an element. It prevents the used value of the height property from becoming smaller than the value specified for `minHeight`. | \r\n| **`minWidth`** | This property sets the minimum <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>height</SmartLink> of an element. It prevents the used value of the width property from becoming smaller than the value specified for `minWidth`. | \r\n| **`outlineColor`** | This property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_COLOR }>color</SmartLink> of an element's outline. An outline is a line that is drawn around an element, outside the border. | \r\n| **`outlineOffset`** | This property sets the space between an outline and the edge or border of a focused element. | \r\n| **`outlineStyle`** | This property sets the style of an element's outline. | \r\n| **`outlineWidth`** | property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>width</SmartLink> of an element's outline. | \r\n| **`overflowX`** | This property sets what shows when content overflows an element's left and right edges. This may be nothing, a scroll bar, or the overflow content. | \r\n| **`overflowY`** | This property sets what shows when content overflows an element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content. | \r\n| **`paddingBottom`** | This property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>height</SmartLink> of the padding area on the bottom of an element. | \r\n| **`paddingHorizontal`** | This property combines setting the values of the `paddingLeft` and `paddingRight` properties. | \r\n| **`paddingLeft`** | This property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>width</SmartLink> of the padding area on the left of an element. | \r\n| **`paddingRight`** | This property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>width</SmartLink> of the padding area on the right of an element. | \r\n| **`paddingTop`** | This property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>height</SmartLink> of the padding area on the top of an element. | \r\n| **`paddingVertical`** | This property combines setting the values of the `paddingTop` and `paddingBottom` properties. | \r\n| **`textColor`** | This property sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_COLOR }>color</SmartLink> of the text used for rendering a component. |\r\n| **`textDecoration`** | This is a shorthand property that sets the appearance of decorative lines on text combining the `textDecorationLine`, `textDecorationColor`, `textDecorationStyle`, and `textDecorationThickness` properties. |\r\n| **`textDecorationColor`** | Sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_COLOR }>color</SmartLink> of decorations added to text by `textDecorationLine`. |\r\n| **`textDecorationLine`** | Sets the <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_TEXT_DECORATION }>kind</SmartLink> of decoration that is used on text in an element, such as an underline or overline. |\r\n| **`textDecorationStyle`** | Sets the style of the decoration line that is used on text in an element, such as a line-through, underline, or overline. |\r\n| **`textDecorationThickness`** | Sets the stroke <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>thickness</SmartLink> of the decoration line that is used on text in an element, such as a line-through, underline, or overline. |\r\n| **`textTransform`** | This property specifies how to capitalize an element's text. |\r\n| **`textUnderlineOffset`** | The offset <SmartLink href={ COMMON_VISUAL_PROPERTY_UNITS_SIZE }>distance</SmartLink> of an underlined text decoration line from its original position. |\r\n\r\n## App-bound Traits [#app-bound-traits]\r\n\r\nYou can use these app-bound theme variables within an app:\r\n\r\n| Theme Variable | Description |\r\n|-|-|\r\n| **`backgroundColor`** | This theme variable sets the background color of the xmlui app. |\r\n| **`backgroundColor‑dropdown‑item‑‑active`** | This property sets the background color of active elements of the items in dropdown components. |\r\n| **`backgroundColor‑dropdown‑item‑‑active‑‑hover`** | This property sets the background color of active, hovered elements of the items in dropdown components. |\r\n| **`backgroundColor‑dropdown‑item‑‑hover`** | This property sets the background color of hovered elements of the items in dropdown components. |\r\n| **`backgroundColor‑overlay`** | This property sets the background color of elements used as an overlay. |\r\n| **`backgroundColor‑attention`** | This theme variable sets the background color of components using the \"attention\" background color. |\r\n| **`backgroundColor‑‑disabled`** | This theme variable sets the background color of color of disabled compopnents. |\r\n| **`backgroundColor‑primary`** | This theme variable sets the background color of components using the \"primary\" background color. |\r\n| **`backgroundColor‑secondary`** | This theme variable sets the background color of components using the \"secondary\" background color. |\r\n| **`backgroundColor‑subtitle`** | This theme variable sets the background color of components using the \"subtitle\" variant. |\r\n| **`borderColor`** | This property sets the default border color of elements. |\r\n| **`borderColor‑‑disabled`** | This property sets the default border color of disabled elements. |\r\n| **`borderColor‑dropdown‑item`** | This property sets the default background color of items in dropdown components. |\r\n| **`borderRadius`** | You can specify the default rounding for all components that use border rounding. |\r\n| **`boxShadow‑md`** | A medium-size box shadow that gives an elevated look to a component. |\r\n| **`boxShadow‑spread`** | A box shadow that spreads around all edges of a component. |\r\n| **`boxShadow‑spread‑2‑xl`** | A box shadow that spreads around all edges of a component (more extended than `boxShadow‑spread‑2`). |\r\n| **`boxShadow‑spread‑2`** | A box shadow that spreads around all edges of a component (more extended than `boxShadow‑spread`). |\r\n| **`boxShadow‑xl`** | A box shadow that gives an elevated look to a component (bigger than `boxShadow-md`). |\r\n| **`boxShadow‑xxl`** | A box shadow that gives an elevated look to a component (bigger than `boxShadow-xl`). |\r\n| **`color-danger`** | This theme variable sets the base color shade for components using the \"danger\" color. |\r\n| **`color-info`** | This theme variable sets the base color shade for components using the \"info\" color. |\r\n| **`color-primary`** | This theme variable sets the base color shade for components using the primary color. |\r\n| **`color-secondary`** | This theme variable sets the base color shade for components using the secondary color. |\r\n| **`color-success`** | This theme variable sets the base color shade for components using the \"success\" color. |\r\n| **`color-surface`** | This theme variable sets the base color shade for surface areas (component backgrounds). |\r\n| **`color-warn`** | This theme variable sets the base color shade for components using the \"warning\" color. |\r\n| **`fontFamily‑monospace`** | This theme variable specifies the font family for text elements marked with \"monospace\". |\r\n| **`fontFamily‑sans‑serif`** | This theme variable specifies the font family for text elements marked with \"sans-serif\". |\r\n| **`fontSize`** | This theme variable sets the default font size of text elements. |\r\n| **`fontSize‑gigantic`** | This theme variable sets the font size bigger than `fontSize-large` and `fonstSize‑gigantic`. |\r\n| **`fontSize‑large`** | This theme variable sets the font size between `fontSize-medium` and `fonstSize‑gigantic`. |\r\n| **`fontSize‑medium`** | This theme variable sets the font size between `fontSize-normal` and `fonstSize-large`. |\r\n| **`fontSize‑normal`** | This theme variable sets the size of the default font. |\r\n| **`fontSize‑small`** | This theme variable sets the font size between `fontSize-smaller` and `fonstSize‑normal`. |\r\n| **`fontSize‑smaller`** | This theme variable sets the font size between `fontSize-small` and `fonstSize-tiny`. |\r\n| **`fontSize‑tiny`** | This theme variable sets the font size smaller than `fontSize-smaller`. |\r\n| **`fontWeight`** | This theme variable sets the weight of the default font. |\r\n| **`fontWeight‑bold`** | This theme variable sets the font's weight marked as bold (when using any text variant with a weight set to `bold`). |\r\n| **`fontWeight‑extra‑bold`** | This theme variable sets the font's weight marked as extra-bold (when using any text variant with a weight set to `extra-bold`). |\r\n| **`fontWeight‑light`** | This theme variable sets the font's weight marked as light (when using any text variant with a weight set to `light`). |\r\n| **`fontWeight‑normal`** | This theme variable sets the font's weight marked as normal (when using any text variant with a weight set to `normal`). |\r\n| **`fontWeight‑medium`** | This theme variable sets the font's weight marked as medium (when using any text variant with a weight set to `medium`). |\r\n| **`lineHeight‑loose`** | This theme variable sets the line heights of elements using the \"loose\" (meaning, \"bigger than relaxed\") trait. |\r\n| **`lineHeight‑none`** | This theme variable sets the line heights of elements using the \"none\" (meaning, \"no line-height specification\") trait. |\r\n| **`lineHeight‑normal`** | This theme variable sets the line heights of elements using the \"normal\" (meaning, \"bigger than snug but less than relaxed\") trait. |\r\n| **`lineHeight‑relaxed`** | This theme variable sets the line heights of elements using the \"relaxed\" (meaning, \"bigger than normal but less than loose\") trait. |\r\n| **`lineHeight‑snug`** | This theme variable sets the line heights of elements using the \"snug\" (meaning, \"bigger than none but less than normal\") trait. |\r\n| **`lineHeight‑tight`** | This theme variable sets the line heights of elements using the \"tight\" (meaning, \"bigger than none\") trait. |\r\n| **`maxWidth‑desktop`** | This theme variable sets the maximum width of the app's viewport, which makes it appear like a desktop. When the viewport width is larger than `maxWidth-tablet` and smaller than or equal to this value, the app considers the current view as `desktop`. |\r\n| **`maxWidth‑content`** | This theme variable sets the maximum width of the app's content. If the viewport is broader, the content will have margins to the left and right, keeping the width at the specified maximum. |\r\n| **`maxWidth‑desktop`** | This theme variable sets the maximum width of the app's viewport, which makes it appear like a desktop. When the viewport width is larger than `maxWidth-tablet` and smaller than or equal to this value, the app considers the current view as `desktop`. |\r\n| **`maxWidth‑desktop‑large`** | This theme variable sets the maximum width of the app's viewport, which makes it appear like a large desktop. When the viewport width is larger than `maxWidth-desktop` and smaller than or equal to this value, the app considers the current view as `large-desktop`. |\r\n| **`maxWidth‑landscape‑phone`** | This theme variable sets the maximum width of the app's viewport, which makes it appear like a phone in landscape mode. When the viewport width is larger than `maxWidth-phone` and smaller than or equal to this value, the app considers the current view as `landscape-phone`. |\r\n| **`maxWidth‑phone`** | This theme variable sets the maximum width of the app's viewport, which makes it appear like a phone in portrait mode. When the viewport width is smaller than or equal to this value, the app considers the current view as `phone`. |\r\n| **`maxWidth‑tablet`** | This theme variable sets the maximum width of the app's viewport, which makes it appear like a tablet (either in portrait or landscape mode). When the viewport width is larger than `maxWidth-landscape-phone` and smaller than or equal to this value, the app considers the current view as `tablet`. |\r\n| **`outlineColor‑‑focus`** | Set the color of the outline used for focused components. |\r\n| **`outlineOffset‑‑focus`** | Set the width of the outline used for focused components. |\r\n| **`outlineStyle‑‑focus`** | Set the style of the outline used for focused components. |\r\n| **`outlineWidth‑‑focus`** | Set the width of the outline used for focused components. |\r\n| **`textColor‑attention`** | This theme variable sets the color of text elements using the \"attention\" color. |\r\n| **`textColor‑‑disabled`** | This theme variable sets the color of disabled text elements. |\r\n| **`textColor‑primary`** | This theme variable sets the color of text elements using the \"primary\" color. |\r\n| **`textColor‑secondary`** | This theme variable sets the color of text elements using the \"secondary\" color. |\r\n| **`textColor‑subtitle`** | This theme variable sets the color of text elements using the \"subtitle\" variant. |\r\n\r\n## Colors in Themes\r\n\r\nXMLUI provides a palette of 77 colors for each theme out of the box. These colors are combinations of seven colors with 11 shades for each. \r\n\r\nThese theme variables represent the base colors:\r\n\r\n- `color-surface`: The color for the surface (background) areas\r\n- `color-primary`: The primary color of the app (buttons, badges, checkboxes, etc.)\r\n- `color-secondary`: The secondary color of the app (buttons, badges, checkboxes, etc.)\r\n- `color-warn`: The color to use for warnings\r\n- `color-danger`: The color for signing dangerous situations (for example, the color of a Delete button)\r\n- `color-success`: The color for signing success\r\n- `color-info`: The color for signing information\r\n\r\nWhen you set a particular base color, xmlui creates several shade variants (using 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, and 950 as prefixes) from the lightest to the darkest. It uses the specified base color for shade 500 and calculates five darker shades (400, 300, 200, 100, and 50, from lighter to darker) plus five lighter shades (600, 700, 800, 900, and 950, from darker to lighter).\r\n\r\nFor example, when you set the the `color-primary` variable to `#008000`, XMLUI creates these shades:\r\n\r\n<Playground\r\n  name=\"Custom primary color shades\"\r\n  components={[swatch, palette]}\r\n  app={`\r\n    <App>\r\n      <Theme color-primary=\"#008000\">\r\n        <Palette name=\"primary\" />\r\n      </Theme>\r\n    </App>\r\n  `}\r\n/>\r\n\r\nWhen selecting the primary color, choose one representing the middle shade (500). Otherwise, you may end up with an unuseful set of shades. For example, setting `surface-color` to `#001000` will create too many dark shades.\r\n<Playground\r\n  name=\"Unuseful primary color shades\"\r\n  components={[swatch, palette]}\r\n  app={`\r\n    <App>\r\n      <Theme color-primary=\"#001000\">\r\n        <Palette name=\"primary\" />\r\n      </Theme>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Default Color Shade Sets\r\n\r\nXMLUI declares these default color shade sets:\r\n\r\n**Surface**:\r\n\r\n<Playground\r\n  name=\"Surface Colors\"\r\n  components={[swatch, palette]}\r\n  app={`\r\n    <App>\r\n      <Palette name=\"surface\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n**Primary**:\r\n\r\n<Playground\r\n  name=\"Primary Colors\"\r\n  components={[swatch, palette]}\r\n  app={`\r\n    <App>\r\n      <Palette name=\"primary\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n**Secondary**:\r\n\r\n<Playground\r\n  name=\"Secondary Colors\"\r\n  components={[swatch, palette]}\r\n  app={`\r\n    <App>\r\n      <Palette name=\"secondary\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n**Warn**:\r\n\r\n<Playground\r\n  name=\"Warn Colors\"\r\n  components={[swatch, palette]}\r\n  app={`\r\n    <App>\r\n      <Palette name=\"warn\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n**Danger**:\r\n\r\n<Playground\r\n  name=\"Danger Colors\"\r\n  components={[swatch, palette]}\r\n  app={`\r\n    <App>\r\n      <Palette name=\"danger\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n**Success**:\r\n\r\n<Playground\r\n  name=\"Success Colors\"\r\n  components={[swatch, palette]}\r\n  app={`\r\n    <App>\r\n      <Palette name=\"success\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n**Info**:\r\n\r\n<Playground\r\n  name=\"Info Colors\"\r\n  components={[swatch, palette]}\r\n  app={`\r\n    <App>\r\n      <Palette name=\"info\" />\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Default Text Colors\r\n\r\n- `textColor-primary`: The text color used by components that build on the primary color\r\n- `textColor-secondary`: The text color used by components that build on the secondary color\r\n- `textColor-attention`: Accented text color\r\n- `textColor-subtitle`: Text color of text with the \"subtitle\" variant\r\n- `textColor--disabled`: Text color representing the disabled state of a component\r\n\r\n<Playground\r\n  name=\"Default Text Colors\"\r\n  components={[swatch]}\r\n  app={`\r\n  <App>\r\n    <HStack>\r\n      <Text width=\"180px\" variant=\"strong\">textColor-primary:</Text>\r\n      <Text color=\"$textColor-primary\">This is an example text</Text>\r\n    </HStack>\r\n\r\n    <HStack>\r\n      <Text width=\"180px\" variant=\"strong\">textColor-secondary:</Text>\r\n      <Text color=\"$textColor-secondary\">This is an example text</Text>\r\n    </HStack>\r\n\r\n    <HStack>\r\n      <Text width=\"180px\" variant=\"strong\">textColor-attention:</Text>\r\n      <Text color=\"$textColor-attention\">This is an example text</Text>\r\n    </HStack>\r\n\r\n    <HStack>\r\n      <Text width=\"180px\" variant=\"strong\">textColor-subtitle:</Text>\r\n      <Text color=\"$textColor-subtitle\">This is an example text</Text>\r\n    </HStack>\r\n\r\n    <HStack>\r\n      <Text width=\"180px\" variant=\"strong\">textColor--disabled:</Text>\r\n      <Text color=\"$textColor--disabled\">This is an example text</Text>\r\n    </HStack>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### Default Background Colors\r\n\r\n- `backgroundColor`: The default background color for all components\r\n- `backgroundColor-primary`: The background color used by components that build on the secondary color\r\n- `backgroundColor-secondary`: The background color used by components that build on the secondary color\r\n- `backgroundColor-attention`: The background color used by components that build on the attention color\r\n- `backgroundColor--disabled`: The background color representing the disabled state of a component\r\n- `backgroundColor--selected`: The background color representing the selected state of a component\r\n- `backgroundColor-overlay`: The background color of overlaid components\r\n- `backgroundColor-dropdown-item--hover`: The background color of hovered items in dropdown containers\r\n- `backgroundColor-dropdown-item--active`: The background color of active items in dropdown containers\r\n\r\n<Playground\r\n  name=\"Default Background Colors\"\r\n  components={[swatch]}\r\n  app={`\r\n    <App>\r\n      <FlowLayout>\r\n          <Swatch color=\"$backgroundColor\" width=\"50%\" />\r\n          <Swatch color=\"$backgroundColor-primary\" width=\"50%\" />\r\n          <Swatch color=\"$backgroundColor-secondary\" width=\"50%\" />\r\n          <Swatch color=\"$backgroundColor-attention\" width=\"50%\" />\r\n          <Swatch color=\"$backgroundColor--disabled\" width=\"50%\" />\r\n          <Swatch color=\"$backgroundColor--selected\" width=\"50%\" />\r\n          <Swatch color=\"$backgroundColor-overlay\" width=\"50%\" />\r\n          <Swatch color=\"$backgroundColor-dropdown-item--hover\" width=\"50%\" />\r\n          <Swatch color=\"$backgroundColor-dropdown-item--active\" width=\"50%\" />\r\n      </FlowLayout>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Validation Colors\r\n\r\nThese colors represent validation states:\r\n- `color-info`: Color of components with informational messages\r\n- `color-valid`: Color signing valid state\r\n- `color-warning`: Color of warning\r\n- `color-error`: Color signing some error\r\n\r\n<Playground\r\n  name=\"Validation Colors\"\r\n  components={[swatch]}\r\n  app={`\r\n    <App>\r\n      <FlowLayout>\r\n        <Swatch color=\"$color-info\" width=\"25%\" textColor=\"$color-surface-50\" />\r\n        <Swatch color=\"$color-valid\" width=\"25%\" textColor=\"$color-surface-50\" />\r\n        <Swatch color=\"$color-warning\" width=\"25%\" textColor=\"$color-surface-50\" />\r\n        <Swatch color=\"$color-error\" width=\"25%\" textColor=\"$color-surface-50\" />\r\n      </FlowLayout>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Fonts\r\n\r\nYou can influence the default font settings of a particular theme with the following theme variables:\r\n\r\n### Font Family\r\n\r\nThese theme variables set the default font styles:\r\n- `fontFamily`: The default font family used in the app\r\n- `fontFamily-sans-serif`: The default sans-serif font family used in the app\r\n- `fontFamily-monospace`: The default monospace font family used in the app\r\n\r\n<Playground\r\n  name=\"Font Family\"\r\n  app={`\r\n  <App>\r\n    <HStack>\r\n      <Text width=\"200px\" variant=\"strong\">Default font family:</Text>\r\n      <Text fontFamily=\"$fontFamily-sans-serif\">This is an example text</Text>\r\n    </HStack>\r\n\r\n    <HStack>\r\n      <Text width=\"200px\" variant=\"strong\">Sans serif font family:</Text>\r\n      <Text fontFamily=\"$fontFamily-sans-serif\">This is an example text</Text>\r\n    </HStack>\r\n\r\n    <HStack>\r\n      <Text width=\"200px\" variant=\"strong\">Monospace font family:</Text>\r\n      <Text fontFamily=\"$fontFamily-monospace\">This is an example text</Text>\r\n    </HStack>\r\n  </App>\r\n  `}\r\n/>\r\n\r\n### Line Height\r\n\r\nThese theme variables define a set of line heights:\r\n\r\n<Playground\r\n  name=\"Line Height\"\r\n  app={`\r\n    <App>\r\n      <HStack verticalAlignment=\"center\">\r\n        <Text width=\"180px\" variant=\"strong\">lineHeight-none:</Text>\r\n        <Text lineHeight=\"$lineHeight-none\" backgroundColor=\"$color-surface-300\">This is an example text</Text>\r\n      </HStack>\r\n\r\n      <HStack verticalAlignment=\"center\">\r\n        <Text width=\"180px\" variant=\"strong\">lineHeight-tight:</Text>\r\n        <Text lineHeight=\"$lineHeight-tight\" backgroundColor=\"$color-surface-300\">This is an example text</Text>\r\n      </HStack>\r\n\r\n      <HStack verticalAlignment=\"center\">\r\n        <Text width=\"180px\" variant=\"strong\">lineHeight-snug:</Text>\r\n        <Text lineHeight=\"$lineHeight-snug\" backgroundColor=\"$color-surface-300\">This is an example text</Text>\r\n      </HStack>\r\n\r\n      <HStack verticalAlignment=\"center\">\r\n        <Text width=\"180px\" variant=\"strong\">lineHeight-normal:</Text>\r\n        <Text lineHeight=\"$lineHeight-normal\" backgroundColor=\"$color-surface-300\">This is an example text</Text>\r\n      </HStack>\r\n\r\n      <HStack verticalAlignment=\"center\">\r\n        <Text width=\"180px\" variant=\"strong\">lineHeight-relaxed:</Text>\r\n        <Text lineHeight=\"$lineHeight-relaxed\" backgroundColor=\"$color-surface-300\">This is an example text</Text>\r\n      </HStack>\r\n\r\n      <HStack verticalAlignment=\"center\">\r\n        <Text width=\"180px\" variant=\"strong\">lineHeight-loose:</Text>\r\n        <Text lineHeight=\"$lineHeight-loose\" backgroundColor=\"$color-surface-300\">This is an example text</Text>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Font Size\r\n\r\nThe `fontSize` theme variables allow you to set your themes' normal font size (`fontSize-normal`). You can use this set of theme variables to define font sizes relative to `fontSize`:\r\n\r\n<Playground\r\n  name=\"Font Size\"\r\n  app={`\r\n    <App>\r\n      <HStack verticalAlignment=\"center\">\r\n        <Text width=\"160px\" variant=\"strong\">fontSize-tiny:</Text>\r\n        <Text fontSize=\"$fontSize-tiny\">This is an example text</Text>\r\n      </HStack>\r\n\r\n      <HStack verticalAlignment=\"center\">\r\n        <Text width=\"160px\" variant=\"strong\">fontSize-smaller:</Text>\r\n        <Text fontSize=\"$fontSize-smaller\">This is an example text</Text>\r\n      </HStack>\r\n\r\n      <HStack verticalAlignment=\"center\">\r\n        <Text width=\"160px\" variant=\"strong\">fontSize-small:</Text>\r\n        <Text fontSize=\"$fontSize-small\">This is an example text</Text>\r\n      </HStack>\r\n\r\n      <HStack verticalAlignment=\"center\">\r\n        <Text width=\"160px\" variant=\"strong\">fontSize-normal:</Text>\r\n        <Text fontSize=\"$fontSize-normal\">This is an example text</Text>\r\n      </HStack>\r\n\r\n      <HStack verticalAlignment=\"center\">\r\n        <Text width=\"160px\" variant=\"strong\">fontSize-medium:</Text>\r\n        <Text fontSize=\"$fontSize-medium\">This is an example text</Text>\r\n      </HStack>\r\n\r\n      <HStack verticalAlignment=\"center\">\r\n        <Text width=\"160px\" variant=\"strong\">fontSize-large:</Text>\r\n        <Text fontSize=\"$fontSize-large\">This is an example text</Text>\r\n      </HStack>\r\n\r\n      <HStack verticalAlignment=\"center\">\r\n        <Text width=\"160px\" variant=\"strong\">fontSize-gigantic:</Text>\r\n        <Text fontSize=\"$fontSize-gigantic\">This is an example text</Text>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n### Font Weight\r\n\r\nThe `fontWeight` theme variables allow you to set your themes' normal font weight (`fontWeight-normal`). You can use this set of theme variables to define font sizes relative to `fontWeight`:\r\n\r\n<Playground\r\n  name=\"Font Weight\"\r\n  app={`\r\n    <App>\r\n      <HStack>\r\n        <Text width=\"200px\" variant=\"strong\">fontWeight-light:</Text>\r\n        <Text fontWeight=\"$fontWeight-light\">This is an example text</Text>\r\n      </HStack>\r\n\r\n      <HStack>\r\n        <Text width=\"200px\" variant=\"strong\">fontWeight-normal:</Text>\r\n        <Text fontWeight=\"$fontWeight-normal\">This is an example text</Text>\r\n      </HStack>\r\n\r\n      <HStack>\r\n        <Text width=\"200px\" variant=\"strong\">fontWeight-medium:</Text>\r\n        <Text fontWeight=\"$fontWeight-medium\">This is an example text</Text>\r\n      </HStack>\r\n\r\n      <HStack>\r\n        <Text width=\"200px\" variant=\"strong\">fontWeight-bold:</Text>\r\n        <Text fontWeight=\"$fontWeight-bold\">This is an example text</Text>\r\n      </HStack>\r\n\r\n      <HStack>\r\n        <Text width=\"200px\" variant=\"strong\">fontWeight-extra-bold:</Text>\r\n        <Text fontWeight=\"$fontWeight-extra-bold\">This is an example text</Text>\r\n      </HStack>\r\n    </App>\r\n  `}\r\n/>\r\n\r\n## Shadows\r\n\r\nXMLUI defines a few stock shadow resources:\r\n\r\n<Playground\r\n  name=\"Shadows\"\r\n  height={260}\r\n  app={shadowSizes}\r\n/>\r\n\r\n## Spacing\r\n\r\nXMLUI uses a relative scale with spacing (paddings, margins, gaps, etc.). This scale uses a unit defined with `space-base`, which you can set in your theme. When referring to a particular spacing, you can use values like `space-0`, `space-1`, ..., `space-12`, ..., and `space-96`, as the following example shows:\r\n\r\n<Playground\r\n  name=\"Spacings\"\r\n  app={spacingSizes}\r\n/>\r\n\r\n## Spacing in Layout Containers [#spacing-in-layout-containers]\r\n\r\nBesides the spacing theme variables, layout containers provide a few others that can be themed. Use these theme variables to provide consistent spacing with layout containers.\r\n\r\n**Gaps**:\r\n- `gap-none`: No gap\r\n- `gap-tight`: Less gap than the normal (layout container defaults)\r\n- `gap-normal`: Default layout container gap\r\n- `gap-loose`: More gap than the normal\r\n\r\n**Padding**:\r\n- `padding-none`: No padding\r\n- `padding-tight`: Less padding than the normal (layout container defaults)\r\n- `padding-normal`: Default layout container padding\r\n- `padding-loose`: More padding than the normal\r\n\r\n**General spacing** (padding, gaps, other spacing):\r\n- `padding-none`: No spacing\r\n- `padding-tight`: Less spacing than the normal\r\n- `padding-normal`: Default spacing\r\n- `padding-loose`: More spacing than the normal\r\n",
  "styles-and-themes/themes":"import themeGallery from \"./samples/theme-gallery.xmlui\";\r\n\r\n# Themes [#themes-definitions]\r\n\r\nXMLUI ships with several built-in themes; you can discover them in this document.\r\n\r\n## xmlui\r\n\r\nThis is the framework's default theme. We loved the simple and beautiful UI style used in the <SmartLink href=\"https://tabler.io/\">Tabler.io</SmartLink> project by <SmartLink href=\"https://github.com/codecalm\">Paweł Kuna</SmartLink>, so we used it in this theme.\r\n\r\nThis theme is available in several color variants through these theme IDs:\r\n- `xmlui` (default theme with blueish colors)\r\n- `xmlui-green`\r\n- `xmlui-gray`\r\n- `xmlui-orange`\r\n- `xmlui-purple`\r\n- `xmlui-cyan`\r\n- `xmlui-red`\r\n\r\n<Playground\r\n  fixedTheme={true}\r\n  name=\"Theme: xmlui (light)\"\r\n  app={`\r\n    <Theme tone=\"light\" themeId=\"xmlui\">\r\n      <App>\r\n        <ThemeGallery />\r\n      </App>\r\n    </Theme>\r\n  `}\r\n  components={[themeGallery]}\r\n/>\r\n\r\n<Playground\r\n  fixedTheme={true}\r\n  name=\"Theme: xmlui (dark)\"\r\n  app={`\r\n    <Theme tone=\"dark\" themeId=\"xmlui\">\r\n      <App>\r\n        <ThemeGallery />\r\n      </App>\r\n    </Theme>\r\n  `}\r\n  components={[themeGallery]}\r\n/>\r\n\r\n### `xmlui-green`\r\n\r\n<Playground\r\n  fixedTheme={true}\r\n  name=\"Theme: xmlui-green (light)\"\r\n  app={`\r\n    <Theme tone=\"light\" themeId=\"xmlui-green\">\r\n      <App>\r\n        <ThemeGallery />\r\n      </App>\r\n    </Theme>\r\n  `}\r\n  components={[themeGallery]}\r\n/>\r\n\r\n<Playground\r\n  fixedTheme={true}\r\n  name=\"Theme: xmlui-green (dark)\"\r\n  app={`\r\n    <Theme tone=\"dark\" themeId=\"xmlui-green\">\r\n      <App>\r\n        <ThemeGallery />\r\n      </App>\r\n    </Theme>\r\n  `}\r\n  components={[themeGallery]}\r\n/>\r\n\r\n### `xmlui-gray`\r\n\r\n<Playground\r\n  fixedTheme={true}\r\n  name=\"Theme: xmlui-gray (light)\"\r\n  app={`\r\n    <Theme tone=\"light\" themeId=\"xmlui-gray\">\r\n      <App>\r\n        <ThemeGallery />\r\n      </App>\r\n    </Theme>\r\n  `}\r\n  components={[themeGallery]}\r\n/>\r\n\r\n<Playground\r\n  fixedTheme={true}\r\n  name=\"Theme: xmlui-gray (dark)\"\r\n  app={`\r\n    <Theme tone=\"dark\" themeId=\"xmlui-gray\">\r\n      <App>\r\n        <ThemeGallery />\r\n      </App>\r\n    </Theme>\r\n  `}\r\n  components={[themeGallery]}\r\n/>\r\n\r\n### `xmlui-orange`\r\n\r\n<Playground\r\n  fixedTheme={true}\r\n  name=\"Theme: xmlui-orange (light)\"\r\n  app={`\r\n    <Theme tone=\"light\" themeId=\"xmlui-orange\">\r\n      <App>\r\n        <ThemeGallery />\r\n      </App>\r\n    </Theme>\r\n  `}\r\n  components={[themeGallery]}\r\n/>\r\n\r\n<Playground\r\n  fixedTheme={true}\r\n  name=\"Theme: xmlui-orange (dark)\"\r\n  app={`\r\n  <Theme tone=\"dark\" themeId=\"xmlui-orange\">\r\n      <ThemeGallery />\r\n    </Theme>\r\n  `}\r\n  components={[themeGallery]}\r\n/>\r\n\r\n### `xmlui-purple`\r\n\r\n<Playground\r\n  fixedTheme={true}\r\n  name=\"Theme: xmlui-purple (light)\"\r\n  app={`\r\n    <Theme tone=\"light\" themeId=\"xmlui-purple\">\r\n      <App>\r\n        <ThemeGallery />\r\n      </App>\r\n    </Theme>\r\n  `}\r\n  components={[themeGallery]}\r\n/>\r\n\r\n<Playground\r\n  fixedTheme={true}\r\n  name=\"Theme: xmlui-purple (dark)\"\r\n  app={`\r\n    <Theme tone=\"dark\" themeId=\"xmlui-purple\">\r\n      <App>\r\n        <ThemeGallery />\r\n      </App>\r\n    </Theme>\r\n  `}\r\n  components={[themeGallery]}\r\n  height={540}\r\n/>\r\n\r\n### `xmlui-cyan`\r\n\r\n<Playground\r\n  fixedTheme={true}\r\n  name=\"Theme: xmlui-cyan (light)\"\r\n  app={`\r\n    <Theme tone=\"light\" themeId=\"xmlui-cyan\">\r\n      <App>\r\n        <ThemeGallery />\r\n      </App>\r\n    </Theme>\r\n  `}\r\n  components={[themeGallery]}\r\n/>\r\n\r\n<Playground\r\n  fixedTheme={true}\r\n  name=\"Theme: xmlui-cyan (dark)\"\r\n  app={`\r\n    <Theme tone=\"dark\" themeId=\"xmlui-cyan\">\r\n      <App>\r\n        <ThemeGallery />\r\n      </App>\r\n    </Theme>\r\n  `}\r\n  components={[themeGallery]}\r\n/>\r\n\r\n### `xmlui-red`\r\n\r\n<Playground\r\n  fixedTheme={true}\r\n  name=\"Theme: xmlui-red (light)\"\r\n  app={`\r\n    <Theme tone=\"light\" themeId=\"xmlui-red\">\r\n      <App>\r\n        <ThemeGallery />\r\n      </App>\r\n    </Theme>\r\n  `}\r\n  components={[themeGallery]}\r\n/>\r\n\r\n<Playground\r\n  fixedTheme={true}\r\n  name=\"Theme: xmlui-red (dark)\"\r\n  app={`\r\n    <Theme tone=\"dark\" themeId=\"xmlui-red\">\r\n      <App>\r\n        <ThemeGallery />\r\n      </App>\r\n    </Theme>\r\n  `}\r\n  components={[themeGallery]}\r\n/>\r\n",
  "theme-devs":"import { Callout } from 'nextra/components'\r\n\r\n# Theme Development\r\n\r\n<Callout type=\"warning\">\r\nThis page is under construction.\r\n</Callout>",
  "xmlui-architecture":"import { Callout } from 'nextra/components'\r\nimport { HELLO_XMLUI } from '../meta/downloads'\r\n\r\n# Understanding the XMLUI Architecture\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nXMLUI has a straightforward architecture based on the reactive principle.\r\n</Callout>\r\n\r\nXMLUI takes your app's source files and precompiles them into an internal definition of the app. The framework's rendering engine uses this representation to render your app following this loop:\r\n\r\n1. The engine displays the app in its initial state according to the markup.\r\n2. The app waits for a system or user event. The engine runs the corresponding event handler when such an event is triggered.\r\n3. While the event handler runs, the engine detects state changes. If such a change occurs (and when the event handler completes), the engine initiates a UI refresh.\r\n4. This refresh process updates the part (and only that part) of the UI affected by the change.\r\n5. The loop starts again at Step 2 until the app is closed.\r\n\r\nYou do not need to know more about the engine's internals than it leverages this loop. You can consider XMLUI to be a **rendering black box**.\r\n\r\nAs the input, you can feed this black box with these items:\r\n- **Source code**: markup with optional inline code + optional code-behind files.\r\n- **Resources**: Images, logos, fonts, data files, etc., the app uses as external resources for the UI and its logic.\r\n- **Additional components (component libraries)**: third-party components used in your app\r\n- **Additional themes**: New themes besides the ones shipped with the framework\r\n- **Configuration settings**: Optional configuration settings (for example, the URLs of some backends utilized by the app for data retrieval or persistence, etc.)\r\n\r\n## XMLUI Apps\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nXMLUI does not require a build. A web server can immediately serve your app from the framework's core files and your app's source code.\r\n</Callout>\r\n\r\nAn XMLUI app uses **markup files** (with the `.xmlui` extension) and optional accompanying **code-behind files** (with the `.xmlui.xs` extension). \r\n\r\nBy convention, your app's primary file is `Main.xmlui` within the app's root folder (beside `index.html`). If your app is simple, `Main.xmlui` is the only source file. If the app is more complex, it may leverage app-specific components in separate files (by convention, within the `components` folder).\r\n\r\nMarkup files use XML/XHTML syntax, while code-behind files contain scripts (a subset of JavaScript). XMLUI is responsible for combining them into a working app.\r\n\r\n### Hello, XMLUI!\r\n\r\nExamine a lightweight app sample's structure and execution to get acquainted with the simplicity of an XMLUI app!\r\n\r\nWhen you create a simple app, its only source code file is `Main.xmlui` with this markup:\r\n\r\n```xmlui copy filename=\"Main.xmlui\"\r\n<App>\r\n  Hello, XMLUI!\r\n</App>\r\n```\r\n\r\nThe app (you can download the zipped version from <DownloadLink href={HELLO_XMLUI}>here</DownloadLink>) contains these files:\r\n\r\n| File/Folder | Description |\r\n| --- | --- |\r\n| **`index.html`** | The default webpage to display |\r\n| **`Main.xmlui`** | The XMLUI app's entry point |\r\n| **`resources`** | The folder with static app resources (`favicon.ico`, `xmlui-logo.svg`, `xmlui-logo-inverted.svg`) |\r\n| **`xmlui`** | The folder with XMLUI core framework (`xmlui-standalone.umd.js`) |\r\n| **`start.bat`** | The batch file to start the `http-server` utility (assumes Node.js is installed) on Windows |\r\n| **`start.sh`** | The bash script file to start the `http-server` utility (assumes Node.js is installed) on Mac and Linux |\r\n\r\nThe `index.html` file is straightforward. It loads and starts the framework (`xmlui-standalone.umd.js`):\r\n\r\n```html copy filename=\"index.html\" {6}\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <script src=\"xmlui/xmlui-standalone.umd.js\"></script>\r\n  </head>\r\n  <body>\r\n  </body>\r\n</html>\r\n```\r\n\r\nThe framework fetches the `Main.xmlui` file (it gets it from the root folder), tries to fetch its optional code-behind file (`Main.xmlui.xs`), compiles the app, and displays it.\r\n\r\n### Loading Application Files\r\n\r\nAn app running in the browser cannot check the app folder's structure on the web server. When fetching files, it asks the server for a particular file (using the corresponding URL in the request). The server delivers the requested file or retrieves a 404 (Not Found) status code.\r\n\r\nAfter XMLUI loads the `Main.xmlui` file and compiles it, it has a list of unknown components (components not registered with XMLUI or any third-party component libraries). XMLUI considers them app-specific components and tries to load them from the `components` folder using a naming convention. For example, if the component is named `CustomerForm`, the engine fetches it from the `components/CustomerForm.xmlui` and `components/CustomerForm.xmlui.xs` files.\r\n\r\nIf the referenced component cannot be found, the app stops with an error message; otherwise, it registers (and caches) the loaded component.\r\n\r\nXMLUI applies the same strategy recursively (as app-specific components may utilize other app-specific components) to obtain the entire app. The engine loads resources, themes, data files, etc., with a similar strategy.\r\n\r\n<Callout type=\"info\" emoji=\"📔\">\r\nThis behavior may cause your browser's console to display \"Failed to load resource 404 (Not Found)\" messages. Most messages refer to `.xmlui.xs` files, as the engine does not know whether a code-behind file exists. \r\n</Callout>\r\n\r\n### The Configuration File\r\n\r\nXMLUI apps run without any particular configuration settings. However, you can describe these in the configuration file when you want to alter the default behavior or set app-specific configuration values. \r\n\r\nAt startup, XMLUI fetches the `config.json` file. If it finds the file, it sets up the app accordingly; otherwise, it uses the default configuration.\r\n\r\n### App Folder Structure\r\n\r\nEven the more complex applications follow this simple app structure. This table summarizes the files and folders your app may have:\r\n\r\n| File/Folder | Description |\r\n| --- | --- |\r\n| **`index.html`** | The default webpage to display |\r\n| **`Main.xmlui`** | The XMLUI app's entry point |\r\n| **`Main.xmlui.xs`** | (*Optional*) Code-behind file for the app's entry point |\r\n| **`components`** | (*Optional*) The folder with the app's XMLUI components (empty) |\r\n| **`resources`** | (*Optional*) The folder with static app resources like images, logos, icons, etc. |\r\n| **`themes`** | (*Optional*) The folder theme files. |\r\n| **`xmlui`** | The folder with XMLUI core framework, optional features, emulated APIs, and third-party components |\r\n| **`config.json`** | (*Optional*) The app configuration file |\r\n| **`mockApi.js`** | (*Optional*) The service worker for emulated backend |\r\n| **`start.bat`** | (*Optional*) The batch file to start the `http-server` utility (assumes Node.js is installed) on Windows |\r\n| **`start.sh`** | (*Optional*) The bash script file to start the `http-server` utility (assumes Node.js is installed) on Mac and Linux |\r\n\r\nAll folders except `xmlui` are optional as your app may not contain resources, app-specific components, or themes.\r\n\r\n## Deploying XMLUI Apps\r\n\r\nDeploying an XMLUI app is straightforward. You simply copy the app folder into your web server's public folder (the folder that serves static files), and your app is ready to use.\r\n\r\nThis approach works quickly in a company intranet's production environment but may not be adequate on the public web (because of startup time or download size).\r\n\r\nThe framework supports using XMLUI apps with optimization after a quick build process. This activity removes unused components (either components part of XMLUI or a third-party component library not leveraged in your app) and adds some code optimizations to improve startup.\r\n\r\n<Callout type=\"warning\">\r\nWe are still working on the build tools that optimize the application structure. When these tools are ready, we update this part of the documentation.\r\n</Callout>\r\n\r\n## Developing Apps with HMR\r\n\r\nXMLUI supports using a development environment (with a similar structure to the \"no-build\" mode, which has some extra files), which supports hot module reloading (HMR). Optionally, use this mode and its build process to create optimized files.\r\n\r\n<Callout type=\"warning\">\r\nWe are still working on the HMR environment and building tools that optimize the application structure. When these tools are ready, we update this part of the documentation.\r\n</Callout>\r\n\r\n## Extensibility\r\n\r\nXMLUI is extensible. Besides the components, resources, and themes shipped with the framework, you can extend an app with several artifacts:\r\n- Custom (third-party) components, component libraries\r\n- Custom themes\r\n- Resources\r\n- Icons and icon libraries\r\n- JavaScript libraries\r\n\r\nExtending XMLUI is as simple as one of these methods:\r\n- Adding a file to your application (for example, a new theme to the `themes` folder)\r\n- Modifying the app's configuration (refer to a particular custom resource or changing a default resource, for example, the \"email\" icon with your own)\r\n- Loading extra script files in the `index.html` file.\r\n\r\n<Callout type=\"info\" emoji=\"💡\">\r\nOur team is working on extensibility tools to support the community in contributing to XMLUI with custom extensions.\r\n</Callout>\r\n"
}

const transformedData = Object.entries(data).map(([key, value]) => ({ key, value }));
export default transformedData;
