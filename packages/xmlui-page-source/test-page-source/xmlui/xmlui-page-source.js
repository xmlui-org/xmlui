(function(r,c){typeof exports=="object"&&typeof module<"u"?module.exports=c(require("react/jsx-runtime"),require("react"),require("xmlui")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","react","xmlui"],c):(r=typeof globalThis<"u"?globalThis:r||self,r["xmlui-page-source"]=c(r.jsxRuntime,r.React,r.xmlui))})(this,function(r,c,w){"use strict";const R={autoLoad:!0};function q({autoLoad:e=R.autoLoad,onSourceLoaded:l,onError:i,updateState:a,componentName:p,uid:g}){const[A,t]=c.useState(!1),[y,m]=c.useState(""),d=c.useRef(null),x=async()=>{var f,h;console.log("PageSource fetchSourceCode - trying to find current context source"),t(!0),m("");try{const o=d.current;if(!o)throw new Error("Container element not found");console.log("PageSource container element:",o),console.log("PageSource container parent:",o.parentElement),console.log("PageSource container parent class:",(f=o.parentElement)==null?void 0:f.className),console.log("PageSource container parent attributes:",(h=o.parentElement)==null?void 0:h.getAttributeNames());let n=o.parentElement,P=0;for(;n&&P<10;)console.log(`PageSource DOM level ${P}:`,n.tagName,n.className),console.log(`PageSource DOM level ${P} attributes:`,n.getAttributeNames()),n.getAttributeNames().forEach(E=>{console.log(`  - ${E}:`,n.getAttribute(E))}),n=n.parentElement,P++;console.log("PageSource trying different selectors:"),console.log("- [data-xmlui-component]:",document.querySelectorAll("[data-xmlui-component]").length),console.log("- [data-component]:",document.querySelectorAll("[data-component]").length),console.log("- [data-name]:",document.querySelectorAll("[data-name]").length),console.log('- [class*="xmlui"]:',document.querySelectorAll('[class*="xmlui"]').length),console.log('- [class*="component"]:',document.querySelectorAll('[class*="component"]').length),console.log('- [class*="page"]:',document.querySelectorAll('[class*="page"]').length),console.log('- [class*="app"]:',document.querySelectorAll('[class*="app"]').length);const L=o.closest('[class*="xmlui-page"], [class*="page-root"], [class*="page"]'),b=o.closest('[class*="xmlui-component"], [class*="component-root"], [class*="component"]'),U=o.closest('[class*="xmlui-app"], [class*="app-root"], [class*="app"]');console.log("PageSource context check:"),console.log("- Page ancestor found:",!!L),console.log("- Component ancestor found:",!!b),console.log("- App ancestor found:",!!U);let s="";if(p?(console.log("PageSource using provided component name:",p),s=`components/${p}.xmlui`):(console.log("PageSource uid:",g),g&&g.includes("test")?(s="components/Test.xmlui",console.log("PageSource using Test component source URL based on uid:",s)):(s="Main.xmlui",console.log("PageSource using Main.xmlui source URL:",s))),!s)throw new Error("Could not determine source URL for current context");console.log("PageSource final source URL:",s);const u=await fetch(s);if(console.log("PageSource response status:",u.status),console.log("PageSource response URL:",u.url),!u.ok)throw new Error(`HTTP ${u.status}: ${u.statusText}`);const S=await u.text();console.log("PageSource fetched content length:",S.length),console.log("PageSource fetched content preview:",S.substring(0,100)),a==null||a({value:S,isLoading:!1,error:""}),l==null||l(S)}catch(o){const n=o instanceof Error?o.message:"Failed to load source code";m(n),a==null||a({error:n,isLoading:!1}),i==null||i(n),console.error("Error loading source code:",o)}finally{t(!1)}};return c.useEffect(()=>{e&&x()},[e]),r.jsx("div",{ref:d,style:{display:"none"}})}const C=w.createMetadata({description:"PageSource component that fetches and exposes the source code of the current page/component",status:"experimental",props:{autoLoad:{description:"Whether to automatically load the source code on mount",isRequired:!1,type:"boolean",defaultValue:!0},onSourceLoaded:{description:"Callback function called when source code is loaded",isRequired:!1,type:"function"},onError:{description:"Callback function called when an error occurs",isRequired:!1,type:"function"}}});return{namespace:"XMLUIExtensions",components:[w.createComponentRenderer("PageSource",C,({node:e,extractValue:l,updateState:i,appContext:a})=>{var y,m,d,x,f,h;console.log("PageSource renderer called with node:",e),console.log("PageSource renderer node.parent:",e.parent),console.log("PageSource renderer node.parent?.type:",(y=e.parent)==null?void 0:y.type),console.log("PageSource renderer node.parent?.name:",(m=e.parent)==null?void 0:m.name);const p=l.asOptionalBoolean((d=e.props)==null?void 0:d.autoLoad,!0),g=l((x=e.props)==null?void 0:x.onSourceLoaded),A=l((f=e.props)==null?void 0:f.onError);let t=null;if(e.parent&&e.parent.type==="Component"&&(t=e.parent.name,console.log("PageSource renderer found component name from parent:",t)),!t&&e.parent&&e.parent.type==="Page"){const o=(h=e.parent.props)==null?void 0:h.url;if(o){const n=o.split("/").pop()||o;t=n.charAt(0).toUpperCase()+n.slice(1),console.log("PageSource renderer found page name:",t)}}return console.log("PageSource renderer final componentName:",t),r.jsx(q,{autoLoad:p,onSourceLoaded:g,onError:A,updateState:i,componentName:t,uid:e.uid})})]}});typeof window.xmlui<"u"&&window.xmlui.standalone.registerExtension(window["xmlui-page-source"].default||window["xmlui-page-source"]);
