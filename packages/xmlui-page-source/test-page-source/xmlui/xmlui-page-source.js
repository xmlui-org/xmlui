(function(o,r){typeof exports=="object"&&typeof module<"u"?module.exports=r(require("react/jsx-runtime"),require("react"),require("xmlui")):typeof define=="function"&&define.amd?define(["react/jsx-runtime","react","xmlui"],r):(o=typeof globalThis<"u"?globalThis:o||self,o["xmlui-page-source"]=r(o.jsxRuntime,o.React,o.xmlui))})(this,function(o,r,w){"use strict";const L={autoLoad:!0};function U({autoLoad:l=L.autoLoad,onSourceLoaded:a,onError:d,updateState:c}){const[P,m]=r.useState(!1),[x,f]=r.useState(""),g=r.useRef(null),S=async()=>{console.log("PageSource fetchSourceCode - trying to find current context source"),m(!0),f("");try{const i=g.current;if(!i)throw new Error("Container element not found");const e=i.closest('[class*="xmlui-page"], [class*="page-root"], [class*="page"]'),R=i.closest('[class*="xmlui-app"], [class*="app-root"], [class*="app"]');console.log("PageSource context check:"),console.log("- Page ancestor found:",!!e),console.log("- App ancestor found:",!!R);let t="";if(e){const p=e.getAttribute("data-xmlui-url")||e.getAttribute("data-url")||e.getAttribute("data-route")||e.getAttribute("data-path");console.log("PageSource found page URL:",p);let n=p;if(!n){const s=window.location.hash;s&&s.startsWith("#/")&&(n=s.substring(2),console.log("PageSource using hash URL as fallback:",n))}if(n){const s=n.split("/").pop()||n;t=`components/${s.charAt(0).toUpperCase()+s.slice(1)}.xmlui`,console.log("PageSource constructed page source URL:",t)}}else if(R)t="Main.xmlui",console.log("PageSource using App level source URL:",t);else{const p=window.location.hash;if(p&&p.startsWith("#/")){const n=p.substring(2),s=n.split("/").pop()||n;t=`components/${s.charAt(0).toUpperCase()+s.slice(1)}.xmlui`,console.log("PageSource fallback - constructed source URL:",t)}}if(!t)throw new Error("Could not determine source URL for current context");console.log("PageSource final source URL:",t);const u=await fetch(t);if(console.log("PageSource response status:",u.status),console.log("PageSource response URL:",u.url),!u.ok)throw new Error(`HTTP ${u.status}: ${u.statusText}`);const h=await u.text();console.log("PageSource fetched content length:",h.length),console.log("PageSource fetched content preview:",h.substring(0,100)),c==null||c({value:h,isLoading:!1,error:""}),a==null||a(h)}catch(i){const e=i instanceof Error?i.message:"Failed to load source code";f(e),c==null||c({error:e,isLoading:!1}),d==null||d(e),console.error("Error loading source code:",i)}finally{m(!1)}};return r.useEffect(()=>{l&&S()},[l]),o.jsx("div",{ref:g,style:{display:"none"}})}const y=w.createMetadata({description:"PageSource component that fetches and exposes the source code of the current page/component",status:"experimental",props:{autoLoad:{description:"Whether to automatically load the source code on mount",isRequired:!1,type:"boolean",defaultValue:!0},onSourceLoaded:{description:"Callback function called when source code is loaded",isRequired:!1,type:"function"},onError:{description:"Callback function called when an error occurs",isRequired:!1,type:"function"}}});return{namespace:"XMLUIExtensions",components:[w.createComponentRenderer("PageSource",y,({node:l,extractValue:a,updateState:d})=>{var x,f,g;const c=a.asOptionalBoolean((x=l.props)==null?void 0:x.autoLoad,!0),P=a((f=l.props)==null?void 0:f.onSourceLoaded),m=a((g=l.props)==null?void 0:g.onError);return o.jsx(U,{autoLoad:c,onSourceLoaded:P,onError:m,updateState:d})})]}});typeof window.xmlui<"u"&&window.xmlui.standalone.registerExtension(window["xmlui-page-source"].default||window["xmlui-page-source"]);
